{"fixed_source_code": "def setUp(self):\n    super(MeetingCoordLoginTest, self).setUp()\n    initgroups(quiet=True)\n    assert self.client.login(username='meetingcoord', password='test')", "buggy_source_code": "def setUp(self):\n    super(MeetingCoordLoginTest, self).setUp()\n    assert self.client.login(username='meetingcoord', password='test')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    super(VolunteerLoginTest, self).setUp()\n    initgroups(quiet=True)\n    assert self.client.login(username='volunteertest', password='test')", "buggy_source_code": "def setUp(self):\n    super(VolunteerLoginTest, self).setUp()\n    assert self.client.login(username='volunteertest', password='test')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    super(CoordinatorLoginTest, self).setUp()\n    initgroups(quiet=True)\n    assert self.client.login(username='coordtest', password='test')", "buggy_source_code": "def setUp(self):\n    super(CoordinatorLoginTest, self).setUp()\n    assert self.client.login(username='coordtest', password='test')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.events = []\n    self.append = self.events.append\n    html.parser.HTMLParser.__init__(self)", "buggy_source_code": "def __init__(self):\n    self.events = []\n    self.append = self.events.append\n    HTMLParser.HTMLParser.__init__(self)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def start_box():\n    halt_and_destroy()\n    local('rm -f Vagrantfile')\n    local('vagrant init test_box')\n    cmd = 'vagrant up'\n    local('%s || %s' % (cmd, cmd))", "buggy_source_code": "def start_box():\n    halt_and_destroy()\n    local('vagrant init test_box')\n    cmd = 'vagrant up'\n    local('%s || %s' % (cmd, cmd))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def check_after_game_end(user_id):\n    achieved = []\n    return achieved", "buggy_source_code": "def check_after_game_end(user_id, the_game):\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def on_join(self, packet):\n    if self.alert_messages['join']['announce']:\n        return MessagePacket(self.alert_messages['join']['message'].replace('%USER%', packet.user))", "buggy_source_code": "async def on_join(self, packet):\n    if not self.alert_messages['join']['announce']:\n        return\n    return await self._cache(packet, 'join')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def on_leave(self, packet):\n    if self.alert_messages['leave']['announce']:\n        return MessagePacket(self.alert_messages['leave']['message'].replace('%USER%', packet.user))", "buggy_source_code": "async def on_leave(self, packet):\n    if not self.alert_messages['leave']['announce']:\n        return\n    return await self._cache(packet, 'leave')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def on_host(self, packet):\n    if self.alert_messages['host']['announce']:\n        return MessagePacket(self.alert_messages['host']['message'].replace('%USER%', packet.user))", "buggy_source_code": "async def on_host(self, packet):\n    if not self.alert_messages['host']['announce']:\n        return\n    return await self._cache(packet, 'host')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.enc = fix.db.get_item('ENC1', True)\n    self.baro = fix.db.get_item('BARO', True)", "buggy_source_code": "def __init__(self):\n    self.enc = fix.db.get_item('ENC1')\n    self.baro = fix.db.get_item('BARO')", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def somemethod(self, a):\n    return a", "buggy_source_code": "def somemethod(self):\n    return 123", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def error(data):\n    e = data['errors'][0]\n    error_string = e['type'] + ' - ' + e['message']\n    return error_string", "buggy_source_code": "def error(data):\n    erros = data['errors']\n    return erros", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_default_weather(self):\n    return os.path.join(self.db_path, 'Weather', 'Zug-2010.epw')", "buggy_source_code": "def get_default_weather(self):\n    return os.path.join(self.weather_path, 'Zug-2010.epw')", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_weather_names(self):\n    weather_names = [os.path.splitext(f)[0] for f in os.listdir(os.path.join(self.db_path, 'Weather'))]\n    return weather_names", "buggy_source_code": "def get_weather_names(self):\n    weather_names = [os.path.splitext(f)[0] for f in os.listdir(self.weather_path)]\n    return weather_names", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_library():\n    pytest.main(os.path.dirname(os.path.abspath(__file__)))", "buggy_source_code": "def test_library():\n    pytest.main([os.path.dirname(os.path.abspath(__file__))])", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def test_worksheet(self):\n    sheet_title = self.config.get('Spreadsheet', 'sheet1_title')\n    sheet = self.spreadsheet.worksheet(sheet_title)\n    self.assertTrue(isinstance(sheet, gspread.Worksheet))", "buggy_source_code": "def test_worksheet(self):\n    sheet_title = 'Sheet1'\n    sheet = self.spreadsheet.worksheet(sheet_title)\n    self.assertTrue(isinstance(sheet, gspread.Worksheet))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    super(SpreadsheetTest, self).setUp()\n    title = self.config.get('Spreadsheet', 'title')\n    self.spreadsheet = self.gc.open(title)", "buggy_source_code": "def setUp(self):\n    super(SpreadsheetTest, self).setUp()\n    self.spreadsheet = self.gc.open(self.get_temporary_spreadsheet_title())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    super(CellTest, self).setUp()\n    title = self.config.get('Spreadsheet', 'title')\n    self.sheet = self.gc.open(title).sheet1", "buggy_source_code": "def setUp(self):\n    super(CellTest, self).setUp()\n    self.spreadsheet = self.gc.open(self.get_temporary_spreadsheet_title())\n    self.sheet = self.spreadsheet.sheet1", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_output_ports(self):\n    return [self.output_port]", "buggy_source_code": "def get_output_ports(self):\n    return self.output_ports.keySet()", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def subprocess_preexec_handler():\n    signal.signal(signal.SIGINT, signal.SIG_IGN)", "buggy_source_code": "def subprocess_preexec_handler():\n    os.setpgrp()", "edit_actions": ["update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.interface = pluginmanager.PluginInterface()\n    self.filter_interface = self.interface.get_filter_interface()", "buggy_source_code": "def setUp(self):\n    self.interface = pluginmanager.PluginInterface()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def hp(self):\n    val = self.base_hp + self.rune_hp\n    return val", "buggy_source_code": "def hp(self):\n    return self.base_hp + self.rune_hp", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_remove_trailing_usernames(self):\n    string = '@ASIMO Watch your step @Demo @in @Tokyo'\n    string = remove_trailing_usernames(string)\n    result = '@ASIMO Watch your step'\n    self.assertEqual(string, result)", "buggy_source_code": "def test_remove_trailing_usernames(self):\n    string = '@ASIMO Watch your step @Demo @in @Tokyo'\n    string = remove_trailing_usernames(string)\n    self.assertEqual(string, '@ASIMO Watch your step')", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_partner_ids(self, pquery, names, basefilename):\n    gbif_results_filename = basefilename + '.gids'\n    (unmatched_names, name_to_gbif_ids) = pquery.assembleGBIFTaxonIds(names, gbif_results_filename)\n    return (unmatched_names, name_to_gbif_ids, gbif_results_filename)", "buggy_source_code": "@staticmethod\ndef _get_partner_ids(pquery, names, basefilename):\n    gbif_results_filename = basefilename + '.gids'\n    (unmatched_names, name_to_gbif_ids) = pquery.assemble_gbif_taxon_ids(names, gbif_results_filename)\n    return (unmatched_names, name_to_gbif_ids, gbif_results_filename)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_db(self, logname):\n    import logging\n    logger = ScriptLogger(logname, level=logging.INFO)\n    scribe = BorgScribe(logger)\n    return scribe", "buggy_source_code": "def _get_db(self, logname):\n    logger = ScriptLogger(logname, level=logging.INFO)\n    scribe = BorgScribe(logger)\n    return scribe", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert_equal(self.sym, context.sym)", "buggy_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert self.sym == context.sym", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def couchbase_buckets(self):\n    return {'onedata': 1024, 'location_service': 100}", "buggy_source_code": "def couchbase_buckets(self):\n    return {'onedata': 1024}", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    r = requests.get('http://169.254.169.254/latest/meta-data/public-ipv4')\n    self.ip_url = 'http://' + r.text", "buggy_source_code": "def setUp(self):\n    self.ip_url = 'http://localhost:5000'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _render_after_break(self, local_start_x, start, stop):\n    print(f'TextObject._render_after_break({(local_start_x, start, stop)})')\n    self._render_slice(start, local_start_x, stop.x - start.x)", "buggy_source_code": "def _render_after_break(self, local_start_x, start, stop):\n    self._render_slice(start, local_start_x, stop.x - start.x)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _render_spanning_continuation(self, local_start_x, start, stop):\n    print(f'TextObject._render_spanning_continuation({(local_start_x, start, stop)})')\n    self._render_slice(start, local_start_x, stop.x - start.x)", "buggy_source_code": "def _render_spanning_continuation(self, local_start_x, start, stop):\n    self._render_slice(start, local_start_x, stop.x - start.x)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _render_before_break(self, local_start_x, start, stop):\n    print(f'TextObject._render_before_break({(local_start_x, start, stop)})')\n    self._render_slice(start, local_start_x, stop.x - start.x)", "buggy_source_code": "def _render_before_break(self, local_start_x, start, stop):\n    self._render_slice(start, local_start_x, stop.x - start.x)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _render_complete(self, pos):\n    print(f'TextObject._render_complete({pos})')\n    self._render_slice(pos, None, None)", "buggy_source_code": "def _render_complete(self, pos):\n    self._render_slice(pos, None, None)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_round_coords():\n    answer = Vector([5.582, -2.137])\n    assert answer == VECTOR_4.round_coords(3)", "buggy_source_code": "def test_round_coords():\n    answer = Vector([5.582, -2.137])\n    assert VECTOR_4.round_coords(3) == answer", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_vector_magnitude():\n    answer = 5.0\n    assert answer == VECTOR_3.magnitude()", "buggy_source_code": "def test_vector_magnitude():\n    answer = 5.0\n    assert VECTOR_3.magnitude() == answer", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@ask.launch\n@sup.guide\ndef launched():\n    print('launched invoked!!! context: {}'.format(locals()))\n    return question(render_template('welcome'))", "buggy_source_code": "@ask.launch\n@sup.guide\ndef launched():\n    return question(render_template('welcome'))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run(self):\n    while True:\n        time.sleep(CLEAN_PERIOD)\n        print('checkout store: {}'.format(self.store))\n        with self.store_lock:\n            self.make_clean()", "buggy_source_code": "def run(self):\n    while True:\n        time.sleep(CLEAN_PERIOD)\n        with self.store_lock:\n            self.make_clean()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def extend(self, iterable):\n    self.__check_sequence_objects_type(iterable)\n    super(DicePool, self).extend(iterable)", "buggy_source_code": "def extend(self, iterable):\n    self.__check_sequence_objects_type(iterable)\n    super().extend(iterable)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, seq=None):\n    if seq:\n        self.__check_sequence_objects_type(seq)\n    else:\n        seq = ()\n    super(DicePool, self).__init__(seq)", "buggy_source_code": "def __init__(self, seq=None):\n    if seq:\n        self.__check_sequence_objects_type(seq)\n    else:\n        seq = ()\n    super().__init__(seq)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def insert(self, index, p_object):\n    if not self.__iscorrect_type(p_object):\n        raise TypeError\n    super(DicePool, self).insert(index, p_object)", "buggy_source_code": "def insert(self, index, p_object):\n    if not self.__hasrequired_fields(p_object):\n        raise NoRequiredFields\n    super().insert(index, p_object)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, context, vmware_connect_id):\n    self.collector = collecting.DataCollector(context, vmware_connect_id)\n    self.context = context\n    self.vmware_connect_id = vmware_connect_id\n    self.core_api = core_api.API()", "buggy_source_code": "def __init__(self, auth_url, username, password):\n    self.collector = collecting.DataCollector(auth_url, username, password)", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_configured(self, request, project, **kwargs):\n    if not self.get_option('project', project):\n        return False\n    return True", "buggy_source_code": "def is_configured(self, request, project, **kwargs):\n    return bool(self.get_option('project', project))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return u'%s %s %s' % (self.user.username, self.user.first_name, self.user.last_name)", "buggy_source_code": "def __str__(self):\n    return u'%s' % (self.detail,)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return u'%s %s %s' % (self.user.username, self.user.first_name, self.user.last_name)", "buggy_source_code": "def __str__(self):\n    return u'%s' % (self.detail,)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef wavelength_end(self):\n    return self.wavelength[self.transmission_lambda > 0.0][-1]", "buggy_source_code": "@property\ndef wavelength_end(self):\n    return self.get_wavelength_end()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef wavelength_start(self):\n    return self.wavelength[self.transmission_lambda > 0.0][0]", "buggy_source_code": "@property\ndef wavelength_start(self):\n    return self.get_wavelength_start()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main_loop(self):\n    app = QApplication(sys.argv)\n    self.main_window = MainWindow(self.game)\n    app.exec_()", "buggy_source_code": "def main_loop(self):\n    app = QApplication([])\n    self.main_window = MainWindow(self.game)\n    app.exec_()", "edit_actions": ["move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def vzerog(v, ndim):\n    v = stypes.toDoubleVector(v)\n    ndim = stypes.ctypes.c_int(ndim)\n    return libspice.vzerog_c(v, ndim)", "buggy_source_code": "def vzerog(v, ndim):\n    v = stypes.toDoubleVector(v)\n    ndim = ctypes.c_int(ndim)\n    return libspice.vzerog_c(v, ndim)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@abc.samplemixinmethod\ndef sample_ising(self, h, J, **parameters):\n    bqm = BinaryQuadraticModel.from_ising(h, J)\n    response = self.sample(bqm, **parameters)\n    return response", "buggy_source_code": "@samplemixinmethod\ndef sample_ising(self, h, J, **parameters):\n    bqm = BinaryQuadraticModel.from_ising(h, J)\n    response = self.sample(bqm, **parameters)\n    return response", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@abc.samplemixinmethod\ndef sample_qubo(self, Q, **parameters):\n    bqm = BinaryQuadraticModel.from_qubo(Q)\n    response = self.sample(bqm, **parameters)\n    return response", "buggy_source_code": "@samplemixinmethod\ndef sample_qubo(self, Q, **parameters):\n    bqm = BinaryQuadraticModel.from_qubo(Q)\n    response = self.sample(bqm, **parameters)\n    return response", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@raises(TypeError)\ndef test_metafromstring_fail():\n    hdr = 'this is not a valid header'\n    d1 = CCDData(np.ones((5, 5)), meta=hdr)", "buggy_source_code": "def test_metafromstring_fail():\n    hdr = 'this is not a valid header'\n    with pytest.raises(TypeError):\n        d1 = CCDData(np.ones((5, 5)), meta=hdr)", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@raises(TypeError)\ndef test_sutract_overscan_ccd_failt():\n    subtract_overscan(3, oscan, median=False, model=None)", "buggy_source_code": "def test_sutract_overscan_ccd_failt():\n    with pytest.raises(TypeError):\n        subtract_overscan(np.zeros((10, 10)), 3, median=False, model=None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    setup_data_path()\n    self.logger = WikiLogger('test_bot', datetime(year=2000, month=1, day=1), log_to_screen=False)\n    self.logger.__enter__()", "buggy_source_code": "def setUp(self):\n    self.logger = WikiLogger('test_bot', datetime(year=2000, month=1, day=1), log_to_screen=False)\n    self.logger.__enter__()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.logger.tear_down()\n    teardown_data_path()", "buggy_source_code": "def tearDown(self):\n    self.logger.tear_down()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch(git, 'sh')\ndef test_simple_branch_checkout(sh):\n    git.branch_checkout('my_branch', path='repo_path')\n    assert sh.called\n    assert sh.call_args[0][0] == 'cd repo_path; git checkout my_branch'", "buggy_source_code": "@patch('paver.git.sh')\ndef test_simple_branch_checkout(sh):\n    git.branch_checkout('my_branch', path='repo_path')\n    assert sh.called\n    assert sh.call_args[0][0] == 'cd repo_path; git checkout my_branch'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch(git, 'sh')\ndef test_branch_list_correctly_parses_git_output(sh):\n    output = git.branch_list(path='repo_path', __override__='\\n* git_support\\n  master\\n  virtualenv_in_folder\\n    ')\n    assert output == ('git_support', ['git_support', 'master', 'virtualenv_in_folder'])", "buggy_source_code": "@patch('paver.git.sh')\ndef test_branch_list_correctly_parses_git_output(sh):\n    output = git.branch_list(path='repo_path', __override__='\\n* git_support\\n  master\\n  virtualenv_in_folder\\n    ')\n    assert output == ('git_support', ['git_support', 'master', 'virtualenv_in_folder'])", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch(git, 'sh')\ndef test_simple_clone(sh):\n    git.clone('git://foo/foo.git', 'bar')\n    assert sh.called\n    assert sh.call_args[0][0] == 'git clone git://foo/foo.git bar'", "buggy_source_code": "@patch('paver.git.sh')\ndef test_simple_clone(sh):\n    git.clone('git://foo/foo.git', 'bar')\n    assert sh.called\n    assert sh.call_args[0][0] == 'git clone git://foo/foo.git bar'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch(svn, 'sh')\ndef test_update_with_revision(sh):\n    svn.update(revision='1234')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn up -r 1234 '", "buggy_source_code": "@patch('paver.svn.sh')\ndef test_update_with_revision(sh):\n    svn.update(revision='1234')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn up -r 1234 '", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef parse_file(cls, path, package=None):\n    parser = Parser()\n    node = parser.parse_file(path)\n    return cls.parse_node(node, package)", "buggy_source_code": "@classmethod\ndef parse_file(cls, path, package):\n    parser = Parser(path)\n    node = parser.parse_file(path)\n    return cls.parse_node(node, package)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    setup_data_path()\n    self.logger = WikiLogger('test_bot', datetime(year=2000, month=1, day=1), log_to_screen=False)\n    self.logger.__enter__()", "buggy_source_code": "def setUp(self):\n    self.logger = WikiLogger('test_bot', datetime(year=2000, month=1, day=1), log_to_screen=False)\n    self.logger.__enter__()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.logger.tear_down()\n    teardown_data_path()", "buggy_source_code": "def tearDown(self):\n    self.logger.tear_down()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_points(self):\n    return [self.start, self.interior, self.end]", "buggy_source_code": "def _get_points(self):\n    return self.tessellation_points()", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def close(self):\n    self.change_history.conn.close()\n    self.conn.close()", "buggy_source_code": "def close(self):\n    self.conn.close()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reset(self):\n    print('!!! reset', self)\n    self.run_time = time.time() - self.pause_time", "buggy_source_code": "def reset(self):\n    self.run_time = time.time() - self.pause_time", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _read_device_definition(self, url):\n    r = comp_urllib.urlopen(url)\n    services = self._parse_device_definition(r.read())\n    return services['camera']", "buggy_source_code": "def _read_device_definition(self, url):\n    r = urlopen(url)\n    services = self._parse_device_definition(r.read())\n    return services['camera']", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def go(self):\n    self.build_namespace()\n    self.write_setup()\n    self.write_include()\n    self.write_adapter()", "buggy_source_code": "def go(self):\n    self.write_setup()\n    self.write_adapter()\n    self.write_include()", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def callimpl(self):\n    self.blockbuf.integrate(self.chain(self.diff))", "buggy_source_code": "def callimpl(self):\n    self.chain(self.diff)(self.blockbuf)", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_status_rabbit_inactive(self):\n    self._test_service_inactive('RabbitMQ')\n    log_path = '/var/log/cloudify/rest/cloudify-rest-service.log'\n    log_file = self.read_manager_file(log_path)[-150:]\n    self.assertIn('Broker check failed', log_file)", "buggy_source_code": "def test_status_rabbit_inactive(self):\n    self._test_service_inactive('RabbitMQ')\n    log_path = '/var/log/cloudify/rest/cloudify-rest-service.log'\n    log_file = self.read_manager_file(log_path)\n    self.assertIn('Broker check failed', log_file)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    s = u'Project %s members: %s' % (self.name, self.members.all())\n    return s", "buggy_source_code": "def __unicode__(self):\n    s = u'Project %s' % self.name\n    return s", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    return redirect(url_for('list_process'))", "buggy_source_code": "@app.route('/')\ndef index():\n    return 'Landing Page'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/process/', methods=['GET', 'POST'])\n@admin_required\ndef list_process():\n    birthdays = User.get_all_birthdays()\n    return render_template('list_birthdays.html', birthdays=birthdays)", "buggy_source_code": "@app.route('/process/', methods=['GET', 'POST'])\n@login_required\ndef list_process():\n    return render_template('list_process.html')", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_absolute_url(self):\n    return f'/q/{self.slug}'", "buggy_source_code": "def get_absolute_url(self):\n    return '/q/{}'.format(self.slug)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def induced_tree(self, ott_id_list, create_monotypic_nodes=False):\n    self._debug_anc_spikes(ott_id_list)\n    return create_tree_from_id2par(self.ott_id2par_ott_id, ott_id_list, create_monotypic_nodes=create_monotypic_nodes)", "buggy_source_code": "def induced_tree(self, ott_id_list, create_monotypic_nodes=False):\n    return create_tree_from_id2par(self.ott_id2par_ott_id, ott_id_list, create_monotypic_nodes=create_monotypic_nodes)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _reset_task_done_offsets(self):\n    for topic in self.topics:\n        for partition in self.client.get_partition_ids_for_topic(topic):\n            self._offsets.task_done[topic][partition] = None", "buggy_source_code": "def _reset_task_done_offsets(self):\n    for (topic, partition) in self._topics:\n        self._offsets.task_done[topic][partition] = None", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _reset_highwater_offsets(self):\n    for topic in self.topics:\n        for partition in self.client.get_partition_ids_for_topic(topic):\n            self._offsets.highwater[topic][partition] = None", "buggy_source_code": "def _reset_highwater_offsets(self):\n    for (topic, partition) in self._topics:\n        self._offsets.highwater[topic][partition] = None", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def extend(self, x):\n    super(SetList, self).extend([i for i in x if i not in self])", "buggy_source_code": "def extend(self, x):\n    for i in x:\n        self.append(i)", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(params=[key for key in relation_params().keys()])\ndef relation(relation_params, request):\n    return relationtrees.Relation(*relation_params[request.param])", "buggy_source_code": "@pytest.fixture(params=[key for key in RELATION_PARAMS.keys()])\ndef relation(request):\n    return relationtrees.Relation(*RELATION_PARAMS[request.param])", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def randomplayer():\n    pl = SERVER.getOnlinePlayers()\n    return getplayer(choice(pl))", "buggy_source_code": "def randomplayer():\n    pl = SERVER.getOnlinePlayers()\n    return choice(pl)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def post_stripe_invoice_id(self, transaction_type, transaction_id, invoice_id):\n    response = self._request(method='post', path=(f'v1/{transaction_type}/{transaction_id}/', f'payment/stripe/{invoice_id}'))\n    return response.json()", "buggy_source_code": "def post_stripe_invoice_id(self, transaction_type, transaction_id, invoice_id):\n    response = self._request(method='post', path=(f'v1/{transaction_type}/{transaction_id}/payment/stripe/{invoice_id}',))\n    return response.json()", "edit_actions": ["insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def change_all_saved_jira_status():\n    for (test_key, test_status) in jira_tests_status.items():\n        change_jira_status_with_config(test_key, test_status)\n    jira_tests_status.clear()", "buggy_source_code": "def change_all_saved_jira_status():\n    for test_status in jira_tests_status.itervalues():\n        change_jira_status_with_config(*test_status)\n    jira_tests_status.clear()", "edit_actions": ["move-tree", "update-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, scene):\n    self._data_holder = scene\n    self.area = self._data_holder.area\n    self.time_slot = self._data_holder.time_slot", "buggy_source_code": "def __init__(self, scene):\n    self._data_holder = scene", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('config_file', type=dictlib.ConfigDict.from_yaml, dest='config')\n    return parser.parse_args()", "buggy_source_code": "def get_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('config', type=dictlib.ConfigDict.from_yaml)\n    return parser.parse_args()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_study_ids(self, include_aliases=False):\n    k = []\n    for shard in self._shards:\n        k.extend(shard.get_study_ids(), include_aliases=include_aliases)\n    return k", "buggy_source_code": "def get_study_ids(self, include_aliases=False):\n    k = []\n    for shard in self._shards:\n        k.extend(shard.get_study_ids(include_aliases=include_aliases))\n    return k", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_lock_name(self, resource):\n    return self.data.get('lock-name', 'custodian_lock_{}_{}'.format(resource['name'], self.lock_type))", "buggy_source_code": "def _get_lock_name(self, resource):\n    return self.data.get('lock-name', 'c7n-policy-{}'.format(self.manager.data['name']))", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_lock_notes(self, resource):\n    return self.data.get('lock-notes', 'Custodian lock created by policy: {}'.format(self.manager.data['name']))", "buggy_source_code": "def _get_lock_notes(self, resource):\n    return self.data.get('lock-notes')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef getMillisPerItem(stats):\n    result = None\n    if stats is not None:\n        if stats.n > 0:\n            result = stats.mean / stats.n\n    return result", "buggy_source_code": "@staticmethod\ndef getMillisPerItem(stats):\n    result = None\n    if stats is not None:\n        if stats.n > 0:\n            result = stats.mean\n    return result", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef getItemsPerMilli(stats):\n    result = None\n    if stats is not None:\n        if stats.mean > 0:\n            result = stats.n / stats.mean\n    return result", "buggy_source_code": "@staticmethod\ndef getItemsPerMilli(stats):\n    result = None\n    if stats is not None:\n        if stats.mean > 0:\n            result = 1.0 / stats.mean\n    return result", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, position, debug_info=None):\n    if debug_info is None:\n        debug_info = '${}'.format(position)\n    self.debug_info = debug_info\n    self.position = position", "buggy_source_code": "def __init__(self, position, debug_info=None):\n    self.debug_info = debug_info\n    self.position = position", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_context_data(self, **kwargs):\n    context = super(ContentDetailView, self).get_context_data(**kwargs)\n    context['now'] = datetime.timezone.now()\n    return context", "buggy_source_code": "def get_context_data(self, **kwargs):\n    context = super(ContentDetailView, self).get_context_data(**kwargs)\n    context['now'] = timezone.now()\n    return context", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_context_data(self, **kwargs):\n    context = super(ContentListView, self).get_context_data(**kwargs)\n    context['now'] = datetime.timezone.now()\n    return context", "buggy_source_code": "def get_context_data(self, **kwargs):\n    context = super(ContentListView, self).get_context_data(**kwargs)\n    context['now'] = timezone.now()\n    return context", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_negative_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, -1))", "buggy_source_code": "@attr.gpu\ndef test_forward_negative_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, -1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_backward_cpu(self):\n    self.check_backward(self.x, self.gy)", "buggy_source_code": "def test_backward_cpu(self):\n    self.check_backward(self.x, self.gy)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, 1))", "buggy_source_code": "def test_forward_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, 1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(1, 0))", "buggy_source_code": "def test_forward_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(1, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, 1))", "buggy_source_code": "def test_forward_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, 1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_negative_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(-2, 0))", "buggy_source_code": "@attr.gpu\ndef test_forward_negative_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(-2, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_negative_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=-1)", "buggy_source_code": "@attr.gpu\ndef test_forward_negative_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=-1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_cpu(self):\n    self.check_forward(self.x)", "buggy_source_code": "def test_forward_cpu(self):\n    self.check_forward(self.x)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, 1))", "buggy_source_code": "@attr.gpu\ndef test_forward_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, 1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_backward_gpu(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy))", "buggy_source_code": "@attr.gpu\ndef test_backward_gpu(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(1, 0))", "buggy_source_code": "@attr.gpu\ndef test_forward_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(1, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_negative_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, -1))", "buggy_source_code": "def test_forward_negative_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, -1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, 1))", "buggy_source_code": "@attr.gpu\ndef test_forward_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, 1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_negative_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(-2, 0))", "buggy_source_code": "def test_forward_negative_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(-2, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x))", "buggy_source_code": "@attr.gpu\ndef test_forward_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_axis_cpu(self):\n    for i in range(self.x.ndim):\n        self.check_forward(self.x, axis=i)", "buggy_source_code": "def test_forward_axis_cpu(self):\n    for i in range(self.x.ndim):\n        self.check_forward(self.x, axis=i)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_negative_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(-2, 0))", "buggy_source_code": "def test_forward_negative_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(-2, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(1, 0))", "buggy_source_code": "def test_forward_multi_axis_invert_cpu(self):\n    self.check_forward(self.x, axis=(1, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_negative_axis_cpu(self):\n    self.check_forward(self.x, axis=-1)", "buggy_source_code": "def test_forward_negative_axis_cpu(self):\n    self.check_forward(self.x, axis=-1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_axis_cpu(self):\n    for i in range(self.x.ndim):\n        self.check_forward(self.x, axis=i)", "buggy_source_code": "def test_forward_axis_cpu(self):\n    for i in range(self.x.ndim):\n        self.check_forward(self.x, axis=i)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_negative_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, -1))", "buggy_source_code": "def test_forward_negative_multi_axis_cpu(self):\n    self.check_forward(self.x, axis=(0, -1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_negative_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(-2, 0))", "buggy_source_code": "@attr.gpu\ndef test_forward_negative_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(-2, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_backward_cpu(self):\n    self.check_backward(self.x, self.gy)", "buggy_source_code": "def test_backward_cpu(self):\n    self.check_backward(self.x, self.gy)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(1, 0))", "buggy_source_code": "@attr.gpu\ndef test_forward_multi_axis_invert_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(1, 0))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_negative_axis_cpu(self):\n    self.check_forward(self.x, axis=-1)", "buggy_source_code": "def test_forward_negative_axis_cpu(self):\n    self.check_forward(self.x, axis=-1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_backward_gpu(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy))", "buggy_source_code": "@attr.gpu\ndef test_backward_gpu(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_negative_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=-1)", "buggy_source_code": "@attr.gpu\ndef test_forward_negative_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=-1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x))", "buggy_source_code": "@attr.gpu\ndef test_forward_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_cpu(self):\n    self.check_forward(self.x)", "buggy_source_code": "def test_forward_cpu(self):\n    self.check_forward(self.x)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_negative_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, -1))", "buggy_source_code": "@attr.gpu\ndef test_forward_negative_multi_axis_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x), axis=(0, -1))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def launch_pipeline(self):\n    pipeline = '\\n            uridecodebin uri={uri} !\\n            videoconvert !\\n            videoscale !\\n            imagefreeze name=img\\n        '.format(uri=self.imguri)\n    self.build_pipeline(pipeline, velem='img')\n    self.pipeline.set_state(Gst.State.PLAYING)", "buggy_source_code": "def launch_pipeline(self):\n    pipeline = '\\n            uridecodebin uri={uri} !\\n            videoconvert !\\n            videoscale !\\n            imagefreeze name=img\\n        '.format(uri=self.imguri)\n    self.build_pipeline(pipeline)\n    self.pipeline.set_state(Gst.State.PLAYING)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getChunk(self, name, n, prefix):\n    logger.debug('asked for %s: %s (%d)', name, prefix, n)\n    self.soupGet(name, n, self.url)\n    return True", "buggy_source_code": "def getChunk(self, name, n, prefix):\n    self.soupGet(name, n, self.url)\n    return True", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    super(AddressField, self).__init__(Address, **kwargs)", "buggy_source_code": "def __init__(self, **kwargs):\n    kwargs['to'] = Address\n    super(AddressField, self).__init__(**kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, name, coordinates, forecast, session):\n    import metno\n    self._name = name\n    self._api = metno.AirQualityData(coordinates, forecast, session)\n    self._attrs = {}", "buggy_source_code": "def __init__(self, name, coordinates, forecast, session):\n    import metno\n    self._name = name\n    self._api = metno.AirQualityData(coordinates, forecast, session)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_cards(self):\n    uri = self._build_url('/me/cards')\n    return self._get(uri)", "buggy_source_code": "def get_cards(self):\n    return self._get('/me/cards')", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def moving_average_update(variable, value, momentum):\n    return tf.python.training.moving_averages.assign_moving_average(variable, value, momentum)", "buggy_source_code": "def moving_average_update(variable, value, momentum):\n    return moving_averages.assign_moving_average(variable, value, momentum)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unix_to_python(timestamp):\n    if int(timestamp) == 0:\n        return None\n    else:\n        return datetime.utcfromtimestamp(float(timestamp))", "buggy_source_code": "def unix_to_python(timestamp):\n    if int(timestamp) == 0:\n        return None\n    return datetime.utcfromtimestamp(float(timestamp))", "edit_actions": ["move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def read_from_fd(self):\n    chunk = self.connection.readline()\n    if not chunk:\n        self.close()\n        return None\n    return chunk", "buggy_source_code": "def read_from_fd(self):\n    try:\n        chunk = self.connection.readline()\n    except:\n        return None\n    return chunk", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _warn(msg):\n    sys.stderr.write('Kiwi warning: ' + msg + '\\n')", "buggy_source_code": "def _warn(msg):\n    stderr.write('Kiwi warning: ' + msg + '\\n')", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def clean_up(args):\n    from . import get_project\n    args = parser.parse_args(raw_args)\n    project = get_project()\n    logger.info('Killing dead jobs...')\n    project.kill_dead_jobs(seconds=args.tolerance_time)", "buggy_source_code": "def clean_up(args):\n    from . import get_project\n    project = get_project()\n    logger.info('Killing dead jobs...')\n    project.kill_dead_jobs(seconds=args.tolerance_time)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.schedule_id = None\n    self.name = None\n    self.exclusive = True\n    self.repeat = None\n    self.process_name = None\n    self.type = None", "buggy_source_code": "def __init__(self):\n    self.schedule_id = None\n    self.name = None\n    self.exclusive = True\n    self.repeat = None\n    self.process_name = None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@ensure_csrf_cookie\ndef countGoals(request):\n    return render_to_response('json/number.json', RequestContext(request, {'success': True, 'num': Goal.objects.count()}))", "buggy_source_code": "def countGoals(request):\n    return render_to_response('json/number.json', {'success': True, 'num': Goal.objects.count()})", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, resource, payload, verify_ssl):\n    self._resource = resource\n    self._payload = payload\n    self._verify_ssl = verify_ssl\n    self.data = dict()", "buggy_source_code": "def __init__(self, resource, payload, verify_ssl):\n    self._resource = resource\n    self._payload = payload\n    self._verify_ssl = verify_ssl\n    self.data = None", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, resource, verify_ssl):\n    self._resource = resource\n    self._verify_ssl = verify_ssl\n    self.data = dict()", "buggy_source_code": "def __init__(self, resource, verify_ssl):\n    self._resource = resource\n    self._verify_ssl = verify_ssl\n    self.data = None", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_exit(self):\n    super(Canvas, self).on_exit()\n    self.free()", "buggy_source_code": "def on_exit(self):\n    self.free()\n    super(Canvas, self).on_exit()", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def _is_back_scattering(self, spectrum_no):\n    return spectrum_no >= self._backward_spectra_list[0] and spectrum_no <= self._backward_spectra_list[-1]", "buggy_source_code": "def _is_back_scattering(self, spectrum_no):\n    return self._backward_spectra_list[0] <= spectrum_no <= self._backward_spectra_list[-1]", "edit_actions": ["move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _is_fwd_scattering(self, spectrum_no):\n    return spectrum_no >= self._forward_spectra_list[0] and spectrum_no <= self._forward_spectra_list[-1]", "buggy_source_code": "def _is_fwd_scattering(self, spectrum_no):\n    return self._forward_spectra_list[0] <= spectrum_no <= self._forward_spectra_list[-1]", "edit_actions": ["move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_thumbnail_url_change(self):\n    self.original.thumbnail_url = 'http://www.google.com/intl/en_ALL/images/srpr/logo1w.png'\n    self.original.save()\n    self.assertEquals(self.original.changed_fields(), {'thumbnail_url': self.BASE_DATA['thumbnail_url']})", "buggy_source_code": "def test_thumbnail_url_change(self):\n    self.assertChanges('thumbnail_url', 'http://www.google.com/intl/en_ALL/images/srpr/logo1w.png', self.BASE_DATA['thumbnail_url'])", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_description_change(self):\n    self.original.description = 'Different Description'\n    self.original.save()\n    self.assertEquals(self.original.changed_fields(), {'description': self.BASE_DATA['description']})", "buggy_source_code": "def test_description_change(self):\n    self.assertChanges('description', 'Different Description', self.BASE_DATA['description'])", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_name_change(self):\n    self.original.name = 'Different Name'\n    self.original.save()\n    self.assertEquals(self.original.changed_fields(), {'name': self.BASE_DATA['name']})", "buggy_source_code": "def test_name_change(self):\n    self.assertChanges('name', 'Different Name', self.BASE_DATA['name'])", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_init_bad_home(self):\n    with raises(AttributeError) as exception_obj:\n        Game(home_team='garbageteam', away_team=self.away_team, round=self.round)", "buggy_source_code": "def test_init_bad_home(self):\n    with raises(AttributeError):\n        Game(home_team='garbageteam', away_team=self.away_team, round=self.round)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_init_bad_away(self):\n    with raises(AttributeError) as exception_obj:\n        Game(home_team=self.home_team, away_team='garbageteam', round=self.round)", "buggy_source_code": "def test_init_bad_away(self):\n    with raises(AttributeError):\n        Game(home_team=self.home_team, away_team='garbageteam', round=self.round)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def event_function(self):\n    parent = 'examples.red_button'\n    buttons = Object.objects.global_object_script_parent_search(parent)\n    log_infomsg('buttons found: %s' % buttons)\n    for b in buttons:\n        b.scriptlink.blink()", "buggy_source_code": "def event_function(self):\n    parent = 'examples.red_button'\n    buttons = Object.objects.global_object_script_parent_search(parent)\n    for b in buttons:\n        b.scriptlink.blink()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _set(self, d1, d2, mask=0):\n    if mask:\n        d1 = d1 & ~mask\n        d2 = d2 * (mask & -mask)\n    return d1 | d2", "buggy_source_code": "def _set(self, d1, d2, mask=None):\n    if mask:\n        d1 = d1 & ~mask\n        d2 = d2 * (mask & -mask)\n    return d1 | d2", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def do_rst(s):\n    try:\n        from docutils.core import publish_parts\n        parts = publish_parts(source=s, writer_name='html4css1')\n        return parts['fragment']\n    except:\n        return s", "buggy_source_code": "def do_rst(s):\n    from docutils.core import publish_parts\n    parts = publish_parts(source=s, writer_name='html4css1')\n    return parts['fragment']", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@templatefilter('splitlines')\ndef splitlines(text):\n    return templatekw.showlist('line', text.splitlines(), {}, plural='lines')", "buggy_source_code": "@templatefilter('splitlines')\ndef splitlines(text):\n    return templatekw.hybridlist(text.splitlines(), name='line')", "edit_actions": ["update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@requireCA\ndef test_initialize(self):\n    self.assertTrue(openssl_verify(b'cluster.crt', b'cluster.crt'))", "buggy_source_code": "def test_initialize(self):\n    self.assertTrue(openssl_verify(b'cluster.crt', b'cluster.crt'))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@requireCA\ndef test_control_certificate(self):\n    flocker_ca(b'create-control-certificate', b'my.example.com')\n    self.assertTrue(openssl_verify(b'cluster.crt', b'control-my.example.com.crt'))", "buggy_source_code": "def test_control_certificate(self):\n    flocker_ca(b'create-control-certificate', b'my.example.com')\n    self.assertTrue(openssl_verify(b'cluster.crt', b'control-my.example.com.crt'))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@requireCA\ndef test_apiuser_certificate(self):\n    flocker_ca(b'create-api-certificate', b'alice')\n    self.assertTrue(openssl_verify(b'cluster.crt', b'alice.crt'))", "buggy_source_code": "def test_apiuser_certificate(self):\n    flocker_ca(b'create-api-certificate', b'alice')\n    self.assertTrue(openssl_verify(b'cluster.crt', b'alice.crt'))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_minimum_value(self):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    min_value = self._get_minimum_value(self._pointer, ep)\n    return min_value", "buggy_source_code": "@g_error_handler\ndef get_minimum_value(self, g_error_pointer=None):\n    return self._get_minimum_value(self._pointer, g_error_pointer)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_action_description(self, action_number):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    description = self._get_action_description(self._pointer, action_number, ep)\n    return description", "buggy_source_code": "@g_error_handler\ndef get_action_description(self, action_number, g_error_pointer=None):\n    description = self._get_action_description(self._pointer, action_number, g_error_pointer)\n    return description", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_maximum_value(self):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    max_value = self._get_maximum_value(self._pointer, ep)\n    return max_value", "buggy_source_code": "@g_error_handler\ndef get_maximum_value(self, g_error_pointer=None):\n    return self._get_maximum_value(self._pointer, g_error_pointer)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_minimum_increment(self):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    min_increment = self._get_minimum_increment(self._pointer, ep)\n    return min_increment", "buggy_source_code": "@g_error_handler\ndef get_minimum_increment(self, g_error_pointer=None):\n    return self._get_minimum_increment(self._pointer, g_error_pointer)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_localized_name(self, action_number):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    name = self._get_localized_name(self._pointer, action_number, ep)\n    return name", "buggy_source_code": "@g_error_handler\ndef get_localized_name(self, action_number, g_error_pointer=None):\n    name = self._get_localized_name(self._pointer, action_number, g_error_pointer)\n    return name", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def do_action(self, action_number):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    status = self._do_action(self._pointer, action_number, ep)\n    return status", "buggy_source_code": "@g_error_handler\ndef do_action(self, action_number, g_error_pointer=None):\n    status = self._do_action(self._pointer, action_number, g_error_pointer)\n    return status", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_layer(self):\n    error = _GError()\n    g_error_pointer = POINTER(POINTER(_GError))(error)\n    return self._get_layer(self._pointer, g_error_pointer)", "buggy_source_code": "@g_error_handler\ndef get_layer(self, g_error_pointer=None):\n    return self._get_layer(self._pointer, g_error_pointer)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_mdi_x_order(self):\n    error = _GError()\n    g_error_pointer = POINTER(POINTER(_GError))(error)\n    return self._get_layer(self._pointer, g_error_pointer)", "buggy_source_code": "@g_error_handler\ndef get_mdi_x_order(self, g_error_pointer=None):\n    return self._get_layer(self._pointer, g_error_pointer)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_n_actions(self):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    actions_number = self._get_n_actions(self._pointer, ep)\n    return actions_number", "buggy_source_code": "@g_error_handler\ndef get_n_actions(self, g_error_pointer=None):\n    actions_number = self._get_n_actions(self._pointer, g_error_pointer)\n    return actions_number", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_current_value(self, new_value):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    status = self._set_current_value(self._pointer, new_value, ep)\n    return status", "buggy_source_code": "@g_error_handler\ndef set_current_value(self, new_value, g_error_pointer=None):\n    return self._set_current_value(self._pointer, new_value, g_error_pointer)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_current_value(self):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    curr_value = self._get_minimum_value(self._pointer, ep)\n    return curr_value", "buggy_source_code": "@g_error_handler\ndef get_current_value(self, g_error_pointer=None):\n    return self._get_minimum_value(self._pointer, g_error_pointer)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_docker_compose_package(host):\n    try:\n        p = host.package('docker-compose')\n        assert not p.is_installed\n    except:\n        assert True", "buggy_source_code": "def test_docker_compose_package(host):\n    p = host.package('docker-compose')\n    assert not p.is_installed", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, app, window):\n    Prompt.__init__(self, app, window)\n    self.complete_active = 0\n    self.complete_index = 0\n    self.complete_data = ''", "buggy_source_code": "def __init__(self, app, window):\n    PromptAutocmp.__init__(self, app, window)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _destroyITKPipeline(self):\n    del self._nbcLS\n    del self._thresholder", "buggy_source_code": "def _destroyITKPipeline(self):\n    del self._nbcLS", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef view_time_url(self, event_time):\n    return self.view_url()", "buggy_source_code": "def view_time_url(self, event_time):\n    return self.view_url()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef thumbnail_time_url(self, event_time):\n    return self.thumbnail_url()", "buggy_source_code": "def thumbnail_time_url(self, event_time):\n    return self.thumbnail_url()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef thumbnail_url(self):\n    thumbImage = self.getThumbnail()\n    if thumbImage:\n        return settings.DATA_URL + thumbImage.file.name", "buggy_source_code": "def thumbnail_url(self):\n    thumbImage = self.getThumbnail()\n    if thumbImage:\n        return settings.DATA_URL + thumbImage.file.name", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef view_url(self):\n    return reverse('search_map_single_object', kwargs={'modelPK': self.pk, 'modelName': settings.XGDS_IMAGE_IMAGE_SET_MONIKER})", "buggy_source_code": "def view_url(self):\n    return reverse('search_map_single_object', kwargs={'modelPK': self.pk, 'modelName': settings.XGDS_IMAGE_IMAGE_SET_MONIKER})", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def item_price(item):\n    price = item.get_price(discounts=None)\n    return '%s %s' % (price.gross.amount, price.currency)", "buggy_source_code": "def item_price(item):\n    price = item.get_price(discounts=None)\n    return '%s %s' % (price.amount, price.currency)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def item_tax(item, discounts):\n    price = item.get_price(discounts=discounts)\n    return 'US::%s:y' % price.tax", "buggy_source_code": "def item_tax(item, discounts):\n    return 'US::%s:y' % ZERO_MONEY", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def item_sale_price(item, discounts):\n    sale_price = item.get_price(discounts=discounts)\n    return '%s %s' % (sale_price.gross.amount, sale_price.currency)", "buggy_source_code": "def item_sale_price(item, discounts):\n    sale_price = item.get_price(discounts=discounts)\n    return '%s %s' % (sale_price.amount, sale_price.currency)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def _set_default_optical_path(self):\n    self.__optical_path = [Material('mylar', pyfoxsi.blanket_thickness), Material(pyfoxsi.detector_material, pyfoxsi.detector_thickness)]\n    self._add_optical_path_to_effective_area()", "buggy_source_code": "def _set_default_optical_path(self):\n    self.__optical_path = [Material('mylar', pyfoxsi.blanket_thickness), Material(pyfoxsi.detector_material, pyfoxsi.detector_thickness)]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rev(self, rev='head'):\n    if integer_re.search(str(rev)):\n        if rev < 0:\n            raise NotImplementedError\n    return self.get_query_set(rev)", "buggy_source_code": "def rev(self, rev='head'):\n    return self.get_query_set(rev)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_attrib(self, name, default=None):\n    try:\n        return self.device.attributes[name]\n    except KeyError:\n        return default", "buggy_source_code": "def get_attrib(self, name, default=None):\n    return self.device.attributes.get(name, default)", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_all_users():\n    db = dataset.connect('sqlite:///database.db')\n    output = []\n    for user in db['subscriptions']:\n        output = output.append(user['id'])\n    return output", "buggy_source_code": "def get_all_users():\n    db = dataset.connect('sqlite:///database.db')\n    output = []\n    for user in db['subscriptions']:\n        output.append(user['id'])\n    return output", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pg.production('f_bad_arg : CONSTANT')\ndef f_bad_arg_constant(self, p):\n    raise self.error(p[0], 'formal argument cannot be a constant')", "buggy_source_code": "@pg.production('f_bad_arg : CONSTANT')\ndef f_bad_arg_constant(self, p):\n    raise self.error('formal argument cannot be a constant')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pg.production('f_bad_arg : GVAR')\ndef f_bad_arg_gvar(self, p):\n    raise self.error(p[0], 'formal argument cannot be a global variable')", "buggy_source_code": "@pg.production('f_bad_arg : GVAR')\ndef f_bad_arg_gvar(self, p):\n    raise self.error('formal argument cannot be a global variable')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pg.production('f_bad_arg : CVAR')\ndef f_bad_arg_cvar(self, p):\n    raise self.error(p[0], 'formal argument cannot be a class variable')", "buggy_source_code": "@pg.production('f_bad_arg : CVAR')\ndef f_bad_arg_cvar(self, p):\n    raise self.error('formal argument cannot be a class variable')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pg.production('f_bad_arg : IVAR')\ndef f_bad_arg_ivar(self, p):\n    raise self.error(p[0], 'formal argument cannot be an instance variable')", "buggy_source_code": "@pg.production('f_bad_arg : IVAR')\ndef f_bad_arg_ivar(self, p):\n    raise self.error('formal argument cannot be an instance variable')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_add_empty_netgroup(add_empty_netgroup):\n    (res, _, netgroups) = sssd_netgroup.get_sssd_netgroups('empty_netgroup')\n    assert res == sssd_netgroup.NssReturnCode.SUCCESS\n    assert netgroups == []", "buggy_source_code": "def test_add_empty_netgroup(add_empty_netgroup):\n    (res, _, netgroups) = get_sssd_netgroups('empty_netgroup')\n    assert res == NssReturnCode.SUCCESS\n    assert netgroups == []", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return '%s' % self.name.encode('utf-8')", "buggy_source_code": "def __unicode__(self):\n    return u'%s' % self.name", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.settings = sublime.load_settings(pref)\n    theme_data()", "buggy_source_code": "def __init__(self):\n    theme_data()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def wrap(self, source, outfile):\n    if self.linenos == 2 and self.pymdownx_inline:\n        source = self._wrap_customlinenums(source)\n    return self._wrap_code(self, source)", "buggy_source_code": "def wrap(self, source, outfile):\n    if self.linenos == 2 and self.pymdownx_inline:\n        source = self._wrap_customlinenums(source)\n    return self._wrap_code(source)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef teardown_class(self):\n    super(testFSOp, self).teardown_class()\n    self.clean_files()", "buggy_source_code": "@classmethod\ndef teardown_class(self):\n    super(testFSOp, self).teardown_class()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    os.kill(self._x11.pid)\n    self._x11.wait()\n    manager = gtk.gdk.display_manager_get()\n    manager.set_default_display(self._old_display)", "buggy_source_code": "def tearDown(self):\n    os.kill(self._x11.pid)\n    self._x11.wait()\n    self._close_all_displays()", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _info_callback(self, header, parts):\n    self._playlists = spotify_playlist.SelectedListContent()\n    self._playlists.ParseFromString(parts[0])\n    self._event.set()", "buggy_source_code": "def _info_callback(self, header, parts):\n    self._playlists.ParseFromString(parts[0])\n    self._event.set()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _info_callback(self, header, parts):\n    self._playlist = spotify_playlist.ListDump()\n    self._playlist.ParseFromString(parts[0])\n    self._event.set()", "buggy_source_code": "def _info_callback(self, header, parts):\n    self._playlist.ParseFromString(parts[0])\n    self._event.set()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_gain_shape(self):\n    with pytest.raises(ValueError):\n        calc_total_error(DATA, error=ERROR, effective_gain=WRONG_SHAPE)", "buggy_source_code": "def test_gain_shape(self):\n    with pytest.raises(ValueError):\n        calc_total_error(DATA, BKG_ERROR, WRONG_SHAPE)", "edit_actions": ["update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_error_shape(self):\n    with pytest.raises(ValueError):\n        calc_total_error(DATA, error=WRONG_SHAPE, effective_gain=EFFGAIN)", "buggy_source_code": "def test_error_shape(self):\n    with pytest.raises(ValueError):\n        calc_total_error(DATA, WRONG_SHAPE, EFFGAIN)", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@lisp\ndef fdefinition_(name):\n    (def_, fdefinition_, name, (if_, (stringp_, name), (_global, name)(symbol_function_, (the_, symbol, name))))", "buggy_source_code": "@lisp\ndef fdefinition_(name):\n    (def_, fdefinition_, name, (if_, (stringp_, name), (_global, name), (symbol_function_, (the_, symbol, name))))", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_publicapi_http_response(publicAPI):\n    publicAPI.get_token(USER_EMAIL, USER_PASSWORD, REDIRECT_URL, '/read-limited', do_store_raw_response=True)\n    assert isinstance(publicAPI.raw_response, Response)\n    assert publicAPI.raw_response.status_code == 200", "buggy_source_code": "def test_publicapi_http_response(publicAPIStoreResponse):\n    publicAPI.get_token(USER_EMAIL, USER_PASSWORD, REDIRECT_URL, '/read-limited')\n    assert isinstance(publicAPI.raw_response, Response)\n    assert publicAPI.raw_response.status_code == 200", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_memberapi_http_response(memberAPI):\n    memberAPI.get_token(USER_EMAIL, USER_PASSWORD, REDIRECT_URL, do_store_raw_response=True)\n    assert isinstance(memberAPI.raw_response, Response)\n    assert memberAPI.raw_response.status_code == 200", "buggy_source_code": "def test_memberapi_http_response(memberAPIStoreResponse):\n    memberAPI.get_token(USER_EMAIL, USER_PASSWORD, REDIRECT_URL)\n    assert isinstance(memberAPI.raw_response, Response)\n    assert memberAPI.raw_response.status_code == 200", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def touchz(self, path):\n    return NotImplementedError(\"SnakebiteClient in luigi doesn't implement touchz\")", "buggy_source_code": "def touchz(self, path):\n    raise NotImplementedError(\"SnakebiteClient in luigi doesn't implement touchz\")", "edit_actions": ["insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def _find_root(self, name):\n    if self.root.name == name:\n        return self.root\n    raise DataError(\"Cannot merge outputs containing different root suites. Original suite is '%s' and merged is '%s'.\" % (self.root.name, name))", "buggy_source_code": "def _find_root(self, name):\n    root = self.result.suite\n    if root.name != name:\n        raise DataError(\"Cannot merge outputs containing different root suites. Original suite is '%s' and merged is '%s'.\" % (root.name, name))\n    return root", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, result):\n    self.root = result.suite\n    self.current = None", "buggy_source_code": "def __init__(self, result):\n    self.result = result\n    self.current = None", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def destroy(self):\n    ToolTip.destroy(self)\n    TrackInfoPane.destroy(self)", "buggy_source_code": "def destroy(self):\n    TrackInfoPane.destroy(self)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update(self):\n    self.metric = self.computeMetricValue()\n    self.speed = self.computeSpeed()\n    self.engine = RayTracer(self)", "buggy_source_code": "def update(self):\n    self.metric = self.computeMetricValue()\n    self.speed = self.computeSpeed()\n    self._reset = True", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    user = None\n    u_pass = None\n    self.db_manager = db.db_manager.db_manager(user, u_pass)\n    self.clients_inserted = []\n    self.addresss_inserted = []", "buggy_source_code": "def setUp(self):\n    user = None\n    u_pass = None\n    self.db_manager = db.db_manager.db_client_manager(user, u_pass)\n    self.clients_inserted = []", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, request=None):\n    super(BlobstoreFileUploadHandler, self).__init__(request)\n    self.content_type_extras = {}", "buggy_source_code": "def __init__(self, request=None):\n    super(BlobstoreFileUploadHandler, self).__init__(request)\n    self.blobkey = None", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef yellowify(msg):\n    return Color.YELLOW + msg + Color.NORMAL if not NO_COLOR else ''", "buggy_source_code": "@staticmethod\ndef yellowify(msg):\n    return Color.YELLOW + msg + Color.NORMAL if not NO_COLOR else msg", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef grayify(msg):\n    return Color.GRAY + msg + Color.NORMAL if not NO_COLOR else ''", "buggy_source_code": "@staticmethod\ndef grayify(msg):\n    return Color.GRAY + msg + Color.NORMAL if not NO_COLOR else msg", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def datetime_from_salesforce(d):\n    return datetime.strptime(d[:-5] + '+00:00', '%Y-%m-%dT%H:%M:%S.%f%z')", "buggy_source_code": "def datetime_from_salesforce(d):\n    return datetime.strptime(d, '%Y-%m-%dT%H:%M:%S.%f%z')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def str_to_raw(str):\n    try:\n        return str.decode('string_escape')\n    except:\n        return str.encode().decode('unicode_escape')", "buggy_source_code": "def str_to_raw(str):\n    return repr(str)", "edit_actions": ["move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cancel_authorize(request, **kwargs):\n    LOG.debug('OAUTH2: authorization request dennied, clear variables and redirect to home')\n    request.session['application_credentials'] = None\n    return redirect('horizon:user_home')", "buggy_source_code": "def cancel_authorize(request, **kwargs):\n    LOG.debug('OAUTH2: authorization request dennied, redirect to home')\n    return redirect('horizon:user_home')", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def move_selection_up(self):\n    self.listbox.keypress((0, self.loop.screen_size[1] - 1), 'up')", "buggy_source_code": "def move_selection_up(self):\n    self.listbox.keypress((0, self.visible_lines()), 'up')", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def move_selection_down(self):\n    self.listbox.keypress((0, self.loop.screen_size[1] - 1), 'down')", "buggy_source_code": "def move_selection_down(self):\n    self.listbox.keypress((0, self.visible_lines()), 'down')", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def DoubleClick(self, button='left', pressed='', coords=(0, 0), double=True):\n    _perform_click(self, button, pressed, coords, double)\n    return self", "buggy_source_code": "def DoubleClick(self, button='left', pressed='', coords=(0, 0)):\n    _perform_click(self, button, pressed, coords, double=True)\n    return self", "edit_actions": ["insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@expectedFailureFreeBSD('llvm.org/pr17910')\n@dwarf_test\ndef test_breakpoint_delay_breakpoint_one_signal_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=1, num_delay_breakpoint_threads=1, num_signal_threads=1)", "buggy_source_code": "@dwarf_test\ndef test_breakpoint_delay_breakpoint_one_signal_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=1, num_delay_breakpoint_threads=1, num_signal_threads=1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@expectedFailureFreeBSD('llvm.org/pr17910')\n@dwarf_test\ndef test_delay_signal_break_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=1, num_delay_signal_threads=1)", "buggy_source_code": "@dwarf_test\ndef test_delay_signal_break_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=1, num_delay_signal_threads=1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@expectedFailureFreeBSD('llvm.org/pr17910')\n@dwarf_test\ndef test_two_breakpoints_one_signal_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=2, num_signal_threads=1)", "buggy_source_code": "@dwarf_test\ndef test_two_breakpoints_one_signal_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=2, num_signal_threads=1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@expectedFailureFreeBSD('llvm.org/pr17910')\n@dwarf_test\ndef test_signal_delay_break_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_delay_breakpoint_threads=1, num_signal_threads=1)", "buggy_source_code": "@dwarf_test\ndef test_signal_delay_break_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_delay_breakpoint_threads=1, num_signal_threads=1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@expectedFailureFreeBSD('llvm.org/pr17910')\n@dwarf_test\ndef test_signal_break_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=1, num_signal_threads=1)", "buggy_source_code": "@dwarf_test\ndef test_signal_break_dwarf(self):\n    self.buildDwarf(dictionary=self.getBuildFlags())\n    self.do_thread_actions(num_breakpoint_threads=1, num_signal_threads=1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    print('IPADDR: family: %s, prefix: %s, len: %s' % (str(self.af), str(self.prefix), str(self.prefixlen)))\n    return str(self.prefix)", "buggy_source_code": "def __str__(self):\n    return str(self.prefix)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _run_job(self):\n    LOG.debug('Processing new measures')\n    try:\n        self.store.process_measures(self.index)\n    except Exception:\n        LOG.error('Unexpected error during measures processing', exc_info=True)", "buggy_source_code": "def _run_job(self):\n    try:\n        self.store.process_background_tasks(self.index)\n    except Exception:\n        LOG.error('Unexpected error during measures processing', exc_info=True)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def calc_adjusted_close(dependencies, targets):\n    dependencies = list(dependencies)\n    adj_close = calc_adj_close(dependencies[0], dependencies[1])\n    adj_close.to_csv(targets[0])", "buggy_source_code": "def calc_adjusted_close(dependencies, targets):\n    adj_close = calc_adj_close(closepath, divpath)\n    adj_close.to_csv(targets[0])", "edit_actions": ["update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main():\n    userImage = open_image()\n    userImageArray = make_pixel_array(userImage)\n    userImageArray = rgb_offset(rgb_offset(userImageArray, 'r', 45), 'r', 45)\n    save_image(make_pil_image(userImageArray))", "buggy_source_code": "def main():\n    userImage = open_image()\n    userImageArray = make_pixel_array(userImage)\n    userImageArray = rgb_offset(rgb_offset(userImageArray, 'r'), 'r')\n    save_image(make_pil_image(userImageArray))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cleanup(self):\n    for section in self.sections.all():\n        section.cleanup()\n        if section.lines.count() == 0:\n            section.delete()", "buggy_source_code": "def cleanup(self):\n    for section in self.sections.all():\n        section.cleanup()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_parent_of(self, other):\n    while other.parent:\n        if other.parent.guid == self.guid:\n            return True\n        other = other.parent", "buggy_source_code": "def is_parent_of(self, other):\n    while other.parent:\n        if other.parent == self:\n            return True\n        other = other.parent\n    return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_client(self):\n    token = self.keystone.refresh_token()\n    kwargs = {'token': token}\n    return client.Client(self.api_version, self.url, **self.kwargs)", "buggy_source_code": "def get_client(self):\n    token = self.keystone.refresh_token()\n    kwargs = {'token': token}\n    return client.Client(self.api_version, self.url, **kwargs)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_unittest_interaction(django_testdir):\n    django_testdir.create_test_module(\"\\n        import pytest\\n        import unittest\\n        from .app.models import Item\\n\\n        class TestCase_setupClass(unittest.TestCase):\\n            @classmethod\\n            def setUpClass(cls):\\n                Item.objects.create(name='foo')\\n\\n            def test_db_access_1(self):\\n                Item.objects.count() == 1\\n\\n        class TestCase_setUp(unittest.TestCase):\\n            @classmethod\\n            def setUp(cls):\\n                Item.objects.create(name='foo')\\n\\n            def test_db_access_2(self):\\n                Item.objects.count() == 1\\n\\n        class TestCase(unittest.TestCase):\\n            def test_db_access_3(self):\\n                Item.objects.count() == 1\\n    \")\n    result = django_testdir.runpytest('-v', '--reuse-db')\n    result.stdout.fnmatch_lines(['*test_db_access_1 ERROR*', '*test_db_access_2 FAILED*', '*test_db_access_3 FAILED*', '*ERROR at setup of TestCase_setupClass.test_db_access_1*', '*no such table: app_item*', '*Failed: Database access not allowed, use the \"django_db\" mark to enable*'])", "buggy_source_code": "def test_unittest_interaction(django_testdir):\n    django_testdir.create_test_module(\"\\n        import pytest\\n        import unittest\\n        from .app.models import Item\\n\\n        class TestCase_setupClass(unittest.TestCase):\\n            @classmethod\\n            def setUpClass(cls):\\n                Item.objects.create(name='foo')\\n\\n            def test_db_access_1(self):\\n                Item.objects.count() == 1\\n\\n        class TestCase_setUp(unittest.TestCase):\\n            @classmethod\\n            def setUp(cls):\\n                Item.objects.create(name='foo')\\n\\n            def test_db_access_2(self):\\n                Item.objects.count() == 1\\n\\n        class TestCase(unittest.TestCase):\\n            def test_db_access_3(self):\\n                Item.objects.count() == 1\\n    \")\n    result = django_testdir.runpytest('-v', '--reuse-db')\n    result.stdout.fnmatch_lines(['*test_db_access_1 ERROR*', '*test_db_access_2 FAILED*', '*test_db_access_3 FAILED*', '*ERROR at setup of TestCase_setupClass.test_db_access_1*', '*Failed: Database access not allowed, use the \"django_db\" mark to enable*'])", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def from_db_value(self, value, expression, connection, context):\n    if not value:\n        return list()\n    return json.loads(value)", "buggy_source_code": "def from_db_value(self, value, expression, connection):\n    if not value:\n        return list()\n    return json.loads(value)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def from_db_value(self, value, expression, connection, context):\n    if not value:\n        return dict()\n    return json.loads(value)", "buggy_source_code": "def from_db_value(self, value, expression, connection):\n    if not value:\n        return dict()\n    return json.loads(value)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    self.extract = APIExtractor()\n    super(APIQuerySet, self).__init__(*args, **kwargs)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(APIQuerySet, self).__init__(*args, **kwargs)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def save(self):\n    dataIO.save_json('data/Tasty/say/settings.json', self.settings)", "buggy_source_code": "def save(self):\n    dataIO.save_json('data/Tasty/say/settings.json', self.settings)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def configure_args(self):\n    spec = self.spec\n    return ['PKG_CONFIG_PATH={0}'.format(join_path(spec['python'].prefix.lib, 'pkgconfig')), '--disable-use-tty-group']", "buggy_source_code": "def configure_args(self):\n    return ['--disable-use-tty-group']", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def initialize_connection(self, volume, connector):\n    _debug_vol_info('INIT_CONN', volume)\n    return {'driver_volume_type': 'local', 'data': {'vpoolname': self._vpool_name, 'device_path': volume.provider_location}}", "buggy_source_code": "def initialize_connection(self, volume, connector):\n    return {'driver_volume_type': 'local', 'data': {'vpoolname': self._vpool_name, 'device_path': volume.provider_location}}", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def detach_volume(self, context, volume):\n    _debug_vol_info('DETACH_VOL', volume)", "buggy_source_code": "def detach_volume(self, context, volume):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def do_setup(self, context):\n    _debug_vol_info('SETUP', context)\n    self._context = context", "buggy_source_code": "def do_setup(self, context):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def terminate_connection(self, volume, connector, force):\n    _debug_vol_info('TERM_CONN', volume)\n    LOG.debug('TERM_CONN %s %s ' % (str(connector), force))", "buggy_source_code": "def terminate_connection(self, volume, connector, force):\n    LOG.debug('TERM_CONN %s %s ', six.text_type(connector), force)", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_export(self, context, volume):\n    _debug_vol_info('CREATE_EXP', volume)", "buggy_source_code": "def create_export(self, context, volume):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remove_export(self, context, volume):\n    _debug_vol_info('RM_EXP', volume)", "buggy_source_code": "def remove_export(self, context, volume):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ensure_export(self, context, volume):\n    _debug_vol_info('ENS_EXP', volume)", "buggy_source_code": "def ensure_export(self, context, volume):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def attach_volume(self, context, volume, instance_uuid, host_name, mountpoint):\n    _debug_vol_info('ATTACH_VOL', volume)\n    LOG.debug('ATTACH_VOL %s %s %s' % (instance_uuid, host_name, mountpoint))", "buggy_source_code": "def attach_volume(self, context, volume, instance_uuid, host_name, mountpoint):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _fix(self):\n    db.query('\\n            UPDATE {0}elements LEFT JOIN {0}files ON id = element_id\\n            SET file = (element_id IS NOT NULL)\\n            '.format(db.prefix))", "buggy_source_code": "def _fix(self):\n    db.query('\\n            UPDATE {p}elements LEFT JOIN {p}files ON id = element_id\\n            SET file = (element_id IS NOT NULL)\\n            ')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@api.multi\ndef release(self):\n    move_recs = self.move_id\n    move_recs.action_cancel()\n    return True", "buggy_source_code": "@api.multi\ndef release(self):\n    self.mapped('move_id').action_cancel()\n    return True", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def add_roles(self, role_count_dict):\n    await asyncio.gather(*[self.add_role(role, count) for (role, count) in role_count_dict.items()])", "buggy_source_code": "async def add_roles(self, role_count_dict):\n    for (role, count) in role_count_dict.items():\n        await self.add_role(role, count)", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def remove_roles(self, roles):\n    await asyncio.gather(*[self.remove_role(role) for role in roles])", "buggy_source_code": "async def remove_roles(self, roles):\n    for role in roles:\n        await self.remove_role(role)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def add_symgroup(self, role, count, strategies):\n    await self.add_role(role, count)\n    await asyncio.gather(*[self.add_strategy(role, strat) for strat in strategies])", "buggy_source_code": "async def add_symgroup(self, role, count, strategies):\n    await self.add_role(role, count)\n    await self.add_strategies({role: strategies})", "edit_actions": ["move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def add_symgroups(self, symgrps):\n    await asyncio.gather(*[self.add_symgroup(role, count, strats) for (role, count, strats) in symgrps])", "buggy_source_code": "async def add_symgroups(self, symgrps):\n    for (role, count, strats) in symgrps:\n        await self.add_symgroup(role, count, strats)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run(self):\n    time.sleep(self.interval)\n    self.trigger.emit(self.thread_no)", "buggy_source_code": "def run(self):\n    self.timer.start(self.interval)", "edit_actions": ["move-tree", "move-tree", "move-tree", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_twitter_authorized(self, user):\n    return user.twitter_oauth_token and user.twitter.oauth_token_secret", "buggy_source_code": "def is_twitter_authorized(self, user):\n    return user.twitter_oauth_token and user.twitter_oauth_token_secret", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def assertTexts(self, parsed, texts):\n    for (a, b) in zip(parsed[1]['parts'], texts):\n        self.assertEquals(a['text'], b)", "buggy_source_code": "def assertTexts(self, parsed, expected):\n    for (a, b) in zip(expected, parts(parsed[1])):\n        self.assertEquals(a, b)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_year(self):\n    return datetime.fromtimestamp(self.timestamp).year", "buggy_source_code": "def get_year(self):\n    return self.year", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(LatestEntriesForm, self).__init__(*args, **kwargs)\n    self.fields['tags'].widget = TagAutoSuggest('taggit.Tag')", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(LatestEntriesForm, self).__init__(*args, **kwargs)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef source(self):\n    return self.get_relationship_node('_source', self.source_type, self.source_id)", "buggy_source_code": "@property\ndef source(self):\n    return getattr(self, self.source_attr)", "edit_actions": ["update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef destination(self):\n    return self.get_relationship_node('_destination', self.destination_type, self.destination_id)", "buggy_source_code": "@property\ndef destination(self):\n    return getattr(self, self.destination_attr)", "edit_actions": ["update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_console_size():\n    return GetConsoleScreenBufferInfo(STDOUT).dwSize", "buggy_source_code": "def get_console_size():\n    return GetConsoleScreenBufferInfo().dwSize", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_pwm_key(self):\n    with pytest.raises(ValueError):\n        OM.load('PWM0')\n        PWM.start('P8_25', -1)\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_pwm_key(self):\n    with pytest.raises(ValueError):\n        PWM.start('P8_25', -1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_negative_polarity(self):\n    with pytest.raises(ValueError):\n        OM.load('PWM0')\n        PWM.start('PWM0', 0, 100, -1)\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_negative_polarity(self):\n    with pytest.raises(ValueError):\n        PWM.start('PWM0', 0, 100, -1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_frequency_string(self):\n    with pytest.raises(TypeError):\n        OM.load('PWM0')\n        PWM.start('PWM0', 0, '1')\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_frequency_string(self):\n    with pytest.raises(TypeError):\n        PWM.start('PWM0', 0, '1')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_valid_duty_cycle_min(self):\n    OM.load('PWM0')\n    PWM.start('PWM0', 0)\n    PWM.cleanup()\n    OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_valid_duty_cycle_min(self):\n    PWM.start('PWM0', 0)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_valid_duty_cycle_max(self):\n    OM.load('PWM0')\n    PWM.start('PWM0', 100)\n    PWM.cleanup()\n    OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_valid_duty_cycle_max(self):\n    PWM.start('PWM0', 100)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_polarity_type(self):\n    with pytest.raises(TypeError):\n        OM.load('PWM0')\n        PWM.start('PWM0', 0, 100, '1')\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_polarity_type(self):\n    with pytest.raises(TypeError):\n        PWM.start('PWM0', 0, 100, '1')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_frequency_negative(self):\n    with pytest.raises(ValueError):\n        OM.load('PWM0')\n        PWM.start('PWM0', 0, -1)\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_frequency_negative(self):\n    with pytest.raises(ValueError):\n        PWM.start('PWM0', 0, -1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_duty_cycle_negative(self):\n    with pytest.raises(ValueError):\n        OM.load('PWM0')\n        PWM.start('PWM0', -1)\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_duty_cycle_negative(self):\n    with pytest.raises(ValueError):\n        PWM.start('PWM0', -1)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_duty_cycle_high(self):\n    with pytest.raises(ValueError):\n        OM.load('PWM0')\n        PWM.start('PWM0', 101)\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_duty_cycle_high(self):\n    with pytest.raises(ValueError):\n        PWM.start('PWM0', 101)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_positive_polarity(self):\n    with pytest.raises(ValueError):\n        OM.load('PWM0')\n        PWM.start('PWM0', 0, 100, 2)\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_positive_polarity(self):\n    with pytest.raises(ValueError):\n        PWM.start('PWM0', 0, 100, 2)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_duty_cycle_non_setup_key(self):\n    with pytest.raises(RuntimeError):\n        OM.load('PWM0')\n        PWM.set_duty_cycle('PWM0', 100)\n        PWM.cleanup()\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_duty_cycle_non_setup_key(self):\n    with pytest.raises(RuntimeError):\n        PWM.set_duty_cycle('PWM0', 100)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_start_invalid_duty_cycle_string(self):\n    with pytest.raises(TypeError):\n        OM.load('PWM0')\n        PWM.start('PWM0', '1')\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_start_invalid_duty_cycle_string(self):\n    with pytest.raises(TypeError):\n        PWM.start('PWM0', '1')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_duty_cycle_invalid_key(self):\n    with pytest.raises(ValueError):\n        OM.load('PWM0')\n        PWM.set_duty_cycle('P9_15', 100)\n        PWM.cleanup()\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_duty_cycle_invalid_key(self):\n    with pytest.raises(ValueError):\n        PWM.set_duty_cycle('P9_15', 100)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_pwm_freq_non_setup_key(self):\n    with pytest.raises(RuntimeError):\n        OM.load('PWM0')\n        PWM.set_frequency('PWM0', 100)\n        PWM.cleanup()\n        OM.unload('PWM0')", "buggy_source_code": "def test_pwm_freq_non_setup_key(self):\n    with pytest.raises(RuntimeError):\n        PWM.set_frequency('PWM0', 100)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def disconnect(self):\n    if self.is_streaming:\n        self.stop_streaming()\n    if self.is_connected:\n        self.connection.close()\n        self.connection = None", "buggy_source_code": "def disconnect(self):\n    if self.is_connected:\n        self.connection.close()\n        self.connection = None", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def enumerate_backends(config):\n    bpm = SpecificPluginManager(config, 'backends', ErrBot, CORE_BACKENDS, extra_search_dirs=())\n    return [plug.name for (_, _, plug) in bpm.getPluginCandidates()]", "buggy_source_code": "def enumerate_backends(config):\n    bpm = bpm_from_config(config)\n    return [plug.name for (_, _, plug) in bpm.getPluginCandidates()]", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/reload')\n@app.route('/reload')\ndef reload():\n    return redirect('/', code=302)", "buggy_source_code": "@app.route('/reload')\ndef reload():\n    return redirect('/', code=302)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@contract\ndef is_vm_migrating(nova, vm):\n    return nova.servers.get('vm').status != u'ACTIVE'", "buggy_source_code": "@contract\ndef is_vm_migrating(nova, vm):\n    return nova.servers.get(vm).status != u'ACTIVE'", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def reply(self):\n    self.tfield.set('@%s: ' % self.timeline[self.tweets.cursor].user.screen_name)\n    self.tfield.focus()", "buggy_source_code": "def reply(self):\n    self.tfield.set('@%s: ' % self.timeline[self.tweets.cursor].user['screen_name'])\n    self.tfield.focus()", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __bool__(self):\n    return True", "buggy_source_code": "@staticmethod\ndef __bool__():\n    return True", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_render_hello(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            Hello world\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, [('write', 'Hello world'), ('write', '\\n')])", "buggy_source_code": "def test_render_hello(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            Hello world\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, [('write', 'Hello world'), 'newline'])", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_highlight(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            <highlight>BOLD</highlight>\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, ['select-highlight', ('write', 'BOLD'), 'cancel-highlight', ('write', '\\n')])", "buggy_source_code": "def test_highlight(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            <highlight>BOLD</highlight>\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, ['select-highlight', ('write', 'BOLD'), 'cancel-highlight', 'newline'])", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_bold(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            <bold>BOLD</bold>\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, ['select-bold', ('write', 'BOLD'), 'cancel-bold', ('write', '\\n')])", "buggy_source_code": "def test_bold(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            <bold>BOLD</bold>\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, ['select-bold', ('write', 'BOLD'), 'cancel-bold', 'newline'])", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, version):\n    self.version = str(version).replace(':', '.')", "buggy_source_code": "def __init__(self, version):\n    self.version = str(version)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef key_source(self):\n    return PreSpikes.RateTrace() * Sync() * IntegrationWindow() & dict(spike_method=5)", "buggy_source_code": "@property\ndef key_source(self):\n    return PreSpikes.RateTrace() * Sync() * IntegrationWindow()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def next(self):\n    self.iterator = self.annihilator.to_list(self.iterator, self.order + 1)[1:]\n    return self.iterator[-1]", "buggy_source_code": "def next(self):\n    self.i += 1\n    return self[self.i][0]", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def emitPythonSignal(name, *args):\n    print('emitPythonSignal {} {}'.format(name, args))\n    signals.emit(name, *args)", "buggy_source_code": "def emitPythonSignal(name, *args):\n    signals.emit(name, *args)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def defer(func, *args, **kwargs):\n    return lambda f: func(*args, **kwargs)", "buggy_source_code": "def defer(func):\n    return lambda *args, **kwargs: func(*args, **kwargs)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@fox.command(pass_context=True)\nasync def punch(self, user: discord.Member):\n    await self.bot.say('ONE PUNCH! And ' + user.mention + ' is out! ლ(ಠ益ಠლ)')", "buggy_source_code": "@fox.command()\nasync def punch(self, user: discord.Member):\n    await self.bot.say('ONE PUNCH! And ' + user.mention + ' is out! ლ(ಠ益ಠლ)')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def discover_lights(hue):\n    notify('Lifx Device Discovery', 'Starting')\n    lights = bridge.discover()\n    if len(lights) > 0:\n        hue.connected = True\n    else:\n        pass", "buggy_source_code": "def discover_lights(hue):\n    notify('Lifx Device Discovery', 'Starting')\n    num_lights = bridge.discover()\n    if num_lights > 0:\n        hue.connected = True\n    else:\n        pass", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def iter_attrs(self):\n    for node in self.node.iter(tag='attribute'):\n        yield Attribute(self.api, node)", "buggy_source_code": "def iter_attrs(self):\n    for node in self.node.iter('attribute'):\n        yield Attribute(self.api, node)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def iter_params(self):\n    for node in self.node.iter(tag='parameter'):\n        yield Parameter(self.api, node)", "buggy_source_code": "def iter_params(self):\n    for node in self.node.iter('parameter'):\n        yield Parameter(self.api, node)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def iter_iters(self):\n    for node in self.node.iter(tag='iterator'):\n        yield Iterator(self.api, node)", "buggy_source_code": "def iter_iters(self):\n    for node in self.node.iter('iterator'):\n        yield Iterator(self.api, node)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/')\ndef hello_world(name=None):\n    return render_template('index.html', name=name)", "buggy_source_code": "@app.route('/')\ndef hello_world():\n    return render_template('index.html')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_app_modules(self):\n    self.assertEqual(leonardo.get_app_modules(settings.APPS)['web'], web)", "buggy_source_code": "def test_get_app_modules(self):\n    self.assertEqual(leonardo.get_app_modules(settings.APPS)[0], web)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def restart_simulation(self, max_steps=200000.0, **kwargs):\n    raise NotImplementedError\n    self._max_steps = max_steps\n    logger.debug('Simulation restarted')", "buggy_source_code": "def restart_simulation(self, max_steps=200000.0, **kwargs):\n    self._max_steps = max_steps\n    logger.debug('Simulation restarted')\n    raise NotImplementedError", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def send_command(self, data):\n    return self.visalib.viGpibCommand(self.session, data, data)", "buggy_source_code": "def send_command(self, data):\n    return self.visalib.viGpibCommand(self.session, data)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def new() -> MountTable:\n    if sys.platform == 'linux2':\n        return LinuxMountTable()\n    return NopMountTable()", "buggy_source_code": "def new() -> MountTable:\n    if 'linux' in sys.platform:\n        return LinuxMountTable()\n    return NopMountTable()", "edit_actions": ["insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def typeUrlOnChrome(urlText=''):\n    click('1455955040522.png')\n    sleep(1)\n    delOriginText()\n    type(urlText)\n    sleep(1)\n    type(Key.ENTER)", "buggy_source_code": "def typeUrlOnChrome(urlText=None):\n    click('1455955040522.png')\n    sleep(1)\n    delOriginText()\n    type(urlText)\n    sleep(1)\n    type(Key.ENTER)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def getCurrentLiquipediaEvents():\n    ret = formatWikiHeader()\n    ret += formatTableHeader()\n    sections = splitBySection(liquipediaEventsIntoLines(getLiquipediaEvents()))\n    ret += formatSectionRow(Upcoming)\n    return ret", "buggy_source_code": "def getCurrentLiquipediaEvents():\n    wiki = liquipediaStringToWiki(liquipediaEventsIntoLines(getLiquipediaEvents()))\n    return wiki", "edit_actions": ["update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_ParseConfig_init():\n    test_cali_ini = os.path.join(TESTS_DATA_DIR, 'test_cali.ini')\n    p = ParseConfig(test_cali_ini)\n    p.read_ini()\n    assert p.cali_lines == ['cyano.nwk', 'Nostoc_azollae_0708, AnaXP35, >0.11<0.22', 'AnaMs2, Fis7414, >0.22<0.33', 'Cyanothece_PCC_7424, Synechococcus_sp._WH_8109, >0.33<0.44']", "buggy_source_code": "def test_ParseConfig_init():\n    p = ParseConfig(test_cali_ini)\n    p.read_ini()\n    assert p.cali_lines == ['cyano.nwk', 'Nostoc_azollae_0708, AnaXP35, >0.11<0.22', 'AnaMs2, Fis7414, >0.22<0.33', 'Cyanothece_PCC_7424, Synechococcus_sp._WH_8109, >0.33<0.44']", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_ParseConfig_tree_file_name():\n    test_cali_ini = os.path.join(TESTS_DATA_DIR, 'test_cali.ini')\n    p = ParseConfig(test_cali_ini)\n    p.read_ini()\n    assert p.cali_lines[0] == 'cyano.nwk'", "buggy_source_code": "def test_ParseConfig_tree_file_name():\n    p = ParseConfig(test_cali_ini)\n    p.read_ini()\n    assert p.cali_lines[0] == 'cyano.nwk'", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.pyplot = _load_lazy('matplotlib.pyplot')\n    self.ticker = _load_lazy('matplotlib.ticker')\n    self.cm = _load_lazy('matplotlib.cm')", "buggy_source_code": "def __init__(self):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef children(self):\n    print('children ', self.values)\n    print('child type ', type(self.values))\n    return [self.nanflow] + self.values", "buggy_source_code": "@property\ndef children(self):\n    return [self.nanflow] + self.values", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def LShR(self, *args):\n    return self._do_op('LShR', args, length=-1)", "buggy_source_code": "def LShR(self, *args):\n    return self._do_op('LShR', args)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _load_attributes(self, attributes_dict):\n    self._attr = dict([(attr_name, LdapAttribute(attr_name, attr_values)) for (attr_name, attr_values) in list(attributes_dict.items())])", "buggy_source_code": "def _load_attributes(self, attributes_dict):\n    self._attr = dict([(attr_name, LdapAttribute(attr_name, attr_values)) for (attr_name, attr_values) in attributes_dict.items()])", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def initialize_status_bar(new_total=1):\n    global total, progress\n    total = new_total\n    progress = Value('I', 0)\n    update_status_bar()", "buggy_source_code": "def initialize_status_bar(new_total=1):\n    global total, progress\n    total = new_total\n    update_status_bar()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def packaged_endpoint_hosts():\n    return load(resource_stream(__package__, 'endpoint_hosts.json'))['data']", "buggy_source_code": "def packaged_endpoint_hosts():\n    return load(resource_stream(__package__, 'endpoint_hosts.json'))", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def packaged_service_regions():\n    return load(resource_stream(__package__, 'service_regions.json'))['data']", "buggy_source_code": "def packaged_service_regions():\n    return load(resource_stream(__package__, 'service_regions.json'))", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def await_read(self):\n    if not self.reader.closed:\n        self.read_wait.set()\n        self.read_done.wait()\n        self.read_done.clear()", "buggy_source_code": "def await_read(self):\n    self.read_wait.set()\n    self.read_done.wait()\n    self.read_done.clear()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef update_limits_and_legend(ax, legend_props=None):\n    ax.relim()\n    ax.autoscale()\n    if legend_props:\n        LegendProperties.create_legend(legend_props, ax)", "buggy_source_code": "@staticmethod\ndef update_limits_and_legend(ax, legend_props=None):\n    ax.relim()\n    if legend_props:\n        LegendProperties.create_legend(legend_props, ax)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def parse_experiment(filename):\n    logging.debug('Parsing experimental description from %r' % filename)\n    experiment = {}\n    with open(filename, 'r') as fh:\n        experiment = json.load(fh)\n    return experiment", "buggy_source_code": "def parse_experiment(filename):\n    experiment = {}\n    with open(filename, 'r') as fh:\n        experiment = json.load(fh)\n    return experiment", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def del_notification_cb(cb_token):\n    index = _NOTIFICATION_CBS.index(cb_token)\n    if index >= 0:\n        del _NOTIFICATION_CBS[index]", "buggy_source_code": "def del_notification_cb(cb_token):\n    try:\n        _NOTIFICATION_CBS.index(cb_token)\n    except ValueError:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@memoize\ndef produce_number(self) -> float:\n    return random.random()", "buggy_source_code": "@memoize\ndef produce_number(self):\n    return random.random()", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def display_list_quaggans(self):\n    data = discord.Embed(title='Available quaggans', colour=color)\n    data.add_field(value=', '.join(l_quaggans))", "buggy_source_code": "def display_list_quaggans(self):\n    data = discord.Embed(title='Available quaggans')\n    data.add_field(value=', '.join(l_quaggans))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def display_given_quaggan(quaggan):\n    base_quaggan = 'https://static.staticwars.com/quaggans/'\n    URL_quaggan = base_quaggan + quaggan + '.jpg'\n    data = discord.Embed(title=quaggan, description='For a list of all quaggans, type !quaggan list', colour=color)\n    data.add_field(value=URL_quaggan)", "buggy_source_code": "def display_given_quaggan(quaggan):\n    base_quaggan = 'https://static.staticwars.com/quaggans/'\n    URL_quaggan = base_quaggan + quaggan + '.jpg'\n    data = discord.Embed(title=quaggan, description='For a list of all quaggans, type !quaggan list')\n    data.add_field(value=URL_quaggan)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_hertz(self, standard_pitch=440):\n    diff = self.__int__() - 57\n    return 2 ** (diff / 12.0) * 440", "buggy_source_code": "def to_hertz(self, standard_pitch=440):\n    diff = self.__int__() - 57\n    return 2 ** (diff / 12.0) * standard_pitch", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def decrement(self, key, cache=None, amount=1):\n    amount = amount * -1\n    return self.increment(key=key, cache=cache, amount=amount, options=options)", "buggy_source_code": "def decrement(self, key, cache=None, amount=1):\n    amount = amount * -1\n    return self.increment(key=key, cache=cache, amount=amount)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def show_debug(self):\n    self.debugTextOb.data.body = 'distance from cam {}\\n'.format(self._get_distance_from_cam())", "buggy_source_code": "def show_debug(self):\n    print(self._getAED())", "edit_actions": ["move-tree", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, limit):\n    self.limit = limit", "buggy_source_code": "def __init__(self):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test():\n    text = u('あるBさんとCさんがーで〜で-ーだった。   やばい   。＆＊（）＆％。\\u3000\\u3000プログラミング\\u3000Cは難しい。でもLanguage C＋＋はそんなに難しくない。')\n    res = normalize_text(text)\n    print(res)\n    print([res])", "buggy_source_code": "def test():\n    text = 'あるBさんとCさんがーで〜で-ーだった。   やばい   。＆＊（）＆％。\\u3000\\u3000プログラミング\\u3000Cは難しい。でもLanguage C＋＋はそんなに難しくない。'\n    res = normalize_text(text)\n    print(res)\n    print([res])", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, snr_db=30.0, sps=1):\n    self.snr_db = snr_db\n    self.sps = sps", "buggy_source_code": "def __init__(self, snr_db=30.0):\n    self.snr_db = snr_db", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef __build_uri(cls, uri):\n    return uri + '/media/'", "buggy_source_code": "@staticmethod\ndef __build_uri(uri):\n    return uri + '/media/'", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def notify_authors(self, request):\n    recipients = []\n    recipients += self.author.email\n    self.send_email_notification(request, recipients)", "buggy_source_code": "def notify_authors(self, request):\n    recipients = [self.author.email]\n    self.send_email_notification(request, recipients)", "edit_actions": ["update-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ZBarcode_Version():\n    if ZBarcode_ValidID(BARCODE_DOTCODE) == 1:\n        return 20600\n    return 0", "buggy_source_code": "def ZBarcode_Version():\n    if ZBarcode_ValidID(115) == 1:\n        return 20600\n    return 0", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@register.inclusion_tag('searchbar.html')\ndef searchbar(view_name):\n    print('**************', view_name)\n    return {'view_name': view_name}", "buggy_source_code": "@register.inclusion_tag('searchbar.html')\ndef searchbar(view_name):\n    return {'view_name': view_name}", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clone(self):\n    return DeviceServer(self._device_def, self._id_to_host, self._id_to_port, exit_event=self.exit_event, count=self.count)", "buggy_source_code": "def clone(self):\n    return DeviceServer(self._device_def, self._id_to_host, self._id_to_port, exit_event=self.exit_event)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef status_string(bot, trainer_dict):\n    status_dict = Raid.status_dict(trainer_dict)\n    status_str = f\"{bot.config.emoji['maybe']}: {status_dict['maybe']} | \"\n    status_str += f\"{bot.config.emoji['coming']}: {status_dict['coming']} | \"\n    status_str += f\"{bot.get_emoji(self.bot.config.emoji['here'])}: {status_dict['here']}\"\n    return status_str", "buggy_source_code": "@staticmethod\ndef status_string(bot, trainer_dict):\n    status_dict = Raid.status_dict(trainer_dict)\n    status_str = f\"{bot.config.emoji['maybe']}: {status_dict['maybe']} | \"\n    status_str += f\"{bot.config.emoji['coming']}: {status_dict['coming']} | \"\n    status_str += f\"{bot.get_emoji(bot.config.emoji['here'])}: {status_dict['here']}\"\n    return status_str", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def _parse_div(self, duration_cell, comment_cell):\n    hours = duration_cell[0].value.strip()\n    comment = comment_cell[0].value.strip()\n    return (hours, comment)", "buggy_source_code": "def _parse_div(self, duration_cell, comment_cell):\n    hours = self._parse_hours(duration_cell[0].value)\n    comment = comment_cell[0].value.strip()\n    return (hours, comment)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@known_fail_if(not srfit)\ndef test_fq_against_srfit():\n    for value in test_data:\n        yield (check_fq_against_srfit, value)", "buggy_source_code": "def test_fq_against_srfit():\n    for value in test_data:\n        yield (check_fq_against_srfit, value)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.socket_state = WRITE\n    self.output_buffer = b''\n    self.buffer_in = b''", "buggy_source_code": "def __init__(self):\n    self.output_buffer = b''\n    self.buffer_in = b''", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef has_loop(self):\n    if self._has_loop is None:\n        self._has_loop = len(self.relevant_labels) != len(set(self.relevant_labels))\n    return self._has_loop", "buggy_source_code": "@property\ndef has_loop(self):\n    if self._has_loop is None:\n        self._has_loop = self.graph.has_loop()\n    return self._has_loop", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef _handle_unexpected_queue_error(verbose, identifier):\n    if verbose > 0:\n        print(\"{}: unexpected Error, I guess the server went down, can't do anything, terminate now!\".format(identifier))\n    if verbose > 1:\n        traceback.print_exc()", "buggy_source_code": "@staticmethod\ndef _handle_unexpected_queue_error(verbose, identifier):\n    print(\"{}: unexpected fatal Error, I guess the server went down, can't do anything, terminate now!\".format(identifier))\n    if verbose > 0:\n        traceback.print_exc()", "edit_actions": ["move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return \"Database(dba=%s, connection_string='%s')\" % (self.dba.__module__, self.connection_string)", "buggy_source_code": "def __repr__(self):\n    return \"Database(dba=%s, connection_string='%s')\" % (self.dba, self.connection_string)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def mail(self, mail_id):\n    import pdb\n    pdb.set_trace()\n    return self.mailboxes.mail(mail_id)", "buggy_source_code": "def mail(self, mail_id):\n    return self.mailboxes.mail(mail_id)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.state = {}\n    self.toc = TOC()\n    self.file_name = ''", "buggy_source_code": "def __init__(self):\n    self.state = {}\n    self.toc = []\n    self.file_name = ''", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _csrf_filter(self, middleware):\n    return [x for x in middleware if x.im_class not in (CsrfViewMiddleware, DebugToolbarMiddleware)]", "buggy_source_code": "def _csrf_filter(self, middleware):\n    return [x for x in middleware if x.im_class not in (CsrfViewMiddleware,)]", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def _flush_stdouterr():\n    try:\n        sys.stdout.flush()\n        sys.stderr.flush()\n    except IOError:\n        return", "buggy_source_code": "def _flush_stdouterr():\n    for obj in (sys.stdout, sys.stderr):\n        try:\n            obj.flush()\n        except IOError:\n            continue", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def do_GET(self):\n    logging.info('Requested resource: %s' % self.path)\n    logging.info(self.server.logya.refresh_resource(self.path))\n    SimpleHTTPRequestHandler.do_GET(self)", "buggy_source_code": "def do_GET(self):\n    logging.info('Requested resource: %s' % self.path)\n    self.server.logya.refresh_resource(self.path)\n    SimpleHTTPRequestHandler.do_GET(self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def message(msg, fcolor='green', bcolor='on black'):\n    print(colored(msg, fcolor, bcolor), file=sys.stderr)", "buggy_source_code": "def message(msg, fcolor='green', bcolor=None):\n    cprint(msg, fcolor, bcolor, file=sys.stderr)", "edit_actions": ["update-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _remove_listeners(self, image_lists):\n    print(image_lists)\n    print(self.listeners)\n    for image_list in image_lists:\n        listener = self.listeners.pop(image_list)\n        listener.remove()", "buggy_source_code": "def _remove_listeners(self, image_lists):\n    for image_list in image_lists:\n        listener = self.listeners.pop(image_list)\n        listener.remove()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _pushChars(self, *chars):\n    sys.stdin.write(''.join(map(chr, chars)).encode())\n    sys.stdin.seek(0)", "buggy_source_code": "def _pushChars(self, *chars):\n    sys.stdin.write(''.join(map(chr, chars)))\n    sys.stdin.seek(0)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_part_ids(self):\n    return [n.id for n in self.nodes()]", "buggy_source_code": "def get_part_ids(self):\n    return [n for n in self.nodes()]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main(self):\n    self.check_scores()\n    gobject.timeout_add(PING_FREQUENCY * 2000, self.check_scores)\n    self.main()", "buggy_source_code": "def main(self):\n    self.set_timeout()\n    gtk.main()", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_value_from_dist(dist_tuple):\n    _validate_distribution(dist_tuple)\n    return SUPPORTED_DIST[dist_tuple[0], dist_tuple[1:]]", "buggy_source_code": "def _get_value_from_dist(dist_tuple):\n    _validate_distribution(dist_tuple)\n    return SUPPORTED_DIST[dist_tuple[0]](dist_tuple[1:])", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_vpn_manual(self):\n    self.manager.vpn_manual(1234, True)\n    self.assert_called_with('SoftLayer_User_Customer', 'editObject', identifier=1234)", "buggy_source_code": "def test_vpn_manual(self):\n    user_id = 1234\n    self.manager.vpn_manual(user_id, True)\n    self.assert_called_with('SoftLayer_User_Customer', 'editObject', identifier=user_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return '%s (%s): %s / %s' % (self.match.venue, self.match.matchday, self.visitors, self.capacity)", "buggy_source_code": "def __str__(self):\n    return '%s (%s)' % (self.match.venue, self.match.matchday)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _assert_mandatory_inputs_set(self, workflow):\n    self.assert_inputs_set(workflow, {'BIDSDatasource': ['subject_data'], 'ConfoundDiscoverer': ['inputnode.fmri_file', 'inputnode.movpar_file', 'inputnode.t1_tpms', 'inputnode.epi_mask']})", "buggy_source_code": "def _assert_mandatory_inputs_set(self, workflow):\n    self.assert_inputs_set(workflow, {'BIDSDatasource': ['subject_data']})", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/play_welcome_home_message', methods=['POST'])\ndef play_welcome_home_message():\n    message = get_welcome_home_message()\n    play_message.play_message(message)", "buggy_source_code": "def play_welcome_home_message():\n    message = get_welcome_home_message()\n    play_message.play_message(message)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/play_morning_message', methods=['POST'])\ndef play_morning_message():\n    message = get_morning_message()\n    play_message.play_message(message)", "buggy_source_code": "def play_morning_message():\n    message = get_morning_message()\n    play_message.play_message(message)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def close(self):\n    self.__connection_lock.acquire()\n    self.__connection.close()\n    self.__connection_lock.release()", "buggy_source_code": "def close(self):\n    with self.__connection_lock:\n        self.__connection.close()", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_position(self, degrees, time=None):\n    if time is not None:\n        return self._set_position(degrees)\n    else:\n        return self._set_position_slowly(degrees, time)", "buggy_source_code": "def set_position(self, degrees, time=None):\n    if time is None:\n        return self._set_position(degrees)\n    else:\n        return self._set_position_slowly(degrees, time)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@downmix_to_mono\n@frames_adapter\ndef process(self, frames, eod=False):\n    self.values.append(frames)\n    return (frames, eod)", "buggy_source_code": "def process(self, frames, eod=False):\n    self.values.append(frames)\n    return (frames, eod)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    super(Waveform, self).__init__()\n    self.input_blocksize = 2048\n    self.input_stepsize = self.input_blocksize / 2", "buggy_source_code": "def __init__(self):\n    super(Waveform, self).__init__()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef engine(self):\n    from invenio.websearch_external_collections_searcher import external_collections_dictionary\n    if self.name in external_collections_dictionary.has_key:\n        return external_collections_dictionary[self.name]", "buggy_source_code": "@property\ndef engine(self):\n    from invenio.websearch_external_collections_searcher import external_collections_dictionary\n    if self.name in external_collections_dictionary:\n        return external_collections_dictionary[self.name]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def load_session_file(self):\n    session = self.get_session_fname()\n    if self.projectfile and path.isfile(session):\n        vim.command('silent so %s' % str2vimfmt(session))", "buggy_source_code": "def load_session_file(self):\n    session = self.get_session_fname()\n    if self.projectfile and Path(session).is_file():\n        vim.command('silent so %s' % str2vimfmt(session))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_empty_cells(self):\n    np.set_printoptions(threshold=np.nan)\n    empty = self.test_grid.empty_cells\n    self.assertEqual(empty.shape, (291, 2))", "buggy_source_code": "def test_empty_cells(self):\n    empty = self.test_grid.empty_cells\n    self.assertEqual(empty.shape, (291, 2))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_ssh_missing_stime(self):\n    with self.assertRaises(ProbeSSH.SSHError):\n        timestamp = self.plugin.ssh.get_file_lastmodified_timestamp('/var/log/kern.log')", "buggy_source_code": "def test_ssh_missing_stime(self):\n    with self.assertRaises(ProbeSSH.SSHError):\n        self.plugin.ssh.get_file_lastmodified_timestamp('/var/log/kern.log')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rebuild(self):\n    self.delete_gui()\n    self.create_gui()\n    self.term_input.win = self.win_input\n    self.display_from_cache()", "buggy_source_code": "def rebuild(self):\n    self.delete_gui()\n    self.create_gui()\n    self.display_from_cache()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def short_string(self):\n    file_str = ''\n    if self.filename:\n        file_str = \" from '%s'\" % self.filename\n    return '<%s%s with %d elements>' % (self.__class__.__name__, file_str, len(self))", "buggy_source_code": "def short_string(self):\n    file_str = ''\n    return '<%s with %d elements>' % (self.__class__.__name__, len(self))", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef supported_features(self):\n    if self._mode == MODE_RGBW:\n        return SUPPORT_FLUX_LED_RGBW\n    elif self._mode == MODE_RGB:\n        return SUPPORT_FLUX_LED_RGB\n    return 0", "buggy_source_code": "@property\ndef supported_features(self):\n    return SUPPORT_FLUX_LED", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef brightness(self):\n    if self._mode == MODE_RGB:\n        return self._bulb.brightness\n    return None", "buggy_source_code": "@property\ndef brightness(self):\n    return self._bulb.brightness", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def log_warn(message, args):\n    get_logger(DEFAULT_LOGGER, log_creation=False).log(level=logging.WARNING, msg=message, args=args)", "buggy_source_code": "def log_warn(message, args):\n    get_logger(DEFAULT_LOGGER, log_creation=False).log(logging.WARNING, message, *args)", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_final(self, final):\n    self.final = final\n    self.trans_map = {}", "buggy_source_code": "def set_final(self, final):\n    self.final = final", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, drawCallable=None, wrapCallable=None):\n    _ = lambda *args: None\n    self._drawCallable = drawCallable or _\n    self._wrapCallable = wrapCallable or _", "buggy_source_code": "def __init__(self, drawCallable=None, wrapCallable=None):\n    self._drawCallable = drawCallable or _nullCallable\n    self._wrapCallable = wrapCallable or _nullCallable", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef course_id(self):\n    return '{0}-{1}'.format(self.name, self.course_info.version)", "buggy_source_code": "@property\ndef course_id(self):\n    return self.course_info.course_id", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set(self, value):\n    if type(value) not in self._valueTypes:\n        raise TypeError('invalid type for set')\n    self._value = value", "buggy_source_code": "def set(self, value):\n    raise NotImplementedError", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ping(self):\n    self.send('PING :{}'.format(int(time())).encode('utf-8'))", "buggy_source_code": "def ping(self):\n    self.send('PING :{}'.format(int(time())))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ShowHistory(self, container_id, show_empty_layers=False):\n    container_object = self.storage_object.GetContainer(container_id)\n    print(self.storage_object.GetHistory(container_object, show_empty_layers))", "buggy_source_code": "def ShowHistory(self, container_id, show_empty_layers=False):\n    container_object = self.GetContainer(container_id)\n    print(self.storage_object.GetHistory(container_object, show_empty_layers))", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def write_default_config():\n    default_config = {'bundles': [], 'specs_path': '~/dusty-specs', 'repo_overrides': {}}\n    save_config(default_config)", "buggy_source_code": "def write_default_config():\n    default_config = {'bundles': [], 'repo_overrides': {}}\n    save_config(default_config)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remove_close_callback(self, callback: CloseCallbackType, weak: bool=False) -> None:\n    self._done_callbacks.remove(callback, weak=weak)", "buggy_source_code": "def remove_close_callback(self, callback: CloseCallbackType) -> None:\n    self._done_callbacks.remove(callback)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@login_manager.user_loader\ndef load_user(identifier: str) -> User:\n    LOGGER.debug('Finding a user object for logins: %s', identifier)\n    return DatabaseHandler.get_user(int(identifier))", "buggy_source_code": "@login_manager.user_loader\ndef load_user(identifier: str) -> User:\n    return DatabaseHandler.get_user(int(identifier))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/support')\ndef support():\n    LOGGER.debug('/support route triggered')\n    return render_template('support.html')", "buggy_source_code": "@app.route('/support')\ndef support():\n    return render_template('support.html')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/account')\n@login_required\ndef account():\n    LOGGER.debug('/account route triggered')\n    return render_template('account.html')", "buggy_source_code": "@app.route('/account')\n@login_required\ndef account():\n    return render_template('account.html')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/privacy')\ndef privacy():\n    LOGGER.debug('/privacy route triggered')\n    return render_template('privacy.html')", "buggy_source_code": "@app.route('/privacy')\ndef privacy():\n    return render_template('privacy.html')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/security')\ndef security():\n    LOGGER.debug('/security route triggered')\n    return render_template('security.html')", "buggy_source_code": "@app.route('/security')\ndef security():\n    return render_template('security.html')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/login')\ndef login():\n    LOGGER.debug('/login route triggered')\n    return redirect(url_for('github_oauth'))", "buggy_source_code": "@app.route('/login')\ndef login():\n    return redirect(url_for('github_oauth'))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/payload', methods=['POST'])\ndef github_payload():\n    LOGGER.debug('/payload route triggered')\n    payload = request.get_json()\n    return", "buggy_source_code": "@app.route('/payload', methods=['POST'])\ndef github_payload():\n    payload = request.get_json()\n    return", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/logout')\n@login_required\ndef logout():\n    LOGGER.debug('/logout route triggered')\n    logout_user()\n    return redirect(url_for('index'))", "buggy_source_code": "@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('index'))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/terms')\ndef terms():\n    LOGGER.debug('/terms route triggered')\n    return render_template('terms.html')", "buggy_source_code": "@app.route('/terms')\ndef terms():\n    return render_template('terms.html')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_Fail_NonGlobalScope(self):\n    from tempvars import TempVars\n    with self.assertRaises(RuntimeError):\n        with TempVars(names=['abcd']) as tv:\n            pass", "buggy_source_code": "def test_Fail_NonGlobalScope(self):\n    from tempvars import TempVars\n    with self.assertRaises(RuntimeError):\n        with TempVars(names=['abcd']):\n            pass", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def float(self, number):\n    number = number.replace('D', 'E')\n    return float(number)", "buggy_source_code": "def float(self, number):\n    if list(set(number)) == ['*']:\n        return numpy.nan\n    return float(number.replace('D', 'E'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unknown(self, message):\n    del message\n    return Message(message.subject, 'unknown')", "buggy_source_code": "def unknown(self, message):\n    return Message(message.subject, 'unknown')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def children(self):\n    if self._ensureAllLoaded():\n        LOG.debug('Loaded because of call to children()')\n    return self._children", "buggy_source_code": "def children(self):\n    self._ensureAllLoaded()\n    return self._children", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def childAt(self, pos):\n    if self._ensureLoaded(pos):\n        LOG.debug('Loaded child at %d because of call to childAt()' % pos)\n    return self._children[pos]", "buggy_source_code": "def childAt(self, pos):\n    self._ensureLoaded(pos)\n    return self._children[pos]", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef stb(self):\n    return self.visalib.read_stb(self.session)", "buggy_source_code": "@property\ndef stb(self):\n    return self.read_stb()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dist(start, finish):\n    return abs(finish.x - start.x) + abs(finish.y - start.y)", "buggy_source_code": "def dist(start, finish):\n    return abs(finish[0] - start[0]) + abs(finish[1] - start[1])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create(self):\n    Dict_CellPart_DFrame_pred = self.FeaturesPop_dict_DFrame()\n    self.FeaturesPop_pairplots(dict_pred_CellPart_df=Dict_CellPart_DFrame_pred)\n    self.FeaturesPop_linreg_plots(dict_pred_CellPart_df=Dict_CellPart_DFrame_pred)\n    self.FeaturesPop_PairtGrid_plots(dict_pred_CellPart_df=Dict_CellPart_DFrame_pred)\n    return self.filepath_list", "buggy_source_code": "def create(self):\n    Dict_CellPart_DFrame_pred = self.FeaturesPop_dict_DFrame()\n    self.FeaturesPop_pairplots(dict_pred_CellPart_df=Dict_CellPart_DFrame_pred)\n    self.FeaturesPop_linreg_plots(dict_pred_CellPart_df=Dict_CellPart_DFrame_pred)\n    return self.filepath_list", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_session_id(self, new=False):\n    if not self.session_id or new:\n        self.network._debug('Doing a scrobbling handshake')\n        self._do_handshake()\n    return self.session_id", "buggy_source_code": "def _get_session_id(self, new=False):\n    if not self.session_id or new:\n        self._do_handshake()\n    return self.session_id", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def join_all(self):\n    self.compress_threads.join_all()\n    self.upload_threads.join_all()\n    assert not self.in_transit", "buggy_source_code": "def join_all(self):\n    self.compress_threads.join_all()\n    self.upload_threads.join_all()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main():\n    config = common.read_config(None)\n    metadata.read_metadata(xref=True)\n    metadata.read_srclibs()", "buggy_source_code": "def main():\n    common.read_config(None)\n    metadata.read_metadata(xref=True)\n    metadata.read_srclibs()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def bug_type(bug):\n    pattern = '\\\\d{7,8}'\n    print(locals())\n    regex = re.compile(pattern)\n    if regex.match(bug):\n        return bug\n    raise WrongBugFormatError(bug)", "buggy_source_code": "def bug_type(bug):\n    pattern = '\\\\d{7,8}'\n    regex = re.compile(pattern)\n    if regex.match(bug):\n        return bug\n    raise WrongBugFormatError(bug)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def button_handler(pin):\n    global status\n    if status == 'recording':\n        stop_recording()\n        return\n    elif status == 'idle':\n        start_recording()\n        return\n    else:\n        return", "buggy_source_code": "def button_handler(pin):\n    global status\n    if status == 'recording':\n        stop_recording()\n    elif status == 'idle':\n        start_recording()\n    else:\n        pass", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def delete_column(self, table_name, name, field):\n    raise NotImplementedError('SQLite does not support deleting columns.')", "buggy_source_code": "def delete_column(self, table_name, name):\n    raise NotImplementedError('SQLite does not support deleting columns.')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef accounts(self):\n    if self.is_opensource_api():\n        return RestfulModelCollection(APIAccount, self)\n    else:\n        return RestfulModelCollection(Account, self, self.app_id)", "buggy_source_code": "@property\ndef accounts(self):\n    if self.is_opensource_api():\n        return RestfulModelCollection(APIAccount, self)\n    else:\n        return RestfulModelCollection(Account, self)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pyqtSlot()\ndef get_current_image(self, image):\n    print('bla')\n    print(str(image))\n    self.current_image_original = image\n    self.resize_default()", "buggy_source_code": "@pyqtSlot()\ndef get_current_image(self, image):\n    self.current_image_original = image\n    self.resize_default()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, dist_function: Callable, coord_system: CoordSystem, pwmatrix: PwMatrix):\n    self.coord_system = coord_system\n    self.dist = Distance(dist_function, PwMatrix.matrix)", "buggy_source_code": "def __init__(self, dist_function: Callable, coord_system: CoordSystem, pwmatrix: PwMatrix):\n    self.coord_system = coord_system\n    self.dist = Distance(dist_function, pwmatrix)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def show(self):\n    self.update_geometry()\n    super(Screenkey, self).show()", "buggy_source_code": "def show(self):\n    super(Screenkey, self).show()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef get_global_userinfo(self, identity):\n    return editor_global_userinfo(identity['username'], identity['id'], True)", "buggy_source_code": "def get_global_userinfo(self, identity):\n    return editor_global_userinfo(identity['username'], identity['sub'], True)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_container_type(self, image, resource_profile):\n    if None == JBoxUserV2.TABLE:\n        return None\n    self.item['image'] = image\n    self.item['resource_profile'] = resource_profile", "buggy_source_code": "def set_container_type(self, image, resource_profile):\n    if None == JBoxUserV2.TABLE:\n        return\n    self.item['image'] = image\n    self.item['resource_profile'] = resource_profile", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def _publish_zeppelin_data(html, js):\n    print('%html ' + html)\n    print('%html ' + '<script type=\"text/javascript\">' + js + '</script>')", "buggy_source_code": "def _publish_zeppelin_data(html):\n    print('%html ' + html)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def display_configure():\n    from .configuration import generate_configurations\n    print(generate_configurations(save=True))\n    assert 1 == 0", "buggy_source_code": "def display_configure():\n    from .configuration import generate_configurations\n    print(generate_configurations(save=True))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task\ndef update(ctx):\n    update_assets()\n    update_product_details()\n    update_locales()\n    database()", "buggy_source_code": "@task\ndef update(ctx):\n    update_assets()\n    update_locales()\n    database()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def keyCancel(self):\n    if self.state == 99:\n        self.setupClear()\n        self.close(False)", "buggy_source_code": "def keyCancel(self):\n    self.abort = True", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _state_invalid_counted_balls(self, balls):\n    if balls != -999:\n        self.balls = balls\n        return self._switch_state('idle')", "buggy_source_code": "def _state_invalid_counted_balls(self, balls):\n    self.balls = balls\n    self.available_balls = balls\n    return self._switch_state('idle')", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _state_invalid_start(self):\n    if self.config['ball_switches']:\n        self.balls = -999\n    else:\n        self.balls = 0\n    return self._count_balls()", "buggy_source_code": "def _state_invalid_start(self):\n    return self._count_balls()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tag_log(logfile, status, path):\n    if logfile:\n        (print >> logfile, status, os.path.dirname(path))", "buggy_source_code": "def tag_log(logfile, status, path):\n    if logfile:\n        (print >> logfile, '%s %s' % (status, path))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def execute(self, application):\n    __import__('pdb').set_trace()\n    application.handlers.extend(ADMIN_HANDLERS)\n    application.settings['installed_apps'] += 'workin.exts.admin'", "buggy_source_code": "def execute(self, application):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def apply_transformation(self):\n    glLoadIdentity()\n    glTranslatef(self._x, self._y, -self._dist)\n    if self._rot is not None:\n        glMultMatrixf(self._rot)", "buggy_source_code": "def apply_transformation(self):\n    glLoadIdentity()\n    glTranslatef(0, 0, -self._dist)\n    if self._rot is not None:\n        glMultMatrixf(self._rot)", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def iter_annotations(self):\n    for i in self:\n        import pydb\n        pydb.set_trace()\n        if i.ADVENE_TYPE == ANNOTATION:\n            yield i", "buggy_source_code": "def iter_annotations(self):\n    for i in self:\n        if i.ADVENE_TYPE == ANNOTATION:\n            yield i", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return self.content_type.name + ': ' + str(self.content_object)", "buggy_source_code": "def __unicode__(self):\n    return unicode(self.content_type.name + ': ' + self.content_object)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, ret):\n    try:\n        self.ret = iter(ret)\n    except TypeError:\n        self.ret = iter(itertools.repeat(ret))", "buggy_source_code": "def __init__(self, ret):\n    try:\n        self.ret = iter(ret)\n    except TypeError:\n        self.ret = iter((ret,))", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reset_providers(self):\n    self.elements = {}\n    for provider in self.get_providers():\n        self.elements[provider.index] = provider()\n    self.setup_elements()", "buggy_source_code": "def reset_providers(self):\n    self.elements = {}\n    for provider in self.get_providers():\n        self.elements[provider.index] = provider()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_torrent_item(self, row_id):\n    data_item = self.data_item.data_items[row_id]\n    if u'infohash' in data_item or (u'type' in data_item and data_item[u'type'] == u'torrent'):\n        return True\n    return False", "buggy_source_code": "def is_torrent_item(self, row_id):\n    data_item = self.data_items[row_id]\n    if u'infohash' in data_item or (u'type' in data_item and data_item[u'type'] == u'torrent'):\n        return True\n    return False", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def is_channel_item(self, row_id):\n    data_item = self.data_item.data_items[row_id]\n    if u'infohash' in data_item or (u'type' in data_item and data_item[u'type'] == u'torrent'):\n        return True\n    return False", "buggy_source_code": "def is_channel_item(self, row_id):\n    data_item = self.data_items[row_id]\n    if u'infohash' in data_item or (u'type' in data_item and data_item[u'type'] == u'torrent'):\n        return True\n    return False", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.bus = can.Bus(bustype='virtual', channel='testy')", "buggy_source_code": "def setUp(self):\n    self.bus = Bus(bustype='virtual', channel='testy')", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef rebuig(self):\n    data = []\n    for i in self.obj.RechazoATRDistribuidoras.Rechazo:\n        data.append(C1.Rebuig(i))\n    return data", "buggy_source_code": "@property\ndef rebuig(self):\n    data = []\n    for i in self.obj.RechazoATRDistribuidoras.Rechazo:\n        data.append(Rebuig(i))\n    return data", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.errorhandler(404)\ndef page_not_found(e):\n    return (render_template('404.html'), 404)", "buggy_source_code": "@app.errorhandler(404)\ndef page_not_found(e):\n    return 'Page Not Found'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.errorhandler(500)\ndef server_error(e):\n    return (render_template('500.html'), 500)", "buggy_source_code": "@app.errorhandler(500)\ndef server_error(e):\n    return 'Internal Server Error'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_sources(self):\n    return [_to_hex(addr) for addr in self.reader.sources]", "buggy_source_code": "def get_sources(self):\n    return self.reader.sources", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture()\ndef set_store(host):\n    command = 'pbm config --file=/etc/pbm-agent-storage.conf --mongodb-uri=mongodb://localhost:27017/?replicaSet=rs1'\n    result = host.run(command)\n    print(result.stdout)\n    print(result.stderr)\n    return result", "buggy_source_code": "@pytest.fixture()\ndef set_store(host):\n    command = 'pbm config --file=/etc/pbm-agent-storage.conf --mongodb-uri=mongodb://localhost:27017/?replicaSet=rs1'\n    result = host.run(command)\n    return result", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def addAttribute(self, attribute, value):\n    if attribute not in self._attributes:\n        self._attributes[attribute] = value.replace('\"', '')", "buggy_source_code": "def addAttribute(self, attribute, value):\n    if attribute not in self._attributes:\n        self._attributes[attribute] = value", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def read(filename):\n    try:\n        return Image.read(filename)\n    except SanperaError:\n        web.ctx.log_exc(level=logging.DEBUG)\n        raise WeasylError('imageDecodeError')", "buggy_source_code": "def read(filename):\n    try:\n        return Image.read(filename)\n    except SanperaError:\n        log_exc(level=logging.DEBUG)\n        raise WeasylError('imageDecodeError')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def from_string(filedata):\n    try:\n        return Image.from_buffer(filedata)\n    except SanperaError:\n        web.ctx.log_exc(level=logging.DEBUG)\n        raise WeasylError('imageDecodeError')", "buggy_source_code": "def from_string(filedata):\n    try:\n        return Image.from_buffer(filedata)\n    except SanperaError:\n        log_exc(level=logging.DEBUG)\n        raise WeasylError('imageDecodeError')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test0005views(self):\n    self.assertRaises(Exception, test_view('stock_supply'))", "buggy_source_code": "def test0005views(self):\n    test_view('stock_supply')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getstate__(self):\n    state = self.__dict__.copy()\n    state.pop('strategy', None)\n    state.pop('cb_on_bar', None)\n    return state", "buggy_source_code": "def __getstate__(self):\n    return super().__getstate__()", "edit_actions": ["insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cleanup(platform):\n    print_collapsed_group('Cleanup')\n    if os.path.exists('WORKSPACE'):\n        execute_command(['bazel', 'clean', '--expunge'])", "buggy_source_code": "def cleanup():\n    print_collapsed_group('Cleanup')\n    if os.path.exists('WORKSPACE'):\n        execute_command(['bazel', 'clean', '--expunge'])", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.level = (logging.INFO,)\n    self.stream = (sys.stdout,)\n    self.format = ('%(levelname)s:%(message)s',)\n    self.filemode = 'w'", "buggy_source_code": "def __init__(self):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef title(self):\n    return self.header or _(u'portlet_animate_static', default=u'Animate Static Portlet')", "buggy_source_code": "@property\ndef title(self):\n    return self.header or _(u'Animation Portlet')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def index(request):\n    return backbone_app(request, get_account(request))", "buggy_source_code": "def index(request):\n    return backbone_app(request)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, game):\n    self.size = game.board.size\n    self.map = game.board.map\n    init()", "buggy_source_code": "def __init__(self, game):\n    self.size = game.board.size\n    self.map = game.board.map", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, lang, nworkers):\n    self.l = lang\n    self.w = nworkers", "buggy_source_code": "def __init__(self, lang):\n    self.l = lang", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def load_test(lang, nworkers, nreqs):\n    with Worker(lang, nworkers):\n        send_batch(nreqs)", "buggy_source_code": "def load_test(lang, nreqs):\n    with Worker(lang):\n        send_batch(nreqs)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __enter__(self):\n    self.p = run_process(self.l, self.w)\n    time.sleep(3)\n    logger.info('Process ready {}'.format(self.p.pid))", "buggy_source_code": "def __enter__(self):\n    self.p = run_process(self.l)\n    time.sleep(3)\n    logger.info('Process ready {}'.format(self.p.pid))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reset(self):\n    return libcsound.csoundReset(self.cs)", "buggy_source_code": "def reset(self):\n    libcsound.csoundReset(self.cs)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def forward_gpu(self, inputs):\n    b = backend.from_chainerx(self.b)\n    gx = _relu_grad2_kernel(b, inputs[0])\n    return (gx,)", "buggy_source_code": "def forward_gpu(self, inputs):\n    gx = _relu_grad2_kernel(self.b, inputs[0])\n    return (gx,)", "edit_actions": ["update-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, b):\n    super(ReLUGrad2, self).__init__()\n    self.b = b.data", "buggy_source_code": "def __init__(self, b):\n    super(ReLUGrad2, self).__init__()\n    self.b = b", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _make_request(self, instrument, n):\n    response = requests.get(self._get_full_url(instrument, n), stream=True)\n    return response", "buggy_source_code": "def _make_request(self, instrument, n):\n    full_url = self._get_full_url(instrument, n)\n    self.logger.debug('Fetching %s', full_url)\n    return requests.get(full_url, stream=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _fake_redis_queue():\n    fq = Mock()\n    fq.fetch_job = Mock(return_value=None)\n    return fq", "buggy_source_code": "def _fake_redis_queue():\n    return Mock(fetch_job=Mock(return_value=None))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _fake_redis_job(cmd, args, timeout=60 * 30, result_ttl=-1, depends_on=None):\n    return type('FakeRedisJob', (object,), {'id': fake_pipeline_id})", "buggy_source_code": "def _fake_redis_job(cmd, args, timeout=60 * 30, result_ttl=-1, depends_on=None):\n    return Mock(id=fake_pipeline_id)", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_suffix(self, component):\n    return ''.join((utils.clean_raw_name(part).titled_no_underscore for part in reversed(component.split(os.path.sep))))", "buggy_source_code": "def _get_suffix(self, component):\n    return ''.join((utils.clean_raw_name(part).titled_no_underscore for part in reversed(component.split(os.sep))))", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef _out(repo):\n    path = os.path.join(os.getcwd(), 'out', repo, 'main.tex')\n    return static_file(path)", "buggy_source_code": "@staticmethod\ndef _out(repo):\n    path = os.path.join(os.getcwd(), 'out', repo)\n    return static_file('main.tex', path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def initialize(self):\n    self.dbconnection = (yield self.application.dbconnection)", "buggy_source_code": "def initialize(self):\n    self.dbconnection = self.application.dbconnection", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@register.filter\ndef get_status(value):\n    pprint.pprint(STATUS_CHOICES)\n    for p in STATUS_CHOICES:\n        if p[0] == value:\n            return p[1]\n    return 'Unknown'", "buggy_source_code": "@register.filter\ndef get_status(value):\n    for p in STATUS_CHOICES:\n        if p[0] == value:\n            return p[1]\n    return 'Unknown'", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send(self, obj):\n    self.zsocket.send_pyobj(obj)\n    if self.socket_type in (zmq.REQ, zmq.REP):\n        return self.zsocket.recv_pyobj()", "buggy_source_code": "def send(self, obj):\n    self.zsocket.send_pyobj(obj)\n    if self.socket_type == zmq.REQ:\n        return self.zsocket.recv_pyobj()", "edit_actions": ["update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_multichapter_multiverse_ref(self):\n    self.assertEqual(f('John 2:2-2:7'), 'John 2:2-2:7')\n    self.assertEqual(f('John 2:3-4:5'), 'John 2:3-4:5')", "buggy_source_code": "def test_multichapter_multiverse_ref(self):\n    self.assertEqual(f('John 2:3-4:5'), 'John 2:3-4:5')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def close(self):\n    try:\n        self.connection.close()\n        self.connection = None\n    except Exception:\n        if not self.fail_silently:\n            raise", "buggy_source_code": "def close(self):\n    self.connection = None", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate_executables(configuration, job, errors):\n    if skip_validation(configuration, job, 'EXECUTABLES'):\n        return True\n    return validate_files(configuration, job, errors, 'EXECUTABLES')", "buggy_source_code": "def validate_executables(configuration, job, errors):\n    return validate_files(configuration, job, errors, 'EXECUTABLES')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate_verifyfiles(configuration, job, errors):\n    if skip_validation(configuration, job, 'VERIFYFILES'):\n        return True\n    return validate_files(configuration, job, errors, 'VERIFYFILES', True)", "buggy_source_code": "def validate_verifyfiles(configuration, job, errors):\n    return validate_files(configuration, job, errors, 'VERIFYFILES', True)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate_inputfiles(configuration, job, errors):\n    if skip_validation(configuration, job, 'INPUTFILES'):\n        return True\n    return validate_files(configuration, job, errors, 'INPUTFILES')", "buggy_source_code": "def validate_inputfiles(configuration, job, errors):\n    return validate_files(configuration, job, errors, 'INPUTFILES')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@only_for_dart_files\ndef on_deactivated(self, view):\n    del editor_context.search_id\n    if not is_view_dart_script(view):\n        return", "buggy_source_code": "@only_for_dart_files\ndef on_deactivated(self, view):\n    if not is_view_dart_script(view):\n        return", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def showerrors(errorValue=False):\n    global showErrors\n    if type(errorValue) != bool:\n        showErrors = False\n    showErrors = errorValue", "buggy_source_code": "def showerrors(errorValue=False):\n    global showErrors\n    showErrors = _checkBool(errorValue)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_enabled(self):\n    return self._status == '1'", "buggy_source_code": "def is_enabled(self):\n    return bool(self._status)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_all_fields(content):\n    return set(reduce(add, (section.get_question_ids() for section in content)))", "buggy_source_code": "def get_all_fields(content):\n    return reduce(add, (section.get_question_ids() for section in content))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_cdf(self, N=None, points=None):\n    pass", "buggy_source_code": "def get_cdf(self, points=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def read_response(self):\n    log.debug('AioConnection: Reading response')\n    response = await self._read_response()\n    log.debug('AioConnection: Received response: %s', response)\n    return response", "buggy_source_code": "async def read_response(self):\n    response = await self._read_response()\n    return response", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_error_invalid_value(client):\n    response = client.get('/widgets?size_min=-1')\n    assert_response(response, 400, [{'code': 'invalid_filter', 'detail': 'Must be at least 1.', 'source': {'parameter': 'size_min'}}])", "buggy_source_code": "def test_error_invalid_value(client):\n    response = client.get('/widgets?size_min=-1')\n    assert_response(response, 400, [{'code': 'invalid_filter', 'source': {'parameter': 'size_min'}}])", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def deploy():\n    execute(checkout)\n    execute(links)\n    execute(dependencies)\n    execute(create_indexes)\n    execute(make_current)\n    execute(set_crontab)\n    execute(reset_cache)\n    execute(restart)", "buggy_source_code": "def deploy():\n    execute(checkout)\n    execute(links)\n    execute(dependencies)\n    execute(create_indexes)\n    execute(make_current)\n    execute(set_crontab)\n    execute(restart)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def upgrade():\n    conn = op.get_bind()\n    conn.execute('CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";')\n    conn.execute('\\n        INSERT INTO testcase_rollup (id, name, hash, repository_id, date, total_runs, total_duration, runs_passed, runs_failed)\\n    (\\n        SELECT uuid_generate_v1(),\\n            t.name,\\n            t.hash,\\n            t.repository_id,\\n            j.date_finished::date as job_date,\\n            count(*), sum(duration),\\n            count(t.result) FILTER (WHERE t.result = 2) AS runs_failed,\\n            count(t.result) FILTER (WHERE t.result = 1) AS runs_passed\\n        FROM testcase t\\n        JOIN job j\\n        ON j.id = t.job_id\\n        GROUP BY t.name, t.hash, t.repository_id, job_date\\n    )\\n    ON CONFLICT (repository_id, hash, date) DO UPDATE\\n    SET total_runs = EXCLUDED.total_runs,\\n        total_duration = EXCLUDED.total_duration,\\n        runs_passed = EXCLUDED.runs_passed,\\n        runs_failed = EXCLUDED.runs_failed;\\n    ')", "buggy_source_code": "def upgrade():\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, initial=None):\n\n    def _on_update(d):\n        d.modified = True\n    CallbackDict.__init__(self, initial, _on_update)\n    self.modified = True if initial else False", "buggy_source_code": "def __init__(self, initial=None):\n\n    def _on_update(d):\n        d.modified = True\n    CallbackDict.__init__(self, initial, _on_update)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_tableau_trusted_url(client_ip):\n    access_token = get_tableau_access_token(const.TABLEAU_USERNAME, client_ip)\n    url = '{tableau_root}trusted/{access_token}/#/views/'.format(tableau_root=const.TABLEAU_ROOT, access_token=access_token)\n    return url", "buggy_source_code": "def get_tableau_trusted_url(client_ip):\n    url = '{tableau_root}/#/views/'.format(tableau_root=const.TABLEAU_ROOT)\n    return url", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_nodes_from(self, nodes, **attr):\n    super().add_nodes_from([(node, 0) for node in nodes], **attr)", "buggy_source_code": "def add_nodes_from(self, nodes, **attr):\n    for node in nodes:\n        self.add_node(node)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clear(self):\n    self.list = []\n    self.hash = {}", "buggy_source_code": "def clear(self):\n    self.list[:] = []\n    self.hash.clear()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def inc_pc(self):\n    self.pc = self.pc + 1 & 65535", "buggy_source_code": "def inc_pc(self):\n    self.pc = self.pc + 1", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def jp_reg16addr(self, reg16):\n\n    def jp():\n        self.logger.debug('jp {}'.format(reg16))\n        self.set_pc(self.get_reg16(reg16))\n    return jp", "buggy_source_code": "def jp_reg16addr(self, reg16):\n\n    def jp():\n        self.logger.debug('jp %s', reg16)\n        self.pc = self.get_reg16(reg16)\n    return jp", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ld_spimm8toregHL(self):\n    imm8 = self.fetch()\n    self.logger.debug('ld hl, sp+imm8'.format(hex(imm8)))\n    self.set_reg16('hl', self.sp + imm8)", "buggy_source_code": "def ld_spimm8toregHL(self):\n    imm8 = self.fetch()\n    self.logger.debug('ld hl, sp+%#x', imm8)\n    self.set_reg16('hl', self.sp + imm8)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ks_default_to_str_test(self, _MockMemoryBounds):\n    ks_addon_data = new_ks_addon_data()\n    kdump_check_ks(self, ks_addon_data, ['--disable'])", "buggy_source_code": "def ks_default_to_str_test(self):\n    ks_addon_data = new_ks_addon_data()\n    kdump_check_ks(self, ks_addon_data, ['--disable'])", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    if self.function_signature and other.function_signature:\n        return self.identity == other.identity\n    else:\n        return self.function_name == other.function_name", "buggy_source_code": "def __eq__(self, other):\n    return self.identity == other.identity", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef tiers(self):\n    return list(self._data.values())", "buggy_source_code": "@property\ndef tiers(self):\n    return self._list", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef igts(self):\n    return list(self._data.values())", "buggy_source_code": "@property\ndef igts(self):\n    return self._list", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef items(self):\n    return list(self._data.values())", "buggy_source_code": "@property\ndef items(self):\n    return self._list", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@contextlib.contextmanager\ndef open(self, path, **kwargs):\n    with open_dataset(path, autoclose=self.autoclose, engine='pynio', **kwargs) as ds:\n        yield ds", "buggy_source_code": "@contextlib.contextmanager\ndef open(self, path, **kwargs):\n    with open_dataset(path, autoclose=self.autoclose, **kwargs) as ds:\n        yield ds", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def disable(self):\n    self.label.configure(state=tk.DISABLED, text='')\n    self.entry.configure(state=tk.DISABLED)", "buggy_source_code": "def disable(self):\n    self.label.grid_forget()\n    self.entry.grid_forget()", "edit_actions": ["move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def char_write_cmd(self, handle, value):\n    cmd = 'char-write-cmd %s %s' % (handle, value)\n    self.con.sendline(cmd)\n    time.sleep(1)", "buggy_source_code": "def char_write_cmd(self, handle, value):\n    self.con.sendline('char-write-cmd %s %s' % (handle, value))\n    time.sleep(1)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def planck():\n    return HTML('\\n        <style>\\n            @import url(\"./dist/planck.css\");\\n            #planck-%(id)s{\\n                background-color: white;\\n            }\\n        </style>\\n        <div id=\"planck-%(id)s\" class=\"stretch\"></div>\\n        <script>\\n            require(\\n                [\\n                    \"./dist/bower_components/d3/d3.min.js\",\\n                    \"./dist/planck.js\"\\n                ],\\n                function(d3, Planck){\\n                    var planck = Planck(d3);\\n                    var wrapper = d3.select(\"#planck-%(id)s\")\\n                        .style({\\n                            \"background-color\": \"white\",\\n                            width: \"100%%\",\\n                            height: \"800px\",\\n                        })\\n                        .call(planck);\\n                    if(window.Reveal){\\n                        var _window = d3.select(window);\\n                        Reveal.addEventListener(\\n                            \"slidechanged\",\\n                            function(event){\\n                                $(window).resize();\\n                            }\\n                        );\\n                        .on(\"resize.planck-%(id)s\", function(){\\n                            wrapper.style({\\n                                width: window.innerWidth + \"px\",\\n                                height: window.innerHeight + \"px\"\\n                            })\\n                            planck.resize();\\n                        });\\n                    }\\n            });\\n        </script>\\n        ' % dict(id=str(random()).split('.')[1]))", "buggy_source_code": "def planck():\n    return explanation('planck')", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    from selenium_wrapper import SE\n    SE.refresh()\n    if self.filter_menu is not None:\n        self.filter_menu.remove()", "buggy_source_code": "def tearDown(self):\n    if self.filter_menu is not None:\n        self.filter_menu.remove()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    super(TestShellOptions, self).setUp()\n    (self.orig_env, os.environ) = (os.environ, {})", "buggy_source_code": "def setUp(self):\n    super(TestShellOptions, self).setUp()\n    self.useFixture(EnvFixture())", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    super(TestShellHelp, self).setUp()\n    (self.orig_env, os.environ) = (os.environ, {})", "buggy_source_code": "def setUp(self):\n    super(TestShellHelp, self).setUp()\n    self.useFixture(EnvFixture())", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def adversarial_loss(self, y_hat, y):\n    return F.binary_cross_entropy(y_hat, y.cuda())", "buggy_source_code": "def adversarial_loss(self, y_hat, y):\n    return F.binary_cross_entropy(y_hat, y)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main(hparams):\n    model = GAN(hparams)\n    trainer = pl.Trainer(distributed_backend='dp', gpus=2)\n    trainer.fit(model)", "buggy_source_code": "def main(hparams):\n    model = GAN(hparams)\n    trainer = pl.Trainer()\n    trainer.fit(model)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate(self):\n    self.calculate_total_planned_qty()\n    self.set_status(update=True)", "buggy_source_code": "def validate(self):\n    self.calculate_total_planned_qty()\n    self.set_status()", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def GetConsoleScreenBufferInfo(stream_id=STDOUT):\n    handle = handles[stream_id]\n    csbi = CONSOLE_SCREEN_BUFFER_INFO()\n    success = windll.kernel32.GetConsoleScreenBufferInfo(handle, byref(csbi))\n    return csbi", "buggy_source_code": "def GetConsoleScreenBufferInfo(stream_id=STDOUT):\n    handle = handles[stream_id]\n    csbi = CONSOLE_SCREEN_BUFFER_INFO()\n    success = _GetConsoleScreenBufferInfo(handle, byref(csbi))\n    return csbi", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def SetConsoleTextAttribute(stream_id, attrs):\n    handle = handles[stream_id]\n    return windll.kernel32.SetConsoleTextAttribute(handle, attrs)", "buggy_source_code": "def SetConsoleTextAttribute(stream_id, attrs):\n    handle = handles[stream_id]\n    return _SetConsoleTextAttribute(handle, attrs)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def format_comment(comment, usermap):\n    return COMMENT.format(body=comment['body'], user=format_user(comment['user'], usermap))", "buggy_source_code": "def format_comment(comment, usermap):\n    return COMMENT.format(**comment)", "edit_actions": ["move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def list_checker(val, list_in, mess_base):\n    if val in list_in:\n        return val\n    else:\n        raise (ValueError, '{0} property can only have values from the set of: {1}'.format(mess_base, str(list_in)))", "buggy_source_code": "def list_checker(val, list_in, mess_base):\n    if val in list_in:\n        return val\n    else:\n        raise ValueError('{0} property can only have values from the set of: {1}'.format(mess_base, str(list_in)))", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def collect_started(self, owner, num_oscillations):\n    dispatcher.send('collect_started')", "buggy_source_code": "def collect_started(self, owner, num_oscillations):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def step(self):\n    if self._started:\n        self.loop.run_until_complete(self.coro)\n    time.sleep(0.001)", "buggy_source_code": "def step(self):\n    if self._started:\n        self.loop.run_forever()\n    time.sleep(0.1)", "edit_actions": ["update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _process_headers(self, csv_reader):\n    self._data = dict([(e, {}) for e in csv_reader.next() if e not in ['Pollutant', 'Formula']])", "buggy_source_code": "def _process_headers(self, csv_reader):\n    self._headers = csv_reader.next()[2:]\n    self._data = dict([(e, {}) for e in self._headers])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def barrier(self):\n    if not self.is_mpi_running:\n        return\n    radia.UtiMPI('barrier')", "buggy_source_code": "def barrier(self):\n    self._uti_mpi('barrier')", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __exit__(self, t, value, traceback):\n    if not self.is_mpi_running:\n        return\n    radia.UtiMPI('off')", "buggy_source_code": "def __exit__(self, t, value, traceback):\n    self._uti_mpi('off')", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task()\ndef run_sphinx(ctx):\n    print('\\nRun Sphinx')\n    working_path = SPHINX_PATH\n    with ctx.cd(str(working_path)):\n        ctx.run('make-html')", "buggy_source_code": "@task\ndef run_sphinx(ctx):\n    print('\\nRun Sphinx')\n    working_path = SPHINX_PATH\n    with ctx.cd(str(working_path)):\n        ctx.run('make-html')", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@task()\ndef make_readme(ctx):\n    from setup_data import long_description\n    with open('README.rst', 'w') as fh:\n        fh.write(long_description)\n    ctx.run('rst2html5.py README.rst README.html')", "buggy_source_code": "@task\ndef make_readme(ctx):\n    from setup_data import long_description\n    with open('README.rst', 'w') as fh:\n        fh.write(long_description)\n    ctx.run('rst2html5.py README.rst README.html')", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def setup_redis():\n    sudo('apt-get install -y redis-server')\n    redis_conf = '%s/dep/redis/redis.conf' % LOCAL_ROOT_DIR\n    put(redis_conf, '/etc/redis/redis.conf', use_sudo=True)\n    sudo('update-rc.d redis-server defaults')\n    sudo('service redis-server start')", "buggy_source_code": "def setup_redis():\n    sudo('apt-get install -y redis-server')\n    put(env.redis_conf, '/etc/redis/redis.conf', use_sudo=True)\n    sudo('update-rc.d redis-server defaults')\n    sudo('service redis-server start')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getattr__(self, name):\n    if name not in self._data:\n        return None\n    else:\n        return self._data.attributes[name]", "buggy_source_code": "def __getattr__(self, name):\n    if name not in self._data:\n        return None\n    else:\n        return self._data[name]", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, ob, *args, **kwargs):\n    self.confirmed = EventLoop.confirmed()\n    self.safe = EventLoop.safe()\n    self.__subject__ = ob", "buggy_source_code": "def __init__(self, ob, *args, **kwargs):\n    self.confirmed = EventLoop.confirmed\n    self.safe = EventLoop.safe\n    self.__subject__ = ob", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def compute_model_size(model):\n    params = [K.count_params(p) for p in set(model.trainable_weights)]\n    return int(np.sum(params))", "buggy_source_code": "def compute_model_size(model):\n    params = [K.count_params(p) for p in model.trainable_weights]\n    return int(np.sum(params))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@notfound_view_config(renderer='springboard:templates/404.jinja2')\ndef notfound(self):\n    self.request.response.status = 404\n    return {}", "buggy_source_code": "@notfound_view_config(renderer='springboard:templates/404.jinja2')\ndef notfound(self):\n    self.request.response.status = 404\n    return self.context()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_no_results(self):\n    response = self.client.get('/api/v1/agents/?min_cpus=1234567890')\n    self.assertEqual(response.json, None)\n    self.assert_not_found(response)", "buggy_source_code": "def test_no_results(self):\n    response = self.client.get('/api/v1/agents/?min_cpus=1234567890')\n    self.assert_no_content(response)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, hass, station_id):\n    self._hass = hass\n    (self._zone_id, self._wmo_id) = station_id.split('.')\n    self.data = None\n    self._lastupdate = LAST_UPDATE", "buggy_source_code": "def __init__(self, hass, station_id):\n    self._hass = hass\n    (self._zone_id, self._wmo_id) = station_id.split('.')\n    self.data = None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def vsepr_build_correct_answer(geometry, atoms):\n    correct_answer = OrderedDict()\n    correct_answer['geometry'] = geometry\n    correct_answer['atoms'] = OrderedDict(sorted(atoms.items()))\n    return correct_answer", "buggy_source_code": "def vsepr_build_correct_answer(geometry, atoms):\n    return {'geometry': geometry, 'atoms': atoms}", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def vsepr_parse_user_answer(user_input):\n    d = OrderedDict(json.loads(user_input))\n    d['atoms'] = OrderedDict(sorted(d['atoms'].items()))\n    return d", "buggy_source_code": "def vsepr_parse_user_answer(user_input):\n    return json.loads(user_input)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@expectedFailureClang(9980907)\n@expectedFailureGcc(9980907)\n@python_api_test\n@dwarf_test\ndef test_with_dwarf_and_python_api(self):\n    self.buildDwarf()\n    self.static_variable_python()", "buggy_source_code": "@expectedFailureClang(9980907)\n@python_api_test\n@dwarf_test\ndef test_with_dwarf_and_python_api(self):\n    self.buildDwarf()\n    self.static_variable_python()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_html(url):\n    global soup\n    html = urllib.urlopen(url)\n    soup = soup(html)\n    print('Got the HTML!')", "buggy_source_code": "def get_html(url):\n    global soup\n    html = urllib.urlopen(url)\n    soup = soup(html)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def incrementValueType(self, device, name, new_value):\n    print('VT {0} {1} += {2}'.format(device, name, '+=', new_value))\n    sys.stdout.flush()", "buggy_source_code": "def incrementValueType(self, device, name, new_value):\n    print('VT {0} {1} += {2}'.format(device, name, new_value))\n    sys.stdout.flush()", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_char_from_db(int_id: int) -> Character:\n    return db.session.query(Character).filter(Character.id == int_id).first()", "buggy_source_code": "def get_char_from_db(int_id: int) -> Character:\n    return db.session.query(Character).get(int_id)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getValue(self):\n    try:\n        return self.text.encode('utf-8')\n    except UnicodeDecodeError:\n        print('Broken UTF8!')\n        return self.text", "buggy_source_code": "def getValue(self):\n    try:\n        return six.ensure_str(self.text)\n    except UnicodeDecodeError:\n        print('Broken UTF8!')\n        return self.text", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getText(self):\n    return self.text.encode('utf-8')", "buggy_source_code": "def getText(self):\n    return six.ensure_str(self.text)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getValue(self):\n    try:\n        return self.text.encode('utf-8')\n    except UnicodeDecodeError:\n        print('Broken UTF8!')\n        return self.text", "buggy_source_code": "def getValue(self):\n    try:\n        return six.ensure_str(self.text)\n    except UnicodeDecodeError:\n        print('Broken UTF8!')\n        return self.text", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    resp = {}\n    for attr in self.attrs:\n        resp[attr] = getattr(self, attr)\n    return json.dumps(resp)", "buggy_source_code": "def __str__(self):\n    return json.dumps(self.as_dict())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@abstractmethod\ndef addInPlace(self, value1, value2):\n    return", "buggy_source_code": "def addInPlace(self, value1, value2):\n    raise NotImplementedError", "edit_actions": ["move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@abstractmethod\ndef zero(self, value):\n    return", "buggy_source_code": "def zero(self, value):\n    raise NotImplementedError", "edit_actions": ["move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def notify_authors(self, request):\n    recipients = [self.author.email]\n    recipients = [x for x in recipients if x != 'marthaurion@gmail.com']\n    self.send_email_notification(request, recipients)", "buggy_source_code": "def notify_authors(self, request):\n    recipients = [self.author.email]\n    recipients = [x for x in recipients if x != 'marthaurion@gmail.com']\n    return recipients", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch_stderr\n@isolated_logging\ndef test_handler_found(self):\n    self.assertEqual(0, len(sys.stderr.getvalue()))", "buggy_source_code": "def test_handler_found(self):\n    script = 'if True:\\n            import logging\\n\\n            import grpc\\n        '\n    (out, err) = self._verifyScriptSucceeds(script)\n    self.assertEqual(0, len(err), 'unexpected output to stderr')", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setgain(self, gain):\n    raise NotImplementedError()", "buggy_source_code": "def setgain(self, gain):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def addRaise(self):\n    self.raiseValues.append((self.lastLineNum, None, self.nextOpInfo()[2]))", "buggy_source_code": "def addRaise(self):\n    self.raiseValues.append((self.lastLineNum, None, self.index))", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef chest_magical_index(self):\n    return 0", "buggy_source_code": "@property\ndef chest_magical_index(self):\n    return self.chests['cycle'].index('Magic')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def help_debug(self, no_print=None):\n    hlp = 'Provides access to some debugging commands.'\n    if no_print:\n        return hlp\n    print(hlp)", "buggy_source_code": "def help_debug(self):\n    print(Debug.__doc__)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _check_available():\n    if not _available:\n        warnings.warn('SciPy is not installed in your environment,', 'so the dataset cannot be loaded.Please install SciPy to load dataset.\\n\\n$ pip install scipy', RuntimeWarning)", "buggy_source_code": "def _check_available():\n    if not _available:\n        warnings.warn('SciPy is not installed in your environment,so the dataset cannot be loaded.Please install SciPy to load dataset.\\n\\n$ pip install scipy')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, code, error):\n    self.code = code\n    self.error = error\n    self.args = (u'[{}] {}'.format(self.code, self.error),)", "buggy_source_code": "def __init__(self, code, error):\n    self.code = code\n    self.error = error", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test0005views(self):\n    self.assertRaises(Exception, test_view('sale'))", "buggy_source_code": "def test0005views(self):\n    test_view('sale')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def default(self, obj):\n    try:\n        return _obj_dump(obj)\n    except NotImplementedError:\n        pass\n    return json.JSONEncoder.default(self, obj)", "buggy_source_code": "def default(self, obj):\n    try:\n        return _obj_dump(obj)\n    except NotImplementedError:\n        pass\n    raise TypeError('%r is not JSON serializable' % (obj,))", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fetch_api_tags(self):\n    if 'tags' in self.spec:\n        return [_item['name'] for _item in self.spec['tags']]\n    return []", "buggy_source_code": "def fetch_api_tags(self):\n    tags = self.spec['tags']\n    return [_item['name'] for _item in tags]", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def load_spec(self, spec=None):\n    self.spec = spec\n    self.info = {'endpoints': []}", "buggy_source_code": "def load_spec(self, spec=None):\n    self.spec = load_json_or_yaml(spec)", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getslice__(self, start, end, increment=None):\n    log.debug('Getting a slice from {0} to {1}'.format(start, end))\n    return self.__getitem__(slice(start, end, increment))", "buggy_source_code": "def __getslice__(self, start, end, increment=None):\n    return self.__getitem__(slice(start, end, increment))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rect(self):\n    if self.dim != 2:\n        raise ConstraintsError('must be 2 dim for rect conversions')\n    return (self.l, self.h - self.l)", "buggy_source_code": "def rect(self):\n    return (self.l, self.h - self.l)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handles_request_body(request_func):\n    print('dec called')\n    request_func._handles_request_body = True\n    return request_func", "buggy_source_code": "def handles_request_body(request_func):\n    request_func._handles_request_body = True\n    return request_func", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handles_response_head(request_func):\n    print('dec called')\n    request_func._handles_response_head = True\n    return request_func", "buggy_source_code": "def handles_response_head(request_func):\n    request_func._handles_response_head = True\n    return request_func", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handles_request_head(request_func):\n    print('dec called')\n    request_func._handles_request_head = True\n    return request_func", "buggy_source_code": "def handles_request_head(request_func):\n    request_func._handles_request_head = True\n    return request_func", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handles_response_body(request_func):\n    print('dec called')\n    request_func._handles_response_body = True\n    return request_func", "buggy_source_code": "def handles_response_body(request_func):\n    request_func._handles_response_body = True\n    return request_func", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _dynamic_request(self, environ, start_response):\n    middleware = SharedDataMiddleware(self._not_found, {'/': os.path.dirname(__file__)})\n    return middleware(environ, start_response)", "buggy_source_code": "def _dynamic_request(self, environ, start_response):\n    middleware = SharedDataMiddleware(self._not_found, {'/': 'testjs'})\n    return middleware(environ, start_response)", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    super(Host, self).__init__()\n    self._redis_server = redis.Redis(unix_socket_path='/tmp/redis.sock')", "buggy_source_code": "def __init__(self):\n    super(Host, self).__init__()\n    self._redis_server = redis.Redis()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run(self):\n    print(\"Hey its me, I'm running!'\")\n    time.sleep(10)\n    print('THE REMOTE JOB IS DONE')\n    self.is_running = False", "buggy_source_code": "def run(self):\n    self.is_running = False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate(self):\n    self.set_image()\n    if not self.is_default:\n        if not frappe.db.sql('select count(*) from `tabLetter Head` where ifnull(is_default,0)=1'):\n            self.is_default = 1", "buggy_source_code": "def validate(self):\n    self.set_image()\n    self.validate_disabled_and_default()", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def configure_manager(config_path, agents_security_group, agents_keypair):\n    _upload_credentials(config_path)\n    _set_provider_config(agents_security_group, agents_keypair)", "buggy_source_code": "def configure_manager(config_path):\n    _upload_credentials(config_path)\n    _set_provider_config(agents_security_group, agents_keypair)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _on_set_listen_interface(self, key, value):\n    self._on_set_random_port('random_port', self.config['random_port'])", "buggy_source_code": "def _on_set_listen_interface(self, key, value):\n    self.__set_listen_on()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _on_set_random_outgoing_ports(self, key, value):\n    if value:\n        self.session.outgoing_ports(0, 0)", "buggy_source_code": "def _on_set_random_outgoing_ports(self, key, value):\n    self.__set_outgoing_ports()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def copy(self):\n    return Response(self.record.copy(), self.labels.copy(), self.info.copy(), self.vartype)", "buggy_source_code": "def copy(self):\n    return Response(self.record.copy(), list(self.labels), self.info.copy(), self.vartype)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _find_candidate_matches(unmatched_issues, results_list):\n    issue_candidates = {}\n    for unmatched in unmatched_issues:\n        issue_candidates[unmatched] = [i for i in results_list if unmatched.matches_issue(i)]\n    return issue_candidates", "buggy_source_code": "def _find_candidate_matches(unmatched_issues, results_list):\n    issue_candidates = OrderedDict()\n    for unmatched in unmatched_issues:\n        issue_candidates[unmatched] = [i for i in results_list if unmatched.matches_issue(i)]\n    return issue_candidates", "edit_actions": ["insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(FamiliesFilterProxyModel, self).__init__(self, *args, **kwargs)\n    self._families = set()", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(FamiliesFilterProxyModel, self).__init__(*args, **kwargs)\n    self._families = set()", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef is_dir_path(self, output):\n    return len(output) > 0 and output[-1] == os.path.sep", "buggy_source_code": "@staticmethod\ndef is_dir_path(output):\n    return len(output) > 0 and output[-1] == os.path.sep", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def normalize_msisdn(self, mobile_number):\n    valid_prefix = '[+27]'\n    if re.match('^' + valid_prefix + '*([0-9]{9})$', mobile_number):\n        return mobile_number\n    else:\n        return '+27' + mobile_number[1:]", "buggy_source_code": "def normalize_msisdn(self, mobile_number):\n    if re.match('^[+27]*([0-9]{9})$', mobile_number):\n        return mobile_number\n    else:\n        return '+27' + mobile_number[1:]", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __contains__(self, key):\n    key = self.lowerkeymap[key.lower()]\n    return super(CaseInsensitiveDict, self).__contains__(key)", "buggy_source_code": "def __contains__(self, key):\n    return key.lower() in self.lowerkeymap", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reset(self):\n    self.__init__(self, self.setting_name, self.parent)", "buggy_source_code": "def reset(self):\n    self.__init__(self.setting_name, self.parent)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def _loads(data):\n    try:\n        return json.loads(data)\n    except json.JSONDecodeError:\n        return {}", "buggy_source_code": "def _loads(data):\n    try:\n        return json.loads(data)\n    except JSONDecodeError:\n        return {}", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_curriculum(self, format=None):\n    r = self._api_private_request(self.person_endpoint + '/' + self.curriculum_endpoint)\n    return r.json()", "buggy_source_code": "def get_curriculum(self):\n    r = self._api_private_request(self.person_endpoint + '/' + self.curriculum_endpoint)\n    return r.json()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def relabel_trajs(self, new_labels=None):\n    self.trajs.relabel(self, new_labels=new_labels)", "buggy_source_code": "def relabel_trajs(self, new_labels=None):\n    self.trajs.relabel(new_labels=new_labels)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/')\ndef hello():\n    print('main?')\n    return send_from_directory('http', 'index.html')", "buggy_source_code": "@app.route('/')\ndef hello():\n    return send_from_directory('http', 'index.html')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def break_(self):\n    with _translate_failures():\n        return bool(self._client.delete(self.name))", "buggy_source_code": "@_handle_failures\ndef break_(self):\n    return bool(self._client.delete(self.name))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __eq__(self, rhs):\n    assert self.string == rhs.string, (self.string, rhs.string)\n    return self.string == rhs.string", "buggy_source_code": "def __eq__(self, rhs):\n    return self.string == rhs.string", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init(self, xmpp):\n    self.enable_features()", "buggy_source_code": "def init(self):\n    self.enable_features()", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_url(eng, mocker):\n    res = executor_ips(eng)\n    assert len(res) == 1", "buggy_source_code": "def test_url(eng):\n    res = executor_ips(eng)\n    assert len(res) == 1", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef next_state(slot):\n    if slot.has_buffered():\n        return Module.state_ready\n    slot._event.clear()\n    return Module.state_blocked", "buggy_source_code": "@staticmethod\ndef next_state(slot):\n    if slot.has_buffered():\n        return Module.state_ready\n    return Module.state_blocked", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_user_authorization(self):\n    authorization_url = AUTHORIZE_TOKEN_URL + self.request_token\n    print(authorization_url)\n    webbrowser.open(authorization_url)\n    verifier = raw_input('Please input a verifier: ')\n    print(self.verifier)\n    return verifier", "buggy_source_code": "def get_user_authorization(self):\n    authorization_url = AUTHORIZE_TOKEN_URL + self.request_token\n    print(authorization_url)\n    webbrowser.open(authorization_url)\n    verifier = raw_input('Please input a verifier: ')\n    print(verifier)\n    return verifier", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_words_being_learned(self):\n    est = SimpleKnowledgeEstimator(self.mir)\n    assert len(est.words_being_learned()) == 2", "buggy_source_code": "def test_words_being_learned(self):\n    est = SimpleKnowledgeEstimator(self.mir)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def hard_reset(self):\n    super(LinuxDevice, self).hard_reset()\n    self._is_ready = False", "buggy_source_code": "def hard_reset(self):\n    self._is_ready = False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def marginalize(self, variables):\n    super(TabularCPD, self).marginalize(variables)\n    super(TabularCPD, self).normalize()", "buggy_source_code": "def marginalize(self, variables):\n    super(TabularCPD, self).marginalize(variables)\n    self.normalize()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, options, cssClass=None):\n    self.options = options\n    self.optiontree = get_dict_from_dotted_dict(dict(options), noexcept=True)\n    Widget.__init__(self, cssClass=cssClass)", "buggy_source_code": "def __init__(self, options, cssClass=None):\n    self.options = options\n    self.optiontree = mktree(options)\n    Widget.__init__(self, cssClass=cssClass)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def api_init():\n    db.init_db(app.config)\n    app.github = github.make_session(app.config['GITHUB_USER'], app.config['GITHUB_TOKEN'])", "buggy_source_code": "def api_init():\n    app.github = github.make_session(app.config['GITHUB_USER'], app.config['GITHUB_TOKEN'])", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fluid_velocity_dirichlet_boundaries(self):\n    return [ana.noslip, FluidNeumann()]", "buggy_source_code": "def fluid_velocity_dirichlet_boundaries(self):\n    return [ana.noslip]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fluid_velocity_dirichlet_values(self):\n    return [self.U_F, self.U_F]", "buggy_source_code": "def fluid_velocity_dirichlet_values(self):\n    return [self.U_F]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self) -> str:\n    return '<{} Widget id={}>'.format(self.widget_type_name, self.id)", "buggy_source_code": "def __repr__(self) -> str:\n    return '<{} Widget>'.format(self.widget_type_name)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getMolecule(self):\n    return self.controller.get_mol(self.mlist.currentRow(), int(self.Step.text()) - 1)", "buggy_source_code": "def getMolecule(self):\n    return self.controller.get_mol(self.mlist.currentRow(), self.Step.value() - 1)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef can_be_listed_by(cls, user):\n    return user.has_role('admin', 'operateur')", "buggy_source_code": "@classmethod\ndef can_be_listed_by(cls, user):\n    return user.has_role('admin') or user.has_role('operateur')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_group_perm(self, group):\n    if group.has_perm('booking.can_book_room'):\n        return RoomPermission.objects.get(room=self, group=group).permission\n    return 0", "buggy_source_code": "def get_group_perm(self, group):\n    try:\n        return RoomPermission.objects.get(room=self, group=group).permission\n    except:\n        return 0", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@base.apimethod\ndef ping(self, cid, email_address=[]):\n    return self.method_call(locals())", "buggy_source_code": "@base.apimethod\ndef ping(self):\n    return self.method_call(locals())", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef flags(_):\n    flags = QtCore.Qt.ItemIsSelectable\n    flags |= QtCore.Qt.ItemIsEnabled\n    return flags", "buggy_source_code": "def flags(self, _):\n    flags = QtCore.Qt.ItemIsSelectable\n    flags |= QtCore.Qt.ItemIsEnabled\n    return flags", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_number(number=''):\n    try:\n        float(number)\n        return True\n    except ValueError:\n        return False", "buggy_source_code": "def is_number(number=''):\n    raise DeprecationWarning('Use mis_number instead.')\n    return mis_number(number)", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_minimal_xmlcontent_from_json(self):\n    xmlcontent = JSON10ParserXMLContent.from_json_string(json.dumps(self.test_xmlcontent_minimal_dict))\n    assert xmlcontent.title == self.test_xmlcontent_minimal_dict['title']\n    assert xmlcontent.content_type == self.test_xmlcontent_minimal_dict['content_type']", "buggy_source_code": "def test_minimal_xmlcontent_from_json(self):\n    xmlcontent = JSON10ParserXMLContent.from_json_string(json.dumps(self.test_xmlcontent_minimal_dict))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clientConnectionLost(self, conn, reason):\n    common_global.es_inst.com_elastic_index('info', {'Connection Lost': 'gergegerg'})", "buggy_source_code": "def clientConnectionLost(self, conn, reason):\n    common_global.es_inst.com_elastic_index('info', {'Connection Lost'})", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def clientConnectionFailed(self, conn, reason):\n    common_global.es_inst.com_elastic_index('info', {'Connection Failed': 'gergegerg'})", "buggy_source_code": "def clientConnectionFailed(self, conn, reason):\n    common_global.es_inst.com_elastic_index('info', {'Connection Failed'})", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, watched_keywords):\n    super(InputFileReader, self).__init__()\n    self.watched_keywords = watched_keywords\n    self.data = {}\n    self.open_keywords = []", "buggy_source_code": "def __init__(self, watched_keywords):\n    self.watched_keywords = []\n    self.watched_keywords.append(watched_keywords)\n    self.data = {}\n    self.open_keywords = []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/slides')\ndef slides():\n    slide_body = render_template('slide_body.html', filters=filters)\n    return render_template('slides.html', body=slide_body)", "buggy_source_code": "@app.route('/slides')\ndef slides():\n    slide_body = render_template('slide_body.html')\n    return render_template('slides.html', body=slide_body)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_creates_storage_directory(self):\n    with tempfile.TemporaryDirectory() as tempdir:\n        storage_path = os.path.join(tempdir, 'storageDir')\n        FileStorage(storage_path)\n        assert os.path.isdir(storage_path)", "buggy_source_code": "def test_creates_storage_directory(self, storage):\n    assert os.path.isdir(storage.path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.offset = None\n    self.key = None\n    self.value = None\n    self.srcid = pmt.PMT_F", "buggy_source_code": "def __init__(self):\n    self.offset = None\n    self.key = None\n    self.value = None\n    self.srcid = False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run_pool(self, func, args):\n    with self.lock:\n        result = self.pool.apply_async(func, args)\n    return result", "buggy_source_code": "def run_pool(self, func, args):\n    with worker_lock:\n        result = self.pool.apply_async(func, args)\n    return result", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def restart_pool(self):\n    with self.lock:\n        self.pool.terminate()\n        self.pool.join()\n        self.pool = multiprocessing.Pool()", "buggy_source_code": "def restart_pool(self):\n    with worker_lock:\n        self.pool.terminate()\n        self.pool.join()\n        self.pool = multiprocessing.Pool()", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def splitPrefix(name):\n    if isinstance(name, basestring) and ':' in name:\n        return tuple(name.split(':', 1))\n    else:\n        return (None, name)", "buggy_source_code": "def splitPrefix(name):\n    if ':' in name:\n        return tuple(name.split(':', 1))\n    else:\n        return (None, name)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef sensor_supports_temperature(self):\n    return self.is_sensor_present() and self.sensor_type.find('temp') > -1", "buggy_source_code": "@property\ndef sensor_supports_temperature(self):\n    return self.is_sensor_present and self.sensor_type.find('temp') > -1", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.db = FileBackend(__file__.split('/database.py')[0] + '/db')", "buggy_source_code": "def __init__(self):\n    self.db = FileBackend(expanduser('~/.omesa/db'))", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def project_stream(project):\n    return target_stream(project)", "buggy_source_code": "def project_stream(project):\n    return []", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def user_project_stream(user, project):\n    return project_stream(project).filter(actor_content_type_id=_user_contentid, actor_object_id=user.id)", "buggy_source_code": "def user_project_stream(user, project):\n    return []", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def calc_staterror(self, data):\n    return _statfcts.calc_chi2datavar_errors(data)", "buggy_source_code": "@staticmethod\ndef calc_staterror(data):\n    return _statfcts.calc_chi2datavar_errors(data)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _add_streamfield_js(self, js):\n    for child in self._get_streamfield_blocks():\n        child_class = type(child.block)\n        self._add_block_js(child_class, child.block, js)", "buggy_source_code": "def _add_streamfield_js(self, js):\n    for child in self._get_streamfield_blocks():\n        self._add_block_js(child.block, js)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __len__(self):\n    return reduce(lambda total, prefix: total + len(prefix), self.prefixes, 0)", "buggy_source_code": "def __len__(self):\n    return sum((len(prefix) for prefix in self.prefixes))", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def connection_is_activated(self, connection_id):\n    connection_is_activated = False\n    connection = self.connection_id_to_connection_dict[connection_id]\n    connection_state = self._get_connection_state(connection)\n    if connection_state is NM_CONNECTION_ACTIVATED:\n        connection_is_activated = True\n    return connection_is_activated", "buggy_source_code": "def connection_is_activated(self, connection_id):\n    connection_is_activated = False\n    connection_state = self._get_connection_state(connection_id)\n    if connection_state is NM_CONNECTION_ACTIVATED:\n        connection_is_activated = True\n    return connection_is_activated", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def do_handshake(self):\n    try:\n        return self._object.do_handshake()\n    except ssl.SSLWantReadError:\n        raise WantReadError()\n    except ssl.SSLWantWriteError:\n        raise WantWriteError()", "buggy_source_code": "def do_handshake(self):\n    with _error_converter():\n        return self._object.do_handshake()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def shutdown(self):\n    try:\n        return self._object.unwrap()\n    except ssl.SSLWantReadError:\n        raise WantReadError()\n    except ssl.SSLWantWriteError:\n        raise WantWriteError()", "buggy_source_code": "def shutdown(self):\n    with _error_converter():\n        return self._object.unwrap()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@frappe.whitelist()\ndef change_service_level_agreement_and_priority(self, priority=None, service_level_agreement=None):\n    self.set_response_and_resolution_time(priority=priority, service_level_agreement=service_level_agreement)\n    self.save(ignore_permissions=True)", "buggy_source_code": "def change_service_level_agreement_and_priority(self, priority=None, service_level_agreement=None):\n    self.set_response_and_resolution_time(priority=priority, service_level_agreement=service_level_agreement)\n    self.save(ignore_permissions=True)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_offer_wrong_message_id(self):\n    ob.create_ask(1, 1, next_year)\n    offer = ob.get_offer(public_id, 1)\n    assert offer is None, 'Expected {}, got {}'.format(None, offer)", "buggy_source_code": "def test_get_offer_wrong_message_id(self):\n    ob.create_ask(1, 1, next_year)\n    offer = ob.get_offer(public_id, 1)\n    assert_is_none(offer, None)", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_own_asks_empty(self):\n    asks = ob.get_own_asks()\n    assert asks == [], 'Expected {}, got {}'.format([], asks)", "buggy_source_code": "def test_get_own_asks_empty(self):\n    asks = ob.get_own_asks()\n    assert_equal(asks, [])", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_remove_offer_empty(self):\n    offer = ob.remove_offer(1, 1)\n    assert offer is None", "buggy_source_code": "def test_remove_offer_empty(self):\n    offer = ob.remove_offer(1, 1)\n    assert_is_none(offer)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_own_bids_empty(self):\n    bids = ob.get_own_bids()\n    assert bids == [], 'Expected {}, got {}'.format([], bids)", "buggy_source_code": "def test_get_own_bids_empty(self):\n    bids = ob.get_own_bids()\n    assert_equal(bids, [])", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_own_asks(self):\n    ask = ob.create_ask(1, 1, next_year)\n    asks = ob.get_own_asks()\n    assert asks == [ask], 'Expected {}, got {}'.format([ask], asks)", "buggy_source_code": "def test_get_own_asks(self):\n    ask = ob.create_ask(1, 1, next_year)\n    asks = ob.get_own_asks()\n    assert_equal(asks, [ask])", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_own_bids(self):\n    bid = ob.create_bid(1, 1, next_year)\n    bids = ob.get_own_bids()\n    assert bids == [bid], 'Expected {}, got {}'.format([bid], bids)", "buggy_source_code": "def test_get_own_bids(self):\n    bid = ob.create_bid(1, 1, next_year)\n    bids = ob.get_own_bids()\n    assert_equal(bids, [bid])", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_offer(self):\n    ask = ob.create_ask(1, 1, next_year)\n    offer = ob.get_offer(public_id, 0)\n    assert ask == offer, 'Expected {}, got {}'.format(ask, offer)", "buggy_source_code": "def test_get_offer(self):\n    ask = ob.create_ask(1, 1, next_year)\n    offer = ob.get_offer(public_id, 0)\n    assert_equal(ask, offer)", "edit_actions": ["move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_bids_empty(self):\n    bids = ob.get_bids()\n    assert bids == [], 'Expected {}, got {}'.format([], bids)", "buggy_source_code": "def test_get_bids_empty(self):\n    bids = ob.get_bids()\n    assert_equal(bids, [])", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<Object(%s)>' % self", "buggy_source_code": "def __repr__(self):\n    return '<EmptyObject>'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, tests, mod):\n    self.tests = tests\n    self.mod = mod", "buggy_source_code": "def __init__(self, mod_name):\n    self.mod_name = mod_name", "edit_actions": ["update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_table_metadatas(conn: sqlite3.Connection):\n    cursor = conn.execute('CREATE TABLE metadatas (id INTEGER PRIMARY KEY, key TEXT, value TEXT)')", "buggy_source_code": "def create_table_metadatas(conn: sqlite3.Connection):\n    conn.execute('CREATE TABLE metadatas (id INTEGER PRIMARY KEY, key TEXT, value TEXT)')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_database_format(self):\n    self.assertEqual(\"X|'X', 'X', 'X', 'X'|'_', '_', '_', '_'|\" + \"'_', '_', '_', '_'|'O', 'O', 'O', 'O'\", self.board.databse_format())", "buggy_source_code": "def test_database_format(self):\n    self.assertEqual('X|X,X,X,X|_,_,_,_|_,_,_,_|O,O,O,O', self.board.databse_format())", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def json(self, resp):\n    try:\n        return dictset(resp.json())\n    except:\n        log.error('Response does not contain json body')\n        return {}", "buggy_source_code": "def json(self, resp):\n    try:\n        return dictset(resp.json())\n    except:\n        log.error('Response does not contain json body')\n        return None", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def startReceivingBoxes(self, p_boxSender):\n    if g_debug >= 1:\n        LOG.debug('==160== Dispatch - StartReceivingBoxes(Sender)')\n        LOG.debug('        Sender:{0:}'.format(p_boxSender))\n    self.boxSender = p_boxSender", "buggy_source_code": "def startReceivingBoxes(self, p_boxSender):\n    self.boxSender = p_boxSender", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def connectionLost(self, p_reason):\n    self.m_transport = None\n    if g_debug >= 1:\n        LOG.debug('==129== Dispatcher - connectionLost(Reason)')\n        LOG.debug('        ERROR: {0:}\\n'.format(p_reason))", "buggy_source_code": "def connectionLost(self, p_reason):\n    LOG.debug('Connection Lost - Reason: {0:}'.format(p_reason))\n    self.m_transport = None", "edit_actions": ["move-tree", "insert-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def connectionMade(self):\n    if g_debug >= 1:\n        LOG.debug('==150== Dispatcher - connectionMade()')\n    pass", "buggy_source_code": "def connectionMade(self):\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dataReceived(self, data):\n    LOG.debug('==138== Dispatcher - dataReceived(Data) - {0:}'.format(PrintBox(data)))\n    return AMP.dataReceived(self, data)", "buggy_source_code": "def dataReceived(self, data):\n    return AMP.dataReceived(self, data)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def buildProtocol(self, _p_address_tupple):\n    l_protocol = DomainAmp(self.m_pyhouse_obj)\n    self.protocol = l_protocol\n    if g_debug >= 4:\n        LOG.debug('==246== AmpServerFactory.buildProtocol()')\n    return l_protocol", "buggy_source_code": "def buildProtocol(self, _p_address_tupple):\n    l_protocol = DomainAmp(self.m_pyhouse_obj)\n    self.protocol = l_protocol\n    return l_protocol", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def apply_model(model, X):\n    tmp = model.input\n    setattr(model, X, 'input')\n    Y = model.get_output()\n    setattr(model, tmp, 'input')\n    return Y", "buggy_source_code": "def apply_model(model, X):\n    tmp = model.input\n    setattr(model, 'input', X)\n    Y = model.get_output()\n    setattr(model, 'input', tmp)\n    return Y", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@is_authenticated\ndef get(self, *args, **kwargs):\n    messenger = kwargs['messenger']\n    self.response({'status': 'ok', 'count': messenger.get_user_count()})", "buggy_source_code": "@is_authenticated\ndef get(self, *args, **kwargs):\n    messenger = kwargs['messenger']\n    self.response({'count': messenger.get_user_count()})", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def execute(self):\n    self.sharp_engine.execute(self.action, debug=True, variables=True)", "buggy_source_code": "def execute(self):\n    self.sharp_engine.execute(self.action, variables=True)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@timed_action(delay=50, threshold=100)\ndef on_update_settings_clicked(self, button):\n    self.clear_errors()\n    self._save_right_side(self._accordion.current_selector)\n    self._applyButton.set_sensitive(False)", "buggy_source_code": "def on_update_settings_clicked(self, button):\n    self._update_settings(self._accordion.current_selector)", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, paths):\n    self.current_state = (0, 0, 0, 100)\n    if paths:\n        self.paths = paths\n        self.buildPaths()\n        self.expandPaths()", "buggy_source_code": "def __init__(self, paths):\n    self.current_state = (0, 0, 0, 100)\n    self.paths = paths\n    self.buildPaths()\n    self.expandPaths()", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def closeEvent(self, event):\n    self.core.logger.log.info('Exiting configtool...')\n    self.geometry = self.saveGeometry()\n    event.accept()", "buggy_source_code": "def closeEvent(self, event):\n    logging.info('Exiting configtool...')\n    self.geometry = self.saveGeometry()\n    event.accept()", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_hgnc_from_mouse(mgi_id):\n    if not mgi_id.startswith('MGI:'):\n        mgi_id = 'MGI:' + mgi_id\n    return mouse_map.get(mgi_id)", "buggy_source_code": "def get_hgnc_from_mouse(mgi_id):\n    if mgi_id.startswith('MGI:'):\n        mgi_id = mgi_id[4:]\n    return mouse_map.get(mgi_id)", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def can_lock_topic(user, forum):\n    return check_perm(user=user, perm='locktopic', forum=forum)", "buggy_source_code": "def can_lock_topic(user, forum):\n    return can_moderate(user, forum, 'locktopic')", "edit_actions": ["update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def can_move_topic(user, forum):\n    return check_perm(user=user, perm='movetopic', forum=forum)", "buggy_source_code": "def can_move_topic(user, forum):\n    return can_moderate(user, forum, 'movetopic')", "edit_actions": ["update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def can_merge_topic(user, forum):\n    return check_perm(user=user, perm='mergetopic', forum=forum)", "buggy_source_code": "def can_merge_topic(user, forum):\n    return can_moderate(user, forum, 'mergetopic')", "edit_actions": ["update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@debug_echo\ndef _nvim_eol_clear(self):\n    self._screen.eol_clear()\n    self.tk_delete_line(del_eol=False)\n    self.tk_pad_line(screen_col=self._screen.col, add_eol=False)", "buggy_source_code": "def _nvim_eol_clear(self):\n    self._screen.eol_clear()\n    self.tk_delete_line(del_eol=False)\n    self.tk_pad_line(screen_col=self._screen.col, add_eol=False)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@debug_echo\ndef _nvim_cursor_goto(self, row, col):\n    self._screen.cursor_goto(row, col)\n    self.text.see('1.0')", "buggy_source_code": "def _nvim_cursor_goto(self, row, col):\n    self._screen.cursor_goto(row, col)\n    self.text.see('1.0')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@debug_echo\ndef _nvim_set_scroll_region(self, top, bot, left, right):\n    self._screen.set_scroll_region(top, bot, left, right)", "buggy_source_code": "def _nvim_set_scroll_region(self, top, bot, left, right):\n    self._screen.set_scroll_region(top, bot, left, right)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task\ndef installer():\n    installer = path.joinpath(source_path, path('installer'))\n    if not installer.exists():\n        os.mkdir(installer)", "buggy_source_code": "@task\ndef installer():\n    os.mkdir(path.joinpath(source_path, path('installer')))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _Download(self):\n    PackageUtil.DownloadFile(self._URL, fileName=self._Name)\n    PackageUtil.UnTarFile(self._Name, self.GetInstallPath(), 1)\n    return self._Downloaded()", "buggy_source_code": "def _Download(self):\n    PackageUtil.DownloadFile(self._URL, fileName=self._TarName)\n    return self._Downloaded()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_backward_cpu(self):\n    self.check_backward(self.x, self.gy)", "buggy_source_code": "def test_backward_cpu(self):\n    self.check_backward(self.x, self.gy)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(3)\ndef test_forward_cpu(self):\n    self.check_forward(self.x)", "buggy_source_code": "def test_forward_cpu(self):\n    self.check_forward(self.x)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_backward_gpu(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy))", "buggy_source_code": "@attr.gpu\ndef test_backward_gpu(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x))", "buggy_source_code": "@attr.gpu\ndef test_forward_gpu(self):\n    self.check_forward(cuda.to_gpu(self.x))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_backward_cpu_no_cudnn(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy), 'never')", "buggy_source_code": "@attr.gpu\ndef test_backward_cpu_no_cudnn(self):\n    self.check_backward(cuda.to_gpu(self.x), cuda.to_gpu(self.gy), 'never')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@condition.retry(1)\ndef test_double_backward_cpu(self):\n    self.check_double_backward(self.x, self.gy, self.ggx)", "buggy_source_code": "def test_double_backward_cpu(self):\n    self.check_double_backward(self.x, self.gy, self.ggx)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@attr.gpu\n@condition.retry(3)\ndef test_forward_gpu_no_cudnn(self):\n    self.check_forward(cuda.to_gpu(self.x), 'never')", "buggy_source_code": "@attr.gpu\ndef test_forward_gpu_no_cudnn(self):\n    self.check_forward(cuda.to_gpu(self.x), 'never')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, arg):\n    self.ZWSID = os.environ['ZWSID']\n    self.base = 'https://www.zillow.com/webservice/'", "buggy_source_code": "def __init__(self):\n    self.ZWSID = os.environ['ZWSID']\n    self.base = 'https://www.zillow.com/webservice/'", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def operator(function):\n\n    def wrapper(selection, session):\n        old_content = session.content(selection)\n        new_content = []\n        return function(selection, old_content, session)\n    return wrapper", "buggy_source_code": "def operator(function):\n\n    def wrapper(selection, session):\n        old_content = session.content(selection)\n        return function(selection, old_content, session)\n    return wrapper", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_request(self, target, data, on_answer):\n    assert target, 'Empty target.'\n    self.clients[target[0]].send_request(target[1:], data, on_answer)", "buggy_source_code": "def send_request(self, target, data, on_answer):\n    self.clients[target[0]].send_request(target[1:], data, on_answer)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def close_child_repeater(self, id):\n    self.clients[id].close()\n    del self.clients[id]\n    return", "buggy_source_code": "def close_child_repeater(self, id):\n    del self.clients[id]\n    return", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.url = ref_proftp\n    try:\n        fo = urllib2.urlopen(self.url).close()\n    except IOError:\n        raise\n        self.skip()", "buggy_source_code": "def setUp(self):\n    self.url = ref_proftp\n    try:\n        fo = urllib2.urlopen(self.url).close()\n    except IOError:\n        self.skip()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __exit__(self, exc_type, exc_val, exc_tb):\n    shutil.rmtree(self.dir)", "buggy_source_code": "def __exit__(self, exc_type, exc_val, exc_tb):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def render_GET(self, request):\n    request.setResponseCode(http.OK)\n    return 'pReq:%s' % len(self.transport.requests)", "buggy_source_code": "def render_GET(self, request):\n    request.setResponseCode(http.OK)\n    return 'OK'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_bond_properties_includes_non_options_keys(self):\n    with bond_device() as bond:\n        assert 'active_slave' in bond.properties", "buggy_source_code": "def test_bond_properties_includes_non_options_keys(self, bond0):\n    assert 'active_slave' in bond0.properties", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def protocol_change(block_index, block_first):\n    if config.TESTNET:\n        return True\n    elif block_index >= block_first:\n        return True\n    else:\n        return False\n    return False", "buggy_source_code": "def protocol_change(block_index, block_first):\n    if config.TESTNET:\n        return True\n    elif block_index >= block_first:\n        return True\n    else:\n        return False\n    assert False", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def set_server_version(self, version):\n    if version >= 90600:\n        self.options['safe_create_index'] = True", "buggy_source_code": "def set_server_version(self, version):\n    if version >= 90600:\n        self.safe_create_index = True", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def do_shade(self, x):\n    return (x - 1) * self.shade + 1", "buggy_source_code": "def do_shade(self, x):\n    return x * self.shade", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_context_data(self, **kwargs):\n    return {**super().get_context_data(**kwargs), 'path': self.request.GET['path']}", "buggy_source_code": "def get_context_data(self, **kwargs):\n    return {**super().get_context_data(**kwargs), 'path': self.get_path()}", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@tb.message_handler(commands=['register'])\ndef register(m):\n    global Array\n    Array[m.chat.id] = 'register'\n    tb.send_message(m.chat.id, 'Tell me your e-mail: ')", "buggy_source_code": "@tb.message_handler(commands=['register'])\ndef register(m):\n    msg = tb.send_message(m.chat.id, 'Tell me your e-mail: ')\n    tb.register_next_step_handler(msg, reg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, template_file, content_gen=lambda node: ['There is no content loaded yet!'], output_directory='./'):\n    self.template_file = template_file\n    self.output_directory = output_directory\n    self.content_generator = content_gen", "buggy_source_code": "def __init__(self, template_file, content_gen, output_directory='./'):\n    self.template_file = template_file\n    self.output_directory = output_directory\n    self.content_generator = content_gen", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def visit_mongodoc_node(self, node):\n    self.visit_admonition(node, 'seealso')", "buggy_source_code": "def visit_mongodoc_node(self, node):\n    self.visit_admonition(node)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setContours(self, contours):\n    self.contours = contours\n    self.contours_aview = self.contours.transpose(self.act_transposition)\n    self.selectSlice(self.actual_slice + 1)", "buggy_source_code": "def setContours(self, contours):\n    self.contours = contours\n    self.contours_aview = self.contours.transpose(self.act_transposition)\n    self.selectSlice(self.actual_slice)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_api_key_acl(self, key, request_options=None):\n    path = '/1/keys/%s' % key\n    return self._req(True, path, 'GET', request_options)", "buggy_source_code": "@deprecated\ndef get_api_key_acl(self, key, request_options=None):\n    return self.get_api_key(key, request_options)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_specific():\n    new_set = create_set()\n    set = sets_api.get_specific(id=new_set.id)\n    assert set is not None", "buggy_source_code": "def test_get_specific(new_set):\n    set = sets_api.get_specific(id=new_set.id)\n    assert set is not None", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.xfail(reason=\"doesn't reliably return valid json.\")\ndef test_trigger():\n    new_set = create_set()\n    running_set = sets_api.trigger(id=new_set.id)\n    assert running_set.ok", "buggy_source_code": "@pytest.mark.xfail(reason=\"doesn't reliably return valid json.\")\ndef test_trigger(new_set):\n    running_set = sets_api.trigger(id=new_set.id)\n    assert running_set.ok", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_create():\n    new_set = create_set()\n    set_names = [set.name for set in sets_api.get_all().content]\n    assert new_set.name in set_names", "buggy_source_code": "def test_create(new_set):\n    set_names = [set.name for set in sets_api.get_all().content]\n    assert new_set.name in set_names", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def O(self):\n    tz = self.timezone.utcoffset(self.data)\n    return u'%+03d%02d' % (tz.seconds // 3600, tz.seconds // 60 % 60)", "buggy_source_code": "def O(self):\n    seconds = self.Z()\n    return u'%+03d%02d' % (seconds // 3600, seconds // 60 % 60)", "edit_actions": ["update-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def variable(self, key, value, indent=0):\n    self._line('%s%s = %s' % ('  ' * indent, key, value), indent)", "buggy_source_code": "def variable(self, key, value, indent=0):\n    self._line('%s = %s' % (key, value), indent)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_dumb_terminal():\n    is_stdout_tty = os.isatty(1)\n    is_term_dumb = os.environ.get('TERM', '') == 'dumb'\n    is_windows = sys.platform == 'win32'\n    return not is_stdout_tty or is_term_dumb or is_windows", "buggy_source_code": "def is_dumb_terminal():\n    is_stdout_tty = os.isatty(1)\n    is_term_dumb = os.environ.get('TERM', '') == 'dumb'\n    return not is_stdout_tty or is_term_dumb", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cycles_to_time(cycles, core=None):\n    if core is None:\n        raise ValueError('Core device must be specified for time conversion')\n    return cycles * core.runtime_env.ref_period * _units.s", "buggy_source_code": "def cycles_to_time(cycles, core=None):\n    if core is None:\n        raise ValueError('Core device must be specified for time conversion')\n    return cycles * core.ref_period", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def time_to_cycles(time, core=None):\n    if core is None:\n        raise ValueError('Core device must be specified for time conversion')\n    return round64(time.amount // core.runtime_env.ref_period)", "buggy_source_code": "def time_to_cycles(time, core=None):\n    if core is None:\n        raise ValueError('Core device must be specified for time conversion')\n    return round64(time.amount // core.ref_period)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def test_contains_id(self):\n    my_anime = list(self.animes)[0]\n    self.assertIn(my_anime.id, self.animes)", "buggy_source_code": "def test_contains_id(self):\n    self.assertIn(ANIME_ID, self.animes)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_contains(self):\n    my_anime = list(self.animes)[0]\n    anime = Anime.Anime(my_anime.id)\n    self.assertIn(anime, self.animes)", "buggy_source_code": "def test_contains(self):\n    anime = Anime.Anime(ANIME_ID)\n    self.assertIn(anime, self.animes)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_pronoun1(self):\n    if self.person.gender == 'male' or self.person.gender == 'sexless':\n        return 'he'\n    else:\n        return 'she'", "buggy_source_code": "def get_pronoun1(self):\n    return {'masculine': 'he', 'feminine': 'she'}[self.person.appearance_type()]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_pronoun2(self):\n    if self.person.gender == 'male' or self.person.gender == 'sexless':\n        return 'him'\n    else:\n        return 'her'", "buggy_source_code": "def get_pronoun2(self):\n    return {'masculine': 'him', 'feminine': 'her'}[self.person.appearance_type()]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@skip('Fix studio help links in DOC-3686')\ndef test_settings_page_nav_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/index.html')\n    assert_nav_help_link(test=self, page=self.settings_page, href=expected_url)", "buggy_source_code": "def test_settings_page_nav_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/index.html')\n    assert_nav_help_link(test=self, page=self.settings_page, href=expected_url)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@skip('Fix studio help links in DOC-3686')\ndef test_certificate_page_nav_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/studio_creating_certificates.html')\n    assert_nav_help_link(test=self, page=self.certificates_page, href=expected_url)", "buggy_source_code": "def test_certificate_page_nav_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/studio_creating_certificates.html')\n    assert_nav_help_link(test=self, page=self.certificates_page, href=expected_url)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@skip('Fix studio help links in DOC-3686')\ndef test_course_course_team_nav_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/studio_course_staffing.html')\n    assert_nav_help_link(test=self, page=self.course_team_settings_page, href=expected_url)", "buggy_source_code": "def test_course_course_team_nav_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/studio_course_staffing.html')\n    assert_nav_help_link(test=self, page=self.course_team_settings_page, href=expected_url)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@skip('Fix studio help links in DOC-3686')\ndef test_certificate_page_side_bar_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/studio_creating_certificates.html')\n    assert_side_bar_help_link(test=self, page=self.certificates_page, href=expected_url, help_text='Learn more about certificates')", "buggy_source_code": "def test_certificate_page_side_bar_help(self):\n    expected_url = _get_expected_documentation_url('/set_up_course/studio_add_course_information/studio_creating_certificates.html')\n    assert_side_bar_help_link(test=self, page=self.certificates_page, href=expected_url, help_text='Learn more about certificates')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def status_changed(self, status):\n    if status == 7:\n        self.player.pause()", "buggy_source_code": "def status_changed(self, status):\n    if status == 7:\n        self.pause()", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def withdrawt_processsecurity_validation(process, context):\n    user = get_current()\n    return any((t.owner is user and t.proposal is None for t in context.tokens)) and global_user_processsecurity(process, context)", "buggy_source_code": "def withdrawt_processsecurity_validation(process, context):\n    user = get_current()\n    return any((t.owner is user for t in context.tokens)) and global_user_processsecurity(process, context)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_back_edge(self, from_node, to_node):\n    return self[from_node]['dfsno'] < self[to_node]['dfsno']", "buggy_source_code": "def is_back_edge(self, from_node, to_node):\n    raise NotImplementedError", "edit_actions": ["insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def sortkey(self):\n    if self.daysold == None:\n        return (-1, self.name)\n    return (self.daysold, self.name)", "buggy_source_code": "def sortkey(self):\n    if self.daysold is None:\n        return (-1, self.name)\n    return (self.daysold, self.name)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def mdot(throttle):\n    return -self.Thrust * throttle / (self.g0 * self.isp)", "buggy_source_code": "def mdot(self, throttle):\n    return -self.Thrust * throttle / self.ve", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_loadable_views(self):\n    return [self._rosstack.list() + DEFAULT_VIEW_KEY]", "buggy_source_code": "def get_loadable_views(self):\n    return self._rosstack.list() + [DEFAULT_VIEW_KEY]", "edit_actions": ["move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_library_paths():\n    return tuple('unset')", "buggy_source_code": "@staticmethod\ndef get_library_paths():\n    return ('unset',)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_master_public_key(self):\n    raise NotImplementedError", "buggy_source_code": "def get_master_public_key(self):\n    return None", "edit_actions": ["insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, location=None, watercourse=None):\n    self.location = location\n    self.watercourse = watercourse\n    self.descriptors = Descriptors()\n    self.cds_comments = {}", "buggy_source_code": "def __init__(self, location=None, watercourse=None):\n    self.location = location\n    self.watercourse = watercourse\n    self.descriptors = Descriptors()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef haystack_test():\n    settings.HAYSTACK_CONNECTIONS = TEST_INDEX\n    haystack.connections.reload('default')\n    yield haystack\n    call_command('clear_index', interactive=False, verbosity=0)", "buggy_source_code": "@pytest.fixture\ndef haystack_test():\n    settings.HAYSTACK_CONNECTIONS = TEST_INDEX\n    haystack.connections.reload('default')\n    yield haystack\n    call_command('clear_index', interactive=False, verbosity=0)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stats(self, fd):\n    sink = self.streamer.get_sink()\n    return sink.emit('get-stats', fd)", "buggy_source_code": "def get_stats(self, fd):\n    sink = self.get_sink()\n    return sink.emit('get-stats', fd)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@receiver(post_delete, sender=Schedule)\ndef post_delete_sched(sender, instance, created, **kwargs):\n    r = requests.get('http://localhost:8081/sigSchedule')", "buggy_source_code": "@receiver(post_delete, sender=Schedule)\ndef post_delete_sched(sender, instance, **kwargs):\n    r = requests.get('http://localhost:8081/sigSchedule')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@receiver(post_delete, sender=Sensor)\ndef post_delete_sensor(sender, instance, created, **kwargs):\n    r = requests.get('http://localhost:8081/sigSensor')", "buggy_source_code": "@receiver(post_delete, sender=Sensor)\ndef post_delete_sensor(sender, instance, **kwargs):\n    r = requests.get('http://localhost:8081/sigSensor')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def bInitCompositor(self):\n    peError = openvr.VRInitError_None\n    if not openvr.VRCompositor():\n        printf('Compositor initialization failed. See log file for details\\n')\n        return False\n    return True", "buggy_source_code": "def bInitCompositor(self):\n    if not openvr.VRCompositor():\n        logging.error('Compositor initialization failed. See log file for details')\n        return False\n    return True", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dprintf(fmt, *args):\n    buffer = fmt % args\n    if g_bPrintf:\n        print('%s' % buffer)", "buggy_source_code": "def dprintf(message):\n    if g_bPrintf:\n        print(message)\n    logging.debug(message)", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def isProtected(self):\n    return self.pin.value != 0", "buggy_source_code": "def isProtected(self):\n    return self.pin.value != 'aaaa'", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def suite():\n    suite = unittest.TestSuite()\n    suite.addTest(unittest.makeSuite(Test_functions))\n    suite.addTest(unittest.makeSuite(TestMyDict))\n    return suite", "buggy_source_code": "def suite():\n    suite = unittest.TestSuite()\n    suite.addTest(unittest.makeSuite(Test_functions))\n    return suite", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def serialize(self):\n    return {'type': 'object', 'schema': {'$ref': '#/definitions/{}'.format(self.object_name)}, **super().serialize()}", "buggy_source_code": "def serialize(self):\n    return {'type': 'object', '$ref': '#/definitions/{}'.format(self.object_name), **super().serialize()}", "edit_actions": ["move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def debug(message, precise=0):\n    if precise <= conf.max_verbosity:\n        sys.stderr.write('%s[%s]: %s\\n' % (app.identifier, precise, message))", "buggy_source_code": "def debug(message, precise=0):\n    if precise <= conf.max_verbosity:\n        sys.stderr.write('Debuglevel %s: %s\\n' % (precise, message))", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@flights_blueprint.route('/flights/all')\n@vary('accept')\ndef all():\n    return _create_list('all', request.args, default_sorting_column='date', default_sorting_order='desc')", "buggy_source_code": "@flights_blueprint.route('/api/flights/all')\ndef all():\n    return _create_list('all', request.args, default_sorting_column='date', default_sorting_order='desc')", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_Offer(packet):\n    if DHCP in packet and DHCPTypes[packet[DHCP].options[0][1]] == 'offer':\n        logger.debug('Packet is Offer.')\n        return True\n    return False", "buggy_source_code": "def is_Offer(packet):\n    if DHCP in packet and packet[DHCP].options[0][1] == 'offer':\n        logger.debug('Packet is Offer.')\n        return True\n    return False", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_NAK(packet):\n    if DHCP in packet and DHCPTypes[packet[DHCP].options[0][1]] == 'nak':\n        logger.debug('Packet is NAK.')\n        return True\n    return False", "buggy_source_code": "def is_NAK(packet):\n    if DHCP in packet and packet[DHCP].options[0][1] == 'nak':\n        logger.debug('Packet is NAK.')\n        return True\n    return False", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_ACK(packet):\n    if DHCP in packet and DHCPTypes[packet[DHCP].options[0][1]] == 'ack':\n        logger.debug('Packet is ACK.')\n        return True\n    return False", "buggy_source_code": "def is_ACK(packet):\n    if DHCP in packet and packet[DHCP].options[0][1] == 'ack':\n        logger.debug('Packet is ACK.')\n        return True\n    return False", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'rest.settings'\n    self.ProPublica_APIKEY = ''\n    self.FEC_API_KEY = ''", "buggy_source_code": "def __init__(self):\n    self.ProPublica_APIKEY = ''\n    self.FEC_API_KEY = ''", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update(self, time_interval: float) -> None:\n    ...", "buggy_source_code": "def update(self) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, message=None, code=None):\n    OperationalError.__init__(self, message=message or 'Assertion of data failed', code=code or 500)", "buggy_source_code": "def __init__(self, message=None, code=None):\n    OperationalError.__init__(self, message=message or 'Assertion of data failed')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __has_current_macro(self, name):\n    current_depth_macro = self.depth_macros[-1]\n    if name in current_depth_macro:\n        return True\n    if name in self.macros:\n        return True\n    return False", "buggy_source_code": "def __has_current_macro(self, name):\n    if name in self.macros:\n        return True\n    for m in self.depth_macros:\n        if name in m:\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_all_visible_links(browser):\n    all_links = browser.find_elements_by_css_selector('a[href]')\n\n    def displayed(el):\n        return el.is_displayed()\n    displayed_links = list(filter(displayed, all_links))\n    return displayed_links", "buggy_source_code": "def get_all_visible_links(browser):\n    all_links = browser.find_elements_by_css_selector('a[href]')\n    displayed_links = list(filter(element_is_visible_filter, all_links))\n    return displayed_links", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send(self, data):\n    if self.debug:\n        self.log_info('sending %s' % repr(data))\n    self.out_buffer = self.out_buffer + data\n    self.initiate_send()", "buggy_source_code": "def send(self, data):\n    self.out_buffer = self.out_buffer + data\n    self.initiate_send()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_created(self, docs):\n    for doc in docs:\n        items_ids = doc['items']\n        vpp_id = doc['vpp_id']\n        zip_items.delay(vpp_id, items_ids)", "buggy_source_code": "def on_created(self, docs):\n    for doc in docs:\n        self_id = doc['_id']\n        items_ids = doc['items']\n        zip_items.delay(self_id, items_ids)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@AuthJSONRPCServer.deprecated('account_balance')\ndef jsonrpc_wallet_balance(self, address=None, include_unconfirmed=False):\n    pass", "buggy_source_code": "@AuthJSONRPCServer.deprecated('account_balance')\ndef jsonrpc_wallet_balance(self, address=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __add__(self, otherTimeSeries):\n    data = self._timeseriesData + otherTimeSeries.to_twodim_list()\n    return TimeSeries.from_twodim_list(data).sort_timeseries()", "buggy_source_code": "def __add__(self, otherTimeSeries):\n    data = self._timeseriesData + otherTimeSeries.to_twodim_list()\n    return TimeSeries.from_twodim_list(data)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    for (key, val) in kwargs.items():\n        self.__dict__[key] = val", "buggy_source_code": "def __init__(self, **kwargs):\n    self.__kwargs = kwargs", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def optional(self):\n    return self.container.optional() or self.min == '0'", "buggy_source_code": "def optional(self):\n    return self.container_optional() or self.min == '0'", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def shutdown(self):\n    with self.lock:\n        self._shutdown = True\n        with suppress(CancelledError):\n            await gather(*self.clear())", "buggy_source_code": "def shutdown(self):\n    result = self.shutdown_task_manager()\n    self._identifiers.clear()\n    return result", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ReverseLists(lists):\n    tLists = zip(*lists)\n    tLists.reverse()\n    return zip(*tLists)", "buggy_source_code": "def ReverseLists(lists):\n    return list(map(reversed, lists))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init_app(self, app):\n    return super(InvenioJSONSchemasUI, self).init_app(app, register_blueprint=app.config['JSONSCHEMAS_REGISTER_ENDPOINTS_UI'])", "buggy_source_code": "def init_app(self, app):\n    return super(InvenioJSONSchemasUI, self).init_app(app, register_config_blueprint='JSONSCHEMAS_REGISTER_ENDPOINTS_UI')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init_app(self, app):\n    return super(InvenioJSONSchemasAPI, self).init_app(app, register_blueprint=app.config['JSONSCHEMAS_REGISTER_ENDPOINTS_API'])", "buggy_source_code": "def init_app(self, app):\n    return super(InvenioJSONSchemasAPI, self).init_app(app, register_config_blueprint='JSONSCHEMAS_REGISTER_ENDPOINTS_API')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handle_before_flush(session, flush_context, instances):\n    logger.debug('handle_before_flush handler')\n    handle_new_or_deleted_budget_transaction(session)\n    verify_budget_transaction_sums(session)\n    issue_105_helper(session)\n    logger.debug('handle_before_flush done')", "buggy_source_code": "def handle_before_flush(session, flush_context, instances):\n    logger.debug('handle_before_flush handler')\n    handle_new_or_deleted_budget_transaction(session)\n    verify_budget_transaction_sums(session)\n    logger.debug('handle_before_flush done')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _loadNpz(filename):\n    import numpy as np\n    X = np.load(filename)\n    return X[X.keys()[0]]", "buggy_source_code": "def _loadNpz(filename):\n    import numpy as np\n    X = np.load(filename)\n    return X[next(X.keys())]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_size(self, instance, value):\n    if self._window:\n        self.center = self._window.center", "buggy_source_code": "def on_size(self, instance, value):\n    self._align_center()", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_present(self):\n    App._collecter.throw(2006, self.line)\n    return False", "buggy_source_code": "def is_present(self):\n    App._collecter.throw(2006, self.line)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate_password(self, field):\n    CFG_ACCOUNT_MIN_PASSWORD_LENGTH = 6\n    if len(field.data) < CFG_ACCOUNT_MIN_PASSWORD_LENGTH:\n        raise validators.ValidationError(_('Password must be at least %(x_pass)d characters long.', x_pass=(CFG_ACCOUNT_MIN_PASSWORD_LENGTH,)))", "buggy_source_code": "def validate_password(self, field):\n    CFG_ACCOUNT_MIN_PASSWORD_LENGTH = 6\n    if len(field.data) < CFG_ACCOUNT_MIN_PASSWORD_LENGTH:\n        raise validators.ValidationError(_('Password must be at least %(x_pass)d characters long.', x_pass=CFG_ACCOUNT_MIN_PASSWORD_LENGTH))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate_password(self, field):\n    CFG_ACCOUNT_MIN_PASSWORD_LENGTH = 6\n    if len(field.data) < CFG_ACCOUNT_MIN_PASSWORD_LENGTH:\n        raise validators.ValidationError(_('Password must be at least %(x_pass)d characters long.', x_pass=(CFG_ACCOUNT_MIN_PASSWORD_LENGTH,)))", "buggy_source_code": "def validate_password(self, field):\n    CFG_ACCOUNT_MIN_PASSWORD_LENGTH = 6\n    if len(field.data) < CFG_ACCOUNT_MIN_PASSWORD_LENGTH:\n        raise validators.ValidationError(_('Password must be at least %(x_pass)d characters long.', x_pass=CFG_ACCOUNT_MIN_PASSWORD_LENGTH))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def sendresponse(self, v):\n    self.fout.write('%d\\n' % len(v))\n    self.fout.write(v)\n    self.fout.flush()", "buggy_source_code": "def sendresponse(self, v):\n    self.sendbytesresponse(encodeutf8(v))", "edit_actions": ["move-tree", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_no_dim(get_model, models_equal):\n    with pytest.raises(ValueError):\n        get_model(0.1, 0.2, pos=None)", "buggy_source_code": "def test_no_dim(get_model):\n    with pytest.raises(ValueError):\n        get_model(0.1, 0.2, pos=None)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_invalid_hopping_matrix():\n    with pytest.raises(ValueError):\n        model = tbmodels.Model(size=2, hop={(0, 0, 0): np.eye(4)})", "buggy_source_code": "def test_invalid_hopping_matrix():\n    with pytest.raises(ValueError):\n        tbmodels.Model(size=2, hop={(0, 0, 0): np.eye(4)})", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.yield_fixture()\ndef qt():\n    _print_unhandled_exceptions()\n    application = QApplication([])\n    yield application\n    application.quit()\n    sip.delete(application)", "buggy_source_code": "@pytest.yield_fixture()\ndef qt():\n    _print_unhandled_exceptions()\n    application = QApplication([])\n    yield application\n    sip.delete(application)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def note_on(self, note, velocity=127, ch=None, ch=ch):\n    self.channel_message(NOTE_ON, note, velocity)", "buggy_source_code": "def note_on(self, note, velocity=127, ch=None):\n    self.channel_message(NOTE_ON, note, velocity, ch=ch)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_load(self, view):\n    view.run_command('npm_install', {'action': 'initial'})", "buggy_source_code": "def on_load(self, view):\n    initial(view)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def number_of_vouchees(self, obj):\n    return obj.vouches_made.count()", "buggy_source_code": "def number_of_vouchees(self, obj):\n    return obj.vouches_made_count", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save(self):\n    for sheet in self.sheets:\n        sheet.render()\n        print(sheet.worksheet.calculate_dimension())\n    self.workbook.save(self.outfile)", "buggy_source_code": "def save(self):\n    for sheet in self.sheets:\n        sheet.render()\n    self.workbook.save(self.outfile)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDates():\n    startDate = convertDate(raw_input('Please enter starting date (MM/DD/YYYY): '))\n    endDate = convertDate(raw_input('Pleae enter ending date (MM/DD/YYYY): '))\n    dateRange = [startDate, endDate]\n    return dateRange", "buggy_source_code": "def getDates():\n    startDate = raw_input('Please enter starting date (MM/DD/YYYY): ')\n    endDate = raw_input('Pleae enter ending date (MM/DD/YYYY): ')\n    dateRange = [startDate, endDate]\n    return dateRange", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/update_stats', methods=['POST'])\ndef update_stats():\n    recordJson = request.get_json()\n    print(recordJson)\n    smartDB.updateCurrentStats(recordJson)\n    return ('Success', 200)", "buggy_source_code": "@app.route('/update_stats', methods=['POST'])\ndef update_stats():\n    recordJson = request.get_json()\n    smartDB.updateCurrentStats(recordJson)\n    return ('Success', 200)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def start(self):\n    print('########### start')\n    await self.connect_udp()\n    await self.connect()", "buggy_source_code": "async def start(self):\n    await self.connect_udp()\n    await self.connect()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def start_heartbeat(self):\n    print('########### start heartbeat')\n    self._heartbeat_task = self.xknx.loop.create_task(self.do_heartbeat())", "buggy_source_code": "async def start_heartbeat(self):\n    self._heartbeat_task = self.xknx.loop.create_task(self.do_heartbeat())", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def stop(self):\n    print('########### stop')\n    await self.disconnect(True)\n    await self.udp_client.stop()\n    await self.stop_heartbeat()\n    await self.stop_reconnect()", "buggy_source_code": "async def stop(self):\n    await self.disconnect(True)\n    await self.udp_client.stop()\n    await self.stop_heartbeat()\n    await self.stop_reconnect()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def reconnect(self):\n    print('########### reconnect')\n    await self.disconnect(True)\n    self.init_udp_client()\n    print('########### reconnect...')\n    await self.start()", "buggy_source_code": "async def reconnect(self):\n    await self.disconnect(True)\n    self.init_udp_client()\n    await self.start()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def do_heartbeat_success(self):\n    print('########### heartbeat success')\n    self.number_heartbeat_failed = 0", "buggy_source_code": "async def do_heartbeat_success(self):\n    self.number_heartbeat_failed = 0", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def schedule_reconnect(self):\n    print('########### schedule reconnect')\n    await asyncio.sleep(self.auto_reconnect_wait)\n    await self.reconnect()", "buggy_source_code": "async def schedule_reconnect(self):\n    await asyncio.sleep(self.auto_reconnect_wait)\n    await self.reconnect()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef normalize_linefeeds(a_string):\n    newline = re.compile('(\\\\r\\\\r\\\\r\\\\n|\\\\r\\\\r\\\\n|\\\\r\\\\n|\\\\n\\\\r)')\n    return newline.sub('\\n', a_string).replace('\\n\\n', '\\n')", "buggy_source_code": "@staticmethod\ndef normalize_linefeeds(a_string):\n    newline = re.compile('(\\\\r\\\\n\\\\r\\\\n|\\\\r\\\\r\\\\n|\\\\r\\\\n|\\\\n\\\\r|\\\\r)')\n    return newline.sub('\\n', a_string)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, s: socket.socket, address, ch, client, loop):\n    super().__init__(s, address, None)\n    self.wfile = GlueClientWfile(ch, client, loop)", "buggy_source_code": "def __init__(self, s: socket.socket, address):\n    super().__init__(s, address, None)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def lines_to_list(_file):\n    with open(_file) as f:\n        _list = f.readlines()\n    return [x.strip().lower() for x in _list]", "buggy_source_code": "def lines_to_list(_file):\n    with open(_file) as f:\n        _list = f.readlines()\n    return [x.strip() for x in _list]", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, name=None, emitter=None):\n    MycroftSkill.__init__(self, name, emitter)\n    self.instance_fallback_handlers = []\n    self.emitter.on('intent_failure', self.handle_update_message_context)", "buggy_source_code": "def __init__(self, name=None, emitter=None):\n    MycroftSkill.__init__(self, name, emitter)\n    self.instance_fallback_handlers = []", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_icon(self):\n    try:\n        return self.action.get_icon()\n    except Exception:\n        return None", "buggy_source_code": "def get_icon(self):\n    return self.action.get_icon()", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_number_in_queue(host=config.get_hostname(), partition=''):\n    print(len(get_queue(host, partition)), host, partition)\n    return len(get_queue(host, partition))", "buggy_source_code": "def get_number_in_queue(host=config.get_hostname(), partition=''):\n    return len(get_queue(host, partition))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def enqueued_job_count(self, config):\n    return 0", "buggy_source_code": "def enqueued_job_count(self):\n    return 0", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_empty_data(self):\n    parsed = parsers.parse_req(invalid_data['empty'])\n    return self.skipTest('not implemented yet')", "buggy_source_code": "def test_empty_data(self):\n    return self.skipTest('not implemented yet')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tag_names(self, obj):\n    return obj.tags.values_list('name', flat=True)", "buggy_source_code": "def tag_names(self, obj):\n    return [tag.name for tag in obj.tags.all()]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='session')\ndef test_output(path=TEST_OUTPUT):\n    if not path.exists():\n        path.mkdir()\n    return path", "buggy_source_code": "@pytest.fixture(scope='session')\ndef test_output(path=TEST_OUTPUT):\n    assert path.exists()\n    return path", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def offset(self, offset):\n    return FrameRange([self[0] + offset, self[1] + offset])", "buggy_source_code": "@pendingdeprecation('Use offseted instead.')\ndef offset(self, offset):\n    return self.offseted(offset)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def merge(self, frameRange):\n    return FrameRange([min(self[0], frameRange[0]), max(self[1], frameRange[1])])", "buggy_source_code": "@pendingdeprecation('Use merged instead.')\ndef merge(self, frameRange):\n    return self.merged(frameRange)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef teardown_class(self):\n    self.db.session.close()\n    self.db.drop_all()\n    self.socketio.disconnect()", "buggy_source_code": "@classmethod\ndef teardown_class(self):\n    db.session.close()\n    db.drop_all()\n    self.socketio.disconnect()", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setup(bot):\n    bot.add_cog(Jabber(bot, JABBER['servers']))", "buggy_source_code": "def setup(bot):\n    bot.add_cog(Jabber(bot, JABBER))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_clients(self):\n    for server in self.xmpp_servers:\n        self.xmpp_relays.append(XmppRelay(self.bot, server))", "buggy_source_code": "def create_clients(self, xmpp_servers):\n    for server in xmpp_servers:\n        self.xmpp_relays.append(XmppRelay(self, server))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setup_loader():\n    os.environ.setdefault('CELERY_LOADER', 'djcelery.loaders.DjangoLoader')\n\n    def remove_fixup(*args, **kwargs):\n        pass\n    from celery.fixups import django\n    django.fixup = remove_fixup", "buggy_source_code": "def setup_loader():\n    os.environ.setdefault('CELERY_LOADER', 'djcelery.loaders.DjangoLoader')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@projection.register(DestinationChanged)\ndef apply(self, event: DestinationChanged) -> None:\n    self._destination = event.destination", "buggy_source_code": "@singledispatchmethod\ndef apply(self, event: 'Cargo.Event') -> None:\n    pass", "edit_actions": ["update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def assert_move_back(self):\n    assert self.player.x == self.x\n    assert self.player.y == self.y + 1\n    assert self.player.score == self.score + config.score_move_backward", "buggy_source_code": "def assert_move_back(self):\n    assert self.player.x == self.x\n    assert self.player.y == self.y + 1\n    assert self.player.score == self.score", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_forward(self):\n    for action in FORWARD_ACTIONS:\n        self.player.action = action\n        self.process()\n        self.assert_score(self.score)\n        self.assert_keep_obstacle()", "buggy_source_code": "def test_forward(self):\n    for action in FORWARD_ACTIONS:\n        self.player.action = action\n        self.process()\n        self.assert_keep_obstacle()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_other(self):\n    for action in FORWARD_ACTIONS:\n        self.player.action = action\n        self.process()\n        self.assert_move_back()\n        self.assert_remove_obstacle()", "buggy_source_code": "def test_other(self):\n    for action in FORWARD_ACTIONS:\n        self.player.action = action\n        self.process()\n        self.assert_remove_obstacle()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_string(self, data):\n    return u'{}: {}'.format(data['directive'], data['uri'])", "buggy_source_code": "def to_string(self, data):\n    return data['message']", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, instance, subreddits, filter):\n    threading.Thread.__init__(self, name='mailMonitorWorker')\n    self.instance = instance\n    self.subreddits = subreddits\n    self.filter = filter", "buggy_source_code": "def __init__(self, instance, subreddits):\n    threading.Thread.__init__(self, name='mailMonitorWorker')\n    self.instance = instance\n    self.subreddits = subreddits", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef names(self):\n    return Names(book=self.workbook, xl=self.workbook.xl.named_items)", "buggy_source_code": "@property\ndef names(self):\n    return Names(book=self.workbook, xl=self.xl.named_items)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, cmd, type=gdb.BP_BREAKPOINT):\n    self.type = type\n    super(CmdBreak, self).__init__(cmd, gdb.COMMAND_USER)", "buggy_source_code": "def __init__(self, cmd):\n    super(CmdBreak, self).__init__(cmd, gdb.COMMAND_USER)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@plugin('gtts')\ndef gtts(jarvis, s):\n    voice_state = jarvis.is_voice_enabled()\n    jarvis.enable_gtts()\n    if not voice_state:\n        jarvis.disable_voice()", "buggy_source_code": "@plugin('gtts')\ndef gtts(jarvis, s):\n    voice_state = jarvis.is_voice_enabled\n    jarvis.enable_gtts()\n    if not voice_state:\n        jarvis.disable_voice()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def get_doc(self, encoding=None):\n    doc = self.func_doc if self.func_doc else self.kwargs.get('doc', '')\n    return force_decode(doc, encoding)", "buggy_source_code": "def get_doc(self, encoding=None):\n    doc = self.func_doc or self.kwargs.get('doc') or ''\n    return force_decode(doc, encoding)", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __nonzero__(self):\n    if self.hdr:\n        return True\n    else:\n        return False", "buggy_source_code": "def __nonzero__(self):\n    return bool(self.hdr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.getfile = websubmit_legacy_getfile\n    self.submit = websubmit_legacy_submit\n    return", "buggy_source_code": "def __init__(self):\n    self.getfile = websubmit_legacy_getfile\n    return", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def async_activate(self):\n    yield from self.hub.scenes.activate_scene(self._scene_id)", "buggy_source_code": "def async_activate(self):\n    yield from self._scene.activate()", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, marker='#', left='|', right='|', fillchar=' '):\n    self.marker = marker\n    self.left = left\n    self.right = right\n    self.fillchar = ' '", "buggy_source_code": "def __init__(self, marker='#', left='|', right='|', fillchar=' '):\n    self.marker = marker\n    self.left = left\n    self.right = right\n    self.fillchar = fillchar", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def _discover_file_system(self):\n    try:\n        return self.device._autodetect_fs()\n    except Exception as e:\n        msg = 'Netmiko _autodetect_fs failed (to workaround specify dest_file_system in optional_args.)'\n        raise CommandErrorException(msg)", "buggy_source_code": "def _discover_file_system(self):\n    try:\n        return self.device._autodetect_fs()\n    except Exception:\n        msg = 'Netmiko _autodetect_fs failed (to workaround specify dest_file_system in optional_args.)'\n        raise CommandErrorException(msg)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def get_error_from_response(self, response):\n    return {'error': self.get_json(response.text)['error']}", "buggy_source_code": "def get_error_from_response(self, response):\n    return self.get_json(response.text)['error']", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_auto_start_from_data_file_path():\n    return get_data_path() + '/' + get_auto_start_file_name()", "buggy_source_code": "def get_auto_start_from_data_file_path():\n    return '/usr/share/applications/' + get_auto_start_file_name()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.errorhandler(404)\ndef page_not_found(e):\n    return (not_found_msg, 404)", "buggy_source_code": "@app.errorhandler(404)\ndef page_not_found(e):\n    return app.send_static_file('index.html')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_install_clicked(self, button):\n    print('hier')\n    button.hide()\n    self.source_button.hide()\n    self.interpreter.check_runner_install()", "buggy_source_code": "def on_install_clicked(self, button):\n    button.hide()\n    self.source_button.hide()\n    self.interpreter.check_runner_install()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setup_test(test):\n    test.globs['fake_sif'] = MockSIFReader()\n    test.globs['fake_sif_err1'] = MockSIFReaderErr1()\n    test.globs['fake_sif_err2'] = MockSIFReaderErr2()", "buggy_source_code": "def setup_test(test):\n    test.globs['fake_sif'] = MockSIFReader()\n    test.globs['fake_sif2'] = MockSIFReader2()\n    test.globs['fake_sif_err1'] = MockSIFReaderErr1()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task(test)\ndef install(context):\n    context.run('pandoc --from=markdown --to=rst README.md -o README.rst')\n    context.run('python setup.py develop')", "buggy_source_code": "@task(test)\ndef install(context):\n    context.run('python setup.py develop')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task(test)\ndef release(context):\n    context.run('pandoc --from=markdown --to=rst README.md -o README.rst')\n    context.run('python setup.py register sdist bdist_wheel')\n    context.run('twine upload dist/*')", "buggy_source_code": "@task(test)\ndef release(context):\n    context.run('python setup.py register sdist bdist_wheel')\n    context.run('twine upload dist/*')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _cursor(self):\n    if self._db is None:\n        self.reconnect()\n    return self._db.cursor()", "buggy_source_code": "def _cursor(self):\n    self._ensure_connected()\n    return self._db.cursor()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def change_state(self):\n    self._is_pressed = not self._is_pressed\n    self.reload()\n    self.reset_size()\n    self.layout()\n    self._on_press(self._is_pressed)", "buggy_source_code": "def change_state(self):\n    self._is_pressed = not self._is_pressed\n    self.reload()\n    self.reset_size()\n    self._on_press(self._is_pressed)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getPreviewCaps(self):\n    if self.has_option('previews', 'videocaps'):\n        return self.get('previews', 'videocaps', fallback='video/x-raw,width=1024,height=576,framerate=25/1')\n    else:\n        return self.getVideoCaps()", "buggy_source_code": "def getPreviewCaps(self):\n    if self.has_option('previews', 'videocaps'):\n        return self.get('previews', 'videocaps')\n    else:\n        return self.getVideoCaps()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def generate_nfft_plan(self):\n    Nfft = NFFT(self.f, self.f_hat, self.x)\n    Nfft.precompute()\n    return Nfft", "buggy_source_code": "def generate_nfft_plan(self):\n    Nfft = NFFT(f=self.f, f_hat=self.f_hat, x=self.x, precompute=True)\n    return Nfft", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    self.store = mrc.Store(self, mrc.Ref('tileset_data'))\n    mrc.Block.__init__(self, *args, **kwargs)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    self.store = mrc.Store(self, mrc.Ref('tileset_data'))\n    super().__init__(*args, **kwargs)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def savestatus(self):\n    path = 'Data/status.json'\n    with open('Data/status.js', 'w') as f:\n        json.dump(self.status, f)", "buggy_source_code": "def savestatus(self):\n    path = 'Data/status.json'\n    with open(path, 'w') as f:\n        json.dump(self.status, f)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, db):\n    self.__dict__['db'] = db\n    self.__dict__['list_not_empty'] = threading.Condition()\n    self.__dict__['action_list'] = {}", "buggy_source_code": "def __init__(self, db):\n    self.__dict__['db'] = db", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __enter__(self):\n    import pexpect\n    os.chdir(self._workdir)\n    self._child = pexpect.spawn('bash', ['-c', self._cmdline], encoding='utf-8')\n    return self", "buggy_source_code": "def __enter__(self):\n    import pexpect\n    self._child = pexpect.spawn('bash', ['-c', self._cmdline], encoding='utf-8')\n    return self", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _write_scalar(self, value):\n    t = self.dev.create_task()\n    t.add_AO_channel(self.name)\n    t.write_AO_scalar(value)\n    t.t.StopTask()", "buggy_source_code": "def _write_scalar(self, value):\n    with self.dev.create_task() as t:\n        t.add_AO_channel(self.name)\n        t.write_AO_scalar(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@lazycache\ndef listener_host(self):\n    return 'http://%s' % my_ip_address()", "buggy_source_code": "def listener_host(self):\n    return 'http://%s' % my_ip_address()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def join(self):\n    Process.join(self)\n    try:\n        return self._q.get(block=False)\n    except:\n        raise RuntimeError('Error on process %s' % self)", "buggy_source_code": "def join(self):\n    Process.join(self)\n    if self._e is not None:\n        raise RuntimeError('Error on process %s' % self)\n    else:\n        return self._q.get()", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self):\n    service = self.request.query_arguments.get('service')[0]\n    run_systemctl_command('stop', service=service)\n    self.redirect('/')", "buggy_source_code": "def get(self):\n    service = self.get_argument('service')\n    run_systemctl_command('stop', service=service)\n    self.redirect('/')", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self):\n    service = self.request.query_arguments.get('service')[0]\n    run_systemctl_command('start', service=service)\n    self.redirect('/')", "buggy_source_code": "def get(self):\n    service = self.get_argument('service')\n    run_systemctl_command('start', service=service)\n    self.redirect('/')", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self):\n    service = self.request.query_arguments.get('service')[0]\n    run_systemctl_command('restart', service=service)\n    self.redirect('/')", "buggy_source_code": "def get(self):\n    service = self.get_argument('service')\n    run_systemctl_command('restart', service=service)\n    self.redirect('/')", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_region(self, can_trace=True):\n    if self.is_trace and can_trace:\n        return self.region.get_mirror_region()[0]\n    else:\n        return self.region", "buggy_source_code": "def get_region(self, can_trace=True):\n    if self.is_trace and can_trace:\n        return self.region.get_mirror_region()\n    else:\n        return self.region", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/data/<chart_id>')\ndef send_data(chart_id):\n    with open('./data/chart-' + str(chart_id) + '.json', 'r') as json_file:\n        data = json.load(json_file)\n    return data", "buggy_source_code": "@app.route('/data/<chart_id>')\ndef send_data(chart_id):\n    return load_data(chart_id)", "edit_actions": ["insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save(self):\n    value = self.get()\n    if value is not None:\n        return value.__name__", "buggy_source_code": "def save(self):\n    value = self.get()\n    if value is not None:\n        return value", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __first_values_from(self, basename):\n    values = self.execute(\"cat /etc/%s | cut -d ':' -f 1\" % basename, stdout=False, sudo=True)\n    values = values.strip().split('\\n')\n    return values", "buggy_source_code": "def __first_values_from(self, basename):\n    values = self.execute(\"cat /etc/%s | cut -d ':' -f 1\" % basename, stdout=False, sudo=True)\n    values = values.strip().split()\n    return values", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def finish(self):\n    if type(self.rfile) is not list:\n        self.rfile.close()", "buggy_source_code": "def finish(self):\n    if self.rfile is not None:\n        self.rfile.close()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_node_lineage(self):\n    node_lineage = emails.get_node_lineage(self.node, [])\n    assert_equal(node_lineage, [self.node._id, self.project._id])", "buggy_source_code": "def test_get_node_lineage(self):\n    node_lineage = emails.get_node_lineage(self.node)\n    assert_equal(node_lineage, [self.project._id, self.node._id])", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def predict_generator(self, x_test: typing.Iterable[typing.Iterable[numpy.uint8]]):\n    print('!!!!!!!!predict_generator')\n    for vec in x_test:\n        yield self._impl.predict_one(vec)", "buggy_source_code": "def predict_generator(self, x_test: typing.Iterable[typing.Iterable[numpy.uint8]]):\n    for vec in x_test:\n        yield self._impl.predict_one(vec)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def predict(self, x_test: numpy.array):\n    assert len(x_test.shape) == 2\n    print('!!!!!!!!!!predict')\n    return numpy.array(list(self.predict_generator(x_test)))", "buggy_source_code": "def predict(self, x_test: numpy.array):\n    assert len(x_test.shape) == 2\n    return numpy.array(list(self.predict_generator(x_test)))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fit(self, x_train: numpy.array):\n    print('!!!!!!!!fit')\n    assert len(x_train.shape) == 2\n    self._impl.fit(x_train)", "buggy_source_code": "def fit(self, x_train: numpy.array):\n    assert len(x_train.shape) == 2\n    self._impl.fit(x_train)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_mutating(self, confpy):\n    confpy.write('c.aliases[\"foo\"] = \"message-info foo\"')\n    configfiles.read_config_py(confpy.filename)\n    assert config.instance._values['aliases']['foo'] == 'message-info foo'", "buggy_source_code": "def test_mutating(self, confpy):\n    confpy.write('c.aliases[\"foo\"] = \"message-info foo\"')\n    confpy.read()\n    assert config.instance._values['aliases']['foo'] == 'message-info foo'", "edit_actions": ["update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _delete(self):\n    if self._handle and gl:\n        gl.glDeleteBuffers(1, [self._handle])\n        self._handle = 0\n        self._valid = False", "buggy_source_code": "def _delete(self):\n    if self._base:\n        self._base.delete()\n    else:\n        gl.glDeleteBuffers(1, [self._handle])", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_closed(self):\n    (server, client) = self._loopback()\n    client.close()\n    server.sendall('hello, world')\n    self.assertRaises(SysCallError, server.sendall, 'hello, world')", "buggy_source_code": "def test_closed(self):\n    (server, client) = self._loopback()\n    server.sock_shutdown(2)\n    self.assertRaises(SysCallError, server.sendall, 'hello, world')", "edit_actions": ["update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _child_generator(start, stop):\n    for i in xrange(start, stop):\n        try:\n            yield Body(i)\n        except ValueError:\n            break", "buggy_source_code": "def _child_generator(start, stop, step=1):\n    for i in xrange(start, stop, step):\n        with ignored(ValueError):\n            yield Body(i)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def open(self):\n    self.status = OPEN\n    self.connection = self.owner.owner\n    self.connection.owner.on_stream_c(self)", "buggy_source_code": "def open(self):\n    self.status = OPEN\n    self.connection.owner.on_stream_c(self)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _process_output(self, plot_dict):\n    if self.return_html:\n        return idealreport.create_html.plot(plot_dict)\n    else:\n        return self._process_output(plot_dict)", "buggy_source_code": "def _process_output(self, plot_dict):\n    if self.return_html:\n        return idealreport.create_html.plot(plot_dict)\n    else:\n        return plot_dict", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_calc_function(self, gssha_data_var):\n    calc_function = 'mean'\n    if gssha_data_var == 'precipitation_inc' or gssha_data_var == 'precipitation_acc':\n        calc_function = 'sum'\n    return calc_function", "buggy_source_code": "@staticmethod\ndef _get_calc_function(gssha_data_var):\n    calc_function = 'mean'\n    if gssha_data_var == 'precipitation_inc' or gssha_data_var == 'precipitation_acc':\n        calc_function = 'sum'\n    return calc_function", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_database(self):\n    drweb_path = '/var/opt/drweb.com/'\n    results = []\n    return results if results else None", "buggy_source_code": "def get_database(self):\n    return None", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@atexit.register\ndef _clean_tmp():\n    global _tmp_dir\n    if not _tmp_dir:\n        return\n    try:\n        os.removedirs(_tmp_dir)\n        _tmp_dir = None\n    except:\n        pass", "buggy_source_code": "def _clean_tmp():\n    global _tmp_dir\n    if not _tmp_dir:\n        return\n    try:\n        os.removedirs(_tmp_dir)\n        _tmp_dir = None\n    except:\n        pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_python26():\n    return sys.version_info[0] == 2 and sys.version_info[1] == 6", "buggy_source_code": "def is_python26():\n    return False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    ModuleType.__init__(self, 'vdsm')\n    import config\n    import constants\n    import utils\n    self.config = config\n    self.constants = constants\n    self.utils = utils", "buggy_source_code": "def __init__(self):\n    ModuleType.__init__(self, 'vdsm')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ping(self):\n    return self._make_call(lambda conn: conn.ping())", "buggy_source_code": "def ping(self):\n    with self._get_connection_from_pool() as conn:\n        return conn.ping()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, mock):\n    self.__dict__['_%s__mock' % self.__class__.__name__] = mock\n    self.__dict__['_%s__wrapped' % self.__class__.__name__] = self.__mock._mock_wraps", "buggy_source_code": "def __init__(self, mock):\n    self.__dict__['_%s__mock' % self.__class__.__name__] = mock", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def sizeHint(self):\n    return QSize(self._editor.linenumber_width(), 0)", "buggy_source_code": "def sizeHint(self):\n    return QSize(self.get_width(), 0)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def put(self, obj, priority):\n    self.queue.put((priority, obj))", "buggy_source_code": "def put(self, obj, priority):\n    self.queue.put(_WorkItem(priority, obj))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, mid):\n    msg = u'Message %(mid)s is claimed' % dict(mid=mid)\n    super(MessageIsClaimed, self).__init__(msg)", "buggy_source_code": "def __init__(self, mid):\n    super(MessageIsClaimed, self).__init__(mid=mid)", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, mid, queue, project):\n    msg = u'Message %(mid)s does not exist in queue %(queue)s for project %(project)s' % dict(mid=mid, queue=queue, project=project)\n    super(MessageDoesNotExist, self).__init__(msg)", "buggy_source_code": "def __init__(self, mid, queue, project):\n    super(MessageDoesNotExist, self).__init__(mid=mid, queue=queue, project=project)", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, name, project):\n    msg = u'Queue %(name)s in project %(project)s is empty' % dict(name=name, project=project)\n    super(QueueIsEmpty, self).__init__(msg)", "buggy_source_code": "def __init__(self, name, project):\n    super(QueueIsEmpty, self).__init__(name=name, project=project)", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, queue, project):\n    msg = u'No shard found for queue %(queue)s for project %(project)s' % dict(queue=queue, project=project)\n    super(QueueNotMapped, self).__init__(msg)", "buggy_source_code": "def __init__(self, queue, project):\n    super(QueueNotMapped, self).__init__(queue=queue, project=project)", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, mid, cid):\n    msg = u'Message %(mid)s is not claimed by %(cid)s' % dict(cid=cid, mid=mid)\n    super(MessageIsClaimedBy, self).__init__(msg)", "buggy_source_code": "def __init__(self, mid, cid):\n    super(MessageIsClaimedBy, self).__init__(cid=cid, mid=mid)", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, shard):\n    msg = u'Shard {0} does not exists'.format(shard)\n    super(ShardDoesNotExist, self).__init__(msg)", "buggy_source_code": "def __init__(self, shard):\n    super(ShardDoesNotExist, self).__init__(shard=shard)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, cid, queue, project):\n    msg = u'Claim %(cid)s does not exist in queue %(queue)s for project %(project)s' % dict(cid=cid, queue=queue, project=project)\n    super(ClaimDoesNotExist, self).__init__(msg)", "buggy_source_code": "def __init__(self, cid, queue, project):\n    super(ClaimDoesNotExist, self).__init__(cid=cid, queue=queue, project=project)", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, name, project):\n    msg = u'Queue %(name)s does not exist for project %(project)s' % dict(name=name, project=project)\n    super(QueueDoesNotExist, self).__init__(msg)", "buggy_source_code": "def __init__(self, name, project):\n    super(QueueDoesNotExist, self).__init__(name=name, project=project)", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    msg = u'No shards registered'\n    super(NoShardFound, self).__init__(msg)", "buggy_source_code": "def __init__(self):\n    super(NoShardFound, self).__init__()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_snmp_trap_host(self, data, id=None):\n    request = '/sys/service/snmp-svc/snmp-trap' if id is None else '/sys/service/snmp-svc/snmp-trap/{0}'.format(id)\n    self._get(request)", "buggy_source_code": "def get_snmp_trap_host(self, id=None):\n    request = '/sys/service/snmp-svc/snmp-trap' if id is None else '/sys/service/snmp-svc/snmp-trap/{0}'.format(id)\n    self._get(request)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/draft', methods=['GET'])\ndef draft_saved():\n    return render_template('layouts/static_page.html', page_frag='doaj/draft_saved.html', page_title='Draft saved')", "buggy_source_code": "@blueprint.route('/draft', methods=['GET'])\ndef draft_saved():\n    return render_template('layouts/static_page.html', page_frag='/apply/draft_saved.html')", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def commit(self):\n    from sdcp import PackageContainer as PC\n    PC.log_msg('DB.commit({})'.format(self._dirty))\n    self._conn.commit()\n    self._dirty = False", "buggy_source_code": "def commit(self):\n    self._conn.commit()\n    self._dirty = False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef exit_(cls):\n    ControllerApi.player.signal_playlist_finished.disconnect(cls.on_next_music_required)\n    print(cls, 'disconnect')\n    cls._songs = []\n    cls.exit()", "buggy_source_code": "@classmethod\ndef exit_(cls):\n    ControllerApi.player.signal_playlist_finished.disconnect(cls.on_next_music_required)\n    cls._songs = []\n    cls.exit()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef load_(cls):\n    cls._songs = []\n    ControllerApi.player.signal_playlist_finished.connect(cls.on_next_music_required)\n    print(cls, 'connect')\n    cls.load()", "buggy_source_code": "@classmethod\ndef load_(cls):\n    cls._songs = []\n    ControllerApi.player.signal_playlist_finished.connect(cls.on_next_music_required)\n    cls.load()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_all(db_name, table_name):\n    items = []\n    for x in r.db(db_name).table(table_name).run(conn):\n        items.append(x)\n    return items", "buggy_source_code": "def get_all(db_name, table_name):\n    return r.db(db_name).table(table_name).run(conn)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def collect_dmesg(object):\n    object.whiteboard = process.system_output('dmesg')", "buggy_source_code": "def collect_dmesg(object):\n    return process.system_output('dmesg')", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef base_registry(self):\n    if self.has_base_registry:\n        return self.base_registry_raw\n    elif self.has_auth_registry:\n        return self.auth_registry.base_name\n    else:\n        return 'docker.io'", "buggy_source_code": "@property\ndef base_registry(self):\n    return self._get_base_registry()", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run(my_map, reviews, restaurants):\n    (normalized_restaurant_ids_to_topics, lda) = Clustering.get_predictions(my_map, reviews, restaurants)\n    Clustering.create_gaussian_clusters_and_map(restaurants, normalized_restaurant_ids_to_topics, my_map, lda)", "buggy_source_code": "def run(my_map, reviews, restaurants):\n    (normalized_restaurant_ids_to_topics, lda) = Clustering.get_predictions(my_map, reviews, restaurants)\n    create_gaussian_clusters_and_map(restaurants, normalized_restaurant_ids_to_topics, my_map, lda)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_volume_speaker(self, device_id, volume):\n    path = '/speakers/' + device_id + '/volume'\n    _LOGGER.warning('airfoil-api POST %s %s', path, volume)\n    return self._request('POST', path, volume)", "buggy_source_code": "def set_volume_speaker(self, device_id, volume):\n    path = '/speakers/' + device_id + '/volume'\n    return self._request('POST', path, volume)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.n_atoms = Structure.from_file('POSCAR').num_sites", "buggy_source_code": "def __init__(self):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _iseg(nrn, neurite_type=None):\n    tree_filter = None if neurite_type is None else _is_type(neurite_type)\n    return _mm.iter_segments(nrn, tree_filter=tree_filter)", "buggy_source_code": "def _iseg(nrn, neurite_type=NeuriteType.all):\n    return _mm.iter_segments(nrn, tree_filter=_is_type(neurite_type))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getattr__(self, key):\n    value = self[key]\n    if isinstance(value, str):\n        return str(self.T(value))\n    return value", "buggy_source_code": "def __getattr__(self, key):\n    value = self[key]\n    if isinstance(value, str):\n        return self.T(value)\n    return value", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_modified(self, modified):\n    if self.module_imported:\n        unsafe(self.reload_plugin)\n    else:\n        unsafe(self.load_plugin)", "buggy_source_code": "def on_modified(self, modified):\n    self.reload_queue.put(modified)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, cert, key, sslcontext=None):\n    HTTPSHandler.__init__(self)\n    self.cert = cert\n    self.key = key\n    if sslcontext:\n        self._context = sslcontext", "buggy_source_code": "def __init__(self, cert, key, sslcontext=None):\n    HTTPSHandler.__init__(self)\n    self.cert = cert\n    self.key = key\n    self._context = sslcontext", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getattr__(self, name):\n    if name != 'buffer':\n        return getattr(self.buffer, name)", "buggy_source_code": "def __getattr__(self, name):\n    return getattr(self.buffer, name)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@database_sync_to_async\nasync def get_task_count(self):\n    return Task.objects.count()", "buggy_source_code": "@database_sync_to_async\ndef get_task_count(self):\n    return Task.objects.count()", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "@database_sync_to_async\nasync def get_project_count(self):\n    return Project.objects.filter(archive=False).count()", "buggy_source_code": "@database_sync_to_async\ndef get_project_count(self):\n    return Project.objects.filter(archive=False).count()", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def hydrate(self, bundle):\n    if bundle.data.has_key('id'):\n        bundle.data['id'] = None\n    return bundle", "buggy_source_code": "def hydrate(self, bundle):\n    return bundle", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testStdOut(self):\n    ayrton.main('echo (\"foo\")')\n    self.assertEqual(self.a.buffer.getvalue(), b'foo\\n')\n    self.mock_stdout.close()", "buggy_source_code": "def testStdOut(self):\n    ayrton.main('echo (\"foo\")')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'foo\\n')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run_os_cmd(cmd):\n    if DEBUG_LEVEL < 2:\n        cmd = cmd + ' 1>>mediatools.log 2>&1'\n    logger.info('Running: %s', cmd)\n    print('Running: %s' % cmd)\n    os.system(cmd)", "buggy_source_code": "def run_os_cmd(cmd):\n    if DEBUG_LEVEL < 2:\n        cmd = cmd + ' 1>>ffmpeg.log 2>&1'\n    logger.info('Running: %s', cmd)\n    os.system(cmd)\n    logger.info('Completed: %s', cmd)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def resource_string(self, path):\n    data = pkg_resources.resource_string(__name__, path)\n    return data.decode('utf8')", "buggy_source_code": "@staticmethod\ndef resource_string(path):\n    data = pkg_resources.resource_string(__name__, path)\n    return data.decode('utf8')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_queryset(self):\n    if self.model.created_by is self.request.user:\n        return self.model.objects.all_active()\n    return self.model.objects.active()", "buggy_source_code": "def get_queryset(self):\n    if self.request.user.is_superuser:\n        return self.model.objects.all_active()\n    return self.model.objects.active()", "edit_actions": ["move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def private(self, post_type='post'):\n    return self._by_status('private', post_type)", "buggy_source_code": "def private(self, post_type='post'):\n    return self._by_status('private')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def drafts(self, post_type='post'):\n    return self._by_status('draft', post_type)", "buggy_source_code": "def drafts(self, post_type='post'):\n    return self._by_status('draft')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def published(self, post_type='post'):\n    return self._by_status('publish', post_type)", "buggy_source_code": "def published(self, post_type='post'):\n    return self._by_status('publish')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def intersection_update(self, other):\n    to_remove = [item for item in self if item not in other]\n    for item in to_remove:\n        self.discard(item)", "buggy_source_code": "def intersection_update(self, other):\n    other = set(other)\n    self._update_items([item for item in self.items if item in other])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def install_packages():\n    call('sudo apt-get -y install ' + ' '.join(packages_to_install), shell=True)", "buggy_source_code": "def install_packages():\n    call_with_err_code('sudo apt-get -y install ' + ' '.join(packages_to_install))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_fractional_day_from_dmy(dmy_feb_3_noon):\n    vic_lib.print_dmy(dmy_feb_3_noon)\n    frac_day = vic_lib.fractional_day_from_dmy(dmy_feb_3_noon)\n    assert frac_day == 3.5", "buggy_source_code": "def test_fractional_day_from_dmy(dmy_feb_3_noon):\n    frac_day = vic_lib.fractional_day_from_dmy(dmy_feb_3_noon)\n    assert frac_day == 3.5", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef is_element(self):\n    return self.composition.num_atoms == 1", "buggy_source_code": "@property\ndef is_element(self):\n    return self.composition.is_element", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_string_is_invalid_product(self):\n    try:\n        shopcart = Shopcart(1, 'product1')\n        self.assertRaises(DataValidationError)\n    except DataValidationError as e:\n        print(e.args[0])", "buggy_source_code": "def test_string_is_invalid_product(self):\n    with self.assertRaises(DataValidationError):\n        shopcart = Shopcart(1, 'product1')", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_float_is_invalid_product(self):\n    try:\n        shopcart = Shopcart(1, 2.0)\n        self.assertRaises(DataValidationError)\n    except DataValidationError as e:\n        print(e.args[0])", "buggy_source_code": "def test_float_is_invalid_product(self):\n    with self.assertRaises(DataValidationError):\n        shopcart = Shopcart(1, 2.0)", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getCanvasElement(self):\n    return self.getElement().firstChild", "buggy_source_code": "def getCanvasElement(self):\n    return self.canvas", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_subplot(self, **kwargs):\n    args = Data(self.__init_data(**kwargs))\n    color = kwargs['color']\n    self.ax.plot(args.x, args.y, color)", "buggy_source_code": "def add_subplot(self, **kwargs):\n    args = Data(self.__init_data(**kwargs))\n    self.ax.plot(args.x, args.y, kwargs['color'])", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, ubus):\n    self.__ubus = ubus\n    self.__objects = {}\n    self.__paths = []", "buggy_source_code": "def __init__(self, ubus):\n    self.__ubus = ubus\n    self.__paths = []", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_model_lookup_kwargs(self, **kwargs):\n    return kwargs.update(self.get_model_kwargs(kwargs))", "buggy_source_code": "def get_model_lookup_kwargs(self, **kwargs):\n    return self.get_model_kwargs(**kwargs)", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_box_width(self, width):\n    self.proxy_widget.setGeometry(QRectF(4, 7, width - 6, 16))", "buggy_source_code": "def set_box_width(self, width):\n    self.spin_box.set_box_width(width)", "edit_actions": ["move-tree", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def route(name, device, og_type, og_id):\n    dev_type = find_dev_type(device)\n    module_list = create_modules()\n    return module_list[dev_type].route_action(name, device, og_type, og_id)", "buggy_source_code": "def route(name, device, og_type, og_id):\n    dev_type = 'cisco-asa'\n    module_list = create_modules()\n    return module_list[dev_type].route_action(name, device, og_type, og_id)", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def GetDescription(expression, options=Options()):\n    descripter = ExpressionDescriptor(expression, options)\n    return descripter.GetDescription(DescriptionTypeEnum.FULL)", "buggy_source_code": "def GetDescription(expression, options=None):\n    descripter = ExpressionDescriptor(expression, options)\n    return descripter.GetDescription(DescriptionTypeEnum.FULL)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def output_to_variable(self, *_command_line):\n    _str = str(str, _command_line)\n    return os.popen(_str).readlines()", "buggy_source_code": "def output_to_variable(self, _command_line):\n    _str = str(_command_line)\n    return os.popen(_str).readlines()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _add_report_object(self, file, target):\n    proxy = GridFSProxy(db_alias='default-mongodb-connection')\n    proxy.put(file)\n    target[file.name] = proxy", "buggy_source_code": "def _add_report_object(self, file, target):\n    proxy = GridFSProxy()\n    proxy.put(file)\n    target[file.name] = proxy", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def load(self, dbname, dbmode='a'):\n    if dbmode == 'w':\n        raise AttributeError(\"dbmode='w' not allowed for load\")\n    db = Database(dbname, dbmode=dbmode)\n    return db", "buggy_source_code": "def load(dbname, dbmode='a'):\n    if dbmode == 'w':\n        raise AttributeError(\"dbmode='w' not allowed for load\")\n    db = Database(dbname, dbmode=dbmode)\n    return db", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, sender_keyword='sender', in_signature='', out_signature='')\ndef show(self, sender=None):\n    return self.app.window.present()", "buggy_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, in_signature='', out_signature='')\ndef show(self):\n    return self.app.window.present()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, sender_keyword='sender', in_signature='', out_signature='')\ndef hide(self, sender=None):\n    return self.app.window.hide()", "buggy_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, in_signature='', out_signature='')\ndef hide(self):\n    return self.app.window.hide()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, sender_keyword='sender', in_signature='', out_signature='i')\ndef unread(self, sender=None):\n    return self.app.state['unread_count']", "buggy_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, in_signature='', out_signature='i')\ndef unread(self):\n    return self.app.state['unread_count']", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, sender_keyword='sender', in_signature='', out_signature='')\ndef quit(self, sender=None):\n    return self.app.quit()", "buggy_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, in_signature='', out_signature='')\ndef quit(self):\n    return self.app.quit()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '{name}:{repr}'.format(name=self.__class__.__name__, repr=json.dumps(self.info(), indent=1, sort_keys=True, default=repr))", "buggy_source_code": "def __repr__(self):\n    return '{name}:{repr}'.format(name=self.__class__.__name__, repr=pformat(self.info()))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, filesystem):\n    self.filesystem = filesystem\n    fs_name = filesystem[filesystem.rfind('/'):]\n    self.logfile = Configs.results_directory + fs_name\n    print('log file is ' + self.logfile)", "buggy_source_code": "def __init__(self, filesystem):\n    self.filesystem = filesystem\n    fs_name = filesystem[filesystem.rfind('/'):]\n    self.logfile = Configs.results_directory + fs_name", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __exit__(self, *args):\n    if not self._closed:\n        NewTask(self.close(), loop=self.loop).x", "buggy_source_code": "def __exit__(self, *args):\n    if not self._closed:\n        asyncio.ensure_future(self.close())", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __del__(self):\n    if not self._closed:\n        NewTask(self.close(), loop=self.loop).x", "buggy_source_code": "def __del__(self):\n    if not self._closed:\n        asyncio.ensure_future(self.close())", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.unique = os.path.join(self.temp_fs.base_dir, self.temp_fs.token_id + '-blah.txt')", "buggy_source_code": "def setUp(self):\n    self.mkTestDir()\n    self.unique = self.getTestFile('blah.txt')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _build(self, *args, **kwargs):\n    self.config['length_factor'] = [2, 2, 2, 2]\n    super()._build()", "buggy_source_code": "def _build(self):\n    self.config['length_factor'] = [2, 2, 2, 2]\n    super()._build()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __rshift__(self, other):\n    if isinstance(other, Transformer):\n        return Chain(self, other)\n    raise TypeError('{} is not an instance of Transformer'.format(other))", "buggy_source_code": "def __rshift__(self, other):\n    if not isinstance(other, Transformer):\n        other = Value(other)\n    return Chain(self, other)", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, db):\n    Relationship.RelationshipCalculator.__init__(self, db)", "buggy_source_code": "def __init__(self):\n    Relationship.RelationshipCalculator.__init__(self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@celery.shared_task(base=ECCTask, name='cjc.abort_all')\ndef abort_all():\n    if abort_all.extant:\n        return True\n    else:\n        return abort_all.ecc.abort_all()", "buggy_source_code": "@celery.shared_task(base=ECCTask, name='cjc.abort_all')\ndef abort_all():\n    if abort_all.extant:\n        return abort_all.ecc.abort_all()\n    else:\n        return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __exit__(self, value, type, traceback):\n    close(self.output)", "buggy_source_code": "def __exit__(self, value, type, traceback):\n    self.output.close()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stats_port(self, port_no, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_stats_port(port_no, callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_packet_out(self, buffer_id, in_port, actions, data):\n    pass", "buggy_source_code": "def send_packet_out(buffer_id, in_port, actions, data):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def connection_lost(self, reason):\n    pass", "buggy_source_code": "def connection_lost(reason):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_port_mod(self, port_no, hw_addr, config, mask, advertise):\n    pass", "buggy_source_code": "def send_port_mod(port_no, hw_addr, config, mask, advertise):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def barrier(self, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def barrier(callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_features(self, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_features(callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handle_port_status(self, reason, desc):\n    pass", "buggy_source_code": "def handle_port_status(reason, desc):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stats_aggregate(self, match, table_id, out_port, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_stats_aggregate(match, table_id, out_port, callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def connection_made(self):\n    pass", "buggy_source_code": "def connection_made():\n    pass", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def handle_packet_in(self, buffer_id, total_len, in_port, reason, data):\n    pass", "buggy_source_code": "def handle_packet_in(buffer_id, total_len, in_port, reason, data):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stats_flow(self, match, table_id, out_port, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_stats_flow(match, table_id, out_port, callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stats_table(self, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_stats_table(callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_queue_config(self, port_no, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_queue_config(port_no, callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handle_flow_removed(self, match, cookie, priority, reason, duration_sec, duration_nsec, idle_timeout, packet_count, byte_count):\n    pass", "buggy_source_code": "def handle_flow_removed(match, cookie, priority, reason, duration_sec, duration_nsec, idle_timeout, packet_count, byte_count):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stats_queue(self, port_no, queue_id, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_stats_queue(port_no, queue_id, callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_flow_mod(self, match, cookie, command, idle_timeout, hard_timeout, priority, buffer_id, out_port, send_flow_rem, check_overlap, emerg, actions):\n    pass", "buggy_source_code": "def send_flow_mod(match, cookie, command, idle_timeout, hard_timeout, priority, buffer_id, out_port, send_flow_rem, check_overlap, emerg, actions):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stats_desc(self, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_stats_desc(callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_config(self, callback, timeout_callback=None, timeout=None):\n    pass", "buggy_source_code": "def get_config(callback, timeout_callback=None, timeout=None):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_set_config(self, switch_config):\n    pass", "buggy_source_code": "def send_set_config(switch_config):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update_matrices(self):\n    self.projection_matrix = self.update_projection_matrix()\n    self.shift_matrix = self.update_shift_matrix()", "buggy_source_code": "def update_matrices(self):\n    self.update_shift_matrix()\n    self.update_projection_matrix()", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def compare_version(v1, v2):\n    return version.parse(v1) < version.parse(v2)", "buggy_source_code": "def compare_version(v1, v2):\n    return parse_version(v1) < parse_version(v2)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __check_user(self, ref, user):\n    for (ref, item) in self.__stack.items():\n        if item.user == user:\n            return True\n    return False", "buggy_source_code": "def __check_user(self, ref, user):\n    for (ref, item) in self.__stack.items():\n        if item['user'] == user:\n            return True\n    return False", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def length(streamlines, affine=None):\n    if affine is not None:\n        streamlines = move_streamlines(streamlines, affine)\n    return map(metrics.length, streamlines)", "buggy_source_code": "def length(streamlines):\n    return map(metrics.length, streamlines)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def release(self, event):\n    super().release(event)\n    for (i, j) in self.peaklines.items():\n        self.ax.draw_artist(j)", "buggy_source_code": "def release(self, event):\n    super().release(event)\n    self.redraw()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def onmove(self, event):\n    super().onmove(event)\n    for (i, j) in self.peaklines.items():\n        self.ax.draw_artist(j)", "buggy_source_code": "def onmove(self, event):\n    super().onmove(event)\n    self.redraw()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def O(self):\n    tz = self.timezone.utcoffset(self.data)\n    return u'%+03d%02d' % (tz.seconds // 3600, tz.seconds // 60 % 60)", "buggy_source_code": "def O(self):\n    seconds = self.Z()\n    return u'%+03d%02d' % (seconds // 3600, seconds // 60 % 60)", "edit_actions": ["update-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_initial(self):\n    return {'user': self.request.user, 'status': self.form_class().my_status, 'file_type': self.kwargs['type']}", "buggy_source_code": "def get_initial(self):\n    return {'user': self.request.user, 'file_type': self.kwargs['type']}", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main(argv):\n    del argv\n    if FLAGS.csv:\n        generate_csv()\n    if FLAGS.mcf:\n        generate_mcf()", "buggy_source_code": "def main(_):\n    if FLAGS.csv:\n        generate_csv()\n    if FLAGS.mcf:\n        generate_mcf()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, client):\n    self.client = client\n    self.process = pexpect.spawnu('./buckPasser.py')\n    self.process.setecho(0)", "buggy_source_code": "def __init__(self):\n    self.process = pexpect.spawnu('python3', ['buckPasser.py'])\n    self.process.setecho(0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def return_column(self, board, color):\n    return random.choice(board.playable_positions())", "buggy_source_code": "def return_column(self, board):\n    return random.choice(board.playable_positions())", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@register.filter(name='network_deleted_badge', is_safe=True)\ndef network_deleted_badge(network):\n    deleted_badge = ''\n    if network.deleted:\n        deleted_badge = '<span class=\"badge badge-important\">Deleted</span>'\n    return deleted_badge", "buggy_source_code": "@register.filter(name='network_deleted_badge')\ndef network_deleted_badge(network):\n    deleted_badge = ''\n    if network.deleted:\n        deleted_badge = '<span class=\"badge badge-important\">Deleted</span>'\n    return deleted_badge", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_results(self):\n    return {'results': self.module.results, '_results': self.module._results, 'should_restore': self.module.should_restore}", "buggy_source_code": "def get_results(self):\n    return self._module_results", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.parametrize('metadata', [{'rasa_nlu_version': '0.12.0'}, {'rasa_nlu_version': '0.12.2'}, {'rasa_nlu_version': '0.12.0a2'}])\ndef test_model_is_compatible(metadata):\n    assert Interpreter.ensure_model_compatibility(metadata) is None", "buggy_source_code": "@pytest.mark.parametrize('metadata', [{'rasa_nlu_version': '0.12.3'}, {'rasa_nlu_version': '0.12.4a1'}])\ndef test_model_is_compatible(metadata):\n    assert Interpreter.ensure_model_compatibility(metadata) is None", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_enabled(self):\n    view = self.window.active_view()\n    is_iot = Tools.isIOTFile(view.file_name())\n    return is_iot", "buggy_source_code": "def is_enabled(self):\n    return PlatformioCLI.C['IOT']", "edit_actions": ["insert-node", "move-tree", "update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def plugin_unloaded():\n    for window in sublime.windows():\n        for client in window_clients(window).values():\n            unload_client(client)\n    debug('plugin unloaded')", "buggy_source_code": "def plugin_unloaded():\n    for window in sublime.windows():\n        for client in window_clients(window).values():\n            unload_client(client)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def plugin_loaded():\n    load_settings()\n    Events.subscribe('view.on_load_async', initialize_on_open)\n    Events.subscribe('view.on_activated_async', initialize_on_open)\n    debug('plugin loaded')\n    if show_status_messages:\n        sublime.status_message('LSP initialized')", "buggy_source_code": "def plugin_loaded():\n    load_settings()\n    Events.subscribe('view.on_load_async', initialize_on_open)\n    Events.subscribe('view.on_activated_async', initialize_on_open)\n    if show_status_messages:\n        sublime.status_message('LSP initialized')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_no_namespace(self):\n    self.assertEqual(self.render_string('{% load smart_load %}{% import * from lib1 %}{% tag1 %}'), '<app 2 lib 1 tag 1>')", "buggy_source_code": "def test_no_namespace(self):\n    self.assertTemplateRenders('{% load smart_load %}{% import * from lib1 %}{% tag1 %}', '<app 2 lib 1 tag 1>')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_changed_name(self):\n    self.assertEqual(self.render_string('{% load smart_load %}{% import lib1.tag1 as my_tag %}{% my_tag %}'), '<app 2 lib 1 tag 1>')", "buggy_source_code": "def test_changed_name(self):\n    self.assertTemplateRenders('{% load smart_load %}{% import lib1.tag1 as my_tag %}{% my_tag %}', '<app 2 lib 1 tag 1>')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_specific_app(self):\n    self.assertEqual(self.render_string('{% load smart_load %}{% import lib1 from app1 %}{% import lib2 from app2 %}{% lib1.tag1 %}{% lib2.tag1 %}'), '<app 1 lib 1 tag 1><app 2 lib 2 tag 1>')", "buggy_source_code": "def test_specific_app(self):\n    self.assertTemplateRenders('{% load smart_load %}{% import lib1 from app1 %}{% import lib2 from app2 %}{% lib1.tag1 %}{% lib2.tag1 %}', '<app 1 lib 1 tag 1><app 2 lib 2 tag 1>')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_namespace(self):\n    self.assertEqual(self.render_string('{% load smart_load %}{% import lib1 as my_lib %}{% my_lib.tag1 %}'), '<app 2 lib 1 tag 1>')", "buggy_source_code": "def test_namespace(self):\n    self.assertTemplateRenders('{% load smart_load %}{% import lib1 as my_lib %}{% my_lib.tag1 %}', '<app 2 lib 1 tag 1>')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_specific_app_and_name(self):\n    self.assertEqual(self.render_string('{% load smart_load %}{% import lib1 from app1 as my_lib1 %}{% my_lib1.tag1 %}'), '<app 1 lib 1 tag 1>')", "buggy_source_code": "def test_specific_app_and_name(self):\n    self.assertTemplateRenders('{% load smart_load %}{% import lib1 from app1 as my_lib1 %}{% my_lib1.tag1 %}', '<app 1 lib 1 tag 1>')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def after_insert(self):\n    print('*' * 50, 'add')\n    email_group = frappe.get_doc('Email Group', self.email_group)\n    email_group.update_total_subscribers()", "buggy_source_code": "def after_insert(self):\n    email_group = frappe.get_doc('Email Group', self.email_group)\n    email_group.update_total_subscribers()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def after_delete(self):\n    print('*' * 50, 'delete')\n    email_group = frappe.get_doc('Email Group', self.email_group)\n    email_group.update_total_subscribers()", "buggy_source_code": "def after_delete(self):\n    email_group = frappe.get_doc('Email Group', self.email_group)\n    email_group.update_total_subscribers()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getitem__(self, key):\n    indexes = self._check_index(key)\n    return self.get_data(indexes)", "buggy_source_code": "def __getitem__(self, index):\n    return self.get_batch(index)", "edit_actions": ["update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __insert_issue(self, issue):\n    db_issue = self.db.insert_issue(issue, self.tracker_id)", "buggy_source_code": "def __insert_issue(self, issue):\n    self.db.insert_issue(issue, self.tracker_id)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef conn_params():\n    return 'sqlite+pysqlite:///{0}'.format(pycds.test_dsn)", "buggy_source_code": "@pytest.fixture(scope='module')\ndef conn_params():\n    return pycds.test_dsn", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def bind(self, theObject, theProperty, theType):\n    return lambda : theType(theObject.property(theProperty).toPyObject())", "buggy_source_code": "def bind(self, theObject, theProperty, theType):\n    return lambda : theType(theObject.property(theProperty))", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def machines(request):\n    context = {'timeout': TIMEOUT}\n    return template('machines', context)", "buggy_source_code": "def machines(request):\n    context = {}\n    return template('machines', context)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _check_region(region, n_timestamps_1, n_timestamps_2):\n    region = np.array([reg[:n_timestamps_2] for reg in region])\n    region = np.clip(region, 0, n_timestamps_1)\n    return region", "buggy_source_code": "def _check_region(region, n_timestamps_1, n_timestamps_2):\n    region = np.clip(region[:, :n_timestamps_1], 0, n_timestamps_2)\n    return region", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.client = n_nova.Notifier().nclient", "buggy_source_code": "def __init__(self):\n    self.client = _get_client()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def axisID(self, axis):\n    try:\n        return axis.axisId()\n    except:\n        return axis.axisId", "buggy_source_code": "def axisID(self, axis):\n    if Glyphs.versionNumber >= 3:\n        return axis.axisId\n    else:\n        return None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def axisTag(self, axis):\n    try:\n        return axis.axisTag()\n    except:\n        return axis.axisTag", "buggy_source_code": "def axisTag(self, axis):\n    if Glyphs.versionNumber >= 3:\n        return axis.axisTag\n    else:\n        return axis['Tag']", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _raise_sale_payments_waiting(self):\n    Sale = Pool().get('sale.sale')\n    self.raise_user_error('sale_payments_waiting', (dict(Sale.payment_processing_state.selection).get(self.sale.payment_processing_state),))", "buggy_source_code": "def _raise_sale_payments_waiting(self):\n    Sale = Pool().get('sale.sale')\n    self.raise_user_error('sale_payments_waiting', (dict(Sale.payment_processing_state.selection).get(self.payment_processing_state),))", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def insertError(url, error):\n    query = 'INSERT INTO repos (url, error) VALUES (%s, %s);'\n    cur.execute(query, url, str(error))", "buggy_source_code": "def insertError(url, error):\n    query = 'INSERT INTO repos (url, error) VALUES (%s, %s);'\n    cur.execute(query, (url, error))", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def eventGetToElement(evt):\n    return hasattr(evt, 'toElement') and evt.toElement is not None or None", "buggy_source_code": "def eventGetToElement(evt):\n    return getattr(evt, 'toElement', None)", "edit_actions": ["move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def for_wsgi(self, start_response):\n    start_response('%d %s' % (self.status, self.reason), headers=self.headers)\n    return self.body", "buggy_source_code": "def for_wsgi(self, start_response):\n    start_response('%d %s' % (self.status, self.reason), self.headers)\n    return self.body", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_detail_url(self, obj):\n    import ipdb\n    ipdb.set_trace()\n    return '{}/identifiers/{}'.format(obj.absolute_api_v2_url, obj._id)", "buggy_source_code": "def get_detail_url(self, obj):\n    return '{}/identifiers/{}'.format(obj.absolute_api_v2_url, obj._id)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def norm(self, ord=None, axis=None, keepdims=False):\n    return numpy.linalg.norm(self.__numpy_array, ord, axis, keepdims)", "buggy_source_code": "def norm(self, ord=None, axis=None):\n    return numpy.linalg.norm(self.__numpy_array, ord, axis)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cycling_reset(self, disable=False):\n    if not sublime.active_window():\n        sublime.set_timeout(lambda : self.cycling_reset, 50)\n    else:\n        self.reset(disable)", "buggy_source_code": "def cycling_reset(self, disable=False):\n    if not sublime.active_window():\n        sublime.set_timeout(self.cycling_reset, 50)\n    else:\n        self.reset(disable)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def _on_change(self):\n    if self.has_changed():\n        print('changed!')\n        self.update()\n        self._callback()", "buggy_source_code": "def _on_change(self):\n    if self.has_changed():\n        self.update()\n        self._callback()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '%s(%s %s)' % (self.__class__.__name__, self.name, ' '.join((str(arg) for arg in self.args)))", "buggy_source_code": "def __repr__(self):\n    return '%s(%s)' % (self.__class__.__name__, ' '.join((str(arg) for arg in self.args)))", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def move(source_file, destination_path):\n    move = subprocess.Popen(rclone_args + ['move', '--delete-empty-src-dirs', source_file, destination_path])\n    move.wait()", "buggy_source_code": "def move(source_file, destination_path):\n    cmd = rclone_args + ['move', '--delete-empty-src-dirs', source_file, destination_path]\n    move = subprocess.Popen(cmd)\n    move.wait()", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def draw(self, context):\n    layout = self.layout\n    op = layout.operator(OGRE_toggle_toolbar_op.bl_idname)", "buggy_source_code": "def draw(self, context):\n    layout = self.layout\n    try:\n        op = layout.operator('ogre.toggle_interface')\n    except:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_json(url):\n    content = get_url(url)\n    if content == None:\n        return None\n    else:\n        js = json.loads(content)\n        return js", "buggy_source_code": "def get_json(url):\n    content = get_url(url)\n    js = json.loads(content)\n    return js", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, measurement_type):\n    self.event = ''\n    self.bad_data = 0\n    self.current_data = None\n    self.events = {}\n    self.messages_received = 0\n    self.measurement_type = measurement_type", "buggy_source_code": "def __init__(self, measurement_type):\n    self.event = ''\n    self.current_data = None\n    self.events = {}\n    self.messages_received = 0\n    self.measurement_type = measurement_type", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, username):\n    self.username = username\n    self.lastupdated = None\n    self.registered = None\n    self.charts = {}\n    self.songs = {}", "buggy_source_code": "def __init__(self, username):\n    self.username = username\n    self.charts = {}\n    self.songs = {}", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def finalize_options(self):\n    TestCommand.finalize_options(self)\n    self.test_args = []\n    self.test_suite = True", "buggy_source_code": "def finalize_options(self):\n    TestCommand.finalize_options(self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def onFinishCallback(self, ret):\n    wx.CallAfter(self.control.Enable)\n    if hasattr(self, 'waitCursor'):\n        del self.waitCursor", "buggy_source_code": "def onFinishCallback(self, ret):\n    self.control.Enable()\n    if hasattr(self, 'waitCursor'):\n        del self.waitCursor", "edit_actions": ["move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def url_parameters(params, erase_autogenerated=False):\n\n    def decorator(action_function):\n        action_function.url_parameters = params\n        action_function.urlconf_erase = erase_autogenerated\n        return action_function\n    return decorator", "buggy_source_code": "def url_parameters(params):\n\n    def decorator(action_function):\n        action_function.url_parameters = params\n        return action_function\n    return decorator", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, depth=3):\n    self.depth = 3", "buggy_source_code": "def __init__(self, depth=3):\n    self.depth = depth", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return unicode(self.id) or u''", "buggy_source_code": "def __unicode__(self):\n    return self.name", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    super().__init__()\n    self._pid = None", "buggy_source_code": "def __init__(self):\n    self._pid = None", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def time_apply_index(self, offset):\n    offset.apply_index(self.rng)", "buggy_source_code": "def time_apply_index(self, offset):\n    self.rng + offset", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fatal(self, errstr, exitCode=1):\n    raise error.EmitError(errstr, exitCode)", "buggy_source_code": "def fatal(self, exitCode=1):\n    raise error.EmitError(self, exitCode)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, data_connected):\n    self.__connection = {'engine': None, 'session': None, 'backend': None}\n    super(SqlalchemyConnector, self).__init__(data_connected)", "buggy_source_code": "def __init__(self, data_connected):\n    super(SqlalchemyConnector, self).__init__(data_connected)\n    self.__connection = {'backend': None}\n    self.__engine = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Order({Order})'.format(Order=self._repr('book', 'id', 'amount', 'price', 'datetime'))", "buggy_source_code": "def __repr__(self):\n    return 'Order({Order})'.format(Order=self._repr('book', 'id', 'amount', 'price'))", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, config, survey_id):\n    super().__init__(config, survey_id)\n    self.room_types = ['Private room', 'Entire home/apt', 'Shared room']\n    self.get_logged_progress()\n    self.get_bounding_box()", "buggy_source_code": "def __init__(self, config, survey_id):\n    super().__init__(config, survey_id)\n    self.get_logged_progress()\n    self.get_bounding_box()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def suspend(self, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.suspend(instance)", "buggy_source_code": "def suspend(self, instance):\n    self._vmops.suspend(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def power_on(self, context, instance, network_info, block_device_info=None):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.power_on(instance)", "buggy_source_code": "def power_on(self, context, instance, network_info, block_device_info=None):\n    self._vmops.power_on(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def inject_network_info(self, instance, nw_info):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.inject_network_info(instance, nw_info)", "buggy_source_code": "def inject_network_info(self, instance, nw_info):\n    self._vmops.inject_network_info(instance, nw_info)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unrescue(self, instance, network_info):\n    _vmops = self._get_vmops_for_compute_node(instance.node)\n    _vmops.unrescue(instance)", "buggy_source_code": "def unrescue(self, instance, network_info):\n    self._vmops.unrescue(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def detach_interface(self, instance, vif):\n    _vmops = self._get_vmops_for_compute_node(instance.node)\n    _vmops.detach_interface(instance, vif)", "buggy_source_code": "def detach_interface(self, instance, vif):\n    self._vmops.detach_interface(instance, vif)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def instance_exists(self, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    return _vmops.instance_exists(instance)", "buggy_source_code": "def instance_exists(self, instance):\n    return self._vmops.instance_exists(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def resume(self, context, instance, network_info, block_device_info=None):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.resume(instance)", "buggy_source_code": "def resume(self, context, instance, network_info, block_device_info=None):\n    self._vmops.resume(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def confirm_migration(self, migration, instance, network_info):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.confirm_migration(migration, instance, network_info)", "buggy_source_code": "def confirm_migration(self, migration, instance, network_info):\n    self._vmops.confirm_migration(migration, instance, network_info)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def snapshot(self, context, instance, image_id, update_task_state):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.snapshot(context, instance, image_id, update_task_state)", "buggy_source_code": "def snapshot(self, context, instance, image_id, update_task_state):\n    self._vmops.snapshot(context, instance, image_id, update_task_state)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_diagnostics(self, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    data = _vmops.get_diagnostics(instance)\n    return data", "buggy_source_code": "def get_diagnostics(self, instance):\n    return self._vmops.get_diagnostics(instance)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unpause(self, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.unpause(instance)", "buggy_source_code": "def unpause(self, instance):\n    self._vmops.unpause(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_volume_connector(self, instance):\n    _volumeops = self._get_volumeops_for_compute_node(instance['node'])\n    return _volumeops.get_volume_connector(instance)", "buggy_source_code": "def get_volume_connector(self, instance):\n    return self._volumeops.get_volume_connector(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_info(self, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    return _vmops.get_info(instance)", "buggy_source_code": "def get_info(self, instance):\n    return self._vmops.get_info(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_vnc_console(self, context, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    return _vmops.get_vnc_console(instance)", "buggy_source_code": "def get_vnc_console(self, context, instance):\n    return self._vmops.get_vnc_console(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def attach_interface(self, instance, image_meta, vif):\n    _vmops = self._get_vmops_for_compute_node(instance.node)\n    _vmops.attach_interface(instance, image_meta, vif)", "buggy_source_code": "def attach_interface(self, instance, image_meta, vif):\n    self._vmops.attach_interface(instance, image_meta, vif)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reboot(self, context, instance, network_info, reboot_type, block_device_info=None, bad_volumes_callback=None):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.reboot(instance, network_info)", "buggy_source_code": "def reboot(self, context, instance, network_info, reboot_type, block_device_info=None, bad_volumes_callback=None):\n    self._vmops.reboot(instance, network_info)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rescue(self, context, instance, network_info, image_meta, rescue_password):\n    _vmops = self._get_vmops_for_compute_node(instance.node)\n    _vmops.rescue(context, instance, network_info, image_meta)", "buggy_source_code": "def rescue(self, context, instance, network_info, image_meta, rescue_password):\n    self._vmops.rescue(context, instance, network_info, image_meta)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def power_off(self, instance, timeout=0, retry_interval=0):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.power_off(instance)", "buggy_source_code": "def power_off(self, instance, timeout=0, retry_interval=0):\n    self._vmops.power_off(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_instance_diagnostics(self, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    data = _vmops.get_instance_diagnostics(instance)\n    return data", "buggy_source_code": "def get_instance_diagnostics(self, instance):\n    return self._vmops.get_instance_diagnostics(instance)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def poll_rebooting_instances(self, timeout, instances):\n    for instance in instances:\n        _vmops = self._get_vmops_for_compute_node(instance['node'])\n        _vmops.poll_rebooting_instances(timeout, [instance])", "buggy_source_code": "def poll_rebooting_instances(self, timeout, instances):\n    self._vmops.poll_rebooting_instances(timeout, instances)", "edit_actions": ["move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def pause(self, instance):\n    _vmops = self._get_vmops_for_compute_node(instance['node'])\n    _vmops.pause(instance)", "buggy_source_code": "def pause(self, instance):\n    self._vmops.pause(instance)", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@bdd.then(bdd.parsers.parse('{section} -> {option} should be {value}'))\ndef check_option(quteproc, section, option, value):\n    actual_value = quteproc.get_setting(section, option)\n    assert actual_value == value", "buggy_source_code": "@bdd.then(bdd.parsers.parse('{section} should be {value}'))\ndef check_option(quteproc, option, value):\n    actual_value = quteproc.get_setting(option)\n    assert actual_value == value", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_unsuccessful_validation(self, broken_atf):\n    self.nammu.currentFilename = 'pytest.atf'\n    self.nammu.atfAreaController.edit_area.setText(broken_atf)\n    self.nammu.validate()\n    assert self.nammu.atfAreaController.validation_errors", "buggy_source_code": "def test_unsuccessful_validation(self, broken_atf, nammu):\n    nammu.currentFilename = 'pytest.atf'\n    nammu.atfAreaController.edit_area.setText(broken_atf)\n    nammu.validate()\n    assert nammu.atfAreaController.validation_errors", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_unsuccsessful_lem(self, broken_atf):\n    self.nammu.currentFilename = 'pytest.atf'\n    self.nammu.atfAreaController.edit_area.setText(broken_atf)\n    self.nammu.lemmatise()\n    assert self.nammu.atfAreaController.validation_errors", "buggy_source_code": "def test_unsuccsessful_lem(self, broken_atf, nammu):\n    nammu.currentFilename = 'pytest.atf'\n    nammu.atfAreaController.edit_area.setText(broken_atf)\n    nammu.lemmatise()\n    assert nammu.atfAreaController.validation_errors", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_pconfig(param):\n    if isinstance(param, PhenoxConfig):\n        pxlib.pxset_pconfig(ctypes.ctypes.byref(param))\n    else:\n        raise ValueError(\"pxset_pconfig only accepts 'PhenoxConfig'\")", "buggy_source_code": "def set_pconfig(param):\n    if isinstance(param, PhenoxConfig):\n        pxlib.pxset_pconfig(ctypes.byref(param))\n    else:\n        raise ValueError(\"pxset_pconfig only accepts 'PhenoxConfig'\")", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='session')\ndef docs_info():\n    return ['Control', 'Installation', 'Lifecycle and Automation', 'Quick Start', 'Settings And Operations', 'Insight', 'Integration Services']", "buggy_source_code": "@pytest.fixture(scope='session')\ndef docs_info():\n    return ['Control', 'Lifecycle and Automation', 'Quick Start', 'Settings And Operations', 'Insight', 'Integration Services']", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def changeDeltaETlcd(self, i):\n    aw.qmc.DeltaETlcdflag = not aw.qmc.DeltaETlcdflag\n    if aw.qmc.flagon:\n        aw.LCD4frame.setVisible(aw.qmc.DeltaETlcdflag)", "buggy_source_code": "def changeDeltaETlcd(self, i):\n    aw.qmc.DeltaETlcdflag = not aw.qmc.DeltaETlcdflag\n    aw.LCD4frame.setVisible(aw.qmc.DeltaETlcdflag)", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def changeDeltaBTlcd(self, i):\n    aw.qmc.DeltaBTlcdflag = not aw.qmc.DeltaBTlcdflag\n    if aw.qmc.flagon:\n        aw.LCD5frame.setVisible(aw.qmc.DeltaBTlcdflag)", "buggy_source_code": "def changeDeltaBTlcd(self, i):\n    aw.qmc.DeltaBTlcdflag = not aw.qmc.DeltaBTlcdflag\n    aw.LCD5frame.setVisible(aw.qmc.DeltaBTlcdflag)", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_chunk(chapter_id, chunk_id, start_verse, end_verse):\n    chunk_data = {'chapter_id': chapter_id, 'chunk_id': chunk_id, 'start_verse': start_verse, 'end_verse': end_verse}\n    print(chunk_data)\n    return chunk_data", "buggy_source_code": "def create_chunk(chapter_id, chunk_id, start_verse, end_verse):\n    chunk_data = {'chapter_id': chapter_id, 'chunk_id': chunk_id, 'start_verse': start_verse, 'end_verse': end_verse}\n    return chunk_data", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_mem():\n    return psutil.Process(os.getpid()).get_memory_info()[0]", "buggy_source_code": "def get_mem(self):\n    return psutil.Process(self.pid).get_memory_info()[0]", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def state(self, widget):\n    if self._pihole_status:\n        return ['enabled']\n    elif not self._pihole_status:\n        return ['disabled', 'warning']\n    return []", "buggy_source_code": "def state(self, widget):\n    if self._pihole_status is None:\n        return []\n    elif self._pihole_status:\n        return ['enabled']\n    return ['disabled', 'warning']", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef groups(self):\n    return self.kafka_groups.copy()", "buggy_source_code": "@property\ndef groups(self):\n    return self.kafka_groups", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clean_script(self):\n    if self.script_val == '':\n        return u''\n    elif self.script_val:\n        return self.cleaned_data['script']\n    else:\n        return None", "buggy_source_code": "def clean_script(self):\n    if self.script_val == '':\n        return u''\n    elif self.script_val:\n        return self.cleaned_data['script']\n    return None", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def populate(self, case_ids, plan=None):\n    self.fields['case'].queryset = TestCase.objects.filter(case_id__in=case_ids)", "buggy_source_code": "def populate(self, case_ids):\n    self.fields['case'].queryset = TestCase.objects.filter(case_id__in=case_ids)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _send_state_update_internal(self):\n    logging.debug('Sending printer update to ' + str(len(PrinterUpdateConnection.connections)) + ' websocket client.')\n    self.webSocketRouter.broadcast(PrinterUpdateConnection.connections, 'update-state')\n    pass", "buggy_source_code": "def _send_state_update_internal(self):\n    if len(PrinterUpdateConnection.connections) == 0:\n        return\n    self.webSocketRouter.broadcast(PrinterUpdateConnection.connections, 'update-state')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getattr__(self, key):\n    if key == 'id':\n        return self.id_\n    elif key == 'subscope':\n        return None\n    else:\n        raise AttributeError(key)", "buggy_source_code": "def __getattr__(self, key):\n    if key == 'id':\n        return self.id_\n    else:\n        raise AttributeError(key)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, src_path, tokenizer):\n    super(QNLIDataset, self).__init__(src_path, tokenizer, nb_classes=2)", "buggy_source_code": "def __init__(self, src_path, tokenizer):\n    super(QNLIDataset, self).__init__(src_path, tokenizer)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def negation(A, R):\n\n    @always_comb\n    def logic():\n        R.next = ~A\n    return logic", "buggy_source_code": "def negation(A, R):\n\n    @always_comb\n    def logic():\n        R.next = not A\n    return logic", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, namespace, socketio, app):\n    super().__init__('/app/updater', socketio)\n    self.app = app\n    self.socketio = socketio", "buggy_source_code": "def __init__(self, socketio, app):\n    super().__init__('/app/updater', socketio)\n    self.app = app\n    self.socketio = socketio", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_root_table_from_path(path):\n    spath = path.split('.')\n    if len(spath) == 0:\n        return path\n    else:\n        return spath[0]\n    return get_table_name_from_list(collection_path)", "buggy_source_code": "def get_root_table_from_path(path):\n    spath = path.split('.')\n    if len(spath) == 0:\n        return path\n    else:\n        return spath[0]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef create_user(self) -> dict:\n    url = 'https://trackobot.com/users.json'\n    r = requests.post(url)\n    r.raise_for_status()\n    return r.json()", "buggy_source_code": "@staticmethod\ndef create_user() -> dict:\n    url = 'https://trackobot.com/users.json'\n    r = requests.post(url)\n    r.raise_for_status()\n    return r.json()", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def _encode_for_return(self, data):\n    return compress_and_hex(json.dumps(data).encode('ascii', 'replace'))", "buggy_source_code": "@staticmethod\ndef _encode_for_return(data):\n    return compress_and_hex(json.dumps(data).encode('ascii', 'replace'))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef value(self):\n    return 255 ^ self.handler.read(self.port, self.board_num)", "buggy_source_code": "@property\ndef value(self):\n    return self.handler.read(self.port, self.board_num)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@DigitalPort.value.setter\ndef value(self, data):\n    raise InputDeviceError(\"You cannot set an input's values!\")", "buggy_source_code": "@property\ndef value(self):\n    return 255 ^ super().value", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _check_retval(t):\n    print(t)\n    if t.retval != 0:\n        print('FAIL? retval here is %s' % t.retval)", "buggy_source_code": "def _check_retval(t):\n    if t.retval != 0:\n        print('FAIL? retval here is %s' % t.retval)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dataflows(flowref):\n    output = pickle.loads(pkgutil.get_data('dlstats', 'tests/resources/ecb/ecb_dataflows_' + flowref + '.pkl'))\n    return output", "buggy_source_code": "def dataflows(flowref):\n    return DATAFLOWS[flowref]", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_categories(self):\n    output = pickle.loads(pkgutil.get_data('dlstats', 'tests/resources/ecb/ecb_categories_sdmx_dict.pkl'))\n    return output", "buggy_source_code": "def get_categories(self):\n    return CATEGORIES", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __call__(self, *keys):\n    result = self._flows\n    for k in keys:\n        print(k)\n        result = result[k]\n    return result", "buggy_source_code": "def __call__(self, *keys):\n    result = self._flows\n    for k in keys:\n        result = result[k]\n    return result", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    content.CHUNK_SIZE = content._CHUNK_SIZE\n    content.CONSECUTIVE_DL_LIMIT = content._CONSECUTIVE_DL_LIMIT", "buggy_source_code": "def tearDown(self):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef noise_std(self):\n    return self._noise_std", "buggy_source_code": "@property\ndef noise_std(self):\n    return 1", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_unit_abbreviation(abbrev):\n    return _unit_abbreviations.get(abbrev, abbrev)", "buggy_source_code": "def get_unit_abbreviation(abbrev):\n    return _unit_abbreviations[abbrev]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_minimum_datetime(self):\n    minimum_datetime = timezone.now() + timezone.timedelta(days=3)\n    return minimum_datetime.replace(second=0, microsecond=0)", "buggy_source_code": "def get_minimum_datetime(self):\n    minimum_datetime = timezone.now()\n    return minimum_datetime.replace(second=0, microsecond=0)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_examples():\n    global temp_files\n    url = shared.services['workspace_service_url']\n    data = proteins_to_fasta.run(url)\n    temp_files.append()", "buggy_source_code": "def test_examples():\n    global temp_files\n    url = shared.services['workspace_service_url']\n    data = run(url)\n    temp_files.append()", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_comment_stripping(_cmdline_app, capsys):\n    out = run_cmd(_cmdline_app, 'speak it was /* not */ delicious! # Yuck!')\n    expected = _normalize('it was  delicious!')\n    assert out == expected", "buggy_source_code": "def test_comment_stripping(_cmdline_app):\n    out = run_cmd(_cmdline_app, 'speak it was /* not */ delicious! # Yuck!')\n    expected = _normalize('it was  delicious!')\n    assert out == expected", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_optarser_correct_args_with_quotes_and_midline_options(_cmdline_app, capsys):\n    out = run_cmd(_cmdline_app, \"speak 'This is a' -s test of the emergency broadcast system!\")\n    expected = _normalize('THIS IS A TEST OF THE EMERGENCY BROADCAST SYSTEM!')\n    assert out == expected", "buggy_source_code": "def test_optarser_correct_args_with_quotes_and_midline_options(_cmdline_app):\n    out = run_cmd(_cmdline_app, \"speak 'This is a' -s test of the emergency broadcast system!\")\n    expected = _normalize('THIS IS A TEST OF THE EMERGENCY BROADCAST SYSTEM!')\n    assert out == expected", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, resource, payload, verify_ssl):\n    self._resource = resource\n    self._payload = payload\n    self._verify_ssl = verify_ssl\n    self.data = dict()", "buggy_source_code": "def __init__(self, resource, payload, verify_ssl):\n    self._resource = resource\n    self._payload = payload\n    self._verify_ssl = verify_ssl\n    self.data = None", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, resource, verify_ssl):\n    self._resource = resource\n    self._verify_ssl = verify_ssl\n    self.data = dict()", "buggy_source_code": "def __init__(self, resource, verify_ssl):\n    self._resource = resource\n    self._verify_ssl = verify_ssl\n    self.data = None", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@jit.unroll_safe\ndef get_previous_continuation(self, upto=[]):\n    return self.prev if not self.stop_at(upto) else None", "buggy_source_code": "def get_previous_continuation(self, upto=[]):\n    return self.prev if not self.stop_at(upto) else None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def package_info(self):\n    self.cpp_info.libs = ['luna', 'microhttpd']", "buggy_source_code": "def package_info(self):\n    self.cpp_info.libs = ['luna']", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _check_symlink_loop(self, *args, strict=True):\n    path = self.cls(*args)\n    with self.assertRaises(RuntimeError):\n        print(path.resolve(strict))", "buggy_source_code": "def _check_symlink_loop(self, *args):\n    path = self.cls(*args)\n    with self.assertRaises(RuntimeError):\n        print(path.resolve(strict=True))", "edit_actions": ["insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def show_popup(self):\n    self._listwindow.activate(self._orderedlist, self._controller.plugin, self._fire_item_clicked)", "buggy_source_code": "def show_popup(self):\n    self._listwindow.show()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    OptionsWidget.__init__(self, *args, **kwargs)\n    self._listwindow = ListWindow()\n    self._orderedlist = []", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    OptionsWidget.__init__(self, *args, **kwargs)\n    self._listwindow = None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ping(self):\n    celery_inspect = celery.task.control.inspect()\n    return set(celery_inspect.ping(timeout=self.interval) or {})", "buggy_source_code": "def ping(self, timeout):\n    celery_inspect = celery.task.control.inspect(timeout=timeout)\n    return set(celery_inspect.ping() or {})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_worker_stats(worker_name):\n    logger.info('Retrieving worker {0} stats'.format(worker_name))\n    global attempts\n    if attempts == 3:\n        return Mock()\n    attempts += attempts\n    return None", "buggy_source_code": "def get_worker_stats(worker_name):\n    logger.info('Retrieving worker {0} stats'.format(worker_name))\n    global attempts\n    if attempts == 3:\n        return Mock()\n    attempts += 1\n    return None", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@patch('mcm.adapters.CmdPathRow')\ndef test_assemble_data_calls_CmdPathRow(rowmock, master_adapter, data_set, data_row):\n    master_adapter.assemble_data(data=data_set)\n    rowmock.assert_any_call(data=data_row)", "buggy_source_code": "@patch('mcm.adapters.CmdPathRow')\ndef test_assemble_data_calls_CmdPathRow(rowmock, master_adapter, data_set, data_row):\n    master_adapter.assemble_data(data=data_set)\n    rowmock.assert_any_call(data_row)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reconnect(self):\n    if self._is_shutdown:\n        return\n    self._cluster.executor.submit(self._reconnect)", "buggy_source_code": "def reconnect(self):\n    if self._is_shutdown:\n        return\n    self._submit(self._reconnect)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def nextLines(self):\n    print(self.lines)\n    nextLines = list(islice(self.f, self.lines))\n    if not nextLines:\n        self.close()\n    return nextLines", "buggy_source_code": "def nextLines(self):\n    nextLines = list(islice(self.f, self.lines))\n    if not nextLines:\n        self.close()\n    return nextLines", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def thread_started(self):\n    self.basic_command().stop_event(self.stop_event())\n    WResponsiveBrokerCommand.ScheduledTask.thread_started(self)", "buggy_source_code": "def thread_started(self):\n    WResponsiveBrokerCommand.ScheduledTask.thread_started(self)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setErrorCost(self, errorCost):\n    Parameter.checkFloat(errorCost, 0.0, float('inf'))\n    self.errorCost = errorCost", "buggy_source_code": "def setErrorCost(self, errorCost):\n    Parameter.checkFloat(errorCost, 0.0, 1.0)\n    self.errorCost = errorCost", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getMetricMethod(self):\n    if self.getType() == 'C_SVC':\n        return Evaluator.binaryError\n    else:\n        return Evaluator.meanAbsError", "buggy_source_code": "def getMetricMethod(self):\n    return getattr(Evaluator, self.metricMethod)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def CreatePDFFileFromFigures(figures, filename):\n    pdf = PdfPages(filename.replace('.pdf', ''))\n    for fig in figures:\n        pdf.savefig(fig)\n    pdf.close()", "buggy_source_code": "def CreatePDFFileFromFigures(figures, filename):\n    pdf = PdfPages(filename)\n    for fig in figures:\n        pdf.savefig(fig)\n    pdf.close()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, privatekey):\n    from pushsafer import Client\n    self._privatekey = privatekey\n    self.pushsafer = Client('', privatekey=self._privatekey)", "buggy_source_code": "def __init__(self, private_key):\n    self._private_key = private_key", "edit_actions": ["move-tree", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task\ndef setup():\n    setup_postgres()\n    initialize_database_schema()\n    zotero_import()\n    setup_solr()\n    rebuild_index()", "buggy_source_code": "@task(setup_postgres, initialize_database_schema, zotero_import, setup_solr, rebuild_index)\ndef setup(ctx):\n    print('Omnibus setup invoked.')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def exceptionHandler(type, value, tb):\n    logging.getLogger().exception('Uncaught exception: {}'.format(str(value)))\n    sys.__excepthook__(type, value, tb)", "buggy_source_code": "def exceptionHandler(type, value, tb):\n    logging.getLogger().exception('Uncaught exception: {}'.format(str(value)))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def center_out(self):\n    if not self.discrim_finished:\n        self.bail_trial()", "buggy_source_code": "def center_out(self):\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cal_globalIndexH(self):\n    h_local = self.cal_localIndexH()\n    h_global = np.sum(h_local, axis=0)\n    return h_global", "buggy_source_code": "def cal_globalIndexH(self):\n    h_local = self.cal_localIndexH()\n    h_global = np.sum(h_local)\n    return h_global", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, room, parent):\n    self.Input = editWidget(self)\n    rattlekekzBaseTab.__init__(self, room, parent)\n    self.history = ['']\n    self.count = -1", "buggy_source_code": "def __init__(self, room, parent):\n    self.Input = editWidget(self)\n    rattlekekzBaseTab.__init__(self, room, parent)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_update(self):\n    self.load_tasks()\n    self.sync_tasks()\n    self.update_dependencies_on_duplicated_project()", "buggy_source_code": "def on_update(self):\n    self.update_costing_and_percentage_complete()\n    self.update_dependencies_on_duplicated_project()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@worker.run_async\n@handle_exception\ndef removeDataItem(cbObj, parentId, name):\n    _debug('Removing ' + name)\n    client.remove_dataitem(parentId, name)\n    _sendCompletedSignal(cbObj, parentId, name)", "buggy_source_code": "@worker.run_async\n@handle_exception\ndef removeDataItem(cbObj, parentId, name):\n    client.remove_dataitem(parentId, name)\n    _sendCompletedSignal(cbObj, parentId, name)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validatePage(self):\n    print(' ---- Tags: ---- ')\n    print(self.base.spec.tags)\n    print('\\n ----- Scripts: ----- ')\n    print(self.base.spec.scripts)\n    return True", "buggy_source_code": "def validatePage(self):\n    return True", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _notification(message):\n    try:\n        n = pynotify.Notification('SoundConverter', message)\n        n.show()\n    except glib.GError:\n        pass", "buggy_source_code": "def _notification(message):\n    try:\n        n = pynotify.Notification('SoundConverter', message)\n        n.show()\n    except:\n        pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, defaults):\n    self._filtered_providers = defaults", "buggy_source_code": "def __init__(self):\n    self.cmdline_filter = None\n    self._providers = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rawDataIn(self, buf):\n    print(u'> %s' % unicode(buf, 'utf-8'))", "buggy_source_code": "def rawDataIn(self, buf):\n    print('> %s' % buf)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rawDataOut(self, buf):\n    print(u'< %s' % unicode(buf, 'utf-8'))", "buggy_source_code": "def rawDataOut(self, buf):\n    print('< %s' % buf)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(autouse=True)\ndef revision():\n    from pootle.core.models import Revision\n    Revision.initialize(force=True)", "buggy_source_code": "@pytest.fixture(autouse=True)\ndef revision():\n    from pootle.core.models import Revision\n    Revision.initialize()", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, F, M, u):\n    ErrorControlGenerator.__init__(self, __import__('dolfin'), F, M, u)\n    self.initialize_data()", "buggy_source_code": "def __init__(self, F, M, u):\n    ErrorControlGenerator.__init__(self, __import__('dolfin'), F, M, u)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def item_comment(self, strike):\n    return 'Greve da empresa ' + strike.company.name + '\\n' + 'De ' + str(strike.start_date) + ' a ' + str(strike.end_date.strftime) + '\\n' + strike.description", "buggy_source_code": "def item_comment(self, strike):\n    return 'Greve da empresa ' + strike.company.name + '\\n' + 'De ' + str(strike.start_date) + ' a ' + str(strike.end_date) + '\\n' + strike.description", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def warpinto(self, dataset):\n    reproject(source=self.dataset, target=dataset, algorithm=self.algorithm)", "buggy_source_code": "def warpinto(self, dataset):\n    reproject(source=self.dataset, target=dataset)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unsqueeze(data, axis, oldshape):\n    newshape = list(oldshape)\n    newshape[axis] = 1\n    data.shape = newshape", "buggy_source_code": "def unsqueeze(data, axis, oldshape):\n    newshape = list(oldshape)\n    newshape[axis] = 1\n    return data.reshape(newshape)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def new_comments(self):\n    return self.comments.filter(active=True, meeting_id=None)", "buggy_source_code": "def new_comments(self):\n    return self.comments.filter(meeting_id=None)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_surrounding_whitepace_not_altered(self):\n    template = 'first{{#spacing}} second {{/spacing}}third'\n    ret = pystache.render(template, {'spacing': True})\n    self.assertEquals(ret, 'first second third')", "buggy_source_code": "def test_surrounding_whitepace_not_altered(self):\n    template = 'first{{#spacing}} second {{/spacing}}third'\n    context = {'spacing': True}\n    self._assert_rendered('first second third', template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_comments(self):\n    template = 'What {{! the }} what?'\n    ret = pystache.render(template)\n    self.assertEquals(ret, 'What  what?')", "buggy_source_code": "def test_comments(self):\n    template = 'What {{! the }} what?'\n    actual = pystache.render(template)\n    self.assertEquals('What  what?', actual)", "edit_actions": ["update-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_later_list_section_with_escapable_character(self):\n    template = '{{#s1}}foo{{/s1}} {{#s2}}<{{/s2}}'\n    context = {'s1': True, 's2': [True]}\n    actual = pystache.render(template, context)\n    self.assertEquals(actual, 'foo <')", "buggy_source_code": "def test_later_list_section_with_escapable_character(self):\n    template = '{{#s1}}foo{{/s1}} {{#s2}}<{{/s2}}'\n    context = {'s1': True, 's2': [True]}\n    self._assert_rendered('foo <', template, context)", "edit_actions": ["move-tree", "update-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_implicit_iterator(self):\n    template = '<ul>{{#users}}<li>{{.}}</li>{{/users}}</ul>'\n    context = {'users': ['Chris', 'Tom', 'PJ']}\n    ret = pystache.render(template, context)\n    self.assertEquals(ret, '<ul><li>Chris</li><li>Tom</li><li>PJ</li></ul>')", "buggy_source_code": "def test_implicit_iterator(self):\n    template = '<ul>{{#users}}<li>{{.}}</li>{{/users}}</ul>'\n    context = {'users': ['Chris', 'Tom', 'PJ']}\n    expected = '<ul><li>Chris</li><li>Tom</li><li>PJ</li></ul>'\n    self._assert_rendered(expected, template, context)", "edit_actions": ["insert-node", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_ignores_misses(self):\n    template = 'I think {{name}} wants a {{thing}}, right {{name}}?'\n    ret = pystache.render(template, {'name': 'Jon'})\n    self.assertEquals(ret, 'I think Jon wants a , right Jon?')", "buggy_source_code": "def test_ignores_misses(self):\n    template = 'I think {{name}} wants a {{thing}}, right {{name}}?'\n    context = {'name': 'Jon'}\n    self._assert_rendered('I think Jon wants a , right Jon?', template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_less_basic(self):\n    template = \"It's a nice day for {{beverage}}, right {{person}}?\"\n    ret = pystache.render(template, {'beverage': 'soda', 'person': 'Bob'})\n    self.assertEquals(ret, \"It's a nice day for soda, right Bob?\")", "buggy_source_code": "def test_less_basic(self):\n    template = \"It's a nice day for {{beverage}}, right {{person}}?\"\n    context = {'beverage': 'soda', 'person': 'Bob'}\n    self._assert_rendered(\"It's a nice day for soda, right Bob?\", template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def assertAlmostEqual(self, data):\n    return risk_almost_equal(self, data, lambda x: operator.attrgetter('mean', 'stddev'))", "buggy_source_code": "def assertAlmostEqual(self, data):\n    return risk_almost_equal(self, data, operator.attrgetter('mean', 'stddev'))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def start(self):\n    if not self._strtd.is_set():\n        threading.Thread.start(self)\n        self._strtd = True", "buggy_source_code": "def start(self):\n    if not self._strtd:\n        threading.Thread.start(self)\n        self._strtd = True", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@mark.xfail\ndef test_reply_other_user(self, browser):\n    comment = browser.find_by_css('.comment').first\n    reply = create_reply_comment(browser, comment, 'other user reply')\n    assert reply is not None", "buggy_source_code": "def test_reply_other_user(self, browser):\n    comment = browser.find_by_css('.comment').first\n    reply = create_reply_comment(browser, comment, 'other user reply')\n    assert reply is not None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, file_path, root_xpath):\n    self.lang = 'en'\n    self.list = None\n    self.file_path = file_path\n    self.root_xpath = root_xpath", "buggy_source_code": "def __init__(self, file_path, root_xpath):\n    self.file_path = file_path\n    self.root_xpath = root_xpath", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_bug_list(self, params={}):\n    url = url = urljoin(self.API_ROOT, 'bug/?%s' % self.qs(**params))\n    return BugSearch.get(url).bugs", "buggy_source_code": "def get_bug_list(self, params={}):\n    url = urljoin(self.API_ROOT, 'bug/?%s' % self.qs(**params))\n    return BugSearch.get(url).bugs", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def compile_frcs(dllnames):\n    for (_, name) in enumerate(dllnames):\n        name = splitext(name)[0]\n        tools.extract_frc(name)", "buggy_source_code": "def compile_frcs(dllnames):\n    for name in dllnames:\n        name = splitext(name)[0]\n        tools.compile_frc(name)", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@unittest.expectedFailure\ndef test_01_publish_repo_group_with_no_members_bz1148937(self):\n    response = self.repo_group.publish(self.pulp, 'dist_1')\n    self.assertPulp(code=202)\n    Task.wait_for_report(self.pulp, response)", "buggy_source_code": "def test_01_publish_repo_group_with_no_members_bz1148937(self):\n    response = self.repo_group.publish(self.pulp, 'dist_1')\n    self.assertPulp(code=202)\n    Task.wait_for_report(self.pulp, response)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def check_output(cmd):\n    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]", "buggy_source_code": "def check_output(cmd):\n    try:\n        return _check_output(cmd)\n    except:\n        return None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_safe_box(box: Optional[Box], legacy_windows: bool) -> Box:\n    if legacy_windows:\n        return LEGACY_WINDOWS_SUBSTITUTIONS.get(box, box) if box else None\n    else:\n        return box", "buggy_source_code": "@overload\ndef get_safe_box(box: None, legacy_windows: bool) -> None:\n    ...", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def GetXmax(self):\n    if len(self) == 0:\n        raise ValueError('Attempting to get xmax of empty graph')\n    return ROOT.TMath.MaxElement(self.GetN(), self.GetX())", "buggy_source_code": "def GetXmax(self):\n    if len(self) == 0:\n        raise ValueError('Attempting to get xmax of empty graph')\n    return max(list(self.x()))", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getArgsGTypes(self, inSignalMethod):\n    result = []\n    for param in inSignalMethod.params:\n        result.append(self._getGType(param.type_))\n    return result", "buggy_source_code": "def getArgsGTypes(self, inSignalMethod):\n    result = []\n    for param in inSignalMethod.params:\n        result.append(self._getGType(param))\n    return result", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_user_range(self, user_list):\n    for usr in user_list:\n        if hasattr(usr, 'is_dhcp') and (not usr.is_dhcp()):\n            self.add_user(usr)", "buggy_source_code": "def add_user_range(self, user_list):\n    for usr in user_list:\n        self.add_user(usr)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def MultiThreadStartDelay(num_vms, threads_per_vm):\n    return MULTISTREAM_DELAY_CONSTANT + MULTISTREAM_DELAY_PER_VM * num_vms + MULTISTREAM_DELAY_PER_STREAM * (num_vms * threads_per_vm)", "buggy_source_code": "def MultiThreadStartDelay(num_vms, threads_per_vm):\n    return MULTISTREAM_DELAY_CONSTANT + MULTISTREAM_DELAY_PER_VM * num_vms + MULTISTREAM_DELAY_PER_STREAM * threads_per_vm", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef pushbranch(self, branchname):\n    os.system('git push origin ' + branchname)", "buggy_source_code": "@staticmethod\ndef pushbranch(branchname):\n    os.system('git push origin ' + branchname)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef createignore(self):\n    newline = '\\n'\n    with open('.gitignore', 'w') as ignore:\n        ignore.write('.jazz5' + newline)\n        ignore.write('.metadata' + newline)", "buggy_source_code": "@staticmethod\ndef createignore():\n    newline = '\\n'\n    with open('.gitignore', 'w') as ignore:\n        ignore.write('.jazz5' + newline)\n        ignore.write('.metadata' + newline)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_elements_info(self):\n    ret = [elem.serialize() for pool in self.getPoolListObjs() for elem in pool.getElements()]\n    ret += self.get_local_elements_info()\n    return ret", "buggy_source_code": "def get_elements_info(self):\n    ret = self.get_remote_elements_info()\n    ret += self.get_local_elements_info()\n    return ret", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    super(TestMockService, self).setUp()\n    (_, self.port) = bind_unused_port()\n    self.service = MockService(self.io_loop, self.port)", "buggy_source_code": "def setUp(self):\n    super(TestMockService, self).setUp()\n    self.service = MockService(self.io_loop)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_join(self):\n    group = Group.objects.create(group_name='my-group', slackaccount=self.slackaccount)\n    self.assertCommandResponse('/announce join my-group', \"You've been added to my-group.\")", "buggy_source_code": "def test_join(self):\n    Group.objects.create(group_name='my-group', slackaccount=self.slackaccount)\n    self.assertCommandResponse('/announce join my-group', \"You've been added to my-group.\")", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def angular_diameter_at(self, dist: float) -> (float, float):\n    return atan2(2 * self.radius, dist)", "buggy_source_code": "def angular_diameter_at(self, dist: float) -> float:\n    return atan2(2 * self.radius, dist)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    super(EquipableItem, self).__init__()\n    self.actions.append(action.ReEquipAction(self))\n    self.equipment_type = None", "buggy_source_code": "def __init__(self):\n    super(EquipableItem, self).__init__()\n    self.actions.append(action.ReEquipAction(self))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef data(self):\n    if self.file_oid is None:\n        raise IrmaValueError('There is not data associated')\n    return ScanFileData(id=self.id).data", "buggy_source_code": "@property\ndef data(self):\n    if self.file_oid is None:\n        return None\n    return ScanFileData(id=self.file_oid).data", "edit_actions": ["insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_suite():\n    translator = DocFileSuite('translator.txt', tearDown=tearDown, optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS)\n    s = unittest.TestSuite((translator,))\n    return s", "buggy_source_code": "def test_suite():\n    translator = DocFileSuite('translator.txt', optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS)\n    s = unittest.TestSuite((translator,))\n    return s", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    sideA = float(self.__sideA)\n    sideB = float(self.__sideB)\n    sideC = float(self.__sideC)\n    return '( {}, {}, {} )'.format(sideA, sideB, sideC)", "buggy_source_code": "def __str__(self):\n    return '( {}, {}, {} )'.format(self.__sideA, self.__sideB, self.__sideC)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    sideA = float(self.__sideA)\n    sideB = float(self.__sideB)\n    sideC = float(self.__sideC)\n    return '{}:.2f, {}.2f, {}.2f'.format(sideA, sideB, sideC)", "buggy_source_code": "def __repr__(self):\n    return '{}, {}, {}'.format(self.__sideA, self.__sideB, self.__sideC)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@unittest.skip('broken by new, non-leaking implementation of references')\ndef testVariableSharingBetweenTwoClosures(self):\n    runTestReturnsIntegers(self, 'shared_variables.asm', [42, 69])", "buggy_source_code": "def testVariableSharingBetweenTwoClosures(self):\n    runTestReturnsIntegers(self, 'shared_variables.asm', [42, 69])", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, cab_sys, proto_cell: CACell=None):\n    self.proto_cell = proto_cell\n    self.cab_sys = cab_sys\n    raise NotImplementedError('Method needs to be implemented')", "buggy_source_code": "def __init__(self, cab_sys, proto_cell: CACell=None):\n    self.proto_cell = proto_cell\n    self.cab_sys = cab_sys", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def find_matches(self, entity):\n    return self._find_matches(entity, transformed_dict_cls=dict, variable_keylen=True, use_named_slots=False)", "buggy_source_code": "def find_matches(self, entity):\n    return self._find_matches(entity, transformed_dict_cls=dict, use_named_slots=False)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef cookiejar(self):\n    if self._jar is None:\n        from cookielib import CookieJar\n        self._jar = CookieJar()\n    return self._jar", "buggy_source_code": "@property\ndef cookiejar(self):\n    if self._jar is None:\n        self._jar = CookieJar()\n    return self._jar", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef cookiejar(self):\n    if self._jar is None:\n        from cookielib import CookieJar\n        self._jar = CookieJar()\n    return self._jar", "buggy_source_code": "@property\ndef cookiejar(self):\n    if self._jar is None:\n        self._jar = CookieJar()\n    return self._jar", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef cookiejar(self):\n    if self._jar is None:\n        from cookielib import CookieJar\n        self._jar = CookieJar()\n    return self._jar", "buggy_source_code": "@property\ndef cookiejar(self):\n    if self._jar is None:\n        self._jar = CookieJar()\n    return self._jar", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(os.path.join(sp.ROOT_FOLDER, sp.RESULTS_FOLDER, sp.FINALS_FOLDER, 'rf_forward_' + self.batch_prefix))", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(os.path.join(sp.ROOT_FOLDER, sp.RESULTS_FOLDER, 'rf_forward_' + self.batch_prefix))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _SetupVM(benchmark_spec, thread_id):\n    if thread_id == 1:\n        _SetupBackend(benchmark_spec)\n    if thread_id == 2:\n        _SetupFrontend(benchmark_spec)", "buggy_source_code": "def _SetupVM(benchmark_spec, thread_id):\n    if thread_id == BK:\n        _SetupBackend(benchmark_spec)\n    if thread_id == FR:\n        _SetupFrontend(benchmark_spec)", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, model, feature_name='ABSTRACT_LM'):\n    MosesFeature.__init__(self, feature_name)\n    self._order = None\n    self._zipping = None\n    self._model = model", "buggy_source_code": "def __init__(self, model, feature_name='ABSTRACT_LM'):\n    MosesFeature.__init__(self, feature_name)\n    self._order = None\n    self._model = model", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef enable_status_to_str(enable_status):\n    enable_status_str = ''\n    if enable_status in IData.ENABLE_STATUS.keys():\n        return IData.ENABLE_STATUS[enable_status]\n    return IData.ENABLE_STATUS[IData.ENABLE_STATUS_UNKNOWN]", "buggy_source_code": "@staticmethod\ndef enable_status_to_str(enable_status):\n    if enable_status in IData.ENABLE_STATUS.keys():\n        return IData.ENABLE_STATUS[enable_status]\n    return IData.ENABLE_STATUS[IData.ENABLE_STATUS_UNKNOWN]", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_inline_instances(self, request, obj=None):\n    if obj is None or obj.pk is None:\n        self.inlines = []\n    return super().get_inline_instances(request, obj)", "buggy_source_code": "def get_inline_instances(self, request, obj=None):\n    if obj is None or obj.pk is None:\n        return []\n    return super().get_inline_instances(request, obj)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def all():\n    global __F\n    try:\n        return __F\n    except NameError:\n        __F = {}\n    return __F", "buggy_source_code": "def all():\n    global __F\n    return __F", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reset():\n    global __F\n    try:\n        __F.clear()\n    except NameError:\n        __F = {}\n    return", "buggy_source_code": "def reset():\n    global __F\n    __F.clear()", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getitem__(self, key):\n    return self.c[self.i][key]", "buggy_source_code": "def __getitem__(self, key):\n    return self.v[key]", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def response(self):\n    return render_to_response(template_name=self.template_name, context=self.context, context_instance=RequestContext(self.request))", "buggy_source_code": "def response(self):\n    return render(self.request, template_name=self.template_name, context=self.context)", "edit_actions": ["update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def pause(self):\n    print('pause')", "buggy_source_code": "def pause(self):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def stop(self):\n    self.p.kill()\n    print('stop')\n    self.delete_file()", "buggy_source_code": "def stop(self):\n    self.p.kill()\n    self.delete_file()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def resume(self):\n    print('resume')", "buggy_source_code": "def resume(self):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def running(self):\n    if self.p.poll() is None:\n        return True\n    else:\n        print('Finished')\n        return False", "buggy_source_code": "def running(self):\n    if self.p.poll() is None:\n        return True\n    else:\n        return False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def stop(self):\n    self.write('awgcontrol:stop:immediate')\n    self.detect_overflow()\n    self.getErrors()", "buggy_source_code": "def stop(self):\n    self.write('awgcontrol:stop:immediate')\n    self.getErrors()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef __multiple_words(min, max):\n    return \"([a-zA-ZÀ-ÿ0-9]+(\\\\s|'|,\\\\s)){\" + str(min) + ',' + str(max) + '}'", "buggy_source_code": "def __multiple_words(min, max):\n    return \"([a-zA-ZÀ-ÿ0-9]+(\\\\s|'|,\\\\s)){\" + str(min) + ',' + str(max) + '}'", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ewarn(self, s):\n    sys.stdout.write(self._m_sIndent + '[W] ' + s)", "buggy_source_code": "def ewarn(self, s):\n    print(self._m_sIndent + '[W] ' + s)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def eerror(self, s):\n    sys.stdout.write(self._m_sIndent + '[E] ' + s)\n    raise Exception(s)", "buggy_source_code": "def eerror(self, s):\n    print(self._m_sIndent + '[E] ' + s)", "edit_actions": ["move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def einfo(self, s):\n    sys.stdout.write(self._m_sIndent + '[I] ' + s)", "buggy_source_code": "def einfo(self, s):\n    print(self._m_sIndent + '[I] ' + s)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def includeme(config):\n    config.add_route('references', '/references')\n    _add_referencer(config.registry)\n    config.scan('referencesplugin')", "buggy_source_code": "def includeme(config):\n    config.add_route('references', '/references')\n    _add_referencer(config.registry)\n    config.scan()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def test_main(self):\n    self.assertEqual(self.result, 1)", "buggy_source_code": "def test_main(self):\n    self.assertEqual(self.result, BATCH_SIZE)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def targetClicked(self):\n    self.getDevice().goTarget(self._targetPos, self.selectedSpeed())", "buggy_source_code": "def targetClicked(self):\n    self.getDevice().goTarget(self.selectedSpeed())", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def approachClicked(self):\n    self.getDevice().goApproach(self._targetPos, self.selectedSpeed())", "buggy_source_code": "def approachClicked(self):\n    self.getDevice().goApproach(self.selectedSpeed())", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reset_completions(self):\n    self.tables = []\n    self.columns = defaultdict(itertools.repeat(['*']).next)\n    self.all_completions = set(self.keywords)", "buggy_source_code": "def reset_completions(self):\n    self.tables = []\n    self.columns = defaultdict(lambda : ['*'])\n    self.all_completions = set(self.keywords)", "edit_actions": ["move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_float_filter(self, field):\n    if not self.is_number:\n        return None\n    return Q(**{field.name: float(self.term)})", "buggy_source_code": "def create_float_filter(self, field):\n    if self.is_number:\n        return Q(**{field.name: float(self.term)})", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_integer_filter(self, field):\n    if not self.is_integer:\n        return None\n    return Q(**{field.name: int(self.term)})", "buggy_source_code": "def create_integer_filter(self, field):\n    if self.is_integer:\n        return Q(**{field.name: int(self.term)})", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def custom_discriminator_config():\n    return {'create': custom_discriminator, 'noise': [0.01, False]}", "buggy_source_code": "def custom_discriminator_config():\n    return {'create': custom_discriminator}", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __next__(self):\n    line = self.f.readline().strip()\n    if line == '':\n        self.f.close()\n        raise StopIteration\n    return line", "buggy_source_code": "def __next__(self):\n    line = self.f.readline()\n    if not line:\n        self.f.close()\n        raise StopIteration\n    return line.strip()", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cancel_payment_for_guest(payment):\n    try:\n        guest = payment.identified_guest\n    except:\n        return logger.error(f'cancel_payment_for_guest: No identified guest for payment {payment.pk}')\n    guest.status = RSVP.STATUS_CANCELED\n    guest.save()", "buggy_source_code": "def cancel_payment_for_guest(payment):\n    try:\n        guest = payment.identified_guest\n    except:\n        return\n    guest.status = RSVP.STATUS_CANCELED\n    guest.save()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_should_not_accept_keyword_only_parameter(self):\n    parameter = Parameter('foo', Parameter.KEYWORD_ONLY, annotation=int)\n    with self.assertRaises(TypeError):\n        PycksonAttribute.from_parameter(parameter)", "buggy_source_code": "def test_should_not_accept_keyword_only_parameter(self):\n    parameter = Parameter('foo', Parameter.KEYWORD_ONLY, annotation=int)\n    with self.assertRaises(TypeError):\n        build_pyckson_attribute(parameter)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_should_not_accept_var_keyword_parameter(self):\n    parameter = Parameter('foo', Parameter.VAR_KEYWORD, annotation=int)\n    with self.assertRaises(TypeError):\n        PycksonAttribute.from_parameter(parameter)", "buggy_source_code": "def test_should_not_accept_var_keyword_parameter(self):\n    parameter = Parameter('foo', Parameter.VAR_KEYWORD, annotation=int)\n    with self.assertRaises(TypeError):\n        build_pyckson_attribute(parameter)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main(inputNetwork):\n    clusters = findClusters(inputNetwork)\n    for cluster in clusters:\n        arcpy.AddMessage('Cluster ' + str(cluster.id))\n    handleClusters(inputNetwork, clusters)", "buggy_source_code": "def main(inputNetwork):\n    arcpy.AddMessage('Finding clusters...')\n    clusters = findClusters(inputNetwork)\n    arcpy.AddMessage(str(len(clusters)))\n    handleClusters(inputNetwork, clusters)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get(self, url, params={}):\n    if self._transaction:\n        raise GetInsideTransactionError\n    return self._do_call('GET', url, params=params)", "buggy_source_code": "def _get(self, url, params=None):\n    if self._transaction:\n        raise GetInsideTransactionError\n    return self._do_call('GET', url, params=params)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_mac_font_path(self, font_map, name, style):\n    return font_map.get(' '.join((name, style)).strip().lower())", "buggy_source_code": "def _get_mac_font_path(self, font_map, name, style):\n    return font_map.get((name + ' ' + style).strip().lower())", "edit_actions": ["move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def actualIcon(self):\n    return (self.icon, 1)", "buggy_source_code": "def actualIcon(self):\n    return getKeyUrl(self.icon)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _highly_expressed(self, value):\n    if value in self.expression:\n        return self.expression[value] >= self.higher_cutoff\n    else:\n        return np.nan", "buggy_source_code": "def _highly_expressed(self, value):\n    if value in self.expression:\n        return self.expression[value] >= self.higher_cutoff\n    else:\n        return nan", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _lowly_expressed(self, value):\n    if value in self.expression:\n        return self.expression[value] < self.lower_cutoff\n    else:\n        return np.nan", "buggy_source_code": "def _lowly_expressed(self, value):\n    if value in self.expression:\n        return self.expression[value] < self.lower_cutoff\n    else:\n        return nan", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getAllPools(self):\n    result = {}\n    for vmName in list(self.machines.keys()):\n        result[vmName] = self.getPool(vmName)\n    return result", "buggy_source_code": "def getAllPools(self):\n    result = {}\n    for vmName in self.machines.keys():\n        result[vmName] = self.getPool(vmName)\n    return result", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_be():\n    return 42", "buggy_source_code": "def to_be():\n    return '42'", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    User.objects.create_user(username='admin', password='admin', email='admin@example.com')\n    super(TestLanguageSwitching, cls).setUpClass()", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    super(TestLanguageSwitching, cls).setUpClass()\n    User.objects.create_user(username='admin', password='admin', email='admin@example.com')", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def pytest_namespace():\n    return {'dsn_list': [sqlite, pg, mysql], 'pg': pg, 'sqlite': sqlite, 'mysql': mysql}", "buggy_source_code": "def pytest_namespace():\n    return {'db_list': ['pg', 'sqlite']}", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getlang(self):\n    return '; '.join(cat.getlangs())", "buggy_source_code": "@staticmethod\ndef getlang():\n    return '; '.join(cat.getlangs())", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_purview_state():\n    context = examples.ac_ex1_context()\n    assert context.purview_state('past') == (0, 1, 1)\n    assert context.purview_state('future') == (1, 0, 0)", "buggy_source_code": "def test_purview_state(context):\n    assert context.purview_state('past') == (0, 1, 1)\n    assert context.purview_state('future') == (1, 0, 0)", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_system_dict():\n    context = examples.ac_ex1_context()\n    assert context.system['past'] == context.cause_system\n    assert context.system['future'] == context.effect_system", "buggy_source_code": "def test_system_dict(context):\n    assert context.system['past'] == context.cause_system\n    assert context.system['future'] == context.effect_system", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_mechanism_state():\n    context = examples.ac_ex1_context()\n    assert context.mechanism_state('past') == (1, 0, 0)\n    assert context.mechanism_state('future') == (0, 1, 1)", "buggy_source_code": "def test_mechanism_state(context):\n    assert context.mechanism_state('past') == (1, 0, 0)\n    assert context.mechanism_state('future') == (0, 1, 1)", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def attribute_callback(self, ctx, attr, value):\n    if attr == cpmda.PMDA_ATTR_USERNAME:\n        self.log('username' + value)\n        self.set_ctx_state('username', value)", "buggy_source_code": "def attribute_callback(self, ctx, attr, value):\n    if attr == cpmda.PMDA_ATTR_USERNAME:\n        self.set_ctx_state('username', value)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self, key, generator_func=None):\n    print('Fetching key: ' + key)\n    return self._cache.get(key) or (generator_func and self._set_with_generator(key, generator_func))", "buggy_source_code": "def get(self, key, generator_func=None):\n    return self._cache.get(key) or (generator_func and self._set_with_generator(key, generator_func))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def resolver(root, args, *_):\n    return 'Hello ' + (args['who'] or 'World')", "buggy_source_code": "def resolver(root, args, *_):\n    return 'Hello ' + args.get('who', 'World')", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, host):\n    super(MSSQLExploiter, self).__init__(host)\n    self._config = __import__('config').WormConfiguration\n    self.attacks_list = [mssqlexec_utils.CmdShellAttack]", "buggy_source_code": "def __init__(self, host):\n    super(MSSQLExploiter, self).__init__(host)\n    self.attacks_list = [mssqlexec_utils.CmdShellAttack]", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_valid_domain_connections(self):\n    return Ontology().get_valid_domain_connections(self.root.ontologyclass_id)", "buggy_source_code": "def get_valid_domain_connections(self):\n    return []", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init_admin_views(flask_app, database):\n    from psi.app.views import init_admin_views\n    return init_admin_views(flask_app, database)", "buggy_source_code": "def init_admin_views(flask_app, database):\n    from app.views import init_admin_views\n    return init_admin_views(flask_app, database)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def test_instantiation(self):\n    config = self.get_config()\n    sgr = SignatureGenerationRule(config)\n    ok_(isinstance(sgr.c_signature_tool, CSignatureTool))\n    ok_(isinstance(sgr.java_signature_tool, JavaSignatureTool))", "buggy_source_code": "def test_instantiation(self):\n    config = self.get_config()\n    sgr = SignatureGenerationRule(config)\n    assert isinstance(sgr.c_signature_tool, CSignatureTool)\n    assert isinstance(sgr.java_signature_tool, JavaSignatureTool)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def start(self, interpreter):\n    self.process = subprocess.Popen([interpreter] + tagger_options, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, universal_newlines=True)", "buggy_source_code": "def start(self, interpreter):\n    self.process = subprocess.Popen([interpreter] + tagger_options, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=None, universal_newlines=True)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_file_path(file_hash_digest):\n    file_path = DiskFile.get_file_directory(file_hash_digest)\n    file_path = os.path.join(DATADIR, file_path, file_hash_digest)\n    return file_path", "buggy_source_code": "@staticmethod\ndef get_file_path(file_hash_digest):\n    file_path = DiskFile.get_file_directory(file_hash_digest)\n    file_path = os.path.join(file_path, file_hash_digest)\n    return file_path", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def configure(self):\n    super(Coupling, self).configure()\n    pass", "buggy_source_code": "def configure(self):\n    super(Coupling, self).configure()", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def raise_error(msg):\n    sublime.error_message('ProjectTreeTemplater: An error happened. Please look at the statusbar for extended details.')\n    sublime.status_message(msg)", "buggy_source_code": "def raise_error(msg):\n    sublime.error_message(msg)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    return insultreq()\n    return send_from_directory('static', 'index.html')", "buggy_source_code": "@app.route('/')\ndef index():\n    return send_from_directory('static', 'index.html')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _log(text, verbose):\n    if verbose:\n        sys.stdout.write(text + '\\n')", "buggy_source_code": "def _log(text):\n    if QT_VERBOSE:\n        sys.stdout.write(text + '\\n')", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def addStats(self, label, stats):\n    stats._graphPanel = self\n    stats.isPaused = True\n    self.stats[label] = stats", "buggy_source_code": "def addStats(self, label, stats):\n    stats._graphPanel = self\n    self.stats[label] = stats", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def version():\n    result = check_output(['python', 'setup.py', '--version'])\n    return result.stdout", "buggy_source_code": "def version():\n    result = check_output(['python', 'setup.py', '--version'])\n    return result[0]", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef is_displayed(self):\n    expected_title = '\"Snapshots\" for Virtual Machine \"{}\"'.format(self.context['object'].name)\n    return self.in_infra_vms and self.title.text == expected_title", "buggy_source_code": "@property\ndef is_displayed(self):\n    return False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef is_displayed(self):\n    return self.in_infra_vms and self.title.text == 'Adding a new Snapshot' and self.name.is_displayed", "buggy_source_code": "@property\ndef is_displayed(self):\n    return False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef fssock(request, fshost):\n    return (fshost, request.config.option.fsport)", "buggy_source_code": "@pytest.fixture(scope='module')\ndef fssock(fs_socks):\n    return fs_socks[0]", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef fsip(fshost):\n    import socket\n    return socket.gethostbyname(socket.getfqdn(fshost))", "buggy_source_code": "@pytest.fixture(scope='module')\ndef fsip(fs_ip_addrs):\n    return fs_ip_addrs[0]", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def deactivate(self, window):\n    self._get_instance(window).deactivate()\n    self._set_instance(window, None)", "buggy_source_code": "def deactivate(self, window):\n    self._set_instance(window, None)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def get_rates(self, ccy):\n    json = await self.get_json('api.biscoint.io', '/v1/ticker?base=BTC&quote=BRL')\n    return {'BRL': Decimal(json['data']['last']['last'])}", "buggy_source_code": "async def get_rates(self, ccy):\n    json = await self.get_json('api.biscoint.io', '/v1/ticker?base=BTC&quote=BRL')\n    return {'BRL': Decimal(json['data']['last'])}", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def stop(self):\n    (asyncio.run_coroutine_threadsafe(self.stop_async(), self.loop),)\n    self._stop_thread()", "buggy_source_code": "def stop(self):\n    asyncio.run_coroutine_threadsafe(self.stop_async(), self.loop)\n    self._stop_thread()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args):\n    NormalSpoke.__init__(self, *args)\n    self._oldweak = None\n    self._error = False", "buggy_source_code": "def __init__(self, *args):\n    NormalSpoke.__init__(self, *args)\n    self._oldweak = None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@functools.lru_cache(maxsize=2 ** 10)\ndef normalize_network(network):\n    return str(ipaddress.ip_network(network, strict=False))", "buggy_source_code": "@functools.lru_cache(maxsize=1024)\ndef normalize_network(network):\n    return str(ipaddress.ip_network(network, strict=False))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_dict(self):\n    ret = {'code': self.code, 'message': self.message}\n    if len(self.data):\n        ret['data'] = self.data\n    return ret", "buggy_source_code": "def to_dict(self):\n    return {'code': self.code, 'message': self.message, 'data': self.traceback}", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_missing_file(self):\n    c = Client()\n    response = c.post('/upload/', {'comment': 'test comment'})\n    self.assertEqual(response.status_code, 405)", "buggy_source_code": "def test_missing_file(self):\n    response = self.c.post('/upload/', {'comment': 'test comment'})\n    self.assertEqual(response.status_code, 405)", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef chianti_he_db_h5_path():\n    return os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data', 'chianti_he_db.h5')", "buggy_source_code": "@pytest.fixture(scope='module')\ndef chianti_he_db_h5_path():\n    return atomic.data_path('chianti_he_db.h5')", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remove_item(self, what, obj_name, recursive=True):\n    return self.remote.remove_item(what, obj_name, self.token, recursive=recursive)", "buggy_source_code": "def remove_item(self, what, obj_name, recursive=True):\n    return self.remote.remove_item(what, obj_name, self.token)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cleanup(self):\n    uploader_metainfo = self.map_uploader_tags(self.core.status.get('uploader').items())\n    self.data_session.update_job(uploader_metainfo)\n    self.data_session.close()", "buggy_source_code": "def cleanup(self):\n    uploader_metainfo = self.map_uploader_tags(self.core.status.get('uploader'))\n    self.data_session.update_job(uploader_metainfo)\n    self.data_session.close()", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_tab_close_clicked(self, button):\n    self.tab_close(self.tab_closebuttons.index(button))", "buggy_source_code": "def on_tab_close_clicked(self, button):\n    self.tab_close(button)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def read_all(self, norm=False):\n    return [self.read(x, norm) for x in range(16)]", "buggy_source_code": "def read_all(self, norm=False):\n    return self.read([range(16)], norm)", "edit_actions": ["move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef geo_coords_r(self):\n    return_value = (self.point.y, self.point.x)", "buggy_source_code": "@property\ndef geo_coords_r(self):\n    return (self.point.y, self.point.x)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, document_id, version=None):\n    super(FactureAbonnement, self).__init__(document_id, version=None)\n    self.jinja_environment.filters['priceformat'] = priceformat", "buggy_source_code": "def __init__(self, document_id, version=None):\n    super(FactureAbonnement, self).__init__(document_id, version)\n    self.jinja_environment.filters['priceformat'] = priceformat", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_supersearch_examples(self):\n    url = reverse('documentation:supersearch_examples')\n    response = self.client.get(url)\n    eq_(response.status_code, 200)\n    ok_('Examples' in response.content)", "buggy_source_code": "def test_supersearch_examples(self):\n    url = reverse('documentation:supersearch_examples')\n    response = self.client.get(url)\n    assert response.status_code == 200\n    assert 'Examples' in response.content", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def disCompute(jobRunner):\n    results = jobRunner.run()\n    return results", "buggy_source_code": "def disCompute(jobRunner):\n    jobRunner.run()\n    return 'here'", "edit_actions": ["move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def upgrade(engine):\n    session = sqlalchemy.orm.sessionmaker(engine)()\n    upgrade_testsuite(engine, session, 'nts')\n    upgrade_testsuite(engine, session, 'compile')\n    session.commit()", "buggy_source_code": "def upgrade(engine):\n    session = sqlalchemy.orm.sessionmaker(engine)()\n    upgrade_testsuite(engine, session, 'nts')\n    upgrade_testsuite(engine, session, 'compile')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate_allowed_order_by(self, f):\n    if f not in self.allow_order_by:\n        raise HTTPBadRequest(body=self.error_response('Order by \"{field_name}\" is not allowed'.format(field_name=f)))", "buggy_source_code": "def validate_allowed_order_by(self, f):\n    if f not in self.allow_order_by:\n        error = 'Order by \"{field_name}\" is not allowed'.format(field_name=f)\n        self.raise_http(HTTPBadRequest, error)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_navigation_tree_language(request, language):\n    get_portal().check_permission(request.user, 'manage_portal')\n    request.session['nav-tree-lang'] = language\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))", "buggy_source_code": "def set_navigation_tree_language(request, language):\n    request.session['nav-tree-lang'] = language\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_time_stamp(self, data):\n    self.time_stamp = data\n    if data:\n        self._toggle_properties('time_stamp')\n        self.set_textTemplate('%a %d %H:%M %S')", "buggy_source_code": "def set_time_stamp(self, data):\n    self.time_stamp = data\n    if data:\n        self._toggle_properties('time_stamp')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run(self):\n    output = shellout('unpigz -c {input} | span-import -i zvdd-mets | pigz -c > {output}', input=self.input().path)\n    luigi.LocalTarget(output).move(self.output().path())", "buggy_source_code": "def run(self):\n    output = shellout('unpigz -c {input} | span-import -i zvdd-mets | pigz -c > {output}', input=self.input().path)\n    luigi.LocalTarget(output).move(self.output().path)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@staticmethod\ndef reset_state():\n    fragment_trackers = {}", "buggy_source_code": "@staticmethod\ndef reset_state():\n    fragment_trackers.clear()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update_ids(self):\n    try:\n        self.database.engine.execute('\\n                insert into work(book_id, taken, finished)\\n                select id, false, false from book\\n                where id not in (select book_id from work);\\n                ')\n    except psycopg2.IntegrityError:\n        print('warning: race condition in update_ids. Probably harmless.')\n        pass", "buggy_source_code": "def update_ids(self):\n    try:\n        self.database.engine.execute('\\n                insert into work(book_id, taken, finished)\\n                select id, false, false from book\\n                where id not in (select book_id from work);\\n                ')\n    except:\n        print('warning: race condition in update_ids. Probably harmless.')\n        pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@hostgroups(settings.CELERY_HOSTGROUP, remote_kwargs={'ssh_key': settings.SSH_KEY})\ndef update_celery(ctx):\n    ctx.remote(settings.REMOTE_UPDATE_SCRIPT)\n    ctx.remote('/usr/bin/supervisorctl restart %s' % settings.CELERY_SERVICE)", "buggy_source_code": "@hostgroups(settings.CELERY_HOSTGROUP, remote_kwargs={'ssh_key': settings.SSH_KEY})\ndef update_celery(ctx):\n    ctx.remote(settings.REMOTE_UPDATE_SCRIPT)\n    ctx.remote('/usr/bin/supervisorctl mrestart celery*')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def computers(self, obj):\n    related_objects = obj.related_objects('computer', self.request.user.userprofile)\n    if related_objects:\n        return related_objects.count()\n    return 0", "buggy_source_code": "def computers(self, obj):\n    related_objects = obj.related_objects('computer', self.request.user.userprofile)\n    return related_objects.count() if related_objects else 0", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def wait_for_stop(self):\n    event = gevent.event.Event()\n    self.stop_handlers.add(lambda self: event.set())\n    event.wait()", "buggy_source_code": "def wait_for_stop(self):\n    self._stopped.get()", "edit_actions": ["move-tree", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def construct_variant_class(self, product_class):\n\n    class Variant(models.Variant):\n        product = django.db.models.ForeignKey(product_class, related_name='variants')\n    return Variant", "buggy_source_code": "def construct_variant_class(self, product_class):\n\n    class Variant(models.Variant):\n        pass\n    return Variant", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setSwap(part, target):\n    os.system('mkswap ' + '/dev/' + part)\n    os.system('echo \"`lsblk -ln -o UUID /dev/' + part + '` none swap sw 0 0\" | tee -a /etc/fstab')\n    hedefBagla(target)", "buggy_source_code": "def setSwap(part):\n    os.system('mkswap ' + '/dev/' + part)\n    os.system('echo \"`lsblk -ln -o UUID /dev/' + part + '` none swap sw 0 0\" | tee -a /etc/fstab')\n    hedefBagla(target)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_height(node):\n    (terminal, height) = get_head_terminal_height(node)\n    return height", "buggy_source_code": "@staticmethod\ndef get_height(node):\n    return FeatureExtractor.get_head_terminal_height(node, True)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_head_terminal(node):\n    (terminal, height) = get_head_terminal_height(node)\n    return terminal", "buggy_source_code": "@staticmethod\ndef get_head_terminal(node):\n    return FeatureExtractor.get_head_terminal_height(node)", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_stdeng_tagger():\n    tagger = get_stdeng_spacy_tagger()\n    if tagger:\n        logmsg('Using spaCy POS tagger.')\n        return tagger\n    tagger = get_stdeng_nltk_tagger()\n    if tagger:\n        return tagger\n    return None", "buggy_source_code": "def get_stdeng_tagger():\n    tagger = get_stdeng_spacy_tagger()\n    if tagger:\n        return tagger\n    tagger = get_stdeng_nltk_tagger()\n    if tagger:\n        return tagger\n    return None", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cut(self, box):\n    cutimage = Image(self)\n    logger.debug('projection after copying: {}'.format(cutimage.projection))\n    cutimage.crop(box)\n    return cutimage", "buggy_source_code": "def cut(self, box):\n    cutimage = Image(self)\n    cutimage.crop(box)\n    return cutimage", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getSources(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveSources(self.matched_atom[0])", "buggy_source_code": "def getSources(self):\n    return self.dbconn.retrieveSources(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getConfigProtect(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveProtect(self.matched_atom[0])", "buggy_source_code": "def getConfigProtect(self):\n    return self.dbconn.retrieveProtect(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDescription(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveDescription(self.matched_atom[0])", "buggy_source_code": "def getDescription(self):\n    return self.dbconn.retrieveDescription(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getOnlyName(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveName(self.matched_atom[0])", "buggy_source_code": "def getOnlyName(self):\n    return self.dbconn.retrieveName(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getConfigProtectMask(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveProtectMask(self.matched_atom[0])", "buggy_source_code": "def getConfigProtectMask(self):\n    return self.dbconn.retrieveProtectMask(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getCategory(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveCategory(self.matched_atom[0])", "buggy_source_code": "def getCategory(self):\n    return self.dbconn.retrieveCategory(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDownSizeFmt(self):\n    dbc = self.get_dbconn()\n    return EquoConnection.entropyTools.bytesIntoHuman(dbc.retrieveSize(self.matched_atom[0]))", "buggy_source_code": "def getDownSizeFmt(self):\n    return EquoConnection.entropyTools.bytesIntoHuman(self.dbconn.retrieveSize(self.matched_atom[0]))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_time(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveDateCreation(self.matched_atom[0])", "buggy_source_code": "def _get_time(self):\n    return self.dbconn.retrieveDateCreation(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getConflicts(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveConflicts(self.matched_atom[0])", "buggy_source_code": "def getConflicts(self):\n    return self.dbconn.retrieveConflicts(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_fullname(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveAtom(self.matched_atom[0])", "buggy_source_code": "def get_fullname(self):\n    return self.dbconn.retrieveAtom(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDependencies(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveDependencies(self.matched_atom[0])", "buggy_source_code": "def getDependencies(self):\n    return self.dbconn.retrieveDependencies(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getApi(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveApi(self.matched_atom[0])", "buggy_source_code": "def getApi(self):\n    return self.dbconn.retrieveApi(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getName(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveAtom(self.matched_atom[0])", "buggy_source_code": "def getName(self):\n    return self.dbconn.retrieveAtom(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getEpochFmt(self):\n    dbc = self.get_dbconn()\n    return EquoConnection.entropyTools.convertUnixTimeToHumanTime(float(dbc.retrieveDateCreation(self.matched_atom[0])))", "buggy_source_code": "def getEpochFmt(self):\n    return EquoConnection.entropyTools.convertUnixTimeToHumanTime(float(self.dbconn.retrieveDateCreation(self.matched_atom[0])))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDownloadURL(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveDownloadURL(self.matched_atom[0])", "buggy_source_code": "def getDownloadURL(self):\n    return self.dbconn.retrieveDownloadURL(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getLicense(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveLicense(self.matched_atom[0])", "buggy_source_code": "def getLicense(self):\n    return self.dbconn.retrieveLicense(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getUseflags(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveUseflags(self.matched_atom[0])", "buggy_source_code": "def getUseflags(self):\n    return self.dbconn.retrieveUseflags(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getOnlyVer(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveVersion(self.matched_atom[0])", "buggy_source_code": "def getOnlyVer(self):\n    return self.dbconn.retrieveVersion(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getHomepage(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveHomepage(self.matched_atom[0])", "buggy_source_code": "def getHomepage(self):\n    return self.dbconn.retrieveHomepage(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getTrigger(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveTrigger(self.matched_atom[0])", "buggy_source_code": "def getTrigger(self):\n    return self.dbconn.retrieveTrigger(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getKeySlot(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveKeySlot(self.matched_atom[0])", "buggy_source_code": "def getKeySlot(self):\n    return self.dbconn.retrieveKeySlot(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDigest(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveDigest(self.matched_atom[0])", "buggy_source_code": "def getDigest(self):\n    return self.dbconn.retrieveDigest(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getRel(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveBranch(self.matched_atom[0])", "buggy_source_code": "def getRel(self):\n    return self.dbconn.retrieveBranch(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getCompileFlags(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveCompileFlags(self.matched_atom[0])", "buggy_source_code": "def getCompileFlags(self):\n    return self.dbconn.retrieveCompileFlags(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDownSize(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveSize(self.matched_atom[0])", "buggy_source_code": "def getDownSize(self):\n    return self.dbconn.retrieveSize(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDiskSizeFmt(self):\n    dbc = self.get_dbconn()\n    return EquoConnection.entropyTools.bytesIntoHuman(dbc.retrieveOnDiskSize(self.matched_atom[0]))", "buggy_source_code": "def getDiskSizeFmt(self):\n    return EquoConnection.entropyTools.bytesIntoHuman(self.dbconn.retrieveOnDiskSize(self.matched_atom[0]))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getMessages(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveMessages(self.matched_atom[0])", "buggy_source_code": "def getMessages(self):\n    return self.dbconn.retrieveMessages(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getEpoch(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveDateCreation(self.matched_atom[0])", "buggy_source_code": "def getEpoch(self):\n    return self.dbconn.retrieveDateCreation(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getKeywords(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveKeywords(self.matched_atom[0])", "buggy_source_code": "def getKeywords(self):\n    return self.dbconn.retrieveKeywords(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def do_connect():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((host, port))\n    sock.setblocking(0)", "buggy_source_code": "def do_connect():\n    sock.connect((host, port))\n    sock.setblocking(0)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def main():\n    folder = '/home/tgillesp/projects/'\n    filename = folder + 'ero.obo'\n    of = OboFile(filename=filename)\n    print(of)\n    embed()", "buggy_source_code": "def main():\n    folder = '/home/tgillesp/projects/'\n    filename = folder + 'go.obo'\n    of = OboFile(filename=filename)\n    embed()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _shorten_chromosome_name(chr):\n    if chr.startswith('chr'):\n        chr = chr[-1]\n        if chr == 'M':\n            return 'MT'\n        return chr\n    return chr", "buggy_source_code": "def _shorten_chromosome_name(chr):\n    chr = chr.replace('chr', '')\n    if chr == 'M':\n        return 'MT'\n    else:\n        return chr", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def demo_data_to_depot(dataset):\n    _can_handle_dataset(dataset)\n    _mkdir_keep_prev('%(demodata_dir)s/%(dataset)s' % venv())\n    if dataset in lagen_nu_datasets:\n        _transform_lagen_nu_data(dataset)\n    elif dataset in riksdagen_se_datasets:\n        _transform_riksdagen_data(dataset)", "buggy_source_code": "def demo_data_to_depot(dataset):\n    _can_handle_dataset(dataset)\n    if dataset in lagen_nu_datasets:\n        _transform_lagen_nu_data(dataset)\n    elif dataset in riksdagen_se_datasets:\n        _transform_riksdagen_data(dataset)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, model):\n    self.model = model\n    self.replacements = weakref.WeakKeyDictionary()\n    self._hash = None", "buggy_source_code": "def __init__(self, model):\n    self.model = model\n    self.replacements = weakref.WeakKeyDictionary()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __setstate__(self, s):\n    self.model = s\n    self.replacements = weakref.WeakKeyDictionary()\n    self._hash = None", "buggy_source_code": "def __setstate__(self, s):\n    self.model = s\n    self.replacements = weakref.WeakKeyDictionary()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def sorted(self):\n    if self._commutative:\n        return self.__class__(*sorted(self.args, key=BasicComparator))\n    else:\n        return self", "buggy_source_code": "def sorted(self):\n    if self._commutative:\n        return self.create(sorted(self.args, key=BasicComparator))\n    else:\n        return self", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def pubMessage(self, topic, data, socket):\n    socket.send_string(f'{topic} {data}')\n    if topic is 'misp_json':\n        self.publishCount += 1", "buggy_source_code": "def pubMessage(self, topic, data, socket):\n    socket.send_string('{} {}'.format(topic, data))\n    if topic is 'misp_json':\n        self.publishCount += 1", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _added_actions(self):\n    actions = self._all_list_items()\n    actions = filter(lambda x: x != self.SEPARATOR, actions)\n    return set(actions)", "buggy_source_code": "def _added_actions(self):\n    actions = self._all_list_items()\n    actions = filter(lambda x: x != 'separator', actions)\n    return set(actions)", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def insert_separator(self):\n    insert_index = self._current_item('row') + 1\n    self._insert_item(self.SEPARATOR, insert_index)", "buggy_source_code": "def insert_separator(self):\n    insert_index = self._current_item('row') + 1\n    self._insert_item('separator', insert_index)", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_icon_from_name(self, name):\n    return self.TOOLBAR_BUTTONS[self.toolbar_button_rev[name]]['icon']", "buggy_source_code": "def _get_icon_from_name(self, name):\n    return self.TOOLBAR_BUTTONS[name]['icon']", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def check_origin(self, origin):\n    handlers.append(self)\n    return True", "buggy_source_code": "def check_origin(self, origin):\n    return True", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, device_description, proxy, resolveparamsets=False):\n    super().__init__(device_description, proxy, resolveparamsets)\n    self.SENSORNODE.update({'DOOR_STATE': self.ELEMENT})", "buggy_source_code": "def __init__(self, device_description, proxy, resolveparamsets=False):\n    super().__init__(device_description, proxy, resolveparamsets)\n    self.SENSORNODE.update({'DOOR_STATE': [1]})", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def install(self):\n    with sudo_project(), virtualenv.activate(virtualenv_path()):\n        python.pip('install', 'gunicorn')\n    self.manager.install()\n    self.create_socket()", "buggy_source_code": "def install(self):\n    with sudo_project(), virtualenv.activate(virtualenv_path()):\n        python.pip('install', 'gunicorn')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def draw_buttons(self, context, layout):\n    layout.prop(self, 'SceneTexturesEnum')\n    layout.template_preview(bpy.data.textures['Texture'])", "buggy_source_code": "def draw_buttons(self, context, layout):\n    layout.operator('umog.select_texture', text='Select Texture')", "edit_actions": ["move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_too_many_cols():\n    text = '\\nA B C\\n1 2 3\\n4 5 6\\n7 8 9 10\\n11 12 13\\n'\n    with pytest.raises(CParserError) as e:\n        table = FastBasic().read(StringIO(text))\n    assert 'CParserError: an error occurred while parsing table data: too many columns found in line 3 of data' in str(e)", "buggy_source_code": "def test_too_many_cols():\n    text = '\\nA B C\\n1 2 3\\n4 5 6\\n7 8 9 10\\n11 12 13\\n'\n    with pytest.raises(CParserError) as e:\n        table = FastBasic().read(text)\n    assert 'CParserError: an error occurred while parsing table data: too many columns found in line 3 of data' in str(e)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setServerOAPI(self, index):\n    self.defaultServer = self.comboBox_default_OAPI.currentText()\n    Tools.setSetting('defaultOAPI', self.defaultServer)\n    self.getTimestampOAPI()", "buggy_source_code": "def setServerOAPI(self, index):\n    self.defaultServer = self.comboBox_default_OAPI.currentText()\n    Tools.setSetting('defaultOAPI', self.defaultServer)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _update_tsg_metrics(self, y_true, y_pred, prob):\n    super(RandomForest, self)._update_tsg_metrics(y_true, y_pred, prob)\n    self.feature_importance.append(self.clf.feature_importances_)", "buggy_source_code": "def _update_tsg_metrics(self, y_true, y_pred, prob):\n    super(RandomForest, self)._update_tsg_metrics(y_true, y_pred, prob)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _update_onco_metrics(self, y_true, y_pred, prob):\n    super(RandomForest, self)._update_onco_metrics(y_true, y_pred, prob)\n    self.feature_importance.append(self.clf.feature_importances_)", "buggy_source_code": "def _update_onco_metrics(self, y_true, y_pred, prob):\n    super(RandomForest, self)._update_onco_metrics(y_true, y_pred, prob)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def find_all_and_process(soup, tag, fn):\n    list(map(fn, soup.find_all(tag)))", "buggy_source_code": "def find_all_and_process(soup, tag, fn):\n    for i in soup.find_all(tag):\n        fn(i)", "edit_actions": ["insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef message(self):\n    info = self.buf.line_info(self.pos)\n    template = '{}:{} could not resolve reference to rule \"{}\"'\n    return template.format(info.line, info.col, self.name)", "buggy_source_code": "@property\ndef message(self):\n    return \"could not resolve reference to rule '%s'\" % self.name", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef message(self):\n    return '<{}> {}'.format(self.name, super(FailedMatch, self).message)", "buggy_source_code": "@property\ndef message(self):\n    return \"expecting '%s'\" % self.name", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def default_ldflags(self):\n    return list(set().union(LDFLAGS, clang_msvc_buildtype[self.buildtype]['ldflags']))", "buggy_source_code": "def default_ldflags(self):\n    return list(set().union(LDFLAGS, self.compiler.ldflags))", "edit_actions": ["move-tree", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _api_keys_for_user(self, user_id):\n    with self._keys_lock:\n        return self._keys.get(user_id, [])", "buggy_source_code": "def _api_keys_for_user(self, user_id):\n    with self._keys_lock:\n        return self._keys[user_id]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_api_commands(self):\n    return dict(generate=['app'], revoke=['key'], revoke_for=['user_id', 'key'])", "buggy_source_code": "def get_api_commands(self):\n    return dict(generate=['app'], revoke=['key'])", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_location(ip):\n    location = IP.find(ip)\n    location = '中国\\t广东\\t佛山'\n    if '中国' in location:\n        return location.split('\\t')", "buggy_source_code": "def get_location(ip):\n    location = IP.find(ip)\n    if '中国' in location:\n        return location.split('\\t')\n    return location", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _tenant_path(self):\n    return 'clusters/%s%s' % (self.cluster_path(), urlparse.quote(encodeutils.safe_encode(self.path)))", "buggy_source_code": "def _tenant_path(self):\n    encoded_path = urlparse.quote(encodeutils.safe_encode(self.path))\n    return 'clusters/%s%s' % (self.cluster_path(), encoded_path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef radius(self):\n    return (self.height + self.width) / 2", "buggy_source_code": "@property\ndef radius(self):\n    return self.diameter / 2", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, size, *args, **kwargs):\n    super(BufferedTextureObject, self).__init__(*args, **kwargs)\n    self.buffer_data = multiprocessing.sharedctypes.RawArray('B', size)", "buggy_source_code": "def __init__(self, buffer_data, *args, **kwargs):\n    super(BufferedTextureObject, self).__init__(*args, **kwargs)\n    self.buffer_data = buffer_data", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_activate(self, menuitem, track):\n    global LASTFMLOVER\n    LASTFMLOVER.toggle_loved(track)", "buggy_source_code": "def on_activate(self, menuitem, track):\n    self.__lastfmlover.toggle_loved(track)", "edit_actions": ["update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, destination_path):\n    import os\n    (path, filename) = os.path.split(destination_path)\n    log.error(\"'%s' already exists in: %s\" % (filename, path))", "buggy_source_code": "def __init__(self, destination_path):\n    log.error('File already exists: %s' % destination_path)", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, sock):\n    self.sock = sock\n    self.lock = Lock()\n    self.mc = MotCont(self)\n    self._methods()", "buggy_source_code": "def __init__(self, sock):\n    self.sock = sock\n    self.lock = Lock()\n    self.mc = MotCont(self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def stop(self):\n    self._stop = True\n    self.conn.close()", "buggy_source_code": "def stop(self):\n    self._stop = True", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ok(self, widget, data=None):\n    self.__preferences['preference1'] = 'value2'\n    self.__save_preferences()", "buggy_source_code": "def ok(self, widget, data=None):\n    self.__save_preferences()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def disown(cmd):\n    subprocess.Popen(['nohup', *cmd], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)", "buggy_source_code": "def disown(cmd):\n    subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def isPolar(self):\n    self.deprecated('isPolar()', 'is_polar()', '0.8')\n    return self.is_polar()", "buggy_source_code": "def isPolar(self):\n    self.deprecated('isPolar()', 'is_polar', '0.8')\n    return self.is_polar", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    from _strategies import ordinary_strategies\n    self.team = ordinary_strategies\n    MetaPlayer.__init__(self)\n    self.stochastic = True", "buggy_source_code": "def __init__(self):\n    from _strategies import ordinary_strategies\n    self.team = ordinary_strategies\n    MetaPlayer.__init__(self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    from _strategies import ordinary_strategies\n    self.team = ordinary_strategies\n    MetaPlayer.__init__(self)\n    self.stochastic = True", "buggy_source_code": "def __init__(self):\n    from _strategies import ordinary_strategies\n    self.team = ordinary_strategies\n    MetaPlayer.__init__(self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@seek\ndef get_read_names(self):\n    names = [this.qname for this in self]\n    return names", "buggy_source_code": "@seek\ndef get_read_names(self):\n    return [this.qname for this in self]", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def start(self):\n    ema_logging.info('start watching on {}'.format(self.url))\n    self.stream.on_recv(self.log_message)", "buggy_source_code": "def start(self):\n    self.stream.on_recv(self.log_message)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def stop(self):\n    self.stream.stop_on_recv()\n    self.stream.close()", "buggy_source_code": "def stop(self):\n    self.stream.stop_on_recv()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    port_rule.__init__(self)\n    self.identifier = '011'\n    self.solution = 'Add proper prefix or suffix indicating port direction.'\n    self.port_direction = 'Suffix'\n    self.phase = 7", "buggy_source_code": "def __init__(self):\n    port_rule.__init__(self)\n    self.identifier = '011'\n    self.solution = 'Add proper prefix or suffix indicating port direction.'\n    self.port_direction = None\n    self.phase = 7", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def pt_object_summary_test():\n    summary = Geovelo._pt_object_summary_isochrone(make_pt_object(type_pb2.ADDRESS, lon=1.12, lat=13.15, uri='toto'))\n    assert summary == [13.15, 1.12, 'toto']", "buggy_source_code": "def pt_object_summary_test():\n    summary = Geovelo._pt_object_summary_isochrone(make_pt_object(type_pb2.ADDRESS, lon=1.12, lat=13.15, uri='toto'))\n    assert summary == [13.15, 1.12, None]", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def t_STRING(self, t):\n    t.value = t.value[1:-1].replace(\"\\\\'\", \"'\")\n    return t", "buggy_source_code": "def t_STRING(self, t):\n    t.value = t.value[1:-1]\n    return t", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save(self, author, commit=True):\n    recipe = super(AddRecipeForm, self).save(commit=False)\n    recipe.author = author\n    return recipe.save(commit=commit)", "buggy_source_code": "def save(self, author, commit=True):\n    recipe = super(AddRecipeForm, self).save(commit=False)\n    recipe.author = author\n    return recipe.save()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ddebug(s):\n    if get_debug_level() > 1:\n        sys.stderr.write('%s: %s\\n' % (os.path.basename(sys.argv[0]), s))", "buggy_source_code": "def ddebug(s):\n    if get_debug_level() > 1:\n        sys.stderr.write('%s\\n' % (s,))", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def debug(msg):\n    if get_debug_level() > 0:\n        sys.stderr.write('%s: %s\\n' % (os.path.basename(sys.argv[0]), msg))", "buggy_source_code": "def debug(msg):\n    if get_debug_level() > 0:\n        sys.stderr.write('%s\\n' % (msg,))", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def warn(s):\n    sys.stderr.write('%s: warning: %s\\n' % (os.path.basename(sys.argv[0]), s))", "buggy_source_code": "def warn(s):\n    sys.stderr.write('warning: %s\\n' % (s,))", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def escaping(self):\n    r = self.size + EPSILON\n    P = self.coords\n    return np.any(P <= r) or np.any(P >= self.game.size - r)", "buggy_source_code": "def escaping(self):\n    r = self.size\n    P = self.coords\n    return np.any(P <= r) or np.any(P >= self.game.size - r)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, game):\n    super().__init__(game, color=(0, 128, 255), size=10, coords=game.size // 2)", "buggy_source_code": "def __init__(self, game):\n    super().__init__(game, color=(0, 128, 255), size=PLAYERSIZE, coords=game.size // 2)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@applyBit\ndef applyBit2(array):\n    array[7] = array[9] | 1\n    array[9] = array[8] | 1\n    array[8] = array[7] | 1", "buggy_source_code": "@applyBit\ndef applyBit2(array):\n    array[9] == array[8] | 2\n    array[8] == array[9] | 2", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def home(request):\n    template_name = 'home.html'\n    return render(request, template_name, {'hello': 'Home'})", "buggy_source_code": "def home(request):\n    template_name = 'home.html'\n    return render_to_response(template_name, {}, context_instance=RequestContext(request))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    super(TileIconButton, self).__init__(**kwargs)\n    self.register_event_type('on_press')", "buggy_source_code": "def __init__(self, **kwargs):\n    super(TileIconButton, self).__init__(**kwargs)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def debug():\n    r = requests.post('https://www.agrar-fischerei-zahlungen.de/Suche', headers=h, cookies=cookies, data=rq_data0)\n    text = r.text\n    print(text)", "buggy_source_code": "def debug():\n    r = handle_request(cookies, RQ_DATA_0)\n    text = r.text\n    print(text)", "edit_actions": ["update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef featurewise_anomaly_score(self, X):\n    return self._final_estimator.featurewise_anomaly_score(self._pre_transform(X))", "buggy_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef featurewise_anomaly_score(self, X):\n    X = self._pre_transform(X)\n    return self._final_estimator.featurewise_anomaly_score(X)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def scoresentence(self, sentence):\n    sentence = ['<s>'] + sentence + ['</s>']\n    return product([self[x] for x in Windower(sentence, self.n, None, None)])", "buggy_source_code": "def scoresentence(self, sentence):\n    return product([self[x] for x in Windower(sentence, self.n, '<s>', '</s>')])", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _aug_out_ports(processor, out_ports):\n    return _aug_terminals(processor, out_ports, lambda *outputs: outputs)", "buggy_source_code": "def _aug_out_ports(processor, out_ports):\n    return _aug_terminals(processor, out_ports)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _aug_terminals(graph, ports, edge_func):\n    return ports[0] if len(ports) == 1 else _unify_ports(graph, ports, edge_func)", "buggy_source_code": "def _aug_terminals(graph, ports):\n    return ports[0] if len(ports) == 1 else _unify_ports(graph, ports)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def install_varnish():\n    put(os.path.join(env.config_dir, 'varnish', 'default.vcl'), '/tmp/default.vcl')\n    sudo('curl http://repo.varnish-cache.org/debian/GPG-key.txt | apt-key add -;echo \"deb http://repo.varnish-cache.org/ubuntu/ lucid varnish-3.0\" >> /etc/apt/sources.list;apt-get update;apt-get install -y varnish;mv /tmp/default.vcl /etc/varnish/default.vcl;')\n    start_varnish()", "buggy_source_code": "def install_varnish():\n    put(os.path.join(env.config_dir, 'varnish', 'default.vcl'), '/tmp/default.vcl')\n    sudo('curl http://repo.varnish-cache.org/debian/GPG-key.txt | apt-key add -;echo \"deb http://repo.varnish-cache.org/ubuntu/ lucid varnish-3.0\" >> /etc/apt/sources.list;apt-get update;apt-get install -y varnish;mv /tmp/default.vcl /etc/varnish/default.vcl;')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def onInit(self):\n    self.showInfo = 'true'\n    self.getControl(102).setLabel(getLS(32001))\n    self.showAlbums()", "buggy_source_code": "def onInit(self):\n    self.showInfo = 'true'\n    self.showAlbums()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_time_zone():\n    time_zone = _get_time_zone_symlink() or _get_time_zone_md5()\n    if not time_zone:\n        logging.error('could not find local time zone')\n    return time_zone", "buggy_source_code": "def _get_time_zone():\n    return _get_time_zone_symlink() or _get_time_zone_md5() or 'UTC'", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _extract_staticmethod(m):\n    return m.__get__(True).im_func", "buggy_source_code": "def _extract_staticmethod(m):\n    return m.__get__(True)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@keep_alive\ndef is_valid_transaction(self, raw_transaction):\n    try:\n        self.server.decoderawtrwansaction(raw_transaction)\n    except ProtocolError:\n        logging.exception('tx invalid')\n        return False\n    return True", "buggy_source_code": "@keep_alive\ndef is_valid_transaction(self, raw_transaction):\n    try:\n        self.server.decoderawtransaction(raw_transaction)\n    except ProtocolError:\n        return False\n    return True", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def control_msg(self, requestType, request, value, buffer, timeout=None):\n    return self.dev.ctrl_transfer(requestType, request, value, self.intf.bInterfaceNumber, buffer, timeout=1500)", "buggy_source_code": "def control_msg(self, requestType, request, value, buffer, timeout=None):\n    return self.dev.ctrl_transfer(requestType, request, value, self.intf.bInterfaceNumber, buffer, timeout=timeout)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def charge_max_range(self):\n    self.charge_state.charge_to_max_range = True\n    return self.status", "buggy_source_code": "def charge_max_range(self):\n    self.charge_state['charge_to_max_range'] = True\n    return self.status", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def set_temps(self, driver_temp, passenger_temp):\n    self.climate_state.passenger_temp_setting = passenger_temp\n    self.climate_state.driver_temp_setting = driver_temp\n    return self.status", "buggy_source_code": "def set_temps(self, driver_temp, passenger_temp):\n    self.climate_state['passenger_temp_setting'] = passenger_temp\n    self.climate_state['driver_temp_setting'] = driver_temp\n    return self.status", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def help(*xs):\n    return ([ast.Global([x.value() for x in xs])], help_expr(name('None')))", "buggy_source_code": "def help(*xs):\n    return ([ast.Global([x.value() for x in xs])], help_nil())", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def help(*xs):\n    return ([ast.Import([ast.alias(x.value(), None) for x in xs])], help_expr(name('None')))", "buggy_source_code": "def help(*xs):\n    return ([ast.Import([ast.alias(x.value(), None) for x in xs])], help_nil())", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    mujoco_env.MujocoEnv.__init__(self, 'arm_claw_fixed_box.xml', 4)\n    utils.EzPickle.__init__(self)\n    self._randomize_box()", "buggy_source_code": "def __init__(self):\n    mujoco_env.MujocoEnv.__init__(self, 'arm_claw_fixed_box.xml', 4)\n    utils.EzPickle.__init__(self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __execute(self):\n    print('Executing ', self.orders[-1])\n    self._curNS.write(self.orders[-1].serialize())\n    self.state = 3", "buggy_source_code": "def __execute(self):\n    self._curNS.write(self.orders[-1].serialize())\n    self.state = 3", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@given(binary(min_size=0, max_size=10000, average_size=10))\ndef test_binary_involution(binary):\n    assert decode_encode(binary) == binary", "buggy_source_code": "@given(binary(min_size=0, max_size=300))\ndef test_binary_involution(binary):\n    assert decode_encode(binary) == binary", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@given(lists(integers(-10, 10), min_size=0, average_size=5, max_size=10))\ndef test_list(array):\n    assert decode_encode(array) == array", "buggy_source_code": "@given(lists(integers(-10, 10), min_size=0, max_size=10))\ndef test_list(array):\n    assert decode_encode(array) == array", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('ol', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['ol'], OrderedListTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(OrderedListTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_parent_list_type_with_non_list_as_parent(self):\n    opts = ListElementTagOptions()\n    root_tree_node = RootTreeNode(RootTagOptions())\n    tree_node = root_tree_node.new_child('li', opts)\n    self.assertEqual(UNORDERED_LIST_TYPE, opts.get_parent_list_type(tree_node))", "buggy_source_code": "def test_get_parent_list_type_with_non_list_as_parent(self):\n    root_tree_node = RootTreeNode()\n    tree_node = root_tree_node.new_child('li', ListElementTreeNode)\n    self.assertEqual(UNORDERED_LIST_TYPE, tree_node.get_parent_list_type())", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('ul', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['ul'], UnorderedListTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(UnorderedListTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_element_number_from_parent_with_non_list_as_parent(self):\n    opts = ListElementTagOptions()\n    root_tree_node = RootTreeNode(RootTagOptions())\n    tree_node = root_tree_node.new_child('li', opts)\n    self.assertEqual(1, opts.get_element_number_from_parent(tree_node))", "buggy_source_code": "def test_get_element_number_from_parent_with_non_list_as_parent(self):\n    root_tree_node = RootTreeNode()\n    tree_node = root_tree_node.new_child('li', ListElementTreeNode)\n    self.assertEqual(1, tree_node.get_element_number_from_parent())", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('list', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['list'], ListTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(ListTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('li', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['li'], ListElementTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(ListElementTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef pull(self):\n    return False", "buggy_source_code": "def pull(self):\n    return False", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\n@memoize\ndef pull(self):\n    return bool(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.refspec, self.parent_refspec), split=True))", "buggy_source_code": "def pull(self):\n    return bool(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.refspec, self.parent_refspec), split=True))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\n@memoize\ndef modified(self):\n    return self.repo.git('show', '--pretty=format:%ar', self.sha).split('\\n')[0].strip()", "buggy_source_code": "def modified(self):\n    return self.repo.git('show', '--pretty=format:%ar', self.sha).split('\\n')[0].strip()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@memoize\ndef tags(self):\n    return [x for x in self.refs() if isinstance(x, Tag)]", "buggy_source_code": "def tags(self):\n    return [x for x in self.refs() if isinstance(x, Tag)]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\n@memoize\ndef ahead(self):\n    return len(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.merge_refspec, self.refspec), split=True))", "buggy_source_code": "def ahead(self):\n    return len(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.merge_refspec, self.refspec), split=True))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@memoize\ndef remotes(self):\n    return self.git('remote', split=True)", "buggy_source_code": "def remotes(self):\n    return self.git('remote', split=True)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef push(self):\n    return False", "buggy_source_code": "def push(self):\n    return False", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\n@memoize\ndef push(self):\n    return bool(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.parent_refspec, self.refspec), split=True))", "buggy_source_code": "def push(self):\n    return bool(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.parent_refspec, self.refspec), split=True))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\n@memoize\ndef configs(self):\n    return dict([x.partition('=')[0::2] for x in self.git('config', '--list', split=True)])", "buggy_source_code": "def configs(self):\n    return dict([x.partition('=')[0::2] for x in self.git('config', '--list', split=True)])", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@memoize\ndef refs(self):\n    return [Ref(self, *x.split()) for x in self.git('show-ref', split=True)]", "buggy_source_code": "def refs(self):\n    return [Ref(self, *x.split()) for x in self.git('show-ref', split=True)]", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\n@memoize\ndef behind(self):\n    return len(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.refspec, self.repo.master), split=True))", "buggy_source_code": "def behind(self):\n    return len(self.repo.git('log', '--pretty=format:%H', '%s..%s' % (self.refspec, self.repo.master), split=True))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_start(self):\n    super(threading.Thread, self).start()", "buggy_source_code": "def on_start(self):\n    self.botThread.start()", "edit_actions": ["update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def listening_for(self, message):\n    print('asking irc listener if it wants that')\n    return str(self) != str(message['metadata']['source'])", "buggy_source_code": "def listening_for(self, message):\n    return True", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_lost_displayhook(self):\n    olddisplayhook = sys.displayhook\n    del sys.displayhook\n    code = compile('42', '<string>', 'single')\n    self.assertRaises(RuntimeError, eval, code)\n    sys.displayhook = olddisplayhook", "buggy_source_code": "def test_lost_displayhook(self):\n    del sys.displayhook\n    code = compile('42', '<string>', 'single')\n    self.assertRaises(RuntimeError, eval, code)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def p_error(self, p):\n    if p:\n        raise ShaderParserException(p.lineno, 'before: %s' % p.value)\n    else:\n        raise ShaderParserException(-1, 'at end of input')", "buggy_source_code": "def p_error(self, p):\n    logger.error('Parser error in line #%d before token %s' % (p.lineno, p.value))", "edit_actions": ["move-tree", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _relative_move(srcroot, srcrel, destroot):\n    srcfile = str(srcroot / srcrel)\n    destfile = str(destroot / srcrel)\n    utils.mkdir(destfile.parent)\n    shutil.move(srcfile, destfile)", "buggy_source_code": "def _relative_move(srcroot, srcrel, destroot):\n    srcfile = srcroot / srcrel\n    destfile = destroot / srcrel\n    utils.mkdir(destfile.parent)\n    shutil.move(str(srcfile), str(destfile))", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __appendToAlarmCausingList(self, attrList):\n    if self._parent:\n        statemachine = self._parent.statemachineObj()\n        statemachine.InsertAlarmDueToMonitoring(attrList)", "buggy_source_code": "def __appendToAlarmCausingList(self, attrList):\n    if self._parent:\n        statemachine = self._parent.statemachineObj\n        statemachine.InsertAlarmDueToMonitoring(attrList)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __removeFromAlarmCausingList(self, attrList):\n    if self._parent:\n        statemachine = self._parent.statemachineObj()\n        statemachine.RemoveAlarmDueToMonitoring(attrList)", "buggy_source_code": "def __removeFromAlarmCausingList(self, attrList):\n    if self._parent:\n        statemachine = self._parent.statemachineObj\n        statemachine.RemoveAlarmDueToMonitoring(attrList)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@classmethod\ndef nearest(cls, dt, series):\n    return NaN", "buggy_source_code": "@classmethod\ndef nearest(cls, dt, series):\n    return None", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def execute(self, bot, slack):\n    logging.debug('Saving data')\n    bot.storage.save()\n    bot.slow_queue.append(FlushDBTask())", "buggy_source_code": "def execute(self, bot, slack):\n    bot.storage.save()\n    bot.slow_queue.append(FlushDBTask())", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, request, status, headers=None, version='1.1'):\n    self.request = request\n    self.status = status\n    self.headers = headers or HTTPHeaders()\n    self.version = version", "buggy_source_code": "def __init__(self, request, status, headers=None):\n    self.request = request\n    self.status = status\n    self.headers = headers or Headers()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def coordToXYZ(self, p):\n    return p + self.e1", "buggy_source_code": "def coordToXYZ(self, p):\n    return p", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def wait(self):\n    r = self.threads.map(self._caller, self.backends)\n    errors = get_errors(r)\n    if errors:\n        raise CallErrors(errors)", "buggy_source_code": "def wait(self):\n    self.tasks.join()\n    if self.errors:\n        raise CallErrors(self.errors)", "edit_actions": ["move-tree", "move-tree", "move-tree", "update-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_stopwords():\n    assert not stopwords._loaded\n    assert 'a' in stopwords\n    assert stopwords._loaded\n    assert 'yet' in stopwords\n    assert 'do' in stopwords\n    assert 'Do' not in stopwords\n    assert 'do ' not in stopwords", "buggy_source_code": "def test_stopwords():\n    assert 'a' in stopwords\n    assert stopwords._loaded\n    assert 'yet' in stopwords\n    assert 'do' in stopwords\n    assert 'Do' not in stopwords\n    assert 'do ' not in stopwords", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self, url, params={}, headers={}):\n    return requests.get(url=url, params=params, headers=headers).text", "buggy_source_code": "def get(self, url, params=None, headers=None):\n    return requests.get(url=url, params=params, headers=headers).text", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __buttonDoubleClick(self, widget, event):\n    return self.__viewportGadget.buttonPressSignal()(self.__viewportGadget, event)\n    return self.__viewportGadget.buttonDoubleClickSignal()(self.__viewportGadget, event)", "buggy_source_code": "def __buttonDoubleClick(self, widget, event):\n    return self.__viewportGadget.buttonDoubleClickSignal()(self.__viewportGadget, event)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return u'%s -- %s' % (self.url, self.title)", "buggy_source_code": "def __unicode__(self):\n    return u'%s' % self.title", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def make_pathhash(path, targettype):\n    return '-' + hex(zlib.adler32(bytes(path + targettype, 'utf-8')) & 4294967295)[2:-1]", "buggy_source_code": "def make_pathhash(path, targettype):\n    return '-' + hex(zlib.adler32((path + targettype).encode()) & 4294967295)[2:-1]", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch('pnc_cli.environments.envs_api.get_all')\ndef test_get_environment_id_by_name_notexist(mock):\n    mock.return_value = test.testutils.create_mock_list_with_name_attribute()\n    result = environments._get_environment_id_by_name('doesntexist')\n    mock.assert_called_once_with()\n    assert not result", "buggy_source_code": "@patch('pnc_cli.environments.envs_api.get_all')\ndef test_get_environment_id_by_name_notexist(mock):\n    mock.return_value = None\n    result = environments._get_environment_id_by_name('doesntexist')\n    mock.assert_called_once_with(q='name==doesntexist')\n    assert not result", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _set_last_date(self, last_date):\n    self._last_date = last_date\n    if hasattr(self._sensor_service, 'set_value'):\n        self._sensor_service.set_value(name=self._release_key, value=last_date)", "buggy_source_code": "def _set_last_date(self, last_date):\n    self._last_date = time.strftime('%Y-%m-%dT%H:%M:%S', last_date)\n    self._sensor_service.set_value(name=self._release_key, value=self._last_date)", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def updateJobs():\n    xbmcplugin.endOfDirectory(int(sys.argv[1]), cacheToDisc=False)\n    ui = windowGUI('script-cron-main.xml', __cwd__, 'Default')\n    ui.doModal()\n    del ui", "buggy_source_code": "def updateJobs():\n    ui = windowGUI('script-cron-main.xml', __cwd__, 'Default')\n    ui.doModal()\n    del ui", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def refine_DATABASES(original):\n    from django_productline.context import PRODUCT_CONTEXT\n    return original.update({'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': '%s/db.sqlite' % PRODUCT_CONTEXT.PRODUCT_DIR}})", "buggy_source_code": "def refine_DATABASES(original):\n    from django_productline.context import PRODUCT_CONTEXT\n    return {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': '%s/db.sqlite' % PRODUCT_CONTEXT.PRODUCT_DIR}}", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_tts(self):\n    tts = self.sample_time - time.monotonic()\n    return max(0, tts)", "buggy_source_code": "def _get_tts(self):\n    tts = self.sample_time - time.monotonic()\n    return tts", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_heartbeat(self, target: str=''):\n    frame = self._create_frame('PING', target)\n    self.scheduler.add_callback(self.publish_socket.send_multipart, frame)", "buggy_source_code": "def send_heartbeat(self, target: str=''):\n    frame = self._create_frame('PING', target)\n    self.add_callback(self.publish_socket.send_multipart, frame)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef color(self):\n    return self._item.brush().color()", "buggy_source_code": "@property\ndef color(self):\n    return self._currentBrush.color()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def highlight(self):\n    self._item.setBrush(QtGui.QBrush(self._item.brush().color().lighter()))", "buggy_source_code": "def highlight(self):\n    self._currentBrush = QtGui.QBrush(self.color.lighter())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_value_at_indices(self, name: str, inds: np.ndarray[int], src: np.ndarray) -> None:\n    ...", "buggy_source_code": "def set_value_at_indices(self, name: str, inds: np.ndarray, src: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_x(self, grid: int, x: np.ndarray[float]) -> None:\n    ...", "buggy_source_code": "def get_grid_x(self, grid: int, x: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_spacing(self, grid: int, spacing: np.ndarray[float]) -> None:\n    ...", "buggy_source_code": "def get_grid_spacing(self, grid: int, spacing: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_z(self, grid: int, z: np.ndarray[float]) -> None:\n    ...", "buggy_source_code": "def get_grid_z(self, grid: int, z: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_y(self, grid: int, y: np.ndarray[float]) -> None:\n    ...", "buggy_source_code": "def get_grid_y(self, grid: int, y: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_shape(self, grid: int, shape: np.ndarray[int]) -> None:\n    ...", "buggy_source_code": "def get_grid_shape(self, grid: int, shape: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_edge_nodes(self, grid: int, edge_nodes: np.ndarray[int]) -> None:\n    ...", "buggy_source_code": "def get_grid_edge_nodes(self, grid: int, edge_nodes: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_value_at_indices(self, name: str, dest: np.ndarray, inds: np.ndarray[int]) -> None:\n    ...", "buggy_source_code": "def get_value_at_indices(self, name: str, dest: np.ndarray, inds: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_nodes_per_face(self, grid: int, nodes_per_face: np.ndarray[int]) -> None:\n    ...", "buggy_source_code": "def get_grid_nodes_per_face(self, grid: int, nodes_per_face: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_face_nodes(self, grid: int, face_nodes: np.ndarray[int]) -> None:\n    ...", "buggy_source_code": "def get_grid_face_nodes(self, grid: int, face_nodes: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_face_edges(self, grid: int, face_edges: np.ndarray[int]) -> None:\n    ...", "buggy_source_code": "def get_grid_face_edges(self, grid: int, face_edges: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_grid_origin(self, grid: int, origin: np.ndarray[float]) -> None:\n    ...", "buggy_source_code": "def get_grid_origin(self, grid: int, origin: np.ndarray) -> None:\n    ...", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def received_block(self, block):\n    if block and block.public_key == self.trustchain.my_peer.public_key.key_to_bin():\n        deferLater(reactor, 0, self.publish_latest_block, block, 1)", "buggy_source_code": "def received_block(self, block):\n    if block and block.public_key == self.trustchain.my_peer.public_key.key_to_bin():\n        deferLater(reactor, 0, self.publish_latest_block, block)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def totaltime(trajectory, targetunit='ps', sourceunit='AKMA'):\n    return trajectory.numframes * delta_t(trajectory, targetunit, sourceunit)", "buggy_source_code": "def totaltime(trajectory):\n    return trajectory.numframes * trajectory.dt", "edit_actions": ["move-tree", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def click_fish():\n    (x, y) = find_fish()\n    if x and y:\n        print('Caught a fish at %s:%s' % (x, y))\n        click(x, y)\n        sleep(1)", "buggy_source_code": "def click_fish():\n    (x, y) = find_fish()\n    if x and y:\n        click(x, y)\n        sleep(0.1)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def pthread_setname_np(ident, name):\n    _pthread_setname_np(ident, name[:15].encode('utf8'))", "buggy_source_code": "def pthread_setname_np(ident, name):\n    _pthread_setname_np(ident, name[:15])", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\n@given(data=integers(min_value=sys.maxsize + 1))\ndef test_BaseType_Long(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "buggy_source_code": "@given(data=integers(min_value=sys.maxsize + 1))\ndef test_BaseType_Long(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\ndef test_BaseType_None(enc_dec):\n    agnosticTestFunction(enc_dec, None)", "buggy_source_code": "def test_BaseType_None(enc_dec):\n    agnosticTestFunction(enc_dec, None)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\n@given(data=text(printable))\ndef test_BaseType_String(enc_dec, data):\n    data = str(data)\n    agnosticTestFunction(enc_dec, data)", "buggy_source_code": "@given(data=text(printable))\ndef test_BaseType_String(enc_dec, data):\n    data = str(data)\n    agnosticTestFunction(enc_dec, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\n@given(data=integers(max_value=sys.maxsize))\ndef test_BaseType_Int(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "buggy_source_code": "@given(data=integers(max_value=sys.maxsize))\ndef test_BaseType_Int(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\n@given(data=text())\ndef test_BaseType_Unicode(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "buggy_source_code": "@given(data=text())\ndef test_BaseType_Unicode(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\n@given(data=lists(integers()))\ndef test_BaseType_List(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "buggy_source_code": "@given(data=lists(integers()))\ndef test_BaseType_List(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\n@given(data=booleans())\ndef test_BaseType_Bool(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "buggy_source_code": "@given(data=booleans())\ndef test_BaseType_Bool(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@parametrize('enc_dec', enc_dec_imp)\n@given(data=myDatetimes())\ndef test_BaseType_DateTime(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "buggy_source_code": "@given(data=myDatetimes())\ndef test_BaseType_DateTime(enc_dec, data):\n    agnosticTestFunction(enc_dec, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, message='I hate you'):\n    self._message = message\n    self.coordinates_helper = Coordinates_helper()\n    self.cur_location = None\n    self.obs_log = []\n    super().__init__()", "buggy_source_code": "def __init__(self, message='I hate you'):\n    self._message = message\n    self.coordinates_helper = Coordinates_helper()\n    self.cur_location = None\n    super().__init__()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tern_displayError(err):\n    vim.command('echo ' + json.dumps(str(err)))", "buggy_source_code": "def tern_displayError(err):\n    print(str(err))", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('ispoiler', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['ispoiler'], InlineSpoilerTextTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(InlineSpoilerTextTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('icode', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['icode'], InlineCodeTextTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(InlineCodeTextTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('sup', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['sup'], SupscriptTextTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(SupscriptTextTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('sub', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['sub'], SubscriptTextTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(SubscriptTextTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('pre', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['pre'], PreTextTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(PreTextTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('cite', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['cite'], CiteTextTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(CiteTextTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn('small', DEFAULT_RECOGNIZED_TAGS)\n    self.assertIsInstance(DEFAULT_RECOGNIZED_TAGS['small'], SmallTextTagOptions)", "buggy_source_code": "def test_tag_and_aliases_in_default_recognized_tags_dict(self):\n    self.assertIn(SmallTextTreeNode, DEFAULT_RECOGNIZED_TAGS_LIST)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    s = self.to_string()\n    s = s.replace('\\n', '\\\\n')\n    return s", "buggy_source_code": "def __repr__(self):\n    return self.to_string()", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_keyword(self):\n    package_name = self.get_package()\n    return KEYWORD_PACKAGE_NAME.lower() == package_name", "buggy_source_code": "def is_keyword(self):\n    return self.data.startswith(':')", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    if not isinstance(other, KQMLToken):\n        return False\n    elif self.data == other.data:\n        return True\n    else:\n        return False", "buggy_source_code": "def __eq__(self, other):\n    if isinstance(other, KQMLToken):\n        return self.data == other.data\n    else:\n        return self.data == other", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_string(self):\n    out = StringIO.StringIO()\n    try:\n        self.write(out)\n    except Exception:\n        pass\n    return out.getvalue()", "buggy_source_code": "def to_string(self):\n    return self.data", "edit_actions": ["move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def start(self):\n    self.check_time = int(time.time())\n    self.start_time = self.check_time - 200", "buggy_source_code": "def start(self):\n    self.check_time = int(time.time())\n    self.start_time = self.check_time", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    DupeGuruBase.__init__(self, data, '/tmp', appid=4)", "buggy_source_code": "def __init__(self):\n    DupeGuruBase.__init__(self, data, '/tmp')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getContainerType(self) -> Optional[Type['ContainerInterface']]:\n    return self._kwargs.get('container_type')", "buggy_source_code": "def getContainerType(self) -> Optional[type]:\n    return self._kwargs.get('container_type')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def value(self):\n    try:\n        return int(self.text())\n    except ValueError:\n        return 1", "buggy_source_code": "def value(self):\n    return int(self.text())", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def depends(start, get_children):\n    result = SortedSet(reversed(list(dfs(start, get_children))))\n    return list(result)", "buggy_source_code": "def depends(start, get_children):\n    return dfs(start, get_children)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef num_tasks(self):\n    try:\n        return len(self.task_args)\n    except TypeError:\n        return -1", "buggy_source_code": "@property\ndef num_tasks(self):\n    try:\n        return len(self.task_args)\n    except TypeError:\n        return ''", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ex_resize(self, node, size):\n    server_params = self._create_args_to_params(node, size=size)\n    resp = self._node_action(node, 'resize', **server_params)\n    return resp.status == httplib.ACCEPTED", "buggy_source_code": "def ex_resize(self, node, size):\n    server_params = {'flavorRef': size.id}\n    resp = self._node_action(node, 'resize', **server_params)\n    return resp.status == httplib.ACCEPTED", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_setup_dependencies_incorrect_checksum(self):\n    self.assertRaises(IntegrityError, setup_dependencies, self.tf_cs2.name, [self.dep_cs2])", "buggy_source_code": "def test_setup_dependencies_incorrect_checksum(self):\n    self.assertRaises(IntegrityError, setup_dependencies, self.tf_cs2, [self.dep_cs2])", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def test_setup_dependencies(self):\n    setup_dependencies(self.tf_cs.name, [self.dep_cs])", "buggy_source_code": "def test_setup_dependencies(self):\n    setup_dependencies(self.tf_cs, [self.dep_cs])", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def _stopCamera(self, job_state):\n    Logger.log('w', '_stopCamera is not implemented by this output device')", "buggy_source_code": "def _stopCamera(self):\n    Logger.log('w', '_stopCamera is not implemented by this output device')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _startCamera(self, job_state):\n    Logger.log('w', '_startCamera is not implemented by this output device')", "buggy_source_code": "def _startCamera(self):\n    Logger.log('w', '_startCamera is not implemented by this output device')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def interrupt(self, value):\n    with self.valueLock:\n        self.interruptedValue = value\n        self.subsystem.interrupt()", "buggy_source_code": "def interrupt(self, value):\n    self.interruptedValue = value\n    self.subsystem.interrupt()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def sample_transect(self, transect_vertices, crs=None, sample_metres=None):\n    crs = crs or self.crs\n    sample_metres = sample_metres or self.default_sample_metres\n    return sample_transect(self, transect_vertices, crs, sample_metres)", "buggy_source_code": "def sample_transect(self, transect_vertices, crs=None, sample_metres=None):\n    crs = crs or self.crs\n    sample_metres = sample_metres or self.default_sample_metres\n    return sample_transect(transect_vertices, crs, sample_metres)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return self._errcode + u':' + self._message", "buggy_source_code": "def __repr__(self):\n    return self.message", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return self._errcode + u':' + self._message", "buggy_source_code": "def __str__(self):\n    return self.message", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, errcode, message):\n    self._errcode = errcode\n    self._message = message", "buggy_source_code": "def __init__(self, message):\n    self.message = message", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _enabled(self, context):\n    if not self.is_inited:\n        self._init(context)\n        self.is_inited = True", "buggy_source_code": "def _enabled(self, context):\n    if not self.is_property_set('page'):\n        self._init(context)", "edit_actions": ["move-tree", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, note_id, author, content):\n    self.note_id = note_id\n    self.sno = author\n    self.content = content\n    self.publish_time = db.Column(db.DateTime())", "buggy_source_code": "def __init__(self, note_id, author, content):\n    self.note_id = note_id\n    self.sno = author\n    self.content = content", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, share_id, author, content):\n    self.share_id = share_id\n    self.sno = author\n    self.content = content\n    self.publish_time = datetime.now()", "buggy_source_code": "def __init__(self, share_id, author, content):\n    self.share_id = share_id\n    self.sno = author\n    self.content = content", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, review_id, author, content):\n    self.review_id = review_id\n    self.sno = author\n    self.content = content\n    self.publish_time = db.Column(db.DateTime())", "buggy_source_code": "def __init__(self, review_id, author, content):\n    self.review_id = review_id\n    self.sno = author\n    self.content = content", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef anomaly_score(self, X=None):\n    if X is not None:\n        X = self._pre_transform(X)\n    return self._final_estimator.anomaly_score(X)", "buggy_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef anomaly_score(self, X):\n    return self._final_estimator.anomaly_score(self._pre_transform(X))", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef featurewise_anomaly_score(self, X=None):\n    if X is not None:\n        X = self._pre_transform(X)\n    return self._final_estimator.featurewise_anomaly_score(X)", "buggy_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef featurewise_anomaly_score(self, X):\n    return self._final_estimator.featurewise_anomaly_score(self._pre_transform(X))", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _load_interpreter(self):\n    from rasa_nlu.model import Interpreter\n    from rasa_nlu.config import RasaNLUConfig\n    self.interpreter = Interpreter.load(self.model_directory, RasaNLUConfig(self.config_file, os.environ))", "buggy_source_code": "def _load_interpreter(self):\n    from rasa_nlu.model import Interpreter\n    self.interpreter = Interpreter.load(self.model_directory)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rev(self, rev='head'):\n    if integer_re.search(str(rev)):\n        if rev < 0:\n            raise NotImplementedError\n    return self.get_query_set(rev)", "buggy_source_code": "def rev(self, rev='head'):\n    return self.get_query_set(rev)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_auth_headers(self):\n    return {'Authentication': base64.b64encode(b('%s:%s' % (self.user_id, self.key))), 'Content-Length': 0}", "buggy_source_code": "def _get_auth_headers(self):\n    return {'Authentication': base64.b64encode(b('%s:%s' % (self.user_id, self.key))), 'Content-Length': '0'}", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def _reset(self):\n    self._tickers = []\n    self._commands = []\n    self.reset()", "buggy_source_code": "def _reset(self):\n    self._commands = []\n    self.reset()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def all_ids(self):\n    for book_id in self.new_api.all_book_ids():\n        yield book_id", "buggy_source_code": "def all_ids(self):\n    return tuple(self.new_api.all_book_ids())", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@route('/framework/:id#[0-9-]*#')\ndef framework(id):\n    bottle.TEMPLATES.clear()\n    return template('framework', framework_id=int(id))", "buggy_source_code": "@route('/framework/:id#[0-9-]*#')\ndef framework(id):\n    bottle.TEMPLATES.clear()\n    return template('framework', framework_id=id)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef to_polygon(cls, coords):\n    if not coords or len(coords) < 3:\n        return None\n    poly = Polygon(coords)\n    return cls.fix_polygon(poly)", "buggy_source_code": "@classmethod\ndef to_polygon(cls, coords):\n    if not coords or len(coords) < 3:\n        return None\n    poly = Polygon(coords)\n    return poly", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def hessian(self, params, args=()):\n    loglike = self.loglike\n    return approx_hess(params, loglike, args=args)[0]", "buggy_source_code": "def hessian(self, params, args=()):\n    loglike = self.loglike\n    return approx_hess(params, loglike, args=args)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def rotary2_left():\n    logger.debug('rotary2_left')\n    logger.debug('[ VOLUME %d ]' % volume)\n    sonos_device.volume += 2", "buggy_source_code": "def rotary2_left():\n    logger.debug('rotary2_left')\n    logger.debug('[ VOLUME UP ]')\n    sonos_device.volume += 2", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def inf_action(self, lie_alg_element):\n    return -self.base_action.inf_action(lie_alg_element.inverse)", "buggy_source_code": "def inf_action(self, lie_alg_element):\n    return -self.base_action.inf_action(lie_alg_element)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clean(self):\n    super(Artist, self).clean()\n    (self.first_name, self.last_name) = self.title.split(' ')", "buggy_source_code": "def clean(self):\n    super(Artist, self).clean()\n    self.set_names()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def enable_file_logging(path=None):\n    global dconf\n    if not path:\n        dconf['logpath'] = wasdaemon.get_default_logpath(__file__)", "buggy_source_code": "def enable_file_logging(path=None):\n    global dconf\n    if not path:\n        dconf['logpath'] = wasdaemon.get_default_logpath()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@receiver(social_account_removed)\ndef remove_slack_handle(request, socialaccount, **kwargs):\n    u = Profile.objects.get(user=socialaccount.user)\n    u.slack_handle = ''\n    u.save()", "buggy_source_code": "@receiver(social_account_removed)\ndef remove_slack_handle(request, socialaccount, **kwargs):\n    Profile.objects.get_or_create(user=socialaccount.user, slack_handle='')", "edit_actions": ["move-tree", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_lazyhref(self, linkid, anchor=None):\n    href = '%s://%s' % (TEMPLINK_PROTO, linkid)\n    if anchor:\n        href += '#' + anchor\n    return href", "buggy_source_code": "def get_lazyhref(self, linkid):\n    return '%s://%s' % (TEMPLINK_PROTO, linkid)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@queue.command('clean', short_help='Clean Queue Command')\n@click.pass_context\ndef clean(ctx):\n    access_server('post', ctx, 'job/clean/queue', json={})", "buggy_source_code": "@queue.command('clean', short_help='Clean Queue Command')\n@click.pass_context\ndef clean(ctx):\n    access_server('post', ctx, 'job/clean/queue')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_active(self, request_params):\n    for p in request_params:\n        if p == self.lookup_kwarg:\n            return True\n    return False", "buggy_source_code": "def is_active(self, request_params):\n    return self.lookup_kwarg in request_params", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_active(self, request_params):\n    for p in request_params:\n        if p == self.lookup_kwarg:\n            return True\n    return False", "buggy_source_code": "def is_active(self, request_params):\n    return False", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_active(self, request_params):\n    for p in request_params:\n        if p == self.lookup_kwarg:\n            return True\n    return False", "buggy_source_code": "def is_active(self, request_params):\n    return self.lookup_kwarg in request_params", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_active(self, request_params):\n    for p in request_params:\n        if p == self.lookup_kwarg:\n            return True\n    return False", "buggy_source_code": "def is_active(self, request_params):\n    return False", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _validate_consumer_history():\n    objectdb = ConsumerHistoryEvent.get_collection()\n    reference = ConsumerHistoryEvent('', '', '', {})\n    return _validate_model(ConsumerHistoryEvent.__name__, objectdb, reference)", "buggy_source_code": "def _validate_consumer_history():\n    objectdb = ConsumerHistoryEvent.get_collection()\n    reference = ConsumerHistoryEvent('', '', '', None)\n    return _validate_model(ConsumerHistoryEvent.__name__, objectdb, reference)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.parametrize('dictionary', [letters, letters2x])\ndef test_space_letter(dictionary):\n    for character in string.lowercase:\n        assert getattr(dictionary, 'space')", "buggy_source_code": "@pytest.mark.parametrize('dictionary', [letters, letters2x])\ndef test_space_letter(dictionary):\n    assert getattr(dictionary, 'space')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.parametrize('dictionary', [letters, letters2x])\ndef test_height_exists(dictionary):\n    for character in string.lowercase:\n        assert getattr(dictionary, 'HEIGHT')", "buggy_source_code": "@pytest.mark.parametrize('dictionary', [letters, letters2x])\ndef test_height_exists(dictionary):\n    assert getattr(dictionary, 'HEIGHT')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.manual\n@test_requirements.infra_hosts\ndef test_host_comparison_configuration():\n    pass", "buggy_source_code": "@test_requirements.infra_hosts\ndef test_host_comparison_configuration():\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.manual\n@test_requirements.infra_hosts\ndef test_host_comparison_my_company_tags():\n    pass", "buggy_source_code": "@test_requirements.infra_hosts\ndef test_host_comparison_my_company_tags():\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.manual\n@test_requirements.infra_hosts\ndef test_host_comparison_security():\n    pass", "buggy_source_code": "@test_requirements.infra_hosts\ndef test_host_comparison_security():\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.manual\n@test_requirements.infra_hosts\ndef test_host_setting_default_filter():\n    pass", "buggy_source_code": "@test_requirements.infra_hosts\ndef test_host_setting_default_filter():\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@test_requirements.general_ui\n@pytest.mark.manual\n@pytest.mark.tier(1)\n@pytest.mark.meta(coverage=[1532404])\ndef test_provider_summary_topology():\n    pass", "buggy_source_code": "@test_requirements.general_ui\n@pytest.mark.tier(1)\n@pytest.mark.meta(coverage=[1532404])\ndef test_provider_summary_topology():\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.manual\n@pytest.mark.tier(1)\n@test_requirements.discovery\ndef test_add_infra_provider_screen():\n    pass", "buggy_source_code": "@pytest.mark.tier(1)\n@test_requirements.discovery\ndef test_add_infra_provider_screen():\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.manual\n@test_requirements.infra_hosts\ndef test_host_comparison_properties():\n    pass", "buggy_source_code": "@test_requirements.infra_hosts\ndef test_host_comparison_properties():\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.manual\n@test_requirements.discovery\n@pytest.mark.tier(1)\ndef test_infrastructure_providers_rhevm_edit_provider_no_default_port():\n    pass", "buggy_source_code": "@test_requirements.discovery\n@pytest.mark.tier(1)\ndef test_infrastructure_providers_rhevm_edit_provider_no_default_port():\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def has_elasticsearch_index(self):\n    if hasattr(self, 'datastore_type'):\n        return self.datastore_type == 'es'\n    else:\n        return self.get_elasticsearch_index() is not None", "buggy_source_code": "def has_elasticsearch_index(self):\n    return self.get_elasticsearch_index() is not None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def hash_item(item: str) -> str:\n    m = hashlib.md5()\n    m.update(item.encode('utf-8'))\n    return str(m.hexdigest())", "buggy_source_code": "def hash_item(item: str) -> str:\n    m = hashlib.md5()\n    m.update(item.encode('utf-8'))\n    return m.hexdigest()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, msg, values, keys):\n    super(TraceError, self).__init__(msg)\n    self.msg = msg\n    self.zeros = values\n    self.D = keys", "buggy_source_code": "def __init__(self, msg):\n    super(TraceError, self).__init__(msg)\n    self.msg = msg", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __abs__(self, other):\n    return math.hypot(*self)", "buggy_source_code": "def __abs__(self):\n    return math.hypot(*self)", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run(self, edit):\n    self.save()\n    if self.view.file_name() == None:\n        return sublime.error_message('Please save this file before trying to beautify.')\n    self.beautify(edit)", "buggy_source_code": "def run(self, edit):\n    if self.view.file_name() == None:\n        return sublime.error_message('Please save this file before trying to beautify.')\n    self.beautify(edit)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/')\n@login_required\ndef index():\n    return render_template('index.html', user=current_user)", "buggy_source_code": "@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return render_template('index.html', user=current_user)\n    return redirect(url_for('login'))", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update_startup_profile_item(apps, schema_editor):\n    NavTreeItem = apps.get_model('accelerator', 'NavTreeItem')\n    start_profile_item = NavTreeItem.objects.filter(alias='startup_profile').delete()\n    create_startup_dashboard_subnav()", "buggy_source_code": "def update_startup_profile_item(apps, schema_editor):\n    NavTreeItem = apps.get_model('accelerator', 'NavTreeItem')\n    NavTreeItem.objects.filter(alias='startup_profile').delete()\n    create_startup_dashboard_subnav()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _default_error_method(self, request, response, exc):\n    from traceback import print_exc\n    print_exc()\n    log.exception(exc.message)\n    response.body = 'TODO: Internal Server Error'\n    response.status = 500", "buggy_source_code": "def _default_error_method(self, request, response, exc):\n    log.exception(exc.message)\n    response.body = 'Internal Server Error'\n    response.status = 500", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def make_vecs_vals(shape):\n    return (randn(*shape + (3, 3)), randn(*shape + (3,)))", "buggy_source_code": "def make_vecs_vals(shape):\n    return (randn(*shape), randn(*shape[:-2] + shape[-1:]))", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_edit_form(self, obj):\n    return self.form(request.form, obj=obj)", "buggy_source_code": "def get_edit_form(self, obj):\n    form = EditNoteForm(obj=obj)\n    return form", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def list_nodes(self):\n    response = self.connection.request('/devices', method='GET')\n    nodes = [self._to_node(host) for host in response.object['devices']]\n    return nodes", "buggy_source_code": "def list_nodes(self):\n    data = self._paginated_request('/devices', 'devices')\n    nodes = [self._to_node(host) for host in data]\n    return nodes", "edit_actions": ["update-node", "update-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save(self, *args, **kwargs):\n    self.source = self.host\n    super(Post, self).save(*args, **kwargs)", "buggy_source_code": "def save(self, *args, **kwargs):\n    self.source = 'http://cmput404-team-4b.herokuapp.com/'\n    super(Post, self).save(*args, **kwargs)", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_default_language(language_id_or_code):\n    import multilingual.languages\n    language_id = get_language_id_from_id_or_code(language_id_or_code)\n    multilingual.languages.DEFAULT_LANGUAGE = language_id", "buggy_source_code": "def set_default_language(language_id_or_code):\n    language_id = get_language_id_from_id_or_code(language_id_or_code)\n    thread_locals.DEFAULT_LANGUAGE = language_id", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def inliner(namespace, name):\n    pass", "buggy_source_code": "def inliner(base_call):\n    pass", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def write_xyz_to_stream(self, stream):\n    (print >> stream, '%5i' % len(self.numbers))\n    print >> stream\n    self.write_atoms_to_stream(stream)\n    print >> stream", "buggy_source_code": "def write_xyz_to_stream(self, stream):\n    (print >> stream, '%5i' % len(self.numbers))\n    print >> stream\n    self.write_atoms_to_stream(stream)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test02(self):\n    lasso.Logout.new(None, lasso.providerTypeSp).msg_url", "buggy_source_code": "def test02(self):\n    lasso.Logout(None, lasso.providerTypeSp).msg_url", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.logger = MagicMock()\n    self.parser = sumparser.SumParser(maximum=1000)\n    self.parser._logger = self.logger\n    return", "buggy_source_code": "def setUp(self):\n    self.parser = sumparser.SumParser(maximum=1000, threads=4)\n    return", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def git_tree_to_direntries(tree):\n    return [entry.name.encode('utf-8') for entry in tree]", "buggy_source_code": "def git_tree_to_direntries(tree):\n    return [entry.name for entry in tree]", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef refs(self):\n    return [r[4:].encode('utf-8') for r in self.repo.listall_references() if r.startswith('refs/')]", "buggy_source_code": "@property\ndef refs(self):\n    return [r[4:] for r in self.repo.listall_references() if r.startswith('refs/')]", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    QSystemTrayIcon.__init__(self)\n    self.pixmap = QPixmap(32, 32)\n    self.setIcon(QIcon(self.pixmap))\n    self.refreshQuota()", "buggy_source_code": "def __init__(self):\n    QSystemTrayIcon.__init__(self)\n    self.refreshQuota()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, text):\n    lex = Lexer()\n    lex.sources = (LiteralHandlingIter(lex, chunk) for chunk in text)\n    self.lex = lex\n    self.src = iter(lex)", "buggy_source_code": "def __init__(self, text):\n    self.lex = Lexer(text)\n    self.src = iter(self.lex)", "edit_actions": ["move-tree", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def commit(self, msg):\n    return self.zrem(self.ack_queue, msg)", "buggy_source_code": "def commit(self, msg):\n    return self.zrem(msg)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    if 'self' in kwargs:\n        del kwargs[self]\n    self.kwargs = kwargs", "buggy_source_code": "def __init__(self, kwargs):\n    if 'self' in kwargs:\n        del kwargs['self']\n    self.kwargs = kwargs", "edit_actions": ["insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.xfail\ndef test_issue834(en_vocab):\n    f = StringIO(word2vec_str)\n    vector_length = en_vocab.load_vectors(f)\n    assert vector_length == 3", "buggy_source_code": "def test_issue834(en_vocab, text_file):\n    text_file.write(word2vec_str)\n    text_file.seek(0)\n    vector_length = en_vocab.load_vectors(text_file)\n    assert vector_length == 3", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef tearDownClass(cls):\n    super(ElasticTestCase, cls).tearDownClass()\n    if not cls.skipme:\n        settings.ES_INDEX_PREFIX = cls._old_es_index_prefix", "buggy_source_code": "@classmethod\ndef tearDownClass(cls):\n    super(ElasticTestCase, cls).tearDownClass()\n    settings.ES_INDEX_PREFIX = cls._old_es_index_prefix", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    if self.skipme:\n        raise SkipTest\n    super(ElasticTestCase, self).setUp()\n    self.setup_indexes()", "buggy_source_code": "def setUp(self):\n    super(ElasticTestCase, self).setUp()\n    self.setup_indexes()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@timer\nasync def __find_vndb(self, medium, query):\n    pass", "buggy_source_code": "async def __find_vndb(self, medium, query):\n    pass", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@timer\nasync def __find_kitsu(self, medium: Medium, query: str):\n    pass", "buggy_source_code": "async def __find_kitsu(self, medium: Medium, query: str):\n    pass", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def randomrandrange(x, y=None):\n    if isinstance(y, NoneType):\n        return random.randrange(x)\n    else:\n        return random.randrange(x, y)", "buggy_source_code": "def randomrandrange(x, y=None):\n    if isinstance(y, NoneType):\n        return random.randrange(x)\n    return random.randrange(x, y)", "edit_actions": ["move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def extract_scalar_value(line):\n    end_of_scalar_name = line.rfind('\"')\n    nr = line[end_of_scalar_name + 1:].strip()\n    return float(nr)", "buggy_source_code": "def extract_scalar_value(line):\n    nr = line.strip().split()[-1]\n    return float(nr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cancel_order(self, order_id):\n    return self.private_api('cancelOrder', {'orderNumber': order_id})", "buggy_source_code": "def cancel_order(self, order_id):\n    return self.private_api({'command': 'cancelOrder', 'orderNumber': order_id})", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def children(self):\n    return self._iterator(self.val['elements'], self.val['len'])", "buggy_source_code": "def children(self):\n    return _iterator(self.val['elements'], self.val['len'])", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def goExplorePage():\n    typeUrlOnChrome(strUrlText='https://www.indiegogo.com/explore')\n    wait('1455771252801.png', 20)\n    wait('1456057892065.png', 20)\n    waitVanish('1456214096530.png', 20)\n    wait('1456214122362.png', 20)", "buggy_source_code": "def goExplorePage():\n    typeUrlOnChrome(strUrlText='https://www.indiegogo.com/explore')\n    wait('1455771252801.png', 20)\n    waitVanish('1456214096530.png', 20)\n    wait('1456214122362.png', 20)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, type, field, **kwargs):\n    kwargs.setdefault('detail', \"The field '{}.{}' is required.\".format(type, field))\n    super(MissingField, self).__init__(**kwargs)", "buggy_source_code": "def __init__(self, type, field, **kwargs):\n    kwargs.setdefault('detail', f\"The field '{type}.{field}' is required.\")\n    super(MissingField, self).__init__(**kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, name: str):\n    self.id = normalize(name)", "buggy_source_code": "def __init__(self, name):\n    self.id = normalize(name)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_latest_version():\n    f = urllib2.urlopen(REMOTE_VERISON_FILE)\n    contents = f.read()\n    return __parse_version(contents)", "buggy_source_code": "def get_latest_version():\n    f = urlopen(REMOTE_VERISON_FILE)\n    contents = f.read()\n    return __parse_version(contents)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def prepare_uv():\n    mesh.calc_tessface()\n    try:\n        temp = mesh.tessface_uv_textures[0].data\n        mesh.calc_tangents()\n    except:\n        return False\n    return True", "buggy_source_code": "def prepare_uv():\n    try:\n        mesh.calc_tessface()\n        temp = mesh.tessface_uv_textures[0].data\n    except:\n        return False\n    return True", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def factory(Evidences, args):\n    if len(args) == 0:\n        undelete(Evidences)\n    elif '--list' in args:\n        listUndeleted(Evidences)", "buggy_source_code": "def factory(Evidences, args):\n    if not args:\n        undelete(Evidences)\n    elif '--list' in args:\n        listUndeleted(Evidences)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@logger.log_time\ndef get_connection(self):\n    conn = sqlite3.connect(self.db_file, detect_types=True)\n    conn.row_factory = sqlite3.Row\n    return conn", "buggy_source_code": "@logger.log_time\ndef get_connection(self):\n    return self.conn", "edit_actions": ["insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_ok(self):\n    return self.json_error is not None and self.json and (not 'error' in self.json.keys())", "buggy_source_code": "def is_ok(self):\n    return self.json and (not set(['error', 'errormsg']) == set(self.json.keys()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_instance_import_error(mocker):\n    result = run(['-i', 'idontexist.settings', 'list'])\n    assert \"Error: No module named 'idontexist'\" in result", "buggy_source_code": "def test_instance_import_error():\n    result = run(['-i', 'idontexist.settings', 'list'])\n    assert \"Error: No module named 'idontexist'\" in result", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def test_instance_pypath_error(mocker):\n    result = run(['-i', 'idontexist', 'list'])\n    assert 'Error: invalid path to settings instance: idontexist' in result", "buggy_source_code": "def test_instance_pypath_error():\n    result = run(['-i', 'idontexist', 'list'])\n    assert 'Error: invalid path to settings instance: idontexist' in result", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def test_instance_attribute_error(mocker):\n    result = run(['-i', 'tests.test_cli.idontexist', 'list'])\n    assert \"module 'tests.test_cli' has no attribute 'idontexist'\" in result", "buggy_source_code": "def test_instance_attribute_error():\n    result = run(['-i', 'tests.test_cli.idontexist', 'list'])\n    assert \"module 'tests.test_cli' has no attribute 'idontexist'\" in result", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_csrs(self):\n    return [self.enable, self.busy] + self.dma.get_csrs() + self.time_offset.get_csrs() + self.cri_master.get_csrs()", "buggy_source_code": "def get_csrs(self):\n    return [self.enable] + self.dma.get_csrs() + self.time_offset.get_csrs() + self.cri_master.get_csrs()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    super(Event, self).__init__(**kwargs)\n    if self.id is None:\n        self.id = None", "buggy_source_code": "def __init__(self, **kwargs):\n    super(Event, self).__init__(**kwargs)\n    self.id = self.generate_id()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def o2p(self, orbital):\n    return np.where(np.in1d(self.pvt, orbital + 1))[0]", "buggy_source_code": "def o2p(self, orbital):\n    return np.where(np.in1d(self.pvt - 1, orbital))[0]", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def DialogEnded():\n    global ContinueWindow\n    if not ContinueWindow:\n        return\n    ContinueWindow.Unload()\n    ContinueWindow = None", "buggy_source_code": "def DialogEnded():\n    global ContinueWindow\n    GUICommonWindows.UpdateActionsWindow()\n    ContinueWindow.Close()\n    ContinueWindow = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='session')\ndef unlockable_account(web3, unlockable_account_pw):\n    account = web3.personal.importRawKey(UNLOCKABLE_PRIVATE_KEY, unlockable_account_pw)\n    yield account\n    web3.personal.lockAccount(account)", "buggy_source_code": "@pytest.fixture(scope='session')\ndef unlockable_account(web3, unlockable_account_pw):\n    yield UNLOCKABLE_ACCOUNT\n    web3.personal.lockAccount(UNLOCKABLE_ACCOUNT)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def preamble(self):\n    return 'This is an overview of repositories and packages that form part of the distribution. _This page is autogenerated for ROS distribution `%s`._\\n\\n_Dependency Graph (download as [PDF](repos-%s.pdf))_\\n[![repos](repos-%s.svg)](repos-%s.svg)' % (self._distro_name, self._distro_name, self._distro_name, self._distro_name)", "buggy_source_code": "def preamble(self):\n    return 'This is an overview of repositories and packages that form part of the distribution. _This page is autogenerated for ROS distribution `%s`._\\n\\n_Dependency Graph (download as [PDF](repos-%s.pdf))_\\n![repos](repos-%s.svg)' % (self._distro_name, self._distro_name, self._distro_name)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@unittest2.skipUnless(sys.platform.startswith('darwin'), 'requires Darwin')\n@unittest2.expectedFailure\ndef test_with_dsym_and_expr_parser(self):\n    self.buildDsym()\n    self.class_types_expr_parser()", "buggy_source_code": "@unittest2.skipUnless(sys.platform.startswith('darwin'), 'requires Darwin')\ndef test_with_dsym_and_expr_parser(self):\n    self.buildDsym()\n    self.class_types_expr_parser()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@unittest2.expectedFailure\ndef test_with_dwarf_and_expr_parser(self):\n    self.buildDwarf()\n    self.class_types_expr_parser()", "buggy_source_code": "def test_with_dwarf_and_expr_parser(self):\n    self.buildDwarf()\n    self.class_types_expr_parser()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def coupon_close(self, message=''):\n    self._send_command(CMD_COUPON_CLOSE, '-%60s' % (message,))\n    self._reset()\n    return self._get_coupon_number()", "buggy_source_code": "def coupon_close(self, message=''):\n    self._send_command(CMD_COUPON_CLOSE)\n    self._reset()\n    return self._get_coupon_number()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, func=None, **kwargs):\n    self.kwargs = kwargs\n    self.func_doc = func.__doc__ if func else None\n    self.__tango_command__ = True", "buggy_source_code": "def __init__(self, func=None, **kwargs):\n    self.kwargs = kwargs\n    self.func_doc = func.__doc__ if func else None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init(self, port, baud):\n    self.serial = serial.Serial(port, baud)\n    self.serial.open()", "buggy_source_code": "def init(self, port, baud):\n    self.serial = serial.Serial(port, baud)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _filter_whitelist(self, mails):\n    whitelist = settings.MAILINGS.get('WHITELIST', None)\n    if whitelist:\n        return list(set(mails) & set(whitelist))\n    return mails", "buggy_source_code": "def _filter_whitelist(mails):\n    whitelist = settings.MAILINGS.get('WHITELIST', None)\n    if whitelist:\n        return list(set(mails) & set(whitelist))\n    return mails", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, command):\n    Exception.__init__(self, 'Corrupted message')", "buggy_source_code": "def __init__(self):\n    Exception.__init__(self, 'Corrupted message')", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_account(self, account_id=''):\n    url = '/2/account/%s' % account_id\n    return self._account_from_json(self._get_resource(url)['account'])", "buggy_source_code": "def get_account(self):\n    url = '/2/account/'\n    return self._account_from_json(self._get_resource(url)['account'])", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run():\n    global logoff\n    logoff = True\n    print('Starting bot...')\n    client.run(token)\n    sys.exit(1 - int(logoff))", "buggy_source_code": "def run():\n    global logoff\n    logoff = True\n    print('Starting bot...')\n    client.run(token)\n    sys.exit(int(logoff))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_topcrasher_with_product_sans_release(self):\n    response = self.client.get(self.base_url, {'product': 'SnowLion', 'version': '0.1'})\n    eq_(response.status_code, 400)", "buggy_source_code": "def test_topcrasher_with_product_sans_release(self):\n    response = self.client.get(self.base_url, {'product': 'SnowLion', 'version': '0.1'})\n    assert response.status_code == 400", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef finalize(cls):\n    del cls.store", "buggy_source_code": "def finalize(self):\n    del self.store", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_default_status():\n    try:\n        return config.DEFAULT_STATUS_ID\n    except AttributeError:\n        return 2", "buggy_source_code": "def get_default_status():\n    try:\n        return config.DEFAULT_STATUS_ID\n    except:\n        return 0", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handle_selection(self, idx):\n    if idx >= 0:\n        os.unlink(path.join(get_path(), get_sessions()[idx]))", "buggy_source_code": "def handle_selection(self, idx):\n    if idx >= 0:\n        unlink(path.join(get_path(), get_sessions()[idx]))", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def getChild(self):\n    if self._has_menu:\n        pos = 2\n    else:\n        pos = 1\n    pass\n    return self._vbox.child_get_at(etk.VBox.START, pos)", "buggy_source_code": "def getChild(self):\n    if self._has_menu:\n        pos = 1\n    else:\n        pos = 0\n    pass\n    return self._vbox.child_get_at(etk.VBox.START, pos)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update():\n    if len(all_bodies) > 0:\n        update_bodies()\n    else:\n        build_bodies()", "buggy_source_code": "def update():\n    update_bodies()", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    super(ServicesTestXML, cls).setUpClass()\n    raise cls.skipException('Skipping until Bug #1061738 resolved')", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    super(ServicesTestXML, cls).setUpClass()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _getAttachments(self):\n    attachments = self._getDocumentUserProperty('Attachments')\n    attachments = [] if not attachments else attachments.split(self.attachmentsjoin)\n    return attachments", "buggy_source_code": "def _getAttachments(self):\n    attachments = self._getDocumentUserProperty('Attachments')\n    attachments = attachments.split(self.attachmentsjoin) if attachments else []\n    return attachments", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getPassword(self):\n    configuration = self._getConfiguration('/org.openoffice.Office.Writer/MailMergeWizard')\n    return configuration.getByName('MailPassword')", "buggy_source_code": "def getPassword(self):\n    return self._getConfiguration('/org.openoffice.Office.Writer/MailMergeWizard').getByName('MailPassword')", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _viewAttachments(self):\n    control = self.dialog.getControl('Attachments')\n    url = uno.systemPathToFileUrl(control.SelectedItem)\n    self._executeShell(url)", "buggy_source_code": "def _viewAttachments(self):\n    url = uno.systemPathToFileUrl(self.dialog.getControl('Attachments').SelectedItem)\n    self._executeShell(url)", "edit_actions": ["update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _getLanguageCountry(self, language):\n    service = self.ctx.ServiceManager.createInstance('com.sun.star.i18n.LocaleData')\n    info = service.getLanguageCountryInfo(Locale(language, '', ''))\n    return info.Country", "buggy_source_code": "def _getLanguageCountry(self, locale):\n    service = self.ctx.ServiceManager.createInstance('com.sun.star.i18n.LocaleData')\n    return service.getLanguageCountryInfo(locale).Country", "edit_actions": ["insert-node", "update-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getUserName(self):\n    configuration = self._getConfiguration('/org.openoffice.Office.Writer/MailMergeWizard')\n    return configuration.getByName('MailUserName')", "buggy_source_code": "def getUserName(self):\n    return self._getConfiguration('/org.openoffice.Office.Writer/MailMergeWizard').getByName('MailUserName')", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rnd_board(self):\n    interval = range(1, self.side + 1)\n    self.board = [[randint(-1, 1) for _ in interval] for _ in interval]", "buggy_source_code": "def rnd_board(self):\n    self.board = [[randint(-1, 1) for _ in range(self.side)] for _ in range(self.side)]", "edit_actions": ["move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _initializer_empty_lists(self):\n    for item in ['FILE_REPLACE_DEF_LIST', 'YOUTUBE_VIDEO_ID_LIST']:\n        if self.LOCAL_SETTINGS[item] is None:\n            self.LOCAL_SETTINGS[item] = []", "buggy_source_code": "def _initializer_empty_lists(self):\n    for item in ['FILE_REPLACE_DEF_LIST', 'YOUTUBE_VIDEO_ID_LIST']:\n        if item not in self.LOCAL_SETTINGS:\n            self.LOCAL_SETTINGS[item] = []", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def brushinfo_unquote(quoted):\n    if not isinstance(quoted, bytes):\n        raise ValueError('Cann')\n    u8bytes = url_unquote(quoted)\n    return unicode(u8bytes.decode('utf-8'))", "buggy_source_code": "def brushinfo_unquote(quoted):\n    if PY3:\n        return unquote(quoted)\n    else:\n        return unicode(unquote(quoted).decode('utf-8'))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef safe_summary(self):\n    return striptags(self.summary, 'a')", "buggy_source_code": "@property\ndef safe_summary(self):\n    return striptags(self.summary)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rebuild_compiled_components(self, arch, env):\n    self.setup_extra_args = ['-j', str(cpu_count())]\n    super(NumpyRecipe, self).rebuild_compiled_components(arch, env)\n    self.setup_extra_args = []", "buggy_source_code": "def rebuild_compiled_components(self, arch, env):\n    self.setup_extra_args = ['-j', str(cpu_count())]\n    super().rebuild_compiled_components(arch, env)\n    self.setup_extra_args = []", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def build_compiled_components(self, arch):\n    self.setup_extra_args = ['-j', str(cpu_count())]\n    super(NumpyRecipe, self).build_compiled_components(arch)\n    self.setup_extra_args = []", "buggy_source_code": "def build_compiled_components(self, arch):\n    self.setup_extra_args = ['-j', str(cpu_count())]\n    super().build_compiled_components(arch)\n    self.setup_extra_args = []", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def queue_get_for(_context, topic, physical_node_id):\n    if physical_node_id:\n        return '%s.%s' % (topic, physical_node_id)\n    return topic", "buggy_source_code": "def queue_get_for(_context, topic, physical_node_id):\n    return '%s.%s' % (topic, physical_node_id)", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef r(self):\n    print('reddit instance retrieved')\n    return praw.Reddit(user_agent='python:DownloaderForReddit:%s (by /u/MalloyDelacroix)' % __version__, client_id='frGEUVAuHGL2PQ', client_secret=None)", "buggy_source_code": "@property\ndef r(self):\n    return praw.Reddit(user_agent='python:DownloaderForReddit:%s (by /u/MalloyDelacroix)' % __version__, client_id='frGEUVAuHGL2PQ', client_secret=None)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_cloud_mask(self, conf, cumulative=False):\n    mask = self.__get_mask(14, 3, conf, cumulative)\n    return mask.astype(int)", "buggy_source_code": "def get_cloud_mask(self, conf, cumulative=False):\n    return self.__get_mask(14, 3, conf, cumulative).astype(int)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_cirrus_mask(self, conf, cumulative=False):\n    mask = self.__get_mask(12, 3, conf, cumulative)\n    return mask.astype(int)", "buggy_source_code": "def get_cirrus_mask(self, conf, cumulative=False):\n    return self.__get_mask(12, 3, conf, cumulative).astype(int)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    Element.__init__(self)\n    self._color = Colors.CONNECTION_ENABLED_COLOR\n    self._bg_color = self._arrow_color = self._color", "buggy_source_code": "def __init__(self):\n    Element.__init__(self)\n    self._bg_color = self._arrow_color = self._color = None", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def mkdir(path_to_dir):\n    if path_to_dir is not None and (not os.path.isdir(path_to_dir)):\n        os.mkdir(path_to_dir)\n    return path_to_dir", "buggy_source_code": "def mkdir(path_to_dir):\n    if path_to_dir is not None and (not isdir(path_to_dir)):\n        os.mkdir(path_to_dir)\n    return path_to_dir", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_subfix(columns):\n    columnv = [name + nscheme.subfix_mean for name in columns]\n    columne = [name + nscheme.subfix_error for name in columns]\n    return (columnv, columne)", "buggy_source_code": "def add_subfix(name):\n    return (name + nscheme.subfix_mean, name + nscheme.subfix_error)", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef head_css_urls(self):\n    return [url for url in self.head_urls.split() if url.endswith('.css')]", "buggy_source_code": "@property\ndef head_css_urls(self):\n    return [url for url in self.head_urls.split() if '.css' in url]", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef head_js_urls(self):\n    return [url for url in self.head_urls.split() if url.endswith('.js')]", "buggy_source_code": "@property\ndef head_js_urls(self):\n    return [url for url in self.head_urls.split() if '.js' in url]", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def serve_forever(self):\n    while not self.finished:\n        self.handle_request()\n        logger.info(self.finished)", "buggy_source_code": "def serve_forever(self):\n    while not self.finished:\n        self.handle_request()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __setitem__(self, key, value):\n    if value:\n        self.raw_dict[key] = value\n    else:\n        logger.debug(\"Ignoring empty value: '%s'\", key)", "buggy_source_code": "def __setitem__(self, key, value):\n    self.raw_dict[key] = value", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def accept(self):\n    self.print_ok()\n    super(VariablesDialog, self).accept()", "buggy_source_code": "def accept(self):\n    super(VariablesDialog, self).accept()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_decimal():\n    d = Decimal(3.14)\n    encoded = jsonify.encode({'dec': d})\n    assert encoded == '{\"dec\": %s}' % float(d), encoded", "buggy_source_code": "def test_decimal():\n    d = Decimal('3.14')\n    encoded = jsonify.encode({'dec': d})\n    assert encoded == '{\"dec\": %s}' % float(d), encoded", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __call__(self, *args, **kwargs):\n    return self.original_func(*args, **kwargs)", "buggy_source_code": "def __call__(self):\n    return self.original_func(*self.args, **self.kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def error(self, message):\n    print(message, file=sys.stderr)", "buggy_source_code": "def error(self, message):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clean(self):\n    try:\n        self.end_start_dates_validation()\n    except AttributeError as e:\n        raise ValidationError(e)", "buggy_source_code": "def clean(self):\n    self.end_start_dates_validation()", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def finalize_all_variables(self, sess):\n    for layer in self.hidden_layers:\n        layer.update_wb(sess)", "buggy_source_code": "def finalize_all_variables(self):\n    for layer in self.hidden_layers:\n        layer.update_wb(self.sess)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save_variables(self, filepath, sess):\n    saver = tf.train.Saver()\n    save_path = saver.save(sess, filepath)\n    print('Model saved in file: %s' % save_path)", "buggy_source_code": "def save_variables(self, filepath):\n    saver = tf.train.Saver()\n    save_path = saver.save(self.sess, filepath)\n    print('Model saved in file: %s' % save_path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handle_error(self, err):\n    logger.warn('hpclient error {0}'.format(err))\n    self.connected = False\n    return 1", "buggy_source_code": "def handle_error(self, err):\n    logger.warn(str(err))\n    self.connected = False\n    return 1", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def extract_metadata_from_book(self):\n    if not self.extracted_elements['description']['toc']:\n        self._get_toc_()\n    if self.ack_href:\n        self._parse_ack_()", "buggy_source_code": "def extract_metadata_from_book(self):\n    if not self.extracted_elements['description']['toc']:\n        self._get_toc_()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@addons_repositories.setter\ndef addons_repositories(self, repo):\n    if repo in self._data[ADDONS_CUSTOM_LIST]:\n        return\n    self._data[ADDONS_CUSTOM_LIST].append(repo)\n    self.save()", "buggy_source_code": "@property\ndef addons_repositories(self):\n    return self._data[ADDONS_CUSTOM_LIST]", "edit_actions": ["update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@unittest.skipUnless(haveResource(), 'resource not available')\ndef testStringLeak(self):\n\n    def stringFunc():\n        jpype.java.lang.String('aaaaaaaaaaaaaaaaa')\n    runLeakChecker(stringFunc, 5000)", "buggy_source_code": "@unittest.skipUnless(haveResource(), 'resource not available')\ndef testStringLeak(self):\n\n    def stringFunc():\n        jpype.java.lang.String('aaaaaaaaaaaaaaaaa')\n    self.assertNotLeaky(stringFunc)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def new_instance(self, instance_class):\n    num_fields = instance_class.get_number_of_instance_fields()\n    if num_fields == 0:\n        return ObjectWithoutFields(instance_class)\n    else:\n        return Object(instance_class, num_fields)", "buggy_source_code": "@staticmethod\ndef new_instance(instance_class):\n    num_fields = instance_class.get_number_of_instance_fields()\n    if num_fields == 0:\n        return ObjectWithoutFields(instance_class)\n    else:\n        return Object(instance_class, num_fields)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def new_array_from_list(self, values):\n    make_sure_not_resized(values)\n    return Array.from_values(values)", "buggy_source_code": "@staticmethod\ndef new_array_from_list(values):\n    make_sure_not_resized(values)\n    return Array.from_values(values)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef db_password(self):\n    try:\n        value = self._config.get('DEFAULT', 'db_password')\n    except NoOptionError:\n        raise ValueError('Parameter \"db_password\" is required in \"DEFAULT\" section of configuration file.')", "buggy_source_code": "@property\ndef db_password(self):\n    try:\n        return self._config.get('DEFAULT', 'db_password')\n    except NoOptionError:\n        raise ValueError('Parameter \"db_password\" is required in \"DEFAULT\" section of configuration file.')", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reverse_concatenate(self, ns=None):\n    concatenated_aln = self.concatenate(alignment_name='concatenated')\n    reverted_alns = concatenated_aln.reverse_concatenate(db_con=self.con, ns=ns)\n    return reverted_alns", "buggy_source_code": "def reverse_concatenate(self, ns=None):\n    concatenated_aln = self.concatenate()\n    reverted_alns = concatenated_aln.reverse_concatenate(db_con=self.con, ns=ns)\n    return reverted_alns", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def convert(self, val, from_, to):\n    try:\n        data = float(val) * to / from_\n    except Converter:\n        data = 'Uups, it seems that you choose unavailable unit.'\n    return data", "buggy_source_code": "def convert(self, val, from_, to):\n    data = float(val) * to / from_\n    return data", "edit_actions": ["move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def compileFile(path: str, target: str):\n    print(target)\n    with open(path, 'r') as input, open(target, 'w') as output:\n        compile(input, output)", "buggy_source_code": "def compileFile(path: str, target: str):\n    with open(path, 'r') as input, open(target, 'w') as output:\n        compile(input, output)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_add_exclude_dupicates(self):\n    view = self.loadInput('Add_Dups.js')\n    amdbutler._set_mods(view)\n    self.assertEqual(len(view.mods), 4)", "buggy_source_code": "def test_add_exclude_dupicates(self):\n    view = self.loadInput('Add_Dups.js')\n    amdbutler._set_mods(view)\n    self.assertNotIn(view.mods, ['expected/Add', 'Add'])", "edit_actions": ["move-tree", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    from selenium_wrapper import SE\n    SE.refresh()\n    self.filter_menu = None", "buggy_source_code": "def setUp(self):\n    self.filter_menu = None", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@route('/dlnaplay')\ndef dlna_play():\n    discover_dlnap()\n    DLNAP.play()\n    start_dlna_tracker()", "buggy_source_code": "@route('/dlnaplay')\ndef dlna_play():\n    discover_dlnap()\n    DLNAP.play()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def apply(self):\n    self.execute(\"convert \\\\( {0} -auto-gamma -modulate 120,50,100 \\\\) \\\\( -size {width}x{height} -fill 'rgba(255,153,0,0.5)' -draw 'rectangle 0,0 {width},{height}' \\\\) -compose multiply {0}\".format('\"{filename}\"'))", "buggy_source_code": "def apply(self):\n    self.execute('convert \\\\( \"{filename}\" -auto-gamma -modulate 120,50,100 \\\\) \\\\( -size {width}x{height} -fill \\'rgba(255,153,0,0.5)\\' -draw \\'rectangle 0,0 {width},{height}\\' \\\\) -compose multiply \"{filename}\"')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def OTP(user):\n    otp = getpass.getpass('Press ' + user + \"'s Yubikey: \")\n    return otp", "buggy_source_code": "def OTP(user):\n    otp = input('Enter OTP (Yubikey or TOTP): ')\n    return otp", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_test_button_click(self, event):\n    self._read(self.custom_read['initialize'])", "buggy_source_code": "def on_test_button_click(self, event):\n    self._read_event('initialize')", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@handle_errors(_('Unable to update action execution'), [])\ndef action_execution_update(request, id, state=None, output=None):\n    return mistralclient(request).action_executions.update(id, state, output)", "buggy_source_code": "def action_execution_update(request, id, state=None, output=None):\n    return mistralclient(request).action_executions.update(id, state, output)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _initialise(Handlers, bot=None):\n    if bot:\n        _start_slack_sinks(bot)\n    else:\n        print('Slack sinks could not be initialized.')\n    Handlers.register_handler(_handle_slackout, type='allmessages')\n    return []", "buggy_source_code": "def _initialise(Handlers, bot=None):\n    if bot:\n        _start_slack_sinks(bot)\n    else:\n        print('Slack sinks could not be initialized.')\n    Handlers.register_handler(_handle_slackout)\n    return []", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_Struct480(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of schar')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'schar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 128\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct480(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'double, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 3.14\\nprint(foo.bar)\\n', '3.14')", "edit_actions": ["update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_Struct430(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of uchar')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uchar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 256\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct430(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 9223372036854775807\\nprint(foo.bar)\\n', '9223372036854775807')", "edit_actions": ["update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_Struct370(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Float, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'float, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct370(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 0\\nprint(foo.bar)\\n', '0')", "edit_actions": ["update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    if self.aprobado():\n        estado = 'aprobado'\n    else:\n        estado = 'no aprobado'\n    return u'%s en %s (%s)' % (self.nombre, self.campo_conocimiento, estado)", "buggy_source_code": "def __unicode__(self):\n    if self.aprobado:\n        estado = 'aprobado'\n    else:\n        estado = 'no aprobado'\n    return u'%s en %s (%s)' % (self.nombre, self.campo_conocimiento, estado)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def hide(self, data):\n    self.window_open = False\n    self.window.hide()\n    return True", "buggy_source_code": "def hide(self, data, other):\n    self.window.hide()\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _gCode90(self, position, params, path):\n    self._is_absolute_positioning = True\n    self._is_absolute_extrusion = True\n    return position", "buggy_source_code": "def _gCode90(self, position, params, path):\n    self._is_absolute_positioning = True\n    return position", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_product_base_queryset():\n    return product_model.browsable.select_related('product_class').prefetch_related('reviews', 'variants', 'product_options', 'product_class__options', 'stockrecord', 'stockrecord__partner', 'images').all()", "buggy_source_code": "def get_product_base_queryset():\n    return Product.browsable.select_related('product_class').prefetch_related('reviews', 'variants', 'product_options', 'product_class__options', 'stockrecord', 'images').all()", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@ensure_same_dimensions\ndef arctan2_unit(unit1, unit2):\n    return Unit()", "buggy_source_code": "def arctan2_unit(unit1, unit2):\n    return Unit()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@ensure_same_dimensions\ndef preserve_units(unit1, unit2):\n    return unit1", "buggy_source_code": "def preserve_units(unit1, unit2):\n    return unit1", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@ensure_same_dimensions\ndef comparison_unit(unit1, unit2):\n    return None", "buggy_source_code": "def comparison_unit(unit1, unit2):\n    return None", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _parse_body(self, body):\n    if self.syntax == 'text/n3':\n        return self._parse_body_rdflib(body, syntax=self.syntax)\n    else:\n        raise StreamsemException('Unsupported syntax', 'event_syntax')", "buggy_source_code": "def _parse_body(self, body):\n    if self.syntax == 'text/n3':\n        return self._parse_body_rdflib(body, syntax='n3')\n    else:\n        raise StreamsemException('Unsupported syntax', 'event_syntax')", "edit_actions": ["insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef remove_utterances_with_missing_file(self, dataset_to_fix):\n    utts = validation.Validator.get_utterances_with_missing_file_idx(dataset_to_fix)\n    dataset_to_fix.remove_utterances(utts)\n    dataset_to_fix.save()", "buggy_source_code": "@staticmethod\ndef remove_utterances_with_missing_file(dataset_to_fix):\n    utts = validation.Validator.get_utterances_with_missing_file_idx(dataset_to_fix)\n    dataset_to_fix.remove_utterances(utts)\n    dataset_to_fix.save()", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def display_results(self):\n    commit_list = map(lambda x: x[1], self.results)\n    self.set_commit_list(commit_list)", "buggy_source_code": "def display_results(self):\n    commit_list = [result[1] for result in self.results]\n    self.set_commit_list(commit_list)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __get_method(self, path):\n    method = self.__method_root\n    for i in path:\n        method = getattr(method, i)\n    return method.invoke", "buggy_source_code": "def __get_method(self, path):\n    method = self.__method_root\n    for i in path:\n        method = getattr(method, i)\n    return method", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return '{0} {1} {2} on {3}, {4}'.format(self.get_tag_type_display(), self.name, self.get_status_display(), self.get_side_display(), self.get_position_display())", "buggy_source_code": "def __str__(self):\n    return '{0} {1} {2} on {3}'.format(self.get_tag_type_display(), self.name, self.get_status_display(), self.get_tag_location_display())", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def finalize_options(self):\n    TestCommand.finalize_options(self)\n    self.test_args = ['--verbose']\n    self.test_suite = True", "buggy_source_code": "def finalize_options(self):\n    TestCommand.finalize_options(self)\n    self.verbose = True", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_selected_fields(query):\n    if query.select:\n        return [info.field for info in query.select + query.related_select_cols]\n    else:\n        return query.model._meta.fields", "buggy_source_code": "def get_selected_fields(query):\n    if query.select:\n        return [info.target for info in query.select]\n    else:\n        return query.model._meta.fields", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_message(self, message, printMessage=False):\n    if printMessage:\n        print(message)\n    self.socket.send(message)", "buggy_source_code": "def send_message(self, message):\n    if self.debug:\n        print(message)\n    self.socket.send(message)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@bot.message_handler(commands=['ranking'])\ndef ranking_handler(message):\n    logger.debug('entra ranking_handler')\n    bot.reply_to(message, get_karma_ranking_message())\n    logger.debug('sale ranking_handler')", "buggy_source_code": "@bot.message_handler(commands=['ranking'])\ndef ranking_handler(message):\n    bot.reply_to(message, get_karma_ranking_message())", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def error(self, msg):\n    raise ArgumentParserError(msg[0].upper() + msg[1:])", "buggy_source_code": "def error(self, msg):\n    raise ArgumentParserError(msg.capitalize())", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_errors_where(view, fn):\n    filename = util.get_filename(view)\n    return [error for error in persist.file_errors[filename] if fn(error['region'])]", "buggy_source_code": "def get_errors_where(filename, fn):\n    return [error for error in persist.file_errors[filename] if fn(error['region'])]", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def next(self):\n    raise NotImplementedError\n\n    def __iter__(self):\n        return RecordReaderWrapper(self)", "buggy_source_code": "def next(self):\n    raise NotImplementedError", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testThatParseWorksWithoutErrors(self):\n    ofx = OfxParser.parse(file('fixtures/bank_small.ofx'))\n    ofx = OfxParser.parse(file('fixtures/bank_medium.ofx'))", "buggy_source_code": "def testThatParseWorksWithoutErrors(self):\n    ofx = OfxParser.parse(open_file('bank_medium.ofx'))", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.reqparse = reqparse.RequestParser()\n    self.reqparse.add_argument('subscribed', type=inputs.boolean, default=True)\n    super(FeedAPI, self).__init__()", "buggy_source_code": "def __init__(self):\n    self.reqparse = reqparse.RequestParser()\n    self.reqparse.add_argument('subscribed', type=inputs.boolean)\n    super(FeedAPI, self).__init__()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_persistent_id(prod_mode, who, what, peek):\n    arkId = mintArkIdentifier(prod_mode)\n    return ark2pid(arkId)", "buggy_source_code": "def create_persistent_id(prod_mode):\n    arkId = mintArkIdentifier(prod_mode)\n    return ark2pid(arkId)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef make_journal_source(in_doaj=False):\n    template = deepcopy(JOURNAL_SOURCE)\n    template['admin']['in_doaj'] = in_doaj\n    template['bibjson']['active'] = in_doaj\n    return", "buggy_source_code": "@staticmethod\ndef make_journal_source(in_doaj=False):\n    template = deepcopy(JOURNAL_SOURCE)\n    template['admin']['in_doaj'] = in_doaj\n    return template", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def OnLeaving(self, evt):\n    if evt.LeftIsDown():\n        self.Select()\n    self.leftPressed = False", "buggy_source_code": "def OnLeaving(self, evt):\n    self.leftPressed = False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run_tests(self):\n    import pytest\n    errno = pytest.main([self.pytest_args])\n    sys.exit(errno)", "buggy_source_code": "def run_tests(self):\n    import pytest\n    errno = pytest.main(self.pytest_args)\n    sys.exit(errno)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def update_bean_info(self, bean):\n    self.update_bean(bean)\n    self.navigation.update_statistics()\n    self.navigation.use_filter()", "buggy_source_code": "def update_bean_info(self, bean):\n    self.update_bean(bean)\n    self.navigation.update_statistics()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_payment_url(self, **kwargs):\n    payload = self.generate_payload(**kwargs)\n    signed_request = self.build_signed_request(self.request, payload)\n    return signed_request.to_url()", "buggy_source_code": "def get_payment_url(self, **kwargs):\n    payload = self.generate_payload(**kwargs)\n    signed_request = self.build_signed_request(payload)\n    return signed_request.to_url()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __toh5__(self):\n    return (self._riskmodels, dict(damage_states=self.damage_states, covs=self.covs))", "buggy_source_code": "def __toh5__(self):\n    return (self._riskmodels, dict(covs=self.covs))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_topic_matching(self):\n    self._localized_topic_keyword_in_url('Music', 'Muziek', 'the-voice', 'https://www.nu.nl/media/6056161/winnaar-negende-seizoen-van-the-Voice-kids-bekend.html')\n    self._localized_topic_keyword_in_url('World', 'World', 'theguardian.com/world', 'https://www.theguardian.com/world/2020/jun/06/new-zealand-readers')", "buggy_source_code": "def test_topic_matching(self):\n    self._localized_topic_keyword_in_url('World', 'World', 'theguardian.com/world', 'https://www.theguardian.com/world/2020/jun/06/new-zealand-readers')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@marshmallow.post_load(pass_original=True)\ndef _add_unknown(self, data, original):\n    data['edited'] = None\n    return data", "buggy_source_code": "@marshmallow.post_load()\ndef _add_unknown(self, data):\n    data['edited'] = None\n    return data", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def discover_tests_cmd(root, pattern='.*', **args):\n    if _discovery_enabled:\n        atexit.unregister(_run_at_exit)\n        _discover_tests(root, pattern, args['suite'])\n        run_all(args)", "buggy_source_code": "def discover_tests_cmd(root, pattern='.*', **args):\n    if _discovery_enabled:\n        atexit.unregister(_run_at_exit)\n        _discover_tests(root, pattern)\n        run_all(args)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def pull_sal_struct(self, struct):\n    from erpnext.hr.doctype.salary_structure.salary_structure import make_salary_slip\n    self.update(make_salary_slip(struct, self).as_dict())", "buggy_source_code": "def pull_sal_struct(self, struct):\n    from erpnext.hr.doctype.salary_structure.salary_structure import make_salary_slip\n    make_salary_slip(struct, self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/users', methods=['GET'])\ndef list_users():\n    return reply(users, 200)", "buggy_source_code": "@app.route('/users', methods=['GET'])\ndef list_users():\n    return reply(users, HTTP_200_OK)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def unlock(self, password, options):\n    return self.device.LuksUnlock(password, options, dbus_interface=UDISKS_DEVICE_INTERFACE)", "buggy_source_code": "def unlock(self, password, options):\n    return self.method.LuksUnlock(password, options)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def lock(self, options):\n    return self.device.LuksLock(options, dbus_interface=UDISKS_DEVICE_INTERFACE)", "buggy_source_code": "def lock(self, options):\n    return self.method.LuksLock(options)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def mount(self, filesystem, options):\n    self.device.FilesystemMount(filesystem, options, dbus_interface=UDISKS_DEVICE_INTERFACE)", "buggy_source_code": "def mount(self, filesystem, options):\n    self.method.FilesystemMount(filesystem, options)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, graph_builder: GraphBuilderBase):\n    super(LabelSpaceNetworkClustererBase, self).__init__()\n    self.graph_builder = graph_builder", "buggy_source_code": "def __init__(self, graph_builder):\n    super(LabelSpaceNetworkClustererBase, self).__init__()\n    self.graph_builder = graph_builder", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef vendor_name(self):\n    return self._dev.manufacturer", "buggy_source_code": "@property\ndef vendor_name(self):\n    return self._vendor_name", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_signal_name(self):\n    self.assertEqual(debug.signal_name(self.signal), 'fake')", "buggy_source_code": "def test_signal_name(self, signal):\n    assert debug.signal_name(signal) == 'fake'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_dbg_signal(self):\n    self.assertEqual(debug.dbg_signal(self.signal, [23, 42]), 'fake(23, 42)')", "buggy_source_code": "def test_dbg_signal(self, signal):\n    assert debug.dbg_signal(signal, [23, 42]) == 'fake(23, 42)'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_dbg_signal_newline(self):\n    self.assertEqual(debug.dbg_signal(self.signal, ['foo\\nbar']), \"fake('foo\\\\nbar')\")", "buggy_source_code": "def test_dbg_signal_newline(self, signal):\n    assert debug.dbg_signal(signal, ['foo\\nbar']) == \"fake('foo\\\\nbar')\"", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_dbg_signal_eliding(self):\n    self.assertEqual(debug.dbg_signal(self.signal, ['x' * 201]), \"fake('{}…)\".format('x' * 198))", "buggy_source_code": "def test_dbg_signal_eliding(self, signal):\n    assert debug.dbg_signal(signal, ['x' * 201]) == \"fake('{}…)\".format('x' * 198)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def removeSystemTags(self, tags):\n    tags = ' '.join((tag for tag in tags.split() if tag.lower() != 'marked' and tag.lower() != 'leech'))\n    return tags", "buggy_source_code": "def removeSystemTags(self, tags):\n    return self.src.tags.remFromStr('marked leech', tags)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'TableSerializer(s={},n={},cols={},rows={})'.format(self._typ_schema, self._typ_name, repr(self._columns), repr(self._rows))", "buggy_source_code": "def __repr__(self):\n    return 'TableType(s={},n={},cols={})'.format(self._typ_schema, self._typ_name, repr(self._columns))", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef xyz(self):\n    return self[0]", "buggy_source_code": "@property\ndef xyz(self):\n    return self[:]", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def generate(env, **kw):\n    if env['color'] == 'True':\n        from colorizer import colorizer\n        col = colorizer()\n        col.colorize(env)", "buggy_source_code": "def generate(env, **kw):\n    if env['color']:\n        from colorizer import colorizer\n        col = colorizer()\n        col.colorize(env)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def compute_reward(self, state, action):\n    destination = 840 * 4\n    return -np.sum(0.1 * state[1] + 3.0 * (destination - state[2]))", "buggy_source_code": "def compute_reward(self, state, action):\n    destination = 840 * 4\n    return -np.sum(destination - state[3])", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def make_plots(self):\n    for n in range(self.n_ax):\n        self.ax[n].make_plots()\n    if self.do_colorbar:\n        self._make_colorbar()", "buggy_source_code": "def make_plots(self):\n    for n in range(self.n_ax):\n        self.ax[n].make_plots()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kw):\n    super(VerbCollection, self).__init__(*args, **kw)\n    for x in self:\n        del x._['return']", "buggy_source_code": "def __init__(self, *args, **kw):\n    super(VerbCollection, self).__init__(*args, **kw)\n    for x in self:\n        x._['return'] = None", "edit_actions": ["insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def testFileLogger(self):\n    try:\n        tftpy.addHandler(tftpy.create_rotatingfilehandler('/tmp/log'))\n        self.assertTrue(True)\n    except:\n        self.assertTrue(False)", "buggy_source_code": "def testFileLogger(self):\n    try:\n        tftpy.addHandler(tftpy.create_rotatingfilehandler('/tmp/log'))\n    except:\n        self.fail('testFileLogger() unexpectedly raised an exception')", "edit_actions": ["update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testStreamLogger(self):\n    try:\n        tftpy.addHandler(tftpy.create_streamhandler())\n        self.assertTrue(True)\n    except:\n        self.assertTrue(False)", "buggy_source_code": "def testStreamLogger(self):\n    try:\n        tftpy.addHandler(tftpy.create_streamhandler())\n    except:\n        self.fail('testStreamLogger() unexpectedly raised an exception')", "edit_actions": ["update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@click.command()\ndef run():\n    connexion_app.add_api('swagger.yml', arguments=app.config)\n    connexion_app.run(port=8080, debug=True)", "buggy_source_code": "@click.command()\ndef run():\n    connexion_app.add_api('swagger.yml', arguments=app.config)\n    connexion_app.run(port=8080)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def load_agroup_script():\n    agroup_script = '\\n        <script>\\n            $(document).ready(function () {{\\n                $(\\'.{0}\\').on(\\'click\\', function (event) {{\\n                    var agroup_id = $(this).data()[\\'id\\'];\\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/associate_group/agroup_summary\\',\\n                        data: \\'id=\"\\' + agroup_id + \\'\"\\',\\n                        success: function (data, status, req) {{\\n                            data = JSON.parse(data)\\n                            $(\\'#label_sum0\\').html(data[\\'total_of_cert\\']);\\n                            $(\\'#label_sum1\\').html(data[\\'total_of_gr\\']);\\n                            $(\\'#label_sum2\\').html(data[\\'total_of_farmer\\']);\\n                            $(\\'#label_sum3\\').html(data[\\'total_of_approved_area\\'] + \\' / \\' + data[\\'total_of_area\\']);\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                    \\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/group/deleted\\',\\n                        data: \\'where={{\"associate_group_id\": \"\\' + agroup_id + \\'\"}}\\',\\n                        success: function (data, status, req) {{\\n                            $(\\'#{1}\\').find(\\'tr:gt(0)\\').remove()\\n                            if(data.length){{\\n                                $(\\'#{2}\\').addClass(\\'hidden\\');\\n                                $(\\'#{1} div\\').removeClass(\\'hidden\\');\\n                                var table_body = $(\\'#{1} table tbody\\');\\n                                for (var i in data) {{\\n                                    var new_row = \\'<tr>\\' +\\n                                        \\'<th scope=\"row\">\\' + (parseInt(i) + 1) + \\'</th>\\' +\\n                                        \\'<td><b>\\' + data[i][\\'group_code\\'] + \\'</b></td>\\' +\\n                                        \\'<td>\\' + data[i][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'village\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'ward\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'district\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'province\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_deleted_at\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_modify_info\\'] + \\'</td>\\' +\\n                                        \\'</tr>\\';\\n                                    table_body.append(new_row);\\n                                }}\\n                            }} else {{\\n                                $(\\'#{1} div\\').addClass(\\'hidden\\');\\n                                $(\\'#{2}\\').removeClass(\\'hidden\\');\\n                            }}\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                        \\n                }});\\n            }});\\n        </script>\\n    \\n    '.format(g.c.BTNVIEW_ID, 'tab_history', 'no_data')\n    return Markup(agroup_script)", "buggy_source_code": "def load_agroup_script():\n    agroup_script = '\\n                $(\\'.{0}\\').on(\\'click\\', function (event) {{\\n                    var agroup_id = $(this).data()[\\'id\\'];\\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/associate_group/agroup_summary\\',\\n                        data: \\'id=\"\\' + agroup_id + \\'\"\\',\\n                        success: function (data, status, req) {{\\n                            data = JSON.parse(data)\\n                            $(\\'#label_sum0\\').html(data[\\'total_of_cert\\']);\\n                            $(\\'#label_sum1\\').html(data[\\'total_of_gr\\']);\\n                            $(\\'#label_sum2\\').html(data[\\'total_of_farmer\\']);\\n                            $(\\'#label_sum3\\').html(data[\\'total_of_approved_area\\'] + \\' / \\' + data[\\'total_of_area\\']);\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                    \\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/group/deleted\\',\\n                        data: \\'where={{\"associate_group_id\": \"\\' + agroup_id + \\'\"}}\\',\\n                        success: function (data, status, req) {{\\n                            $(\\'#{1}\\').find(\\'tr:gt(0)\\').remove()\\n                            if(data.length){{\\n                                $(\\'#{2}\\').addClass(\\'hidden\\');\\n                                $(\\'#{1} div\\').removeClass(\\'hidden\\');\\n                                var table_body = $(\\'#{1} table tbody\\');\\n                                for (var i in data) {{\\n                                    var new_row = \\'<tr>\\' +\\n                                        \\'<th scope=\"row\">\\' + (parseInt(i) + 1) + \\'</th>\\' +\\n                                        \\'<td><b>\\' + data[i][\\'group_code\\'] + \\'</b></td>\\' +\\n                                        \\'<td>\\' + data[i][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'village\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'ward\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'district\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'province\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_deleted_at\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_modify_info\\'] + \\'</td>\\' +\\n                                        \\'</tr>\\';\\n                                    table_body.append(new_row);\\n                                }}\\n                            }} else {{\\n                                $(\\'#{1} div\\').addClass(\\'hidden\\');\\n                                $(\\'#{2}\\').removeClass(\\'hidden\\');\\n                            }}\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                        \\n                }});\\n    \\n    '.format(g.c.BTNVIEW_ID, 'tab_history', 'no_data')\n    return agroup_script", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def lt(self, a, b):\n    cmp_res = Compare.compare(self.space, a, b, self.sortblock)\n    return self.space.int_w(cmp_res) == -1", "buggy_source_code": "def lt(self, a, b):\n    cmp_res = Compare.compare(self.space, a, b, self.sortblock)\n    return self.space.int_w(cmp_res) < 0", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef add_issued_to_observation(observation, register):\n    observation.issued = Instant(datetime.now())", "buggy_source_code": "@staticmethod\ndef add_issued_to_observation(observation):\n    observation.issued = Instant(datetime.now())", "edit_actions": ["delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def transaction_commit(self, store):\n    pid = store._connection._raw_connection.get_backend_pid()\n    color = self._transactions.get(pid, 'red')\n    self.header(pid, color, 'COMIT')", "buggy_source_code": "def transaction_commit(self, store):\n    pid = store._connection._raw_connection.get_backend_pid()\n    color = self._get_transaction_color(pid)\n    self.header(pid, color, 'COMIT')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _load(self):\n    super(DLBaseAnalyzer, self)._load()\n    self._model = load_model(self._model_path, custom_objects=CUSTOM_OBJECTS)\n    self._init_wemb_funcs()", "buggy_source_code": "def _load(self):\n    super(DLBaseAnalyzer, self)._load()\n    self._model = load_model(self._model_path, custom_objects=CUSTOM_OBJECTS)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def label(doc):\n    doc = doc[:-4]\n    return labels.get(doc, doc)", "buggy_source_code": "def label(doc):\n    return labels.get(doc, doc)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def writable(self):\n    if self.write_buffer:\n        return True\n    if self.out_buffer:\n        self.write_buffer = self.out_buffer.popleft()\n        return True\n    return False", "buggy_source_code": "def writable(self):\n    return self.out_buffer", "edit_actions": ["move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def DBG(msg):\n    print('MUSIC: %s' % msg)\n    pass", "buggy_source_code": "def DBG(msg):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_gzipped(response):\n    ctype = response.headers.get('Content-Type', b'')\n    return ctype in (b'application/x-gzip', b'application/gzip')", "buggy_source_code": "def is_gzipped(response):\n    ctype = response.headers.get('Content-Type', b'')\n    return b'application/x-gzip' in ctype or b'application/gzip' in ctype", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_decode_bytes(self):\n    self.assertRaises(UnicodeDecodeError, decode_bytes('\\x81'))\n    assert decode_bytes(u'asdf') == 'asdf'\n    assert decode_bytes(u'哈哈'.encode('gb2312')) == '¹þ¹þ'", "buggy_source_code": "def test_decode_bytes(self):\n    assert decode_bytes(u'asdf') == 'asdf'\n    assert decode_bytes(u'哈哈'.encode('gb2312')) == '¹þ¹þ'", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return str(self.number)", "buggy_source_code": "def __str__(self):\n    return repr(self)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def populate(self, preprocess: bool=True):\n    gene_dataset_kwargs = self.load_from_disk()\n    if preprocess:\n        gene_dataset_kwargs = self.preprocess(**gene_dataset_kwargs)\n    self.instantiate_gene_expression_dataset(**gene_dataset_kwargs)", "buggy_source_code": "@abstractmethod\ndef populate(self):\n    pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.suiseiseki.delete()\n    self.shinku.delete()\n    self.election_current.delete()\n    self.election_finished.delete()\n    self.election_future.delete()", "buggy_source_code": "def tearDown(self):\n    self.election_current.delete()\n    self.election_finished.delete()\n    self.election_future.delete()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_invalid(self):\n    response = self.change_username('§'.encode('utf8'), expecting_error=True)\n    assert response.code == 400\n    assert response.body == \"The username '§' contains invalid characters.\"", "buggy_source_code": "def test_invalid(self):\n    (code, body) = self.change_username('§'.encode('utf8'))\n    assert code == 400\n    assert body['error_message_long'] == \"The username '§' contains invalid characters.\"", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_too_long(self):\n    self.make_participant('bob')\n    username = 'I am way too long, and you know it, and the American people know it.'\n    response = self.change_username(username, expecting_error=True)\n    assert response.code == 400\n    assert response.body == \"The username '%s' is too long.\" % username", "buggy_source_code": "def test_too_long(self):\n    username = 'I am way too long, and you know it, and the American people know it.'\n    (code, body) = self.change_username(username)\n    assert code == 400\n    assert body['error_message_long'] == \"The username '%s' is too long.\" % username", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_unavailable(self):\n    self.make_participant('bob')\n    response = self.change_username('bob', expecting_error=True)\n    assert response.code == 400\n    assert response.body == \"The username 'bob' is already taken.\"", "buggy_source_code": "def test_unavailable(self):\n    self.make_participant('bob')\n    (code, body) = self.change_username('bob')\n    assert code == 400\n    assert body['error_message_long'] == \"The username 'bob' is already taken.\"", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_restricted_username(self):\n    response = self.change_username('assets', expecting_error=True)\n    assert response.code == 400\n    assert response.body == \"The username 'assets' is restricted.\"", "buggy_source_code": "def test_restricted_username(self):\n    (code, body) = self.change_username('assets')\n    assert code == 400\n    assert body['error_message_long'] == \"The username 'assets' is restricted.\"", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def first(self):\n    content = next(self.all())\n    if len(content) == 0:\n        raise NoResults('No records found')\n    return content", "buggy_source_code": "def first(self):\n    try:\n        content = next(self.all())\n    except StopIteration:\n        raise NoResults('No records found')\n    return content", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def GetBoolean(self):\n    return len(self._array) > 0", "buggy_source_code": "def GetBoolean(self):\n    return True", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_subdir_matches(self):\n    my_config = self.get_location_config('http://www.example.com/useglobal')\n    self.assertEqual('http://www.example.com/useglobal', my_config._get_section())", "buggy_source_code": "def test__get_section_subdir_matches(self):\n    self.get_location_config('http://www.example.com/useglobal')\n    self.assertEqual('http://www.example.com/useglobal', self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_subdir_child(self):\n    my_config = self.get_location_config('/a/foo')\n    self.assertEqual('/a/*', my_config._get_section())", "buggy_source_code": "def test__get_section_subdir_child(self):\n    self.get_location_config('/a/foo')\n    self.assertEqual('/a/*', self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_subdir_recursive(self):\n    my_config = self.get_location_config('http://www.example.com/com')\n    self.assertEqual('http://www.example.com', my_config._get_section())", "buggy_source_code": "def test__get_section_subdir_recursive(self):\n    self.get_location_config('http://www.example.com/com')\n    self.assertEqual('http://www.example.com', self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_suffix_does_not(self):\n    my_config = self.get_location_config('http://www.example.com-com')\n    self.assertEqual(None, my_config._get_section())", "buggy_source_code": "def test__get_section_suffix_does_not(self):\n    self.get_location_config('http://www.example.com-com')\n    self.assertEqual(None, self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_subdir_nonrecursive(self):\n    my_config = self.get_location_config('http://www.example.com/useglobal/childbranch')\n    self.assertEqual('http://www.example.com', my_config._get_section())", "buggy_source_code": "def test__get_section_subdir_nonrecursive(self):\n    self.get_location_config('http://www.example.com/useglobal/childbranch')\n    self.assertEqual('http://www.example.com', self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_fancy_champ_name(champ):\n    with open('data/champ_data.json', 'r') as f:\n        champ_dict = json.load(f)\n    return champ_dict['data'][champ]['name']", "buggy_source_code": "def get_fancy_champ_name(champ):\n    with open('data/champ_data.json') as f:\n        champ_dict = json.load(f)\n    return champ_dict['data'][champ]['name']", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def event_count(self):\n    return len(self.events.all())", "buggy_source_code": "def event_count(self):\n    return self.events.count()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ProfileTechniqueWindowRequestData(base, self, data):\n    if data.vehicleId:\n        base(self, data)\n    else:\n        self.as_responseVehicleDossierS({})", "buggy_source_code": "def ProfileTechniqueWindowRequestData(base, self, data):\n    if data.vehicleId:\n        base(self, data)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/api/problems/feedback/reviewed', methods=['GET'])\n@api_wrapper\n@require_login\ndef problem_reviews_hook(pid):\n    return WebSuccess(data=api.problem_feedback.get_reviewed_pids())", "buggy_source_code": "@app.route('/api/problems/feedback/reviewed', methods=['GET'])\n@api_wrapper\n@require_login\ndef problem_reviews_hook():\n    return WebSuccess(data=api.problem_feedback.get_reviewed_pids())", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_activity_objects(self):\n    if not hasattr(self, 'activity_objects'):\n        activity = models.get_model('parliament', 'MemberActivity')\n        self.activity_objects = activity.objects\n    return self.activity_objects.objects", "buggy_source_code": "def get_activity_objects(self):\n    if not hasattr(self, 'activity_objects'):\n        activity = models.get_model('parliament', 'MemberActivity')\n        self.activity_objects = activity.objects\n    return self.activity_objects", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.browser = WebDriver()\n    self.browser.implicitly_wait(15)\n    super(BrowserTestCase, self).setUp()", "buggy_source_code": "def setUp(self):\n    self.browser = WebDriver()\n    super(BrowserTestCase, self).setUp()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@trace\ndef cost_for_guess(self, uuid_for_history, uuid_for_position, a, b):\n    guesses = self.pos_guess_dict(uuid_for_history, uuid_for_position, a)\n    return guesses.get(b, MAX_MOLE_COST)", "buggy_source_code": "def cost_for_guess(self, uuid_for_history, uuid_for_position, a, b):\n    guesses = self.pos_guess_dict(uuid_for_history, uuid_for_position, a)\n    return guesses.get(b, MAX_MOLE_COST)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __contains__(self, key):\n    try:\n        self.p.map[key]\n        return True\n    except KeyError:\n        return False", "buggy_source_code": "def __contains__(self, key):\n    try:\n        self[key]\n        return True\n    except KeyError:\n        return False", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def outline_re():\n    global _outline_re\n    try:\n        return _outline_re\n    except NameError:\n        _outline_re = create_outline_re()\n    return _outline_re", "buggy_source_code": "def outline_re():\n    global _outline_re\n    if _outline_re is None:\n        _outline_re = create_outline_re()\n    return _outline_re", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _print_alignments(self, sequences, targets, start_seq, start_target, hit_list=None):\n    SmithWaterman._print_alignments(self, sequences, targets, start_seq, start_target, hit_list)\n    del self.h_global_direction_zero_copy\n    del self.h_starting_points_zero_copy", "buggy_source_code": "def _print_alignments(self, sequences, targets, start_seq, start_target, hit_list=None):\n    return SmithWaterman._print_alignments(self, sequences, targets, start_seq, start_target, hit_list)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_users_with_social_field():\n    return models.User.find(Q('social', 'ne', {}))", "buggy_source_code": "def get_users_with_social_field():\n    return models.User.find(Q('social.personal', 'ne', None))", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _print_message(self, message, file=None):\n    if self.file != None:\n        file = self.file\n    return super(InstrumentableArgumentParser, self)._print_message(message, file)", "buggy_source_code": "def _print_message(self, message, file=None):\n    return super(InstrumentableArgumentParser, self)._print_message(message, self.file)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def becomes_visible(self):\n    self.update_win = True\n    self.win.terminalwidget.update_term(self.dump)", "buggy_source_code": "def becomes_visible(self):\n    self.win.terminalwidget.update_term(self.dump)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dead(self):\n    (print >> sys.stderr, '_dead')\n    if self.valve._flow_check is not self:\n        return\n    self.valve.log('Flow check aborted')\n    self._unlock()", "buggy_source_code": "def dead(self):\n    if self.valve._flow_check is not self:\n        return\n    self.valve.log('Flow check aborted')\n    self._unlock()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dead(self):\n    (print >> sys.stderr, '_dead')\n    if self.feed._flow_check is not self:\n        return\n    self.feed.log('Flow check aborted')\n    self._unlock()", "buggy_source_code": "def dead(self):\n    if self.feed._flow_check is not self:\n        return\n    self.feed.log('Flow check aborted')\n    self._unlock()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __enter__(self):\n    self._mc_where = Where.IN_WITH\n    self.__class__._mc_hierarchy.append(self)\n    self.__class__._debug_hierarchy('_ConfigBase.__enter__')\n    return self", "buggy_source_code": "def __enter__(self):\n    self._mc_where = Where.IN_WITH\n    self.__class__._mc_hierarchy.append(self)\n    return self", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handle_data(data_list):\n    (mac, data) = data_list\n    record = {'MAC': mac, 'timestamp': datetime.now(), **data}\n    print(record)\n    print()", "buggy_source_code": "def handle_data(data_list):\n    (mac, data) = data_list\n    record = {'MAC': mac, 'timestamp': datetime.now()}\n    record.update(data)\n    print(record)\n    print()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delta_date(d):\n    diff = datetime.datetime.utcnow() - d\n    s = diff.total_seconds()\n    return s", "buggy_source_code": "def delta_date(d):\n    diff = d - datetime.datetime.utcnow()\n    s = diff.total_seconds()\n    return s", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, child, flname):\n    self.child = child\n    self.flname = flname", "buggy_source_code": "def __init__(self, child, flname):\n    super(ChildTrace, self).__init__(child)\n    self.flname = flname", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_digital_ch(self):\n    self.write('%d?' % self.slave_address)\n    answer = self.read()\n    return int(answer[32:49])", "buggy_source_code": "def get_digital_ch(self):\n    self.write('%d?' % self.slave_address)\n    answer = self.read()\n    return answer[32:48]", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def install_progress_status(self, data):\n    log.debug('Running status output: {}'.format(data))\n    self.progress_output_w.set_text(data)\n    self.signal.emit_signal('refresh')", "buggy_source_code": "def install_progress_status(self, data):\n    self.progress_output_w.set_text(data)\n    self.signal.emit_signal('refresh')", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return 'Sleep from %s to %s' % (self.date, self.start_time, self.end_time)", "buggy_source_code": "def __unicode__(self):\n    return 'Sleep from %s to %s' % (self.start_time, self.end_time)", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_500(request):\n    if not request.user.is_staff:\n        raise Http404\n    return 1 / 0", "buggy_source_code": "@staff_member_required\ndef test_500(request):\n    return 1 / 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _process_ebo_inheritance_member(self, tail, member):\n    member.set_this_offset(tail.get_end())\n    self.members.append(member)", "buggy_source_code": "def _process_ebo_inheritance_member(self, tail, member):\n    self._add_unaligned_member(member)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def stop():\n    print('called stop')\n    global should_stop\n    log.write('called stop\\n')\n    log.close()\n    should_stop = True", "buggy_source_code": "def stop():\n    get_slick_process().send_stop()", "edit_actions": ["insert-node", "update-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def mips_is_cbranch(insn):\n    mnemo = ['beq', 'bne', 'beqz', 'bnez', 'bgtz', 'bgez', 'bltz', 'blez']\n    return any(filter(lambda x: x == insn, mnemo))", "buggy_source_code": "def mips_is_cbranch(insn):\n    mnemo = ['bl']\n    return any(filter(lambda x: x == insn, mnemo))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@wrap_varnode_func\ndef get_variable(name, env=None, collection=TArtGraphKeys.TART_VARIABLES):\n    env = env or get_default_env()\n    sym = env.find_in_collection_by_name(collection, name)\n    return sym.taop", "buggy_source_code": "@wrap_varnode_func\ndef get_variable(name, env=None, collection=TArtGraphKeys.TART_VARIABLES):\n    env = env or get_default_env()\n    sym = env.find_in_collection_by_name(collection, name)\n    return sym", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def drive_forward(self, speed):\n    self.rfmotor.set(speed)\n    self.rbmotor.set(speed)\n    self.lfmotor.set(speed)\n    self.lbmotor.set(speed)", "buggy_source_code": "def drive_forward(self, speed):\n    self.drive.tankDrive(speed, speed, True)", "edit_actions": ["move-tree", "update-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def drive_stop(self):\n    self.lfmotor.set(0)\n    self.rfmotor.set(0)\n    self.lbmotor.set(0)\n    self.rbmotor.set(0)", "buggy_source_code": "def drive_stop(self):\n    self.drive(0, 0)", "edit_actions": ["move-tree", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_multipage(self, url):\n    data = []\n    while url:\n        (page_data, info) = self.get(url)\n        data += page_data\n        url = info['Next']\n    return data", "buggy_source_code": "def get_multipage(self, url):\n    data = []\n    while url:\n        (page_data, info, next_url) = self.get(url)\n        data += page_data\n        url = next_url\n    return data", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef rank_by_mean_and_average_rank(self):\n    return data_utils.experiment_level_ranking(self._experiment_snapshots_df, data_utils.benchmark_rank_by_mean, data_utils.experiment_rank_by_average_rank)", "buggy_source_code": "@property\ndef rank_by_mean_and_average_rank(self):\n    return self._ranking(data_utils.benchmark_rank_by_mean, data_utils.experiment_rank_by_average_rank)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def arclen(angle, radius, rad=False):\n    if not rad:\n        angle = math.degrees(angle)\n    return angle / 360 * (2 * math.pi * radius)", "buggy_source_code": "def arclen(angle, radius, rad=False):\n    if rad:\n        angle = math.degrees(angle)\n    return angle / 360 * (2 * math.pi * radius)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def index(request):\n    ct_notif_settings = CTNotification.all().fetch(1000)\n    for ct_setting in ct_notif_settings:\n        check_ctlog(ct_setting)\n    return render_to_response('ctnotify/index.html', {'message': 'Hello'})", "buggy_source_code": "def index(request):\n    ct_notif_settings = CTNotification.all().fetch(1000)\n    for ct_setting in ct_notif_settings:\n        check_ctlog(ct_setting)\n    return Response('ok')", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_complete_position(self, context):\n    m = re.search('\\\\w*$|(?<=\")[./\\\\-\\\\w]*$', context['input'])\n    return m.start() if m else -1", "buggy_source_code": "def get_complete_position(self, context):\n    m = self.complete_pos.search(context['input'])\n    return m.start() if m else -1", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def privReverseInstant(self):\n    self.state = CInterval.SStarted\n    self.privStep(self.getDuration())\n    self.state = CInterval.SInitial", "buggy_source_code": "def privReverseInstant(self):\n    self.state = CInterval.SStarted\n    self.privStep(0)\n    self.state = CInterval.SInitial", "edit_actions": ["move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_artist(self, name):\n    self._sql.execute('INSERT INTO artists (name) VALUES (?)', (name,))\n    self._sql.commit()", "buggy_source_code": "def add_artist(self, name):\n    self._sql.execute('INSERT INTO artists (name) VALUES (?)', (name,))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_genre(self, name):\n    self._sql.execute('INSERT INTO genres (name) VALUES (?)', (name,))\n    self._sql.commit()", "buggy_source_code": "def add_genre(self, name):\n    self._sql.execute('INSERT INTO genres (name) VALUES (?)', (name,))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_album(self, name, artist_id, genre_id):\n    self._sql.execute('INSERT INTO albums (name, artist_id, genre_id) VALUES (?, ?, ?)', (name, artist_id, genre_id))\n    self._sql.commit()", "buggy_source_code": "def add_album(self, name, artist_id, genre_id):\n    self._sql.execute('INSERT INTO albums (name, artist_id, genre_id) VALUES (?, ?, ?)', (name, artist_id, genre_id))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _save(self, name, content):\n    self.client.put_file(name, BytesIO(content))\n    return name", "buggy_source_code": "def _save(self, name, content):\n    self.client.put_file(name, content)\n    return name", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def close(self):\n    if not self.connected:\n        return\n    self._cookies = None", "buggy_source_code": "def close(self):\n    pass", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def logout(self):\n    if not self.logged_in:\n        return\n    self.request('POST', '/logout')\n    self._cookies = None", "buggy_source_code": "def logout(self):\n    if not self.logged_in:\n        return\n    self.request('POST', '/logout')", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handles_frame(self, frame, stacktrace_info):\n    platform = frame.get('platform') or self.data.get('platform')\n    return platform == 'cocoa' and self.available and ('instruction_addr' not in frame)", "buggy_source_code": "def handles_frame(self, frame, stacktrace_info):\n    platform = frame.get('platform') or self.data.get('platform')\n    return platform == 'cocoa' and self.available and ('instruction_addr' in frame)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.fs = s3fs.S3FS(self.bucket, '/unittest/files')\n    self._clear()", "buggy_source_code": "def setUp(self):\n    self.fs = s3fs.S3FS(self.bucket)\n    self._clear()", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_config(module):\n    config = module.params['config'] or dict()\n    if not config and (not module.params['force']):\n        config = module.config\n    return config", "buggy_source_code": "def get_config(module):\n    config = module.params.get('config')\n    if not config and (not module.params['force']):\n        config = module.config\n    return config", "edit_actions": ["move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate(self):\n    self.check_for_duplicate()\n    self.validate_expense_account()\n    self.validate_all_link_fields()", "buggy_source_code": "def validate(self):\n    self.check_for_duplicate()\n    self.validate_all_link_fields()", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def convert_c_to_python(self, wrapper):\n    wrapper.build_params.add_parameter('O', ['Py_None'], prepend=True)", "buggy_source_code": "def convert_c_to_python(self, wrapper):\n    pass", "edit_actions": ["delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def no_neighbor_password(self, ip, pwd=''):\n    result = self.enode('no neighbor {ip} password {pwd}'.format(**locals()), shell='vtysh')\n    assert not result", "buggy_source_code": "def no_neighbor_password(self, ip):\n    result = self.enode('no neighbor {ip} password'.format(**locals()), shell='vtysh')\n    assert not result", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def isProtected(self):\n    return self.pin.value != 0", "buggy_source_code": "def isProtected(self):\n    return self.pin.value != 'aaaa'", "edit_actions": ["insert-node", "delete-node"]}
