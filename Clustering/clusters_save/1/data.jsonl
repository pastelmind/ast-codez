{"fixed_source_code": "def add_lines(self, before_line_num, side, strs):\n    add = AddEdit(before_line_num, side, strs)\n    self.edits.append(add)\n    self.num_added_lines += add.num_added_lines", "buggy_source_code": "def add_lines(self, before_line_num, side, strs):\n    add = Edit(before_line_num, side, strs, is_add=True)\n    self.edits.append(add)\n    self.num_added_lines += add.num_added_lines", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def async_run_forever(self):\n    threading.Thread(target=self.loop.run_forever).start()\n    self.async_running = True", "buggy_source_code": "def async_run_forever(self, daemon=True):\n    thread = threading.Thread(target=self.loop.run_forever)\n    thread.setDaemon(daemon)\n    thread.start()\n    self.async_running = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def build_vm():\n    check_output('/opt/packer build vm.json', shell=True)", "buggy_source_code": "def build_vm():\n    download_latest_ubuntu_ova()\n    check_output('/opt/packer build vm.json', shell=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, username, password):\n    self.output('starting bot')\n    self.username = username\n    self.password = password\n    self.login()", "buggy_source_code": "def __init__(self, username, password):\n    self.startTime = time.time()\n    self.output('starting bot')\n    self.username = username\n    self.password = password\n    self.login()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self._credentials = self.load_credentials('credentials.json')", "buggy_source_code": "def __init__(self):\n    self._credentials = self.load_json('credentials.json')\n    self._cfg = self.load_json('configuration.json')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def run_kernel(self, func, c_args, threads, grid):\n    return func(*c_args)", "buggy_source_code": "def run_kernel(self, func, c_args, threads, grid):\n    time = func(*c_args)\n    if time < 0.0:\n        raise Exception('too many resources requested for launch')\n    return time", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.spreadsheet.del_worksheet(self.sheet)", "buggy_source_code": "def tearDown(self):\n    self.spreadsheet.del_worksheet(self.sheet)\n    super(WorksheetTest, self).tearDown()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, input_port):\n    self.input_port = input_port\n    self.output_port = Port([], self.run)", "buggy_source_code": "def __init__(self, input_port):\n    self.input_port = input_port\n    self.training_set = Port([], self.run)\n    self.output_ports = {'training_set': self.training_set}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_export_pipeline():\n    tpot_obj = TPOTClassifier()\n    pipeline = creator.Individual.from_string('KNeighborsClassifier(CombineDFs(GradientBoostingClassifier(input_matrix, 38.0, 0.87), SelectKBest(input_matrix, 5)), 18, 33)', tpot_obj._pset)\n    expected_code = 'import numpy as np\\n\\nfrom sklearn.ensemble import GradientBoostingClassifier, VotingClassifier\\nfrom sklearn.feature_selection import SelectKBest, f_classif\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.neighbors import KNeighborsClassifier\\nfrom sklearn.pipeline import make_pipeline, make_union\\nfrom sklearn.preprocessing import FunctionTransformer\\n\\n# NOTE: Make sure that the class is labeled \\'class\\' in the data file\\ntpot_data = np.recfromcsv(\\'PATH/TO/DATA/FILE\\', delimiter=\\'COLUMN_SEPARATOR\\', dtype=np.float64)\\nfeatures = np.delete(tpot_data.view(np.float64).reshape(tpot_data.size, -1), tpot_data.dtype.names.index(\\'class\\'), axis=1)\\ntraining_features, testing_features, training_classes, testing_classes = \\\\\\n    train_test_split(features, tpot_data[\\'class\\'], random_state=42)\\n\\nexported_pipeline = make_pipeline(\\n    make_union(\\n        make_union(VotingClassifier([(\\'branch\\',\\n            GradientBoostingClassifier(learning_rate=1.0, max_features=1.0, n_estimators=500)\\n        )]), FunctionTransformer(lambda X: X)),\\n        SelectKBest(k=5, score_func=f_classif)\\n    ),\\n    KNeighborsClassifier(n_neighbors=5, weights=\"distance\")\\n)\\n\\nexported_pipeline.fit(training_features, training_classes)\\nresults = exported_pipeline.predict(testing_features)\\n'\n    assert expected_code == export_pipeline(pipeline)", "buggy_source_code": "def test_export_pipeline():\n    tpot_obj = TPOTClassifier()\n    pipeline = creator.Individual.from_string('GaussianNB(CombineDFs(ZeroCount(input_matrix), RobustScaler(input_matrix)))', tpot_obj._pset)\n    expected_code = \"import numpy as np\\n\\nfrom sklearn.ensemble import VotingClassifier\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.naive_bayes import GaussianNB\\nfrom sklearn.pipeline import make_pipeline, make_union\\nfrom sklearn.preprocessing import FunctionTransformer, RobustScaler\\nfrom tpot.build_in_operators import ZeroCount\\n\\n# NOTE: Make sure that the class is labeled 'class' in the data file\\ntpot_data = np.recfromcsv('PATH/TO/DATA/FILE', delimiter='COLUMN_SEPARATOR', dtype=np.float64)\\nfeatures = np.delete(tpot_data.view(np.float64).reshape(tpot_data.size, -1), tpot_data.dtype.names.index('class'), axis=1)\\ntraining_features, testing_features, training_classes, testing_classes = \\\\\\n    train_test_split(features, tpot_data['class'], random_state=42)\\n\\nexported_pipeline = make_pipeline(\\n    make_union(\\n        ZeroCount(),\\n        RobustScaler()\\n    ),\\n    GaussianNB()\\n)\\n\\nexported_pipeline.fit(training_features, training_classes)\\nresults = exported_pipeline.predict(testing_features)\\n\"\n    assert expected_code == export_pipeline(pipeline, tpot_obj.operators)", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_get_by_name():\n    assert Operator.get_by_name('SelectKBest').__class__ == TPOTSelectKBest", "buggy_source_code": "def test_get_by_name():\n    tpot_obj = TPOTClassifier()\n    assert get_by_name('SelectKBest', tpot_obj.operators).__class__ == TPOTSelectKBest.__class__", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    BaseBot.__init__(self)", "buggy_source_code": "def __init__(self):\n    BaseBot.__init__(self)\n    self.shoot_pwr = 80\n    self.direction = 'RIGHT'\n    self.previous = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_clean_keyserver():\n    assert common.clean_keyserver(b'pgp.mit.edu') == b'hkp://pgp.mit.edu'\n    assert common.clean_keyserver(b'hkp://pgp.mit.edu') == b'hkp://pgp.mit.edu'\n    assert common.clean_keyserver(b'hkps://hkps.pool.sks-keyservers.net') == b'hkps://hkps.pool.sks-keyservers.net'\n    assert common.clean_keyserver(b'ldap://somekeyserver') == b'ldap://somekeyserver'", "buggy_source_code": "def test_clean_keyserver(common):\n    assert common.clean_keyserver(b'pgp.mit.edu') == b'hkp://pgp.mit.edu'\n    assert common.clean_keyserver(b'hkp://pgp.mit.edu') == b'hkp://pgp.mit.edu'\n    assert common.clean_keyserver(b'hkps://hkps.pool.sks-keyservers.net') == b'hkps://hkps.pool.sks-keyservers.net'\n    assert common.clean_keyserver(b'ldap://somekeyserver') == b'ldap://somekeyserver'", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_fp_to_keyid():\n    assert common.fp_to_keyid(b'734F6E707434ECA6C007E1AE82BD6C9616DABB79') == b'0x82BD6C9616DABB79'\n    assert common.fp_to_keyid(b'0' * 24 + b'1' * 16) == b'0x' + b'1' * 16", "buggy_source_code": "def test_fp_to_keyid(common):\n    assert common.fp_to_keyid(b'734F6E707434ECA6C007E1AE82BD6C9616DABB79') == b'0x82BD6C9616DABB79'\n    assert common.fp_to_keyid(b'0' * 24 + b'1' * 16) == b'0x' + b'1' * 16", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def clear_db():\n    Base.metadata.drop_all()", "buggy_source_code": "def clear_db():\n    Base.metadata.drop_all(bind=engine)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def predict(self):\n    self.clf.predict(self.data.test_a)", "buggy_source_code": "def predict(self):\n    self.pred = self.clf.predict(self.data.test_a)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_num_threads(nthreads):\n    _set_num_threads(nthreads)", "buggy_source_code": "def set_num_threads(nthreads):\n    old_nthreads = _set_num_threads(nthreads)\n    if old_nthreads != nthreads:\n        numexpr.necompiler._numexpr_cache = CacheDict(256)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_num_threads(nthreads):\n    _set_num_threads(nthreads)", "buggy_source_code": "def set_num_threads(nthreads):\n    old_nthreads = _set_num_threads(nthreads)\n    if old_nthreads != nthreads:\n        numexpr.necompiler._numexpr_cache = CacheDict(256)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef all(cls):\n    return adapter.session.query(cls).all()", "buggy_source_code": "@classmethod\ndef all(cls, commit=True):\n    res = adapter.session.query(cls).all()\n    if commit:\n        adapter.session.commit()\n    return res", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_video_invalid(filename):\n    (name, extension) = os.path.splitext(filename)\n    guess = guess_filename(filename)\n    return guess['title'] == name", "buggy_source_code": "def is_video_invalid(filename):\n    (name, extension) = os.path.splitext(filename)\n    guess = guess_filename(filename)\n    return False if 'title' not in guess else guess['title'] == name", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.uri = uri_for('api-v1')\n    super(FormTest, self).setUp()", "buggy_source_code": "def setUp(self):\n    WSGIApplication.request = Request.blank('/')\n    self.uri = uri_for('api-v1')\n    super(FormTest, self).setUp()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def normalize(clip):\n    cmd = ['ffmpeg-normalize', '-fu', '--format', 'mp4', '--no-prefix', clip]\n    subprocess_call(cmd, False)", "buggy_source_code": "def normalize(clip):\n    cmd = ['ffmpeg-normalize', '-fu', '--format', 'mp4', clip]\n    subprocess_call(cmd, False)\n    os.rename('output/normalized-tmp.mp4', 'output/they-say.mp4')\n    os.remove('output/tmp.mp4')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save_epm_record(self, code, count):\n    self.redis_zadd_if_higher(keys=[f'{self.streamer}:emotes:epmrecord', count], args=[code])", "buggy_source_code": "def save_epm_record(self, code, count):\n    streamer = StreamHelper.get_streamer()\n    self.redis_zadd_if_higher(keys=[f'{streamer}:emotes:epmrecord', count], args=[code])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def startdelta(start, delta, num):\n    end = start + delta * (num - 1)\n    return numpy.linspace(start, end, num)", "buggy_source_code": "def startdelta(start, delta, num):\n    end = start + delta * (num - 1)\n    return numpy.linspace(start, end, int(num))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def start(self):\n    self.log.debug('Starting the installation process')\n    self.system_check()", "buggy_source_code": "def start(self):\n    self.log.debug('Starting the installation process')\n    continue_link = next(self.browser.links(text_regex='Start Installation'))\n    self.browser.follow_link(continue_link)\n    self.system_check()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.generator = UniqueIdGenerator(\"David's Gen\")", "buggy_source_code": "def setUp(self):\n    g_webInterface.config = Config('test.conf')\n    self.generator = UniqueIdGenerator(\"David's Gen\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_karma_general_info(self):\n    return self.karma_level_provider.get_general_info()", "buggy_source_code": "def get_karma_general_info(self):\n    return {'karma_info': self.karma_level_provider.get_general_info()}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def save_and_code(request):\n    save_edits(request)\n    return HttpResponseRedirect('code_collection')", "buggy_source_code": "def save_and_code(request):\n    global CoderText\n    save_edits(request)\n    CoderText = ''\n    return HttpResponseRedirect('code_collection')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getProduct(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.PROJECT)", "buggy_source_code": "def getProduct(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.PROJECT).strip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getTitle(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.LEVEL)", "buggy_source_code": "def getTitle(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.LEVEL).strip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getReqNumber(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.REQ).split('.')[0]", "buggy_source_code": "def getReqNumber(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.REQ).split('.')[0].strip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getFullName(self):\n    return '{} {}'.format(self.getFirstName(), self.getLastName())", "buggy_source_code": "def getFullName(self):\n    return '{} {}'.format(self.getFirstName(), self.getLastName()).strip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getFunction(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.FUNCTION)", "buggy_source_code": "def getFunction(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.FUNCTION).strip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getRawNickName(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.NICK_NAME)", "buggy_source_code": "def getRawNickName(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.NICK_NAME).strip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getRawName(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.NAME)", "buggy_source_code": "def getRawName(self):\n    return self.spreadsheetParser.getColValueByName(self.aRow, self.peopleDataKeys.NAME).strip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def addIsExpatFilter(self):\n    self.filterList.append(IsExpatCriteria())\n    return self", "buggy_source_code": "def addIsExpatFilter(self, isExpat=True):\n    self.filterList.append(IsExpatCriteria(isExpat))\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def addIsInternFilter(self):\n    self.filterList.append(IsInternCriteria())\n    return self", "buggy_source_code": "def addIsInternFilter(self, isIntern=True):\n    self.filterList.append(IsInternCriteria(isIntern))\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send(self, message):\n    updaters[self.updater](self.username, self.password, message)", "buggy_source_code": "def send(self, message):\n    updaters.cache[self.updater](self.username, self.password, message)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def start_server(self, app):\n    self.server(app)\n    self.server_url = self.server.url", "buggy_source_code": "def start_server(self, app, cwd=None):\n    self.server(app, cwd=cwd)\n    self.server_url = self.server.url", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def to_dict(self, **kwargs):\n    dict_ref = {}\n    for (key, value) in kwargs.items():\n        dict_ref[key] = value\n    return dict_ref", "buggy_source_code": "def to_dict(self, *args, **kwargs):\n    dict_ref = {}\n    for (key, value) in kwargs.items():\n        dict_ref[key] = value\n    return dict_ref", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return u'%s' % self.last_updated", "buggy_source_code": "def __str__(self):\n    return u'%s %s %s' % (self.dealer, self.provider, self.amount)", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return u'%s' % self.last_updated", "buggy_source_code": "def __str__(self):\n    return u'%s' % (self.last_updated,)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return u'%s' % self.last_updated", "buggy_source_code": "def __str__(self):\n    return u'%s %s' % (self.last_updated, self.product)", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return u'%s' % self.last_updated", "buggy_source_code": "def __str__(self):\n    return u'%s %s' % (self.last_updated, self.product)", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def construct_param_dict(city):\n    return {'query': '汽车站', 'coord_type': '1', 'city_limit': 'true', 'region': city, 'output': 'json'}", "buggy_source_code": "def construct_param_dict(city):\n    return {'query': '汽车站', 'tag': '交通设施;长途汽车站', 'scope': '2', 'coord_type': '1', 'city_limit': 'true', 'region': city, 'output': 'json', 'page_size': '20'}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.keys = MmKeys(NullPlayer())", "buggy_source_code": "def setUp(self):\n    self.win = gtk.Window()\n    self.keys = init(self.win, NullPlayer())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create(self, mention):\n    return 'Hello World!'", "buggy_source_code": "def create(self, mention, max_message_length):\n    return 'Hello World!'", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def post_message(self):\n    return self.send_message(self.messages.create({}))", "buggy_source_code": "def post_message(self):\n    return self.send_message(self.messages.create({}, self.MESSAGE_LENGTH))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_paused(self):\n    return self.state is State.paused", "buggy_source_code": "@property\ndef is_paused(self):\n    return self.state is State.paused", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_lost(self):\n    return self.state is State.lost", "buggy_source_code": "@property\ndef is_lost(self):\n    return self.state is State.lost", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_running(self):\n    return self.state is State.running", "buggy_source_code": "@property\ndef is_running(self):\n    return self.state is State.running", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_tipbod():\n    assert 1", "buggy_source_code": "def test_tipbod():\n    spice.furnsh(_testKernelPath)\n    et = spice.str2et('Jan 1 2005')\n    tipm = spice.tipbod('J2000', 699, et)\n    assert tipm is not None\n    spice.kclear()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_tisbod():\n    assert 1", "buggy_source_code": "def test_tisbod():\n    spice.furnsh(_testKernelPath)\n    et = spice.str2et('Jan 1 2005')\n    tsipm = spice.tisbod('J2000', 699, et)\n    assert tsipm is not None\n    spice.kclear()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_timdef():\n    assert 1", "buggy_source_code": "def test_timdef():\n    value = spice.timdef('GET', 'CALENDAR', 10)\n    assert value == 'GREGORIAN' or 'JULIAN' or 'MIXED'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    pass", "buggy_source_code": "def tearDown(self):\n    db.session.rollback()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    import matplotlib\n    matplotlib.pyplot.switch_backend('Agg')", "buggy_source_code": "def setUp(self):\n    self.backend = matplotlib.rcParams['backend']\n    matplotlib.pyplot.switch_backend('Agg')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def uinit(**kwargs):\n    return np.copy(zero)", "buggy_source_code": "def uinit(**kwargs):\n    return 20 * np.random.random(solarsys.shape) - 10", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def handle(self, request, data):\n    self.user.set_password(data['password1'])", "buggy_source_code": "def handle(self, request, data):\n    self.user.set_password(data['password1'])\n    self.user.save()\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    pass", "buggy_source_code": "def __init__(self, reader, app):\n    self.reader = reader\n    self._app = app", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse_import(self, node):\n    imports = Import.parse_list_from_node(node)\n    for import0 in imports:\n        self.add_import(import0)", "buggy_source_code": "def parse_import(self, node, module_lookup):\n    imports = Import.parse_list_from_node(node, module_lookup=module_lookup)\n    for import0 in imports:\n        self.add_import(import0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, addr='TCPIP::192.168.1.228::INSTR', reset=True, verb=True):\n    super(Keysight_N9010B, self).__init__(addr, reset, verb)", "buggy_source_code": "def __init__(self, addr='TCPIP::192.168.1.228::INSTR', reset=True, verb=True):\n    super().__init__(addr, reset, verb)\n    self.dev.timeout = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_raritan_real_value():\n    assert raritan.real_value(100, 2) == '1.0'", "buggy_source_code": "def test_raritan_real_value():\n    assert health_monitoring_plugins.raritan.real_value(100, 2) == '1.0'", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _irc_upper(self, in_string):\n    if self._upper_trans is not None:\n        conv_string = in_string.translate(self._upper_trans)\n    return str.upper(conv_string)", "buggy_source_code": "def _irc_upper(self, in_string):\n    conv_string = in_string\n    if self._upper_trans is not None:\n        conv_string = in_string.translate(self._upper_trans)\n    return str.upper(conv_string)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def skip_b(self):\n    if self.aplayer is not None and self.player is not None:\n        self.player.on_audio_end()", "buggy_source_code": "def skip_b(self):\n    hardware.PressIndicate()\n    if self.aplayer is not None and self.player is not None:\n        self.player.on_audio_end()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def halt_p(self):\n    print('halt button')\n    os.system('sudo halt')", "buggy_source_code": "def halt_p(self):\n    print('halt button')\n    if self.player is not None:\n        self.player.save()\n    subprocess.call('sudo halt', stdout=sys.stdout)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def revcomp(tmp_seq):\n    return ''.join([rc[n] for n in tmp_seq])", "buggy_source_code": "def revcomp(tmp_seq):\n    return ''.join([rc[n] for n in tmp_seq[::-1]])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_normal(name):\n    return name[0] != '.'", "buggy_source_code": "def is_normal(name):\n    return name[0] != '.' and name != '__pycache__'", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef _clean_header_from_special_chars(header):\n    return header.replace(NATURAL_KEY_IDENTIFIER, '')", "buggy_source_code": "@staticmethod\ndef _clean_header_from_special_chars(header) -> str:\n    return header.replace(NATURAL_KEY_IDENTIFIER, '')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef _convert_boolean_cell_value(value):\n    if value == 'True':\n        return True\n    elif value == 'False':\n        return False\n    return value", "buggy_source_code": "@staticmethod\ndef _convert_boolean_cell_value(value) -> bool:\n    if value == 'True':\n        return True\n    elif value == 'False':\n        return False\n    return value", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@testing.automatic\n@io_setup()\ndef output_turned_off(b, o):\n    o.on()\n    o.off()\n    return b.is_pressed()", "buggy_source_code": "@testing.automatic\n@io_setup()\ndef output_turned_off(b, o):\n    o.on()\n    o.off()\n    time.sleep(MINIMUM_BUTTON_PRESS_PERIOD)\n    return b.is_pressed()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@testing.automatic\n@io_setup()\ndef button_is_released(b, o):\n    o.on()\n    return b.is_released()", "buggy_source_code": "@testing.automatic\n@io_setup()\ndef button_is_released(b, o):\n    o.on()\n    time.sleep(MINIMUM_BUTTON_PRESS_PERIOD)\n    return b.is_released()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@testing.automatic\n@io_setup(output_active_low=True)\ndef output_init_active_low_off(b, o):\n    o.off()\n    return b.is_released()", "buggy_source_code": "@testing.automatic\n@io_setup(output_active_low=True)\ndef output_init_active_low_off(b, o):\n    o.off()\n    time.sleep(MINIMUM_BUTTON_PRESS_PERIOD)\n    return b.is_released()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@testing.automatic\n@io_setup()\ndef button_is_pressed(b, o):\n    o.off()\n    return b.is_pressed()", "buggy_source_code": "@testing.automatic\n@io_setup()\ndef button_is_pressed(b, o):\n    o.off()\n    time.sleep(MINIMUM_BUTTON_PRESS_PERIOD)\n    return b.is_pressed()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@testing.automatic\n@io_setup()\ndef output_turned_on(b, o):\n    o.off()\n    o.on()\n    return b.is_released()", "buggy_source_code": "@testing.automatic\n@io_setup()\ndef output_turned_on(b, o):\n    o.off()\n    o.on()\n    time.sleep(MINIMUM_BUTTON_PRESS_PERIOD)\n    return b.is_released()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@testing.automatic\n@io_setup(output_active_low=True)\ndef output_init_active_low_on(b, o):\n    o.on()\n    return b.is_pressed()", "buggy_source_code": "@testing.automatic\n@io_setup(output_active_low=True)\ndef output_init_active_low_on(b, o):\n    o.on()\n    time.sleep(MINIMUM_BUTTON_PRESS_PERIOD)\n    return b.is_pressed()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def compile_tex(self):\n    os.system('cp ./artwork.jpg ' + self.tex_dir + 'artwork.jpg')\n    subprocess.call(['pdflatex', self.tex_file])", "buggy_source_code": "def compile_tex(self):\n    os.system('exiftool artwork.jpg -jfif:Xresolution=300 -jfif:Yresolution=300 -jfif:ResolutionUnit=inch')\n    os.system('cp ./artwork.jpg ' + self.tex_dir + 'artwork.jpg')\n    subprocess.call(['pdflatex', self.tex_file])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_can_template_a_registration(self, auth):\n    registration = RegistrationFactory(creator=user)\n    new = registration.use_as_template(auth=auth)\n    assert new.is_registration is False", "buggy_source_code": "def test_can_template_a_registration(self, user, auth):\n    registration = RegistrationFactory(creator=user)\n    new = registration.use_as_template(auth=auth)\n    assert new.is_registration is False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_to_table(self, table):\n    if table and (not self.table):\n        self._set_parent(table)", "buggy_source_code": "def add_to_table(self, table):\n    if table is not None and self.table is None:\n        self._set_parent(table)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args):\n    pass", "buggy_source_code": "def __init__(self, *args):\n    super(ADSClass, self).__init__()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_throttleable(self):\n    if self.legacy:\n        return http.HTTPConnection.is_throttleable()\n    return False", "buggy_source_code": "def is_throttleable(self):\n    if self.legacy:\n        return http.HTTPConnection.is_throttleable(self)\n    return False", "edit_actions": ["insert-node"]}
{"fixed_source_code": "@frappe.whitelist()\n@do_not_record\ndef start(*args, **kwargs):\n    frappe.cache().set_value(RECORDER_INTERCEPT_FLAG, 1)", "buggy_source_code": "@frappe.whitelist()\n@do_not_record\n@administrator_only\ndef start(*args, **kwargs):\n    frappe.cache().set_value(RECORDER_INTERCEPT_FLAG, 1)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@frappe.whitelist()\n@do_not_record\ndef delete(*args, **kwargs):\n    frappe.cache().delete_value(RECORDER_REQUEST_SPARSE_HASH)\n    frappe.cache().delete_value(RECORDER_REQUEST_HASH)", "buggy_source_code": "@frappe.whitelist()\n@do_not_record\n@administrator_only\ndef delete(*args, **kwargs):\n    frappe.cache().delete_value(RECORDER_REQUEST_SPARSE_HASH)\n    frappe.cache().delete_value(RECORDER_REQUEST_HASH)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@frappe.whitelist()\n@do_not_record\ndef stop(*args, **kwargs):\n    frappe.cache().delete_value(RECORDER_INTERCEPT_FLAG)", "buggy_source_code": "@frappe.whitelist()\n@do_not_record\n@administrator_only\ndef stop(*args, **kwargs):\n    frappe.cache().delete_value(RECORDER_INTERCEPT_FLAG)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@frappe.whitelist()\n@do_not_record\ndef status(*args, **kwargs):\n    return bool(frappe.cache().get_value(RECORDER_INTERCEPT_FLAG))", "buggy_source_code": "@frappe.whitelist()\n@do_not_record\n@administrator_only\ndef status(*args, **kwargs):\n    return bool(frappe.cache().get_value(RECORDER_INTERCEPT_FLAG))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_hosts_from_ports(self, ports):\n    return map(lambda x: 'localhost:%d' % int(x.strip()), ports.split(','))", "buggy_source_code": "def _get_hosts_from_ports(self, ports):\n    hosts = map(lambda x: 'localhost:%d' % int(x.strip()), ports.split(','))\n    return list(set(hosts))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def qdump__Debugger__Internal__GdbMi(d, value):\n    d.putByteArrayValue(value['m_data'])\n    d.putPlainChildren(value)", "buggy_source_code": "def qdump__Debugger__Internal__GdbMi(d, value):\n    str = encodeByteArray(value['m_name']) + '3a20' + encodeByteArray(value['m_data'])\n    d.putValue(str, Hex2EncodedLatin1)\n    d.putPlainChildren(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cur_tok(inc=0):\n    return tokens_list[instructions_current + inc]", "buggy_source_code": "def cur_tok(inc: int=0) -> lexer.Token:\n    return tokens_list[instructions_current + inc]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def testCustomizationIsDisabled(self):\n    self.assertEquals(QSettings().value('/UI/Customization/enabled'), False)", "buggy_source_code": "def testCustomizationIsDisabled(self):\n    self.assertEquals(QSettings().value('/UI/Customization/enabled', type=bool), False)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def applicationDidFinishLaunching_(self, notification):\n    self.setupUI()\n    self.registerObserver()", "buggy_source_code": "def applicationDidFinishLaunching_(self, notification):\n    self.setupUI()\n    self.registerObserver()\n    self.loadConfig()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, lr=1.0, rho=0.95, epsilon=1e-06, *args, **kwargs):\n    self.__dict__.update(locals())", "buggy_source_code": "def __init__(self, lr=1.0, rho=0.95, epsilon=1e-06, *args, **kwargs):\n    self.__dict__.update(kwargs)\n    self.__dict__.update(locals())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, lr=0.001, rho=0.9, epsilon=1e-06, *args, **kwargs):\n    self.__dict__.update(locals())", "buggy_source_code": "def __init__(self, lr=0.001, rho=0.9, epsilon=1e-06, *args, **kwargs):\n    self.__dict__.update(kwargs)\n    self.__dict__.update(locals())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, lr=0.01, epsilon=1e-06, *args, **kwargs):\n    self.__dict__.update(locals())", "buggy_source_code": "def __init__(self, lr=0.01, epsilon=1e-06, *args, **kwargs):\n    self.__dict__.update(kwargs)\n    self.__dict__.update(locals())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def drop_database(self):\n    self._send('DROP DATABASE `%s`' % self.db_name)", "buggy_source_code": "def drop_database(self):\n    self._send('DROP DATABASE `%s`' % self.db_name)\n    self.db_exists = False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@contextlib.contextmanager\ndef getTestDir(self):\n    tempdir = tempfile.mkdtemp()\n    yield tempdir\n    shutil.rmtree(tempdir)", "buggy_source_code": "@contextlib.contextmanager\ndef getTestDir(self):\n    tempdir = tempfile.mkdtemp()\n    yield tempdir\n    shutil.rmtree(tempdir, ignore_errors=True)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_image(uid, context):\n    return IMAGE_API.show(context, uid)", "buggy_source_code": "def get_image(uid, context):\n    try:\n        return IMAGE_API.show(context, uid)\n    except exception.ImageNotFound as err:\n        raise AttributeError(str(err))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def encodeWithClassName(obj):\n    if hasattr(obj, '_objDict'):\n        return obj._objDict\n    else:\n        return obj", "buggy_source_code": "def encodeWithClassName(obj):\n    if hasattr(obj, '_objDict') and obj._objDict != None:\n        return obj._objDict\n    else:\n        return obj", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def qtHookDataSymbolName(self):\n    return 'Qt5Cored#!qtHookData'", "buggy_source_code": "def qtHookDataSymbolName(self):\n    if 'Qt5Core' in cdbext.listOfModules():\n        return 'Qt5Core!qtHookData'\n    else:\n        return 'Qt5Cored!qtHookData'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_default(self):\n    for field in self._fields:\n        if not field.is_default():\n            return False\n    return True", "buggy_source_code": "def is_default(self):\n    for field in self._fields:\n        if not field.is_default():\n            return False\n    return super(Container, self).is_default()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _fromTBC(self, s):\n    self.parse_tonal(s, mult=65536)\n    return n", "buggy_source_code": "def _fromTBC(self, s):\n    n = self.parse_tonal(s, mult=65536)\n    return n", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    self.client = Client()\n    super(GenericCRLViewTests, self).setUp()", "buggy_source_code": "def setUp(self):\n    super(GenericCRLViewTests, self).setUp()\n    self.ca = self.cas['child']\n    self.client = Client()", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def matches_clause(self, db):\n    return sql.and_(db.Readings.reader == self.name, db.Readings.reader_version == self.version)", "buggy_source_code": "def matches_clause(self, db):\n    return sql.and_(db.Readings.reader == self.name, db.Readings.reader_version == self.version[:20])", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def install():\n    cmd('pip install dist/%s-%s.tar.gz' % (env.name, version), venv_path=env.activate)", "buggy_source_code": "def install():\n    cmd('pip install %s/dist/%s-%s.tar.gz' % (env.src, env.name, version), venv_path=env.activate)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef video_length(self):\n    return 5", "buggy_source_code": "@property\ndef video_length(self):\n    return self.num_input_frames + self.num_target_frames", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return {'a_streams': self.a_streams, 'filename': self.filename, 'filename_ext': self.filename_ext, 'format': self.format, 'v_streams': self.v_streams}", "buggy_source_code": "def __str__(self):\n    return str({'a_streams': self.a_streams, 'filename': self.filename, 'filename_ext': self.filename_ext, 'format': self.format, 'v_streams': self.v_streams})", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def sync_new_port(self, local_port):\n    pass", "buggy_source_code": "def sync_new_port(self, local_port, protocol):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def remove(self, local_port):\n    pass", "buggy_source_code": "def remove(self, local_port, protocol):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sync_one_mapping(self, local_port):\n    pass", "buggy_source_code": "def sync_one_mapping(self, local_port, protocol):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def op(self):\n    return self._parent_op", "buggy_source_code": "@property\ndef op(self):\n    return self._parent_op", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, trans, name='Stemmatizer'):\n    self.trans = trans\n    self.name = name", "buggy_source_code": "def __init__(self, trans, lowercase=True, name='Stemmatizer'):\n    self.trans = trans\n    self.name = name\n    self.lowercase = lowercase", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_name():\n    return _DEFAULTS['network_root_name'] + '_seq_' + _DEFAULTS['seq_length'] + '_hidden_' + _DEFAULTS['hidden_size']", "buggy_source_code": "def get_name():\n    return _DEFAULTS['network_root_name'] + '_seq_' + str(_DEFAULTS['seq_length']) + '_hidden_' + str(_DEFAULTS['hidden_size']) + '_batch_' + str(_DEFAULTS['batch_size'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _extract_clauses(self):\n    return {{_Term(self, negated=False)}}", "buggy_source_code": "def _extract_clauses(self):\n    return {frozenset({_Term(self, negated=False)})}", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def finishMessage(self, curMsg):\n    print('finishMessage() called.')\n    curMsg[9] = lrcsum(curMsg[:9])\n    return curMsg", "buggy_source_code": "def finishMessage(self, curMsg):\n    if DEBUG:\n        print('finishMessage() called.')\n    curMsg[9] = lrcsum(curMsg[:9])\n    return curMsg", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_gridspec_if_not_new_plots(self):\n    self.view._update_plot_selector = mock.Mock()\n    self.view._update_gridspec([])\n    self.view._update_plot_selector.assert_called_once()", "buggy_source_code": "def test_gridspec_if_not_new_plots(self):\n    self.view._update_plot_selector = mock.Mock()\n    self.view._update_gridspec([])\n    self.assertEquals(self.view._update_plot_selector.call_count, 1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def implement(self):\n    mriutil.setWorkingDirTractometry(self.workingDir, self.getTractQuerierImage(None, None, 'trk'))", "buggy_source_code": "def implement(self):\n    mriutil.setWorkingDirTractometry(self.workingDir, self.getTractQuerierImage('dwi', None, 'trk'))", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def setbackground(image):\n    cmd = 'gsettings set org.gnome.desktop.background picture-uri file://' + os.path.abspath(image)\n    return", "buggy_source_code": "def setbackground(image):\n    cmd = 'gsettings set org.gnome.desktop.background picture-uri file://' + os.path.abspath(image)\n    os.system(cmd)\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_crash_occurrence_platforms(testcase, lookbehind_days=1):\n    return _get_crash_occurrence_platforms_from_crash_parameters(testcase.crash_type, testcase.crash_state, testcase.security_flag, testcase.project_name, lookbehind_days)", "buggy_source_code": "def get_crash_occurrence_platforms(testcase, lookbehind_days=1):\n    return set(_get_crash_occurrence_platforms_from_crash_parameters(testcase.crash_type, testcase.crash_state, testcase.security_flag, testcase.project_name, lookbehind_days))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _disconnect_by_conn_id(self, conn_id):\n    ip = self._find_ip_by_conn_id(conn_id)\n    return self._disconnect_by_ip(ip)", "buggy_source_code": "def _disconnect_by_conn_id(self, conn_id):\n    ip = self._find_ip_by_conn_id(conn_id)\n    if ip:\n        return self._disconnect_by_ip(ip)\n    else:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def delete_img(self):\n    url = self.get_endpoint()\n    requests.delete(url)\n    setattr(obj, name, None)", "buggy_source_code": "def delete_img(self, obj, name):\n    url = self.get_endpoint()\n    requests.delete(url)\n    setattr(obj, name, None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _warning_fw_zone_is_not_effective(self, result, *keys, **options):\n    fwzone = keys[-1]\n    _add_warning_fw_zone_is_not_effective(result, fwzone, options['version'])", "buggy_source_code": "def _warning_fw_zone_is_not_effective(self, result, *keys, **options):\n    fwzone = keys[-1]\n    _add_warning_fw_zone_is_not_effective(self.api, result, fwzone, options['version'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_module_class(tag):\n    return modx_modules[tag]", "buggy_source_code": "def get_module_class(tag):\n    if tag not in modx_modules:\n        update_modules()\n    return modx_modules[tag]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def process_resource_data_spec(data):\n    return {'hash': hashlib.sha256(data).hexdigest(), 'size': len(data)}", "buggy_source_code": "def process_resource_data_spec(data):\n    return {'hash': 'sha256:{}'.format(hashlib.sha256(data).hexdigest()), 'size': len(data)}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef aspseudo(cls, obj):\n    if isinstance(obj, cls):\n        return obj\n    else:\n        return cls.from_file(obj)", "buggy_source_code": "@classmethod\ndef aspseudo(cls, obj):\n    print(obj)\n    if isinstance(obj, cls):\n        return obj\n    else:\n        return cls.from_file(obj)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef flt_or(*args):\n    return {'$or': args} if len(args) > 1 else args[0]", "buggy_source_code": "@staticmethod\ndef flt_or(*args):\n    return {'$or': list(args)} if len(args) > 1 else args[0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __str__(self):\n    return '%s' % self.debug_info", "buggy_source_code": "def __str__(self):\n    if not self.debug_info:\n        return '{pos}'.format(pos=self.position)\n    return '{dbg}'.format(dbg=self.debug_info)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    if self.address:\n        return \"<PrologixAdapter(port='%s',address=%d)>\" % (self.port, self.address)\n    else:\n        return \"<PrologixAdapter(port='%s')>\" % self.connection.port", "buggy_source_code": "def __repr__(self):\n    if self.address:\n        return \"<PrologixAdapter(port='%s',address=%d)>\" % (self.connection.port, self.address)\n    else:\n        return \"<PrologixAdapter(port='%s')>\" % self.connection.port", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def redirect_to_homepage(context, request):\n    lang = get_negotiated_language(request)\n    page = PageInfo.get_homepage(request.db_session, lang)\n    raise HTTPMovedPermanently(location=page.url)", "buggy_source_code": "def redirect_to_homepage(context, request):\n    lang = get_negotiated_language(request)\n    page = PageInfo.get_homepage(request.db_session, lang)\n    raise HTTPMovedPermanently(location='%s.html' % page.url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def validate_embargo_state(value):\n    acceptable_states = ['unapproved', 'active', 'cancelled', 'completed']\n    if value not in acceptable_states:\n        raise ValidationValueError\n    return True", "buggy_source_code": "def validate_embargo_state(value):\n    acceptable_states = ['unapproved', 'active', 'cancelled', 'completed']\n    if value not in acceptable_states:\n        raise ValidationValueError('Invalid embargo state assignment.')\n    return True", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@hook('invite', raw_nick=False, admin_only=True)\ndef on_invite(cli, nick, something, chan):\n    cli.join(chan)", "buggy_source_code": "@hook('invite', raw_nick=False, admin_only=True)\ndef on_invite(cli, nick, something, chan):\n    if chan == botconfig.CHANNEL:\n        cli.join(chan)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def preprocess(self, protocol_item):\n    return protocol_item", "buggy_source_code": "def preprocess(self, protocol_item, identifier=None, **kwargs):\n    return protocol_item", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def process(self, fragment, signature=None):\n    raise NotImplementedError()", "buggy_source_code": "def process(self, fragment, signature=None, identifier=None):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_title(self):\n    soup = BeautifulSoup(self.r.content, 'html5lib')\n    return soup.title.string", "buggy_source_code": "def get_title(self):\n    soup = BeautifulSoup(self.r.content, 'html5lib')\n    if soup.title:\n        return soup.title.string\n    else:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, config):\n    self.config = config\n    super().__init__(command_prefix=self.config.get('command_prefix', '!'))", "buggy_source_code": "def __init__(self, config: dict):\n    self.config = config\n    super().__init__(command_prefix=self.config.get('command_prefix', '!'))", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def am_running(self):\n    return not self.amWaiting and self.amActive", "buggy_source_code": "def am_running(self):\n    logger.log('amWaiting: ' + str(self.amWaiting) + ', amActive: ' + str(self.amActive), logger.DEBUG)\n    return not self.amWaiting and self.amActive", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_find_wireless_interface(self):\n    interfaces = wnettools.GetWirelessInterfaces()\n    self.assertTrue('wlan0' in interfaces)", "buggy_source_code": "def test_find_wireless_interface(self):\n    interfaces = wnettools.GetWirelessInterfaces()\n    self.asserTrue(type(interfaces) == list)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@app.errorhandler(404)\ndef not_found(error):\n    return make_response(jsonify({'error': 'Not found'}), 404)", "buggy_source_code": "@app.errorhandler(404)\ndef not_found(error):\n    return make_response(jsonify({'error': 'Not found ' + request.url}), 404)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.client = Client()", "buggy_source_code": "def setUp(self):\n    self.client = Client()\n    self.mk_main()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _stackcopy(a, b):\n    a[:] = b[:, :, np.newaxis]", "buggy_source_code": "def _stackcopy(a, b):\n    if a.ndim == 3:\n        a[:] = b[:, :, np.newaxis]\n    else:\n        a[:] = b", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def start(self):\n    SimpleBackground.start(self, self.bg, calsa.Client(clientname, '%s IN' % clientname))", "buggy_source_code": "def start(self):\n    SimpleBackground.start(self, self.bg, calsa.Client(clientname.encode(), ('%s IN' % clientname).encode()))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@property\ndef num_parlamentares(self):\n    return self.legislatura_set.latest('data_inicio').total_parlamentares", "buggy_source_code": "@property\ndef num_parlamentares(self):\n    if not self.legislatura_set.exists():\n        return 0\n    return self.legislatura_set.latest('data_inicio').total_parlamentares", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_api_router_endpoint(self):\n    self.get('/api-router/')", "buggy_source_code": "def test_api_router_endpoint(self):\n    print(self.nginx_config['config'])\n    self.get('/api-router/')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _ir_cl_module_call(name, *ir_args):\n    return (apply, (quote, _ir_cl_module_name(name))) + ir_args", "buggy_source_code": "def _ir_cl_module_call(name, *ir_args):\n    return (apply, (quote, _ir_cl_module_name(name))) + ir_args + (nil,)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_base_volume(self, basevolume):\n    self.base_volume = basevolume", "buggy_source_code": "def set_base_volume(self, basevolume):\n    self.base_volume = basevolume\n    self.update_winamp_volume()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    self._server = LocalDevServer(self._app_object, self._config, self._port)\n    self._server_ready.set()\n    self._server.serve_forever()", "buggy_source_code": "def run(self):\n    self._server = LocalDevServer(self._app_object, self._config, self._host, self._port)\n    self._server_ready.set()\n    self._server.serve_forever()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, N, theta):\n    self.N\n    self.theta = theta", "buggy_source_code": "def __init__(self, N, theta):\n    self.N = N\n    self.theta = theta", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def BuildMoffat(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, ['beta'], ['fwhm', 'scale_radius', 'half_light_radius'], ['trunc'])", "buggy_source_code": "def BuildMoffat(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, ['beta'], ['fwhm', 'scale_radius', 'half_light_radius'], ['flux', 'trunc'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def BuildSersic(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, ['n'], ['half_light_radius'], [])", "buggy_source_code": "def BuildSersic(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, ['n'], ['half_light_radius'], ['flux'])", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def BuildGaussian(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['sigma', 'fwhm', 'half_light_radius'], [])", "buggy_source_code": "def BuildGaussian(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['sigma', 'fwhm', 'half_light_radius'], ['flux'])", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def BuildAiry(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['D'], ['obs'])", "buggy_source_code": "def BuildAiry(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['D'], ['flux', 'obs'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def BuildDeVaucouleurs(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['half_light_radius'], [])", "buggy_source_code": "def BuildDeVaucouleurs(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['half_light_radius'], ['flux'])", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, key: str, contents: Any):\n    self.key = key\n    self.contents = contents", "buggy_source_code": "def __init__(self, func: str, key: str, context: Any, contents: Any):\n    self.func = func\n    self.key = key\n    self.context = context\n    self.contents = contents", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def environ(request_parameters, meta={}):\n    return Environ({'parameters': request_parameters, 'meta': meta}).get_dict()", "buggy_source_code": "def environ(request_parameters={}, meta={}):\n    return Environ({'parameters': request_parameters, 'meta': meta}).get_dict()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def deploy_version(self, environment_name, version_label):\n    out('Deploying ' + version_label + ' to ' + environment_name)\n    self.ebs.update_environment(environment_name=environment_name, version_label=version_label)", "buggy_source_code": "def deploy_version(self, environment_name, version_label):\n    out('Deploying ' + str(version_label) + ' to ' + str(environment_name))\n    self.ebs.update_environment(environment_name=environment_name, version_label=version_label)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def rebuild_environment(self, env_name):\n    out('Rebuilding ' + env_name)\n    self.ebs.rebuild_environment(environment_name=env_name)", "buggy_source_code": "def rebuild_environment(self, env_name):\n    out('Rebuilding ' + str(env_name))\n    self.ebs.rebuild_environment(environment_name=env_name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def create_application(self, description=None):\n    out('Creating application ' + self.app_name)\n    self.ebs.create_application(self.app_name, description=description)", "buggy_source_code": "def create_application(self, description=None):\n    out('Creating application ' + str(self.app_name))\n    self.ebs.create_application(self.app_name, description=description)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def apply_fiscal_mapping(self, cr, uid, result, kwargs):\n    result['value'].update(self.fiscal_position_map(cr, uid, **kwargs))\n    return result", "buggy_source_code": "def apply_fiscal_mapping(self, cr, uid, result, **kwargs):\n    result['value'].update(self.fiscal_position_map(cr, uid, **kwargs))\n    return result", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def link_review(self):\n    return reverse('expense_review_relative', args=[self.id])", "buggy_source_code": "def link_review(self):\n    return reverse('expense_review_relative', args=[expense.fund.id, expense.relative_number])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def link_claim(self):\n    return reverse('expense_claim_relative', args=[self.id])", "buggy_source_code": "def link_claim(self):\n    return reverse('expense_claim_relative', args=[expense.fund.id, expense.relative_number])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef staticPartLength(self, name):\n    matches = re.findall('^bytes([0-9]*)')\n    size = int(matches[1])\n    return size * self.staticArrayLength(name)", "buggy_source_code": "@classmethod\ndef staticPartLength(self, name):\n    matches = re.findall('^bytes([0-9]*)', name)\n    size = int(matches[1])\n    return size * self.staticArrayLength(name)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, log):\n    self.log = log", "buggy_source_code": "def __init__(self, log):\n    self.log = log\n    self.image_hrefs = {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def pc_exists(pkg):\n    if os.spawnl(os.P_WAIT, pkg_config, 'pkg-config', '--exists', pkg) == 0:\n        return True\n    else:\n        return False", "buggy_source_code": "def pc_exists(pkg):\n    if os.spawnl(os.P_WAIT, pkg_config, 'pkg-config', '--print-errors', '--exists', pkg) == 0:\n        return True\n    else:\n        return False", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def format_rule(expressions):\n    return '\\n'.join(['%s = %s' % e for e in expressions])", "buggy_source_code": "def format_rule(expressions):\n    if isinstance(expressions, list):\n        return '\\n'.join(['%s = %s' % e for e in expressions])\n    return str(expressions)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, remote):\n    self._name = name\n    self._muted = False\n    self._playing = True\n    self._state = STATE_UNKNOWN\n    self._remote = remote", "buggy_source_code": "def __init__(self, name, remote):\n    self._name = name\n    self._muted = False\n    self._playing = True\n    self._state = STATE_UNKNOWN\n    self._remote = remote\n    self._volume = 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture(params=[1, 2])\ndef orbfit_method(request):\n    return request.param", "buggy_source_code": "@pytest.fixture(params=[cf.INDEPENDENT_METHOD, cf.NETWORK_METHOD])\ndef orbfit_method(request):\n    return request.param", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def make_external(url):\n    return urljoin(request.url_root, url)", "buggy_source_code": "def make_external(url):\n    return urljoin(request.url_root, '/blog/' + url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    gedit.Plugin.__init__(self)\n    self.view_dict = {}", "buggy_source_code": "def __init__(self):\n    gedit.Plugin.__init__(self)\n    self.view_dict = {}\n    self._proxy_dict = {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def deactivate(self):\n    for h in self._handlers:\n        self._doc.disconnect(h)", "buggy_source_code": "def deactivate(self):\n    self._unhighlight()\n    for h in self._handlers:\n        self._doc.disconnect(h)\n    del self._highlight_tag", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def verbose(self, *args, **kwargs):\n    if self._verbose:\n        self._print(*args, **kwargs)", "buggy_source_code": "def verbose(self, *args, **kwargs):\n    if self._verbose or self._debug:\n        self._print(*args, **kwargs)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get(self):\n    latlong_db = ag_data.getMapMarkers()\n    self.render('index.html', latlongs_db=latlong_db, loginerror='')", "buggy_source_code": "def get(self):\n    latlong_db = ag_data.getMapMarkers()\n    loginerror = self.get_argument('loginerror', '')\n    self.render('index.html', latlongs_db=latlong_db, loginerror=loginerror)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def save(self, savepath, **kwargs):\n    self.update_bbox()\n    json.dump(self._data, open(savepath, 'w'), **kwargs)", "buggy_source_code": "def save(self, savepath, **kwargs):\n    self.update_bbox()\n    tempfile = open(savepath, 'w')\n    json.dump(self._data, tempfile, **kwargs)\n    tempfile.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def idFromTitle(title):\n    return title.replace(' ', '_').replace(\"'\", '_')", "buggy_source_code": "def idFromTitle(title):\n    return title.replace(' ', '_').replace(\"'\", '_').replace('(', '_')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def pid_alive(self):\n    try:\n        self.kill_sphinx(0)\n        alive = True\n    except (OSError, subprocess.CalledProcessError):\n        alive = False\n    return alive", "buggy_source_code": "def pid_alive(self):\n    try:\n        self.kill_sphinx(0)\n        alive = True\n    except (OSError, subprocess.CalledProcessError, utils.RunError):\n        alive = False\n    return alive", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, coordinates):\n    self.coordinates = tuple(coordinates)\n    self.dimension = len(coordinates)", "buggy_source_code": "def __init__(self, coordinates, tolerance=1e-10):\n    self.coordinates = tuple(coordinates)\n    self.dimension = len(coordinates)\n    self.tolerance = tolerance", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef fix_spacing(text):\n    return re.sub('([a-z:.)])([A-Z])', '\\\\1 \\\\2', text)", "buggy_source_code": "@staticmethod\ndef fix_spacing(text):\n    text = re.sub('([a-z:.)])([A-Z]|\\\\d\\\\.)', '\\\\1 \\\\2', text)\n    text = text.decode('utf-8').replace(u'•', ' ').encode('utf-8')\n    return text", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def has_package_json(dir):\n    return os.path.isfile(package_json_path(dir))", "buggy_source_code": "def has_package_json(dir):\n    if dir is None:\n        return False\n    return os.path.isfile(package_json_path(dir))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_gem(dir):\n    return dir and bool(gemspec_path(dir))", "buggy_source_code": "def is_gem(dir):\n    if dir is None:\n        return False\n    return dir and bool(gemspec_path(dir))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def index(request):\n    return render_to_response('goal.html')", "buggy_source_code": "@ensure_csrf_cookie\ndef index(request):\n    return render_to_response('goal.html')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def t_error(args):\n    raise Exception('error')", "buggy_source_code": "def t_error(args):\n    print(args['linegetter'].current())\n    raise Exception('error')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test__lazy(self):\n    cube = Cube(as_lazy_data(np.array([1, 0])))\n    self._check_copy(cube, cube.copy())", "buggy_source_code": "def test__lazy(self):\n    cube = Cube(as_lazy_data(np.array([1, 0]), chunks=(1, 1)))\n    self._check_copy(cube, cube.copy())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _action_parser(self):\n    while True:\n        action = self.queue.get()\n        action.run()", "buggy_source_code": "def _action_parser(self):\n    while True:\n        action = self.queue.get()\n        try:\n            action.run()\n        except:\n            log.exception('Logging an uncaught exception (ActionQueue)')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init_hotkey(self):\n    try:\n        keybinder.bind(config.settings['shortcut_summon_hotot'], self.on_hotkey_compose)\n    except:\n        pass", "buggy_source_code": "def init_hotkey(self):\n    try:\n        import keybinder\n        keybinder.bind(config.settings['shortcut_summon_hotot'], self.on_hotkey_compose)\n    except:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@required_role(Role.MANAGER_ADMIN)\ndef handle_repair_license(self, req):\n    self.commapp.send_cmd('license repair', req=req, read_response=False)", "buggy_source_code": "@required_role(Role.MANAGER_ADMIN)\ndef handle_repair_license(self, req):\n    self.commapp.send_cmd('license repair', req=req, read_response=False)\n    return {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def select_publishing():\n    return input_yn(\"do you want to publish your feels online?\\n\\nif yes, i'll make a directory in your public_html where your blog posts\\nwill be published. if not, your posts will only be readable from\\nwithin the tilde.town network.\\n\\nyou can change this option any time.\\n\\nplease enter\")", "buggy_source_code": "def select_publishing():\n    publishing = input_yn(\"do you want to publish your feels online?\\n\\nif yes, i'll make a directory in your public_html where your blog posts\\nwill be published. if not, your posts will only be readable from\\nwithin the tilde.town network.\\n\\nyou can change this option any time.\\n\\nplease enter\")\n    return publishing", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def testClientAuthentication(sa, cli, msg, sig):\n    sa.authenticate(msg, 424242, sig)", "buggy_source_code": "def testClientAuthentication(sa, cli, msg, sig):\n    sa.authenticate(msg, idr, sig)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def testAnotherAuthenticatorCanAuthenticate(sa, cli, msg, sig):\n    sa2 = SimpleAuthNr()\n    sa2.addClient(cli.identifier, cli.verkey)\n    sa.authenticate(msg, 424242, sig)", "buggy_source_code": "def testAnotherAuthenticatorCanAuthenticate(sa, cli, msg, sig):\n    sa2 = SimpleAuthNr()\n    sa2.addClient(cli.identifier, cli.verkey)\n    sa.authenticate(msg, idr, sig)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef cli():\n    return SimpleSigner(424242)", "buggy_source_code": "@pytest.fixture(scope='module')\ndef cli():\n    return SimpleSigner(idr)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def testReconstitutedClientCreatesTheSameSig(cli, sig, msg):\n    cli2 = SimpleSigner(424242, seed=cli.seed)\n    sig2 = cli2.sign(msg)\n    assert sig == sig2", "buggy_source_code": "def testReconstitutedClientCreatesTheSameSig(cli, sig, msg):\n    cli2 = SimpleSigner(idr, seed=cli.seed)\n    sig2 = cli2.sign(msg)\n    assert sig == sig2", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __getstate__(self):\n    return {'_fd': self._fd}", "buggy_source_code": "def __getstate__(self):\n    return {'_fd': self._fd, 'pid': self.pid, 'nlocks': self.nlocks}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def release(self):\n    librt.pthread_rwlock_unlock(self._lock_p)", "buggy_source_code": "def release(self):\n    if self.nlocks == 0:\n        raise ValueError('Tried to release a released lock')\n    librt.pthread_rwlock_unlock(self._lock_p)\n    self.nlocks -= 1", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def acquire_read(self):\n    librt.pthread_rwlock_rdlock(self._lock_p)", "buggy_source_code": "def acquire_read(self):\n    librt.pthread_rwlock_rdlock(self._lock_p)\n    self.nlocks += 1", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.__setup(None)", "buggy_source_code": "def __init__(self):\n    self.__setup(None)\n    self.nlocks = 0\n    self.pid = os.getpid()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def acquire_write(self):\n    librt.pthread_rwlock_wrlock(self._lock_p)", "buggy_source_code": "def acquire_write(self):\n    librt.pthread_rwlock_wrlock(self._lock_p)\n    self.nlocks += 1", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def listen(self):\n    pass", "buggy_source_code": "def listen(self, markAlive=True):\n    self.start_listening()\n    log.info('Listening...')\n    while self.listening:\n        self.do_one_listen(markAlive)\n    self.stop_listening()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def copyto(dst, src, casting='same_kind', where=None):\n    dst.fill(src)", "buggy_source_code": "def copyto(dst, src, casting='same_kind', where=None):\n    if where is None:\n        dst.fill(src)\n    else:\n        dst[where] = src", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unload(self):\n    if not self.scanner:\n        return\n    self.scanner.close()\n    self.scanner.destroy()\n    self.scanner = None", "buggy_source_code": "def unload(self):\n    if not self.scanner:\n        return\n    self.stop()\n    self.scanner.close()\n    self.scanner.destroy()\n    self.scanner = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@java_method('(Ljava/lang/String;)V')\ndef onWarning(self, warning):\n    pass", "buggy_source_code": "@java_method('(Ljava/lang/String;)V')\ndef onWarning(self, warning):\n    print('MoodstocksWarning: {}'.format(warning))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _expose(func):\n    func._exposed = True\n    return func", "buggy_source_code": "def _expose(func):\n    if func.__name__.startswith('_'):\n        uwsgi_log('pygrim.decorators: Exposing internal method %s' % func.__name__)\n    func._exposed = True\n    return func", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def marks_for_view(self, view):\n    return sorted([mark for mark in self.error_marks if mark.view == view], key=lambda e: e.region)", "buggy_source_code": "def marks_for_view(self, view):\n    return sorted([mark.updated() for mark in self.error_marks if mark.view == view], key=lambda e: e.region)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_ana_cancel(self, button):\n    if self.analysis_view.res_needs_refresh:\n        self.resource_view.update_store()\n    self.hidden_stack.set_visible_child_name('Default')", "buggy_source_code": "def on_ana_cancel(self, button):\n    self.hidden_stack.set_visible_child_name('Default')\n    self.analysis_view.exit()\n    if self.analysis_view.res_needs_refresh:\n        self.resource_view.update_store()", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    pass", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def default(request):\n    return {'request': request, 'OVERSEER_TITLE': conf.TITLE, 'OVERSEER_NAME': conf.NAME, 'OVERSEER_MEDIA_PREFIX': conf.MEDIA_PREFIX or reverse('overseer:media')}", "buggy_source_code": "def default(request):\n    return {'request': request, 'OVERSEER_TITLE': conf.TITLE, 'OVERSEER_NAME': conf.NAME, 'OVERSEER_MEDIA_PREFIX': (conf.MEDIA_PREFIX or reverse('overseer:media')).rstrip('/')}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, script_file):\n    GObject.Object.__init__(self)\n    self._incomplete_chunk = self._process = None\n    self.script_file = script_file", "buggy_source_code": "def __init__(self, script_file):\n    GObject.Object.__init__(self)\n    self._incomplete_chunk = self._process = self._stream = None\n    self.script_file = script_file", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_markdown(s):\n    from markdown import markdown\n    return markdown(s)", "buggy_source_code": "def do_markdown(s):\n    from markdown import markdown\n    return markdown(s.encode('utf-8')).decode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_textile(s):\n    from textile import textile\n    return textile(s)", "buggy_source_code": "def do_textile(s):\n    from textile import textile\n    return textile(s.encode('utf-8')).decode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef run_cmd_out(cmd):\n    return process.system_output(cmd, shell=True, ignore_status=True, sudo=True)", "buggy_source_code": "@staticmethod\ndef run_cmd_out(cmd):\n    return process.system_output(cmd, shell=True, ignore_status=True, sudo=True).decode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def make_pop(self, N):\n    self.pop = NeuronGroup(N, model=self.eqs_model)", "buggy_source_code": "def make_pop(self, N):\n    self.pop = NeuronGroup(N, model=self.eqs_model, implicit=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read_config_file(path):\n    with open(path, 'r') as yaml_file:\n        return yaml.safe_load(yaml_file)", "buggy_source_code": "def read_config_file(path):\n    with open(path, 'r') as yaml_file:\n        return yaml.safe_load(yaml_file) or {}", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def write_config_file(config, path):\n    with open(path, 'w') as yaml_file:\n        yaml.dump(config, yaml_file)", "buggy_source_code": "def write_config_file(config, path):\n    perun_log.msg_to_stdout(\"Writing config '{}' at {}\".format(config, path), 2)\n    with open(path, 'w') as yaml_file:\n        yaml.dump(config, yaml_file)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    flocker_ca(b'initialize', b'mycluster')", "buggy_source_code": "@skipUnless(which(EXECUTABLE), EXECUTABLE + ' not installed')\n@skipUnless(which(b'openssl'), 'openssl not installed')\ndef setUp(self):\n    flocker_ca(b'initialize', b'mycluster')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _before_run(self, ctx):\n    return self.fetches", "buggy_source_code": "def _before_run(self, ctx):\n    if not self._initialized:\n        self._initialized = True\n        self._prefill()\n    return self.fetches", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def app_globals(httpRequest):\n    return {'APP_NAME': APP_NAME, 'SFW': SFW}", "buggy_source_code": "def app_globals(httpRequest):\n    return {'APP_NAME': APP_NAME, 'SFW': SFW, 'DEBUG': DEBUG, 'PRODUCTION': PRODUCTION}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_avatar(self, token, **kwargs):\n    params = {'token': token}\n    return self._get('updateAvatar', params, kwargs)", "buggy_source_code": "def update_avatar(self, token, **kwargs):\n    params = {'token': token}\n    return self._get('updateAvatar', params, **kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def unload(self):\n    control.unload()\n    QgsExpression.unregisterFunction('$animation_datetime')", "buggy_source_code": "def unload(self):\n    control.unload()\n    QgsExpression.unregisterFunction('$animation_datetime')\n    QgsExpression.unregisterFunction('animation_datetime')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, code):\n    self.code = code", "buggy_source_code": "def __init__(self, code, parallel_insert=None):\n    self.code = code\n    self.parallel_insert = parallel_insert", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _validate_type_objectid(self, field, value):\n    if not re.match('[a-f0-9]{24}', value):\n        self._error(field, ERROR_BAD_TYPE % 'ObjectId')", "buggy_source_code": "def _validate_type_objectid(self, field, value):\n    if not re.match('[a-f0-9]{24}', value):\n        self._error(field, errors.ERROR_BAD_TYPE % 'ObjectId')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def reshape(self, shape):\n    raise NotImplementedError", "buggy_source_code": "def reshape(self, shape):\n    raise NotImplementedError('Reshaping not implemented for %s.' % self.__class__.__name__)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super().__init__()\n    self._listeners = []\n    self.info = Infos()", "buggy_source_code": "def __init__(self):\n    super(Processor, self).__init__()\n    self._listeners = []\n    self.info = Infos()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def utf8(value):\n    if isinstance(value, _UTF8_TYPES):\n        return value\n    assert isinstance(value, unicode_type)\n    return value.encode('utf-8')", "buggy_source_code": "def utf8(value):\n    if isinstance(value, _UTF8_TYPES):\n        return value\n    assert isinstance(value, unicode_type), 'Expected bytes, unicode, or None; got %r' % type(value)\n    return value.encode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def to_basestring(value):\n    if isinstance(value, _BASESTRING_TYPES):\n        return value\n    assert isinstance(value, bytes_type)\n    return value.decode('utf-8')", "buggy_source_code": "def to_basestring(value):\n    if isinstance(value, _BASESTRING_TYPES):\n        return value\n    assert isinstance(value, bytes_type), 'Expected bytes, unicode, or None; got %r' % type(value)\n    return value.decode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def to_unicode(value):\n    if isinstance(value, _TO_UNICODE_TYPES):\n        return value\n    assert isinstance(value, bytes_type)\n    return value.decode('utf-8')", "buggy_source_code": "def to_unicode(value):\n    if isinstance(value, _TO_UNICODE_TYPES):\n        return value\n    assert isinstance(value, bytes_type), 'Expected bytes, unicode, or None; got %r' % type(value)\n    return value.decode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def install_tools():\n    local('sudo apt-get update')\n    local('sudo apt-get upgrade')\n    dependencies = ['python', 'python-setuptools', 'python-pip', 'git', 'build-essentials']\n    local('sudo apt-get install %s' % dependencies.join(' '))", "buggy_source_code": "def install_tools():\n    dependencies = ['python', 'python-setuptools', 'python-pip', 'git', 'build-essentials']\n    local('sudo apt-get install %s' % ' '.join((x for x in dependencies)))\n    print(green('Tools installed successfully!'))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def install_couchdb():\n    dependencies = ['erlang', 'libicu-dev', 'libmozjs-dev', 'libcurl4-openssl-dev']", "buggy_source_code": "def install_couchdb():\n    dependencies = ['erlang', 'libicu-dev', 'libmozjs-dev', 'libcurl4-openssl-dev', 'supervisor']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def check_file_has_content_B(self):\n    self.assertFileEqual('trunk content\\nfeature B\\n', 'branch/file')", "buggy_source_code": "def check_file_has_content_B(self, path='file'):\n    self.assertFileEqual('trunk content\\nfeature B\\n', osutils.pathjoin('branch', path))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def check_file_has_content_A(self):\n    self.assertFileEqual('trunk content\\nfeature A\\n', 'branch/file')", "buggy_source_code": "def check_file_has_content_A(self, path='file'):\n    self.assertFileEqual('trunk content\\nfeature A\\n', osutils.pathjoin('branch', path))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_create_file(self):\n    return [('add', ('file', 'file-id', 'file', 'trunk content\\n'))]", "buggy_source_code": "def do_create_file(self, path='file'):\n    return [('add', (path, 'file-id', 'file', 'trunk content\\n'))]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _send(self, message):\n    self._socket.send(message)", "buggy_source_code": "def _send(self, message, routingKey=''):\n    self._socket.send(message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def main():\n    args = parser.parse_args()\n    setup_logger(args.sns_arn, None, log_level=args.loglevel)\n    calculate(args.database_url)", "buggy_source_code": "def main():\n    gdal.PushErrorHandler('CPLQuietErrorHandler')\n    args = parser.parse_args()\n    setup_logger(args.sns_arn, None, log_level=args.loglevel)\n    calculate(args.database_url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_github_repo(lang):\n    return {'go': 'git@github.com:grpc/grpc-go.git', 'java': 'git@github.com:grpc/grpc-java.git'}.get(lang, 'git@github.com:grpc/grpc.git')", "buggy_source_code": "def get_github_repo(lang):\n    return {'go': 'git@github.com:grpc/grpc-go.git', 'java': 'git@github.com:grpc/grpc-java.git', 'node': 'git@github.com:grpc/grpc-node.git'}.get(lang, 'git@github.com:grpc/grpc.git')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "async def foo_validator_async(value):\n    return value * 2", "buggy_source_code": "@asyncio.coroutine\ndef foo_validator_async(value):\n    return value * 2", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def foo_default_async(value):\n\n    async def default():\n        return value * 2\n    return default", "buggy_source_code": "def foo_default_async(value):\n\n    @asyncio.coroutine\n    def default():\n        return value * 2\n    return default", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def build_apk():\n    if 0 != os.system('%s build' % find_gradle_path()):\n        exit_with_msg(3)", "buggy_source_code": "def build_apk():\n    if not go2project_dir():\n        exit_with_msg(5)\n    if 0 != os.system('%s build' % find_gradle_path()):\n        exit_with_msg(3)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _format_plain(flow, _):\n    if flow.get('contact'):\n        return f\"<b>{flow['name']}</b> {flow[Cont.HOST]}:{flow[Cont.PORT]}\"\n    else:\n        return f\"<dim><b>{flow['name']}</b></dim>\"", "buggy_source_code": "def _format_plain(flow, _):\n    if flow.get('contact'):\n        return f\"<b>{flow['name']}</b> {flow[Cont.HOST]}:{flow[Cont.PORT]}\"\n    else:\n        return f\"<{DIM}><b>{flow['name']}</b></{DIM}>\"", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    cwd = os.getcwd()\n    os.chdir('win32/shellext')\n    os.system('mingw32-make')\n    os.chdir(cwd)", "buggy_source_code": "def run(self):\n    cwd = os.getcwd()\n    os.chdir('win32/shellext')\n    os.environ['DEBUG'] = '1'\n    os.system('mingw32-make')\n    os.chdir(cwd)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, app):\n    self.app = app", "buggy_source_code": "def __init__(self, app, max_connect_tries=60):\n    self.app = app\n    self.max_connect_tries = max_connect_tries", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_query(self, q, request):\n    return self.model.objects.filter(username=q)", "buggy_source_code": "def get_query(self, q, request):\n    return self.model.objects.filter(username__icontains=q).order_by('username')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def present(self, page):\n    super(PreferencesUlauncherDialog, self).present()", "buggy_source_code": "def present(self, page):\n    self._load_prefs_html(page)\n    super(PreferencesUlauncherDialog, self).present()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def show(self, page):\n    super(PreferencesUlauncherDialog, self).show()", "buggy_source_code": "def show(self, page):\n    self._load_prefs_html(page)\n    super(PreferencesUlauncherDialog, self).show()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, edit):\n    pio_library = getPioLibrary()\n    run_command('open_url', {'url': pio_library})", "buggy_source_code": "def run(self, edit):\n    pio_library = getPioLibrary()\n    if not path.exists(pio_library):\n        make_folder(pio_library)\n    run_command('open_url', {'url': pio_library})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef testdb(request, db_server):\n    request.addfinalizer(db_server.dropdb)\n    return db_server", "buggy_source_code": "@pytest.fixture(scope='module')\ndef testdb(request, db_server):\n    request.addfinalizer(ignore_errors(db_server.dropdb))\n    return db_server", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def end(self):\n    self.screen.end()", "buggy_source_code": "def end(self):\n    if not self.quiet:\n        self.screen.end()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_pms(self):\n    self.pm_body.text = self.current_conversation.msgs\n    self.pm_body.scroll_y = 0", "buggy_source_code": "def update_pms(self):\n    self.pm_body.text = self.current_conversation.msgs\n    self.pm_body.parent.scroll_y = 0", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, t):\n    if self.get_theme() != t:\n        self.set_theme(t)", "buggy_source_code": "def run(self, t):\n    self.settings = sublime.load_settings(pref)\n    if self.get_theme() != t:\n        self.set_theme(t)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_others(self, vtype):\n    for other in others:\n        if other != self:\n            other.write_message({'vtype': vtype})", "buggy_source_code": "def update_others(self, vtype, uri):\n    for other in others:\n        if other != self:\n            other.write_message({'vtype': vtype, 'uri': uri})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tryUnlink(fileName):\n    try:\n        os.unlink(fileName)\n        return True\n    except:\n        return False", "buggy_source_code": "def tryUnlink(fileName):\n    try:\n        os.unlink(fileName)\n        return True\n    except:\n        log.debug(format_exc())\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tryWrite(file, data):\n    try:\n        pickle.dump(data, file)\n        return True\n    except:\n        return False", "buggy_source_code": "def tryWrite(file, data):\n    try:\n        pickle.dump(data, file)\n        return True\n    except:\n        log.debug(format_exc())\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tryRead(file):\n    try:\n        return pickle.load(file)\n    except:\n        return None", "buggy_source_code": "def tryRead(file):\n    try:\n        return pickle.load(file)\n    except:\n        log.debug(format_exc())\n        return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tryRename(originalFileName, newFileName):\n    try:\n        os.rename(originalFileName, newFileName)\n        return True\n    except:\n        return False", "buggy_source_code": "def tryRename(originalFileName, newFileName):\n    try:\n        os.rename(originalFileName, newFileName)\n        return True\n    except:\n        log.debug(format_exc())\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, responses={}):\n    self._responses = responses.copy()", "buggy_source_code": "def __init__(self, responses={}):\n    self._responses = responses.copy()\n    self.requests = []", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self._close_all_displays()\n    self._x11 = subprocess.Popen(['Xvfb', self.display_name, '-ac'])", "buggy_source_code": "def setUp(self):\n    self._close_all_displays()\n    self._x11 = subprocess.Popen(['Xvfb', self.display_name, '-ac'])\n    self.display = gtk.gdk.Display(self.display_name)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, splits):\n    self.splits = splits", "buggy_source_code": "def __init__(self, splits):\n    self.splits = splits\n    self.outputs = [Output()(self) for _ in range(len(self.splits) + 1)]", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, host, port=None):\n    if not host:\n        raise LocationValueError('No host specified.')\n    self.host = _ipv6_host(host)\n    self.port = port", "buggy_source_code": "def __init__(self, host, port=None):\n    if not host:\n        raise LocationValueError('No host specified.')\n    self.host = _ipv6_host(host).lower()\n    self.port = port", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_doc_data(self):\n    r = requests.get('https://www.documentcloud.org/documents/{}.json'.format(self.id))\n    return json.loads(r.content)", "buggy_source_code": "def get_doc_data(self):\n    r = requests.get('https://www.documentcloud.org/documents/{}.json'.format(self.id))\n    return json.loads(r.content.decode('utf-8'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def admin_media_prefix():\n    try:\n        from django.conf import settings\n    except ImportError:\n        return ''\n    return settings.ADMIN_MEDIA_PREFIX", "buggy_source_code": "def admin_media_prefix():\n    try:\n        from django.conf import settings\n    except ImportError:\n        return ''\n    return iri_to_uri(settings.ADMIN_MEDIA_PREFIX)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(Nose2GAE, self).__init__(*args, **kwargs)\n    self._config_loaded = False\n    self._gae_testbed_inited = False", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(Nose2GAE, self).__init__(*args, **kwargs)\n    self._config_loaded = False\n    self._gae_testbed_inited = False\n    self._original_dir = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restart_service(name):\n    send_command('systemctl restart ' + name)", "buggy_source_code": "def restart_service(name):\n    send_command('systemctl restart ' + name + '.service')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.geocoder = OpenMapQuest(scheme='http', timeout=3, api_key=env['OPENMAPQUEST_APIKEY'])\n    cls.delta = 0.04", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.geocoder = OpenMapQuest(scheme='http', timeout=3, api_key=env.get('OPENMAPQUEST_APIKEY'))\n    cls.delta = 0.04", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def merge(self, merged):\n    merged.suite.visit(self)", "buggy_source_code": "def merge(self, merged):\n    merged.suite.visit(self)\n    self.result.errors.add(merged.errors)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def decodeSensorValue(self, sensorValue):\n    return unichr(self.elementCodes[sensorValue])", "buggy_source_code": "def decodeSensorValue(self, sensorValue):\n    if sensorValue < len(self.elementCodes):\n        return unichr(self.elementCodes[sensorValue])\n    else:\n        return unichr(63)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_in_virtualenv():\n    pipenv_active = os.environ.get('PIPENV_ACTIVE')\n    virtual_env = os.environ.get('VIRTUAL_ENV')\n    return (PIPENV_USE_SYSTEM or virtual_env) and (not pipenv_active)", "buggy_source_code": "def is_in_virtualenv():\n    pipenv_active = os.environ.get('PIPENV_ACTIVE')\n    virtual_env = os.environ.get('VIRTUAL_ENV')\n    return (PIPENV_USE_SYSTEM or virtual_env) and (not (pipenv_active or PIPENV_IGNORE_VIRTUALENVS))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '%s(\"%s\",%d bytes)' % (self.__class__.__name__, self.title, len(self.content))", "buggy_source_code": "def __repr__(self):\n    return '%s(\"%s\",%d bytes)' % (self.__class__.__name__, self.title, len(self.content.encode('utf-8')))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef boldify(msg):\n    return Color.BOLD + msg + Color.NORMAL if not NO_COLOR else ''", "buggy_source_code": "@staticmethod\ndef boldify(msg):\n    return Color.BOLD + msg + Color.NORMAL if not NO_COLOR else msg", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef redify(msg):\n    return Color.RED + msg + Color.NORMAL if not NO_COLOR else ''", "buggy_source_code": "@staticmethod\ndef redify(msg):\n    return Color.RED + msg + Color.NORMAL if not NO_COLOR else msg", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def commandAddAlias(self, domain, alias):\n    print('Add alias {} to existing domain {}'.format(alias, domain))", "buggy_source_code": "def commandAddAlias(self, domain, alias, services, config, real_users, is_user):\n    print('Add alias {} to existing domain {}'.format(alias, domain))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def commandDelAlias(self, domain, alias):\n    print('Delete alias {} from existing domain {}'.format(alias, domain))", "buggy_source_code": "def commandDelAlias(self, domain, alias, services, config, real_user):\n    print('Delete alias {} from existing domain {}'.format(alias, domain))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def loadQuests():\n    with open(ALL_QUESTS_FILE, mode='r', encoding='utf-8') as f:\n        quests = json.load(f)\n    return quests", "buggy_source_code": "def loadQuests():\n    with open(ALL_QUESTS_FILE, mode='r', encoding='utf-8') as f:\n        quests = json.load(f, object_pairs_hook=OrderedDict)\n    return quests", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/', methods=['GET'])\ndef index():\n    return render_template('index.html')", "buggy_source_code": "@app.route('/', methods=['GET'])\ndef index():\n    users = User.query.all()\n    return render_template('index.html', users=users)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef get_environment_metadata():\n    metadict = {}\n    try:\n        metadict['version'] = _get_svn_version\n    except:\n        metadict['version'] = 'no svn installed'\n    return metadict", "buggy_source_code": "@staticmethod\ndef get_environment_metadata():\n    metadict = {}\n    try:\n        metadict['version'] = _get_svn_version()\n    except:\n        metadict['version'] = 'no svn installed'\n    return metadict", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'NoDataOffset(%d)' % self", "buggy_source_code": "def __repr__(self):\n    return 'NoDataOffset(%d)' % int(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef default_redirect_uri(self):\n    return self.redirect_uris[0]", "buggy_source_code": "@property\ndef default_redirect_uri(self):\n    return self.redirect_uris[0] if self.redirect_uris else ''", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef id(self):\n    return re.match('^.*/([^/]+)/$', self.url).group(1)", "buggy_source_code": "@property\ndef id(self):\n    return re.match('^.*/([^/]+)/$', self.url).group(1) if self.url is not None else ''", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def minaddr(self):\n    return self.prefix.network_address + 1", "buggy_source_code": "def minaddr(self):\n    return IPv4Addr(self.prefix.network_address + 1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def maxaddr(self):\n    return self.prefix.broadcast_address - 1", "buggy_source_code": "def maxaddr(self):\n    return IPv4Addr(self.prefix.broadcast_address - 1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _wait_a_bit():\n    wait_time = random.randrange(MAX_WAIT_TIME_SECS)\n    time.sleep(wait_time)\n    return wait_time", "buggy_source_code": "def _wait_a_bit():\n    wait_time = random.randrange(0, MAX_WAIT_TIME_MILLISECS)\n    time.sleep(wait_time / 1000)\n    return wait_time", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "@property\ndef env_path(self):\n    return os.path.join(self.stage.source_path, 'spack-build.env')", "buggy_source_code": "@property\ndef env_path(self):\n    if self.stage.source_path is None:\n        return None\n    else:\n        return os.path.join(self.stage.source_path, 'spack-build.env')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef log_path(self):\n    return os.path.join(self.stage.source_path, 'spack-build.out')", "buggy_source_code": "@property\ndef log_path(self):\n    if self.stage.source_path is None:\n        return None\n    else:\n        return os.path.join(self.stage.source_path, 'spack-build.out')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read(self):\n    with open(self._config_file, 'rb') as f:\n        return yaml.load(f)", "buggy_source_code": "def read(self):\n    with open(self._config_file, 'rb') as f:\n        return yaml.load(f, Loader=yaml.SafeLoader)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def override_unit(self, unit):\n    return NotImplemented", "buggy_source_code": "def override_unit(self, unit, parse_strict='raise'):\n    return NotImplemented", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_step(self):\n    if self.cfg['runtest']:\n        tmpdir = tempfile.mkdtemp(suffix='-bazel-test')\n        run_cmd('bazel --output_base=%s test --config=opt //tensorflow/...')", "buggy_source_code": "def test_step(self):\n    if self.cfg['runtest']:\n        tmpdir = tempfile.mkdtemp(suffix='-bazel-test')\n        run_cmd('bazel --output_base=%s test --config=opt //tensorflow/...' % tmpdir)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _munge_time(t, timezone):\n    return timezone.localize(t).replace(microsecond=0).isoformat()", "buggy_source_code": "def _munge_time(t, timezone):\n    t = datetime.fromtimestamp(t)\n    return timezone.localize(t).replace(microsecond=0).isoformat()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_integer_power(self):\n    a = np.array([15, 15], 'i8')\n    b = a ** a\n    assert_equal(b, [437893890380859375, 437893890380859375])", "buggy_source_code": "def test_integer_power(self):\n    a = np.array([15, 15], 'i8')\n    b = np.power(a, a)\n    assert_equal(b, [437893890380859375, 437893890380859375])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def cleanup(self):\n    self.chords.filter(order__gt=self.chords_count()).delete()", "buggy_source_code": "def cleanup(self):\n    self.chords.filter(order__gt=self.chords_count()).delete()\n    if self.chords.count() == 0:\n        self.delete()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_manip_idx(robot, manip=None):\n    warnings.warn('tsr.get_manip_idx is deprecated. Please use util.GetActiveManipulatorIndex instead.', DeprecationWarning)\n    return GetActiveManipulatorIndex(robot, manip)", "buggy_source_code": "def get_manip_idx(robot, manip=None):\n    warnings.warn('tsr.get_manip_idx is deprecated. Please use util.GetActiveManipulatorIndex instead.', DeprecationWarning)\n    return GetActiveManipulatorIndex(robot, manip)[1]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def write(self, string):\n    myService.invoke('publishStdOut', string)", "buggy_source_code": "def write(self, string):\n    if myService is not None:\n        myService.invoke('publishStdOut', string)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def version():\n    from invenio.ext.sqlalchemy import db\n    try:\n        return db.engine.dialect.dbapi.__version__\n    except:\n        import MySQLdb\n        return MySQLdb.__version__", "buggy_source_code": "def version():\n    from invenio.ext.sqlalchemy import db\n    try:\n        return db.engine.dialect.dbapi.__version__\n    except Exception:\n        import MySQLdb\n        return MySQLdb.__version__", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __iter__(self):\n    return self", "buggy_source_code": "def __iter__(self):\n    for row in self.position:\n        for square in row:\n            yield square", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, execution_result, root_handler=None):\n    self._stack = [(execution_result, root_handler or RootHandler())]", "buggy_source_code": "def __init__(self, execution_result, root_handler=None):\n    self._stack = [(root_handler or RootHandler(), execution_result)]", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def hit(self, url):\n    response = self.client.get('/')\n    self.assertEqual(200, response.status_code)", "buggy_source_code": "def hit(self, url):\n    response = self.client.get(url)\n    self.assertEqual(200, response.status_code)\n    return response", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def upload_saltstates():\n    if is_saltmaster(public_ip=env.host):\n        rsync_project('.salt-states.rsync', '/home/rizumu/www/lib/salt-states/')\n        sudo('cp -R .salt-states.rsync /srv/salt && chown -R root:root /srv/salt')", "buggy_source_code": "def upload_saltstates():\n    if is_saltmaster(public_ip=env.host):\n        rsync_project('.salt-states.rsync', '/home/rizumu/www/lib/salt-states/', delete=True)\n        sudo('rsync -a --delete /home/deploy/.salt-states.rsync/ /srv/salt/ && chown -R root:root /srv/salt/')", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    try:\n        pyatspi.Registry.start()\n    except KeyboardInterrupt:\n        self._shutDown()", "buggy_source_code": "def run(self):\n    self._showNoA11yDialog()\n    try:\n        pyatspi.Registry.start()\n    except KeyboardInterrupt:\n        self._shutDown()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def build_extension(self, ext):\n    if isinstance(ext, OpenCCExtension):\n        build_libopencc()", "buggy_source_code": "def build_extension(self, ext):\n    if isinstance(ext, OpenCCExtension):\n        build_libopencc()\n    else:\n        super(BuildExtCommand, self).build_extension(ext)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_container_conf(self):\n    self.__conf['type'] = self.__type\n    return self.__conf", "buggy_source_code": "def get_container_conf(self):\n    if self.__conf is not None:\n        self.__conf['type'] = self.__type\n        return self.__conf\n    else:\n        return self.__conf", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _restore_post_save_hooks(self):\n    has_listeners = lambda : post_save.has_listeners(Registration)\n    assert not has_listeners(), 'Registration model still has post_save listeners. Make sure helpers removed them properly in earlier tests.'\n    post_save.connect(registration_post_save, sender=Registration)", "buggy_source_code": "def _restore_post_save_hooks(self):\n\n    def has_listeners():\n        return post_save.has_listeners(Registration)\n    assert not has_listeners(), 'Registration model still has post_save listeners. Make sure helpers removed them properly in earlier tests.'\n    post_save.connect(registration_post_save, sender=Registration)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def restore_last_pedalboard(self):\n    (last_bank, last_pedalboard) = get_last_bank_and_pedalboard()\n    if last_bank and last_pedalboard:\n        self.load_bank_pedalboard(last_bank, last_pedalboard, lambda r: r)", "buggy_source_code": "def restore_last_pedalboard(self):\n    (last_bank, last_pedalboard) = get_last_bank_and_pedalboard()\n    if last_bank is not None and last_pedalboard is not None:\n        self.load_bank_pedalboard(last_bank, last_pedalboard, lambda r: r)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def unitfilter(self, unit):\n    if not self.campaign:\n        return True\n    return self.campaign in unit.campaigns", "buggy_source_code": "def unitfilter(self, unit):\n    if not self.campaign:\n        return True\n    return unit.campaigns and self.campaign == unit.campaigns[0]", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def source(self):\n    repo = tools.Git(folder='includeos')\n    repo.clone('https://github.com/hioa-cs/IncludeOS.git', branch='conan')", "buggy_source_code": "def source(self):\n    repo = tools.Git(folder='includeos')\n    repo.clone('https://github.com/hioa-cs/IncludeOS.git', branch='conan')\n    shutil.copy('elf.h', 'includeos/vmbuild')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_expression(self):\n    b = self.source.get_buffer()\n    return str(b.get_text(*b.get_bounds() + [False]))", "buggy_source_code": "def get_expression(self):\n    b = self.source.get_buffer()\n    return str(b.get_text(*b.get_bounds() + (False,)))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_object(self, queryset=None):\n    return self.request.user.membre", "buggy_source_code": "def get_object(self, queryset=None):\n    return UserMembre.objects.filter(user=self.request.user).first().membre", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def send_barrier_request(self, dpid):\n    content = {'message': BarrierRequest()}\n    event_out = events.KycoMessageOutBarrierRequest(dpid, content)\n    self.add_to_msg_out_buffer(event_out)", "buggy_source_code": "def send_barrier_request(self, dpid):\n    content = {'message': BarrierRequest()}\n    event_out = events.KycoMessageOutBarrierRequest(dpid, content)\n    self.controller.buffers.msg_out.put(event_out)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def server_error(request, template_name='500.html'):\n    HttpResponse('Server Error - 500')", "buggy_source_code": "def server_error(request, template_name='500.html'):\n    response = render_to_response('500.html', {}, context_instance=RequestContext(request))\n    response.status_code = 500\n    return response", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.engine = chess.uci.popen_engine('stockfish_8')\n    self.engine.uci()", "buggy_source_code": "def __init__(self):\n    self.board = chess.Board()\n    self.engine = chess.uci.popen_engine('stockfish_8')\n    self.engine.uci()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reset(self):\n    LoggingAgent.reset(self)\n    self.module.reset()\n    self.learner.reset()", "buggy_source_code": "def reset(self):\n    LoggingAgent.reset(self)\n    self.module.reset()\n    if self.learning:\n        self.learner.reset()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_issue_trackers(self):\n    return [self._create_issue_tracker(config) for config in self.settings.get('issue_trackers', [])]", "buggy_source_code": "def get_issue_trackers(self):\n    settings = load_settings()\n    return [self._create_issue_tracker(config) for config in settings.get('issue_trackers', [])]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def md5(text):\n    hash = hashlib.md5()\n    hash.update(text)\n    return hash.hexdigest()", "buggy_source_code": "def md5(text):\n    hash = hashlib.md5()\n    hash.update(text.encode('utf-8'))\n    return hash.hexdigest()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get(self):\n    return alist", "buggy_source_code": "def get(self):\n    print(alist)\n    return {'posts': alist}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def ElementRoot(*args, **kwargs):\n    return etree.Element(*args, nsmap=NSMAP, **kwargs)", "buggy_source_code": "def ElementRoot(*args, **kwargs):\n    kwargs['nsmap'] = NSMAP\n    return etree.Element(*args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def list(self, queries):\n    path = '/api/config_templates'\n    queries = slice_dict(queries, 'search', 'order')\n    return self.server.GET(path, queries)[1]", "buggy_source_code": "def list(self, queries):\n    path = '/api/config_templates'\n    queries = slice_dict(queries, 'search', 'order', allow_none=False)\n    return self.server.GET(path, queries)[1]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def bind(self, kind, callback):\n    self.events[kind].append(callback)\n    return self", "buggy_source_code": "def bind(self, kind, callback):\n    logging.debug('BIND core: %r state: %r trigger %r: handlers %r' % (self.core, self, kind, callback))\n    self.events[kind].append(callback)\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _assert_symmetric(M, rtol=1e-05, atol=1e-08):\n    assert_allclose(M.T, M, rtol=rtol, atol=atol)", "buggy_source_code": "def _assert_symmetric(M, rtol=1e-05, atol=1e-08):\n    assert_allclose(M.T.conj(), M, rtol=rtol, atol=atol)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def build_preprint_create_payload_without_node(provider_id=None, file_id=None, attrs={}):\n    return build_preprint_create_payload(node_id=None, provider_id=provider_id, file_id=file_id, attrs=attrs)", "buggy_source_code": "def build_preprint_create_payload_without_node(provider_id=None, file_id=None, attrs=None):\n    attrs = attrs or {}\n    return build_preprint_create_payload(node_id=None, provider_id=provider_id, file_id=file_id, attrs=attrs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def set_parameter(self, name, value):\n    assert not self.is_streaming\n    self._send_command(name, value)", "buggy_source_code": "def set_parameter(self, name, value):\n    assert self.is_connected and (not self.is_streaming)\n    self._send_command(name, value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def run(self):\n    self.get_link()", "buggy_source_code": "def run(self):\n    try:\n        self.get_link()\n    except:\n        print('Vubey error:', sys.exc_info()[0])", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __pow__(self, y, z=None):\n    out = self.copy()\n    out.data **= y\n    return out", "buggy_source_code": "def __pow__(self, y, z=None):\n    out = self.copy()\n    out.data **= y\n    if out.unit is not None:\n        out.unit **= y\n    return out", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, data, name=None, **kwargs):\n    super(NDData, self).__init__(data, **kwargs)\n    self.name = name", "buggy_source_code": "def __init__(self, data, name=None, **kwargs):\n    kwargs.setdefault('unit', None)\n    super(NDData, self).__init__(data, **kwargs)\n    self.name = name", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    Exception.__init__('No supported crypto implementation was found')", "buggy_source_code": "def __init__(self):\n    Exception.__init__(self, 'No supported crypto implementation was found')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@app.route('/api/busy/download/oneshot')\ndef downloadOneShotBusy():\n    return send_file('../oneshot.conf', as_attachment=True, mimetype='text/plain')", "buggy_source_code": "@app.route('/api/busy/download/oneshot')\n@yamlerrors\ndef downloadOneShotBusy():\n    return send_file('../oneshot.conf', as_attachment=True, mimetype='text/plain')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/api/queue/add/<person>')\ndef add_line(person):\n    p = pbx()\n    p.add(person)\n    return yamlfy(currentQueue=p.queue())", "buggy_source_code": "@app.route('/api/queue/add/<person>')\n@yamlerrors\ndef add_line(person):\n    p = pbx()\n    p.add(person)\n    return yamlfy(currentQueue=p.queue())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/api/busy/download/weekly')\ndef downloadWeeklyBusy():\n    response = send_file('../indisponibilitats.conf', as_attachment=True, mimetype='text/plain')\n    print('response {}'.format(response))\n    return response", "buggy_source_code": "@app.route('/api/busy/download/weekly')\n@yamlerrors\ndef downloadWeeklyBusy():\n    response = send_file('../indisponibilitats.conf', as_attachment=True, mimetype='text/plain')\n    print('response {}'.format(response))\n    return response", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/api/persons/')\ndef personInfo():\n    result = persons.persons()\n    return yamlfy(persons=result)", "buggy_source_code": "@app.route('/api/persons/')\n@yamlerrors\ndef personInfo():\n    result = persons.persons()\n    return yamlfy(persons=result)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/api/graella/list')\ndef listGraelles():\n    return yamlfy(weeks=schedules.list())", "buggy_source_code": "@app.route('/api/graella/list')\n@yamlerrors\ndef listGraelles():\n    return yamlfy(weeks=schedules.list())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/api/queue/pause/<person>')\ndef pause_line(person):\n    p = pbx()\n    p.pause(person)\n    return yamlfy(currentQueue=p.queue())", "buggy_source_code": "@app.route('/api/queue/pause/<person>')\n@yamlerrors\ndef pause_line(person):\n    p = pbx()\n    p.pause(person)\n    return yamlfy(currentQueue=p.queue())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/api/queue/resume/<person>')\ndef resume_line(person):\n    p = pbx()\n    p.resume(person)\n    return yamlfy(currentQueue=p.queue())", "buggy_source_code": "@app.route('/api/queue/resume/<person>')\n@yamlerrors\ndef resume_line(person):\n    p = pbx()\n    p.resume(person)\n    return yamlfy(currentQueue=p.queue())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/api/queue')\ndef get_queue():\n    return yamlfy(currentQueue=pbx().queue())", "buggy_source_code": "@app.route('/api/queue')\n@yamlerrors\ndef get_queue():\n    return yamlfy(currentQueue=pbx().queue())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, message):\n    super.__init__(message)\n    self.message = message", "buggy_source_code": "def __init__(self, message):\n    super().__init__(message)\n    self.message = message", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def trim(self, max_comp=None):\n    self.version = version_trim(self.version, max_comp)\n    return self", "buggy_source_code": "def trim(self, max_comp=None):\n    self.version = version_trim(Version.normalize(self.version), max_comp)\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __cmp__(self, other):\n    return version_cmp(self.version, str(other))", "buggy_source_code": "def __cmp__(self, other):\n    return version_cmp(Version.normalize(self.version), Version.normalize(other))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def process(self, processor):\n    for file_obj in processor:\n        if self.can_process(file_obj):\n            yield from self.process_file(file_obj)", "buggy_source_code": "def process(self, processor):\n    for file_obj in processor:\n        if self.can_process(file_obj):\n            yield from self.process_file(file_obj)\n        else:\n            yield file_obj", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_form_instance(self, form_key):\n    return getattr(self, self.context_object_key, None)", "buggy_source_code": "def get_form_instance(self, form_key):\n    form_instance = self.form_instance\n    return form_instance if form_instance is not None else getattr(self, self.context_object_key, None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restart_process():\n    run('touch %s' % os.path.join(get_project_root(), env.project_name, 'wsgi.py'))", "buggy_source_code": "def restart_process():\n    run('touch %s' % os.path.join(get_project_root(), env.project_name, 'config', 'wsgi.py'))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def drop_db(self, *args, **kwargs):\n    db = self.get_db()\n    db.purge_tables()\n    os.remove", "buggy_source_code": "def drop_db(self, *args, **kwargs):\n    db = self.get_db()\n    db.purge_tables()\n    os.remove(self.file_path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parallelRegionStubEnd(self):\n    return 'exit outerParallelLoop%i\\nend do outerParallelLoop%i\\n' % (self._currKernelNumber, self._currKernelNumber)", "buggy_source_code": "def parallelRegionStubEnd(self):\n    result = 'exit outerParallelLoop%i\\nend do outerParallelLoop%i\\n' % (self._currKernelNumber, self._currKernelNumber)\n    self._currKernelNumber += 1\n    return result", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return self.phone_number", "buggy_source_code": "def __unicode__(self):\n    return '(%s) %s-%s' % (self.phone_number[0:3], self.phone_number[3:6], self.phone_number[6:10])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def strip_comments(comment_regex, text):\n    return re.sub(comment_regex, '', text)", "buggy_source_code": "def strip_comments(comment_regex, text):\n    text = re.sub(comment_regex, '', text)\n    text = text.splitlines()\n    return text", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def detail(request, question_id):\n    return HttpResponse(\"You're looking at the question %s.\" % question_id)", "buggy_source_code": "def detail(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render((request, 'polls/detail.html', {'question': question}))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def scriptParsed_parser(params):\n    return {'scriptId': ScriptId(params['scriptId']), 'url': params['url']}", "buggy_source_code": "def scriptParsed_parser(params):\n    url = stripQueryString(params['url'])\n    return {'scriptId': ScriptId(params['scriptId']), 'url': url}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@app.route('/error')\ndef fourohfour():\n    return (render_template('404.html'), 404)", "buggy_source_code": "@app.route('/error')\n@app.errorhandler(404)\ndef fourohfour():\n    return (render_template('404.html'), 404)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def print_probvector(vec, file=stdout):\n    file.write('|'.join(('%.2f' % f for f in vec)))\n    file.write('\\n')", "buggy_source_code": "def print_probvector(vec, file=stdout):\n    file.write('|'.join(('%.2f' % f for f in np.round(vec, decimals=2))))\n    file.write('\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _find_name(self, user):\n    return self.launchpad.people[user].display_name", "buggy_source_code": "def _find_name(self, user):\n    try:\n        return self.launchpad.people[user].display_name\n    except ValueError:\n        return 'None'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    del self.stats", "buggy_source_code": "def tearDown(self):\n    del self.stats\n    del self.vocab", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def versiontuple(v):\n    return tuple(map(int, v.split('.')))", "buggy_source_code": "def versiontuple(v):\n    return tuple(map(int, v.split('-')[0].split('.')))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get(self, key):\n    return self.driver.execute_async_script(\"return GaiaDataLayer.getSetting('%s')\" % key, special_powers=True)", "buggy_source_code": "def get(self, key):\n    return self.driver.execute_async_script(\"return GaiaDataLayer.getSetting('%s')\" % key.replace(\"'\", '\"'), special_powers=True)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send_mail_for_action(self, action):\n    template = self.env.ref('mgmtsystem_action.email_template_new_action_reminder')\n    template.send_mail(action.id, force_send=True)\n    return True", "buggy_source_code": "def send_mail_for_action(self, action, force_send=True):\n    template = self.env.ref('mgmtsystem_action.email_template_new_action_reminder')\n    for action in self:\n        template.send_mail(action, force_send=force_send)\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@login_required\n@no_csrf\ndef excluir(_resp, **itens):\n    _resp.write('excluir , ' + str(itens))", "buggy_source_code": "@login_required\n@no_csrf\ndef excluir(_resp, **itens):\n    _resp.write('excluir , ' + str(itens))\n    return TemplateResponse(__ctx, '/meuperfil/caixaesquerda/itens/itensmeusitens.html')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _onMagnification(self, mag):\n    ratio = self._prev_mag / mag\n    self.pixelSize._value *= ratio\n    self.pixelSize.notify(self.pixelSize._value)", "buggy_source_code": "def _onMagnification(self, mag):\n    ratio = self._prev_mag / mag\n    self._prev_mag = mag\n    self.pixelSize._value *= ratio\n    self.pixelSize.notify(self.pixelSize._value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.errorhandler(500)\ndef server_error(e):\n    return (render_template('500.html'), 500)", "buggy_source_code": "@app.errorhandler(500)\ndef server_error(e):\n    app.logger.error(e)\n    return (render_template('500.html'), 500)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_the_api(client):\n    get_user_agent(client)\n    test_users(client)\n    test_streams(client)\n    test_messages(client)\n    test_queues(client)", "buggy_source_code": "def test_the_api(client):\n    get_user_agent(client)\n    test_users(client)\n    test_streams(client)\n    test_messages(client)\n    test_queues(client)\n    test_errors(client)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def fix_open_slots(self):\n    for master in self.masters:\n        self.fix_node(master)", "buggy_source_code": "def fix_open_slots(self):\n    self.flush_all_cache()\n    for master in self.masters:\n        self.fix_node(master)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init_popit_data(self, date_string='', date=None):\n    self.resolver = ResolvePopitName(popit_url=self.popit_url, date=date, date_string=date_string)", "buggy_source_code": "def init_popit_data(self, date_string='', date=None):\n    SetupEntities(self.popit_url).init_popit_data()\n    self.resolver = ResolvePopitName(date=date, date_string=date_string)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _load_names(self, repo):\n    self.names = self.dvc.get_csv_datasets(repo)\n    self.onames = self.names", "buggy_source_code": "def _load_names(self, repo=None):\n    if repo is None:\n        repo = self.repository\n    self.names = self.dvc.get_csv_datasets(repo)\n    self.onames = self.names", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setup():\n    local('pip install bottle')\n    local('pip install psycopg2')\n    local('pip install simplekml pykml lxml')\n    local('pip install pep8')\n    local('sudo -u postgres psql -f tools/init_db.sql')\n    local('tools/setup_wsi.py')", "buggy_source_code": "def setup():\n    local('pip install bottle')\n    local('pip install psycopg2')\n    local('pip install simplekml pykml lxml')\n    local('pip install pep8')\n    local('sudo -u postgres psql -f tools/create_db.sql')\n    local('sudo -u postgres psql -f tools/init_db.sql whereshouldi')\n    local('tools/setup_wsi.py')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _update_value_mapper(self):\n    self._mapped_image_cache_valid = False\n    self._image_cache_valid = False\n    self.invalidate_draw()", "buggy_source_code": "def _update_value_mapper(self):\n    self._mapped_image_cache_valid = False\n    self._image_cache_valid = False\n    self.invalidate_draw()\n    self.request_redraw()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def terminate(self):\n    self.write_db()\n    pass", "buggy_source_code": "def terminate(self):\n    self.write_db()\n    raise Errors.CerebrumError('Not implemented yet')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_gregorian_1(self):\n    assert gregorian.to_jd(2000, 1, 1) == 2451544.5", "buggy_source_code": "def test_gregorian_1(self):\n    assert self.c == 2266295.5\n    assert gregorian.to_jd(2000, 1, 1) == 2451544.5", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_charset(self, part):\n    charset = part.get_content_charset()\n    if not charset:\n        charset = chardet.detect(cstr(part))['encoding']\n    return charset", "buggy_source_code": "def get_charset(self, part):\n    charset = part.get_content_charset()\n    if not charset:\n        charset = chardet.detect(safe_encode(cstr(part)))['encoding']\n    return charset", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def close(self):\n    self.signal_plot.close()\n    self.navigator_plot.close()", "buggy_source_code": "def close(self):\n    if self.signal_plot:\n        self.signal_plot.close()\n    if self.navigator_plot:\n        self.navigator_plot.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_nothing():\n    print('Nothing Tested')", "buggy_source_code": "def test_nothing():\n    print('Nothing Tested')\n    print(dir(DataHandling))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clean_cookie_file():\n    try:\n        os.remove(appengine_rpc.HttpRpcServer.DEFAULT_COOKIE_FILE_PATH)\n    except OSError:\n        pass", "buggy_source_code": "def clean_cookie_file():\n    cookie_file = '~/.appcfg_oauth2_tokens'\n    cookie_file = os.path.expanduser(cookie_file)\n    try:\n        os.remove(cookie_file)\n    except OSError:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def do_open(self, http_class, req):\n    return urllib2.HTTPSHandler.do_open(self, HTTPSConnection, req)", "buggy_source_code": "def do_open(self, http_class, req, *args, **kwargs):\n    return urllib2.HTTPSHandler.do_open(self, HTTPSConnection, req, *args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def patch_import(importer=require):\n    sys.modules['__builtin__'].__import__ = importer", "buggy_source_code": "def patch_import(importer=require):\n    sys.modules[BUILTINS_NAME].__import__ = importer", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def unpatch_import():\n    sys.modules['__builtin__'].__import__ = sys.modules['__original__import']", "buggy_source_code": "def unpatch_import():\n    sys.modules[BUILTINS_NAME].__import__ = sys.modules['__original__import']", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def test_calculation_Akkar_valueerror(self):\n    self.test_calculation_Akkar(avg_periods='0.05,0.15,1.0,2.0,4.012345')", "buggy_source_code": "def test_calculation_Akkar_valueerror(self):\n    try:\n        self.test_calculation_Akkar(avg_periods='0.05,0.15,1.0,2.0,4.012345')\n    except ValueError:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def set_port():\n    console.insert(END, port.get() + ' is now the port you are connecting to.\\n')", "buggy_source_code": "def set_port():\n    try:\n        console.insert(END, port.get() + ' is now the port you are connecting to.\\n')\n    except Exception:\n        console.insert(END, 'Error trying to set the port value.\\nRemember that the port should be 5 digits.\\nEXAMPLE: 12345\\nTry again.\\n')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def quit_game():\n    if tkMessageBox.askyesno('Quit Game', 'Are you sure you want to quit?'):\n        main.quit()", "buggy_source_code": "def quit_game():\n    try:\n        if tkMessageBox.askyesno('Quit Game', 'Are you sure you want to quit?'):\n            main.quit()\n    except Exception:\n        console.insert(END, 'Unknown error thrown in quit_game.\\n')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_ip_address():\n    console.insert(END, ip_address.get() + ' is now the address you are connecting to.\\n')", "buggy_source_code": "def set_ip_address():\n    try:\n        console.insert(END, ip_address.get() + ' is now the address you are connecting to.\\n')\n    except Exception:\n        console.insert(END, \"Error trying to set the ip address.\\nCheck your values.\\nAn IP address should consist of 4 groups of digits.\\nEXAMPLE: 000.000.000.000\\nNOTE: they aren't necessarily groups of 3.\\n\")", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def verify_registration():\n    client.verify_connection()\n    console.insert(END, 'Verifying that you are registered...\\n')", "buggy_source_code": "def verify_registration():\n    console.insert(END, 'Verifying that you are registered...\\n')\n    try:\n        client.verify_connection()\n    except Exception:\n        console.insert(END, 'Error trying to verify registration.\\n' + network_error_message)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def verify_connection():\n    client.verify_connection()\n    console.insert(END, 'Verifying that you are connected...\\n')", "buggy_source_code": "def verify_connection():\n    console.insert(END, 'Verifying that you are connected...\\n')\n    try:\n        client.verify_connection()\n    except Exception:\n        console.insert(END, 'Error verifying connection.\\n' + network_error_message)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def submit_move():\n    client.submit_move()\n    console.insert(END, 'Submit' + '\\n')", "buggy_source_code": "def submit_move():\n    try:\n        client.submit_move()\n        console.insert(END, 'Submit' + '\\n')\n    except Exception:\n        console.insert(END, 'Error trying to submit the move.\\n' + network_error_message)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def register():\n    client.register_player()\n    console.insert(END, 'Attempting to register...\\n')", "buggy_source_code": "def register():\n    console.insert(END, 'Attempting to register...\\n')\n    try:\n        client.register_player()\n    except Exception:\n        console.insert(END, 'Error trying to register to tournament.\\n' + network_error_message)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def If(self, *args):\n    return self._do_op('If', args)", "buggy_source_code": "def If(self, *args):\n    if len(args) != 3:\n        raise ClaripyOperationError('invalid number of args passed to If')\n    return self._do_op('If', args)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse(self, value):\n    try:\n        return int(value)\n    except:\n        raise ParserError('Expected a single integer.')", "buggy_source_code": "def parse(self, value):\n    try:\n        return int(value)\n    except:\n        raise ParserError(str(self.name) + ' expected a single integer.')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse(self, value):\n    try:\n        return float(value)\n    except:\n        raise ParserError('Expected a float.')", "buggy_source_code": "def parse(self, value):\n    try:\n        return float(value)\n    except:\n        raise ParserError(str(self.name) + ' expected a float.')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tea_break():\n    print('\\n* waiting a while')\n    time.sleep(DQCCconfig.sleep_interval)", "buggy_source_code": "def tea_break():\n    print(colored('\\nSleeping for ' + str(DQCCconfig.sleep_interval) + ' seconds.\\n', 'yellow', attrs=['reverse']))\n    time.sleep(DQCCconfig.sleep_interval)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef save(user):\n    flask_db.db[User.collection_name].save(user)", "buggy_source_code": "@staticmethod\ndef save(user):\n    user_to_save = copy.deepcopy(user)\n    flask_db.db[User.collection_name].save(user_to_save)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def env_get_basename(self, buf):\n    uri = buf.get_uri()\n    if uri:\n        return os.path.basename(uri)\n    else:\n        return ''", "buggy_source_code": "def env_get_basename(self, buf):\n    uri = buf.get_uri()\n    if uri:\n        return os.path.basename(buf.get_uri_for_display())\n    else:\n        return ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node"]}
{"fixed_source_code": "def send_post(submission, r2t):\n    return r2t.send_simple(submission)", "buggy_source_code": "def send_post(submission, r2t):\n    return r2t.send_simple(submission, gif='{title}\\n\\n{self_text}', img='{title}\\n\\n{self_text}', album=False, text=False, other=False)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def createOutputModel(self, controller: PrinterOutputController) -> PrinterOutputModel:\n    model = PrinterOutputModel(controller, 2, firmware_version=self.firmware_version)\n    self.updateOutputModel(model)\n    return model", "buggy_source_code": "def createOutputModel(self, controller: PrinterOutputController) -> PrinterOutputModel:\n    model = PrinterOutputModel(controller, len(self.configuration), firmware_version=self.firmware_version)\n    self.updateOutputModel(model)\n    return model", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@pyqtSlot()\ndef on_dialog_finished(self):\n    self.sender().graphicsViewSineWave.eliminate()", "buggy_source_code": "@pyqtSlot()\ndef on_dialog_finished(self):\n    self.sender().graphicsViewSineWave.eliminate()\n    self.__dialog_ui = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_form_defs(self):\n    yield TemplatedFormDef('base', CompanyContactBaseForm, template_name='shuup/admin/contacts/_edit_base_form.jinja', required=True, kwargs={'instance': self.object if self.object.pk else None})", "buggy_source_code": "def get_form_defs(self):\n    yield TemplatedFormDef('base', CompanyContactBaseForm, template_name='shuup/admin/contacts/_edit_base_form.jinja', required=True, kwargs={'instance': self.object if self.object.pk else None, 'request': self.request})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def appendShaders(menuDefinition, prefix='/RenderMan/Shader', matchExpression=re.compile('.*')):\n    menuDefinition.append(prefix, {'subMenu': __shaderSubMenu})", "buggy_source_code": "def appendShaders(menuDefinition, prefix='/RenderMan/Shader', matchExpression=re.compile('.*')):\n    menuDefinition.append(prefix, {'subMenu': IECore.curry(__shaderSubMenu, matchExpression)})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return u''", "buggy_source_code": "def __unicode__(self):\n    if PY3:\n        return str('')\n    else:\n        return unicode('')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def outputs(self):\n    return self._board_width", "buggy_source_code": "def outputs(self):\n    return self._board_width * self._board_height", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def save(self):\n    with open(self.configFile, 'w') as cfp:\n        self.write(cfp)", "buggy_source_code": "def save(self):\n    with open(self.configFile, 'w', encoding='utf-8') as cfp:\n        self.write(cfp)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_logger(name):\n    logger = logging.getLogger(name)\n    logger.setLevel(LOG_LEVEL)\n    return logger", "buggy_source_code": "def get_logger(name):\n    colored_name = '\\x1b[1;90m%s\\x1b[1;0m' % name\n    logger = logging.getLogger(colored_name)\n    logger.setLevel(LOG_LEVEL)\n    return logger", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def onTool(self, tool):\n    name = tool.name\n    if name == 'create_entity':\n        self.createEntity()", "buggy_source_code": "def onTool(self, tool):\n    name = tool.name\n    if name == 'create_entity':\n        self.createEntity()\n    elif name == 'remove_entity':\n        self.doCommand('main_editor/remove_entity')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_special_defense(self, s):\n    self.specials_defense = s", "buggy_source_code": "def add_special_defense(self, s):\n    if self.specials_defense != s:\n        self.specials_defense = s", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_special_attack(self, s):\n    self.specials_attack = s", "buggy_source_code": "def add_special_attack(self, s):\n    if self.specials_attack != s:\n        self.specials_attack = s", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, edit):\n    self.settings = sublime.load_settings('ScriptTestTool.sublime-settings')\n    script = self.get_raw_script()\n    self.execute_script(script)", "buggy_source_code": "def run(self, edit):\n    self.settings = sublime.load_settings('ScriptTestTool.sublime-settings')\n    script = self.get_raw_script()\n    sublime.set_timeout_async(lambda : self.execute_script(script), 0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef data(self):\n    attrs = ('column_name', 'verbose_name', 'description', 'expression')\n    return {s: getattr(self, s) for s in attrs}", "buggy_source_code": "@property\ndef data(self):\n    attrs = ('column_name', 'verbose_name', 'description', 'expression', 'filterable', 'groupby')\n    return {s: getattr(self, s) for s in attrs}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def hasmeta(self, meta_name):\n    if meta_name == 'read_only':\n        return True\n    return self.wrapped_fs(meta_name)", "buggy_source_code": "def hasmeta(self, meta_name):\n    if meta_name == 'read_only':\n        return True\n    return self.wrapped_fs.hasmeta(meta_name)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def getmeta(self, meta_name, default=NoDefaultMeta):\n    if meta_name == 'read_only':\n        return True\n    return self.wrapped_fs(meta_name, default)", "buggy_source_code": "def getmeta(self, meta_name, default=NoDefaultMeta):\n    if meta_name == 'read_only':\n        return True\n    return self.wrapped_fs.getmeta(meta_name, default)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, G, Nf, **kwargs):\n    super(WarpedTranslates, self).__init__(G, **kwargs)\n    raise NotImplementedError", "buggy_source_code": "def __init__(self, G, Nf=6, **kwargs):\n    super(WarpedTranslates, self).__init__(G, **kwargs)\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_insert_adds_keys_add_end(empty_trie):\n    empty_trie.insert('hello')\n    assert '$' in empty_trie._nodes.values()", "buggy_source_code": "def test_insert_adds_keys_add_end(empty_trie):\n    empty_trie.insert('hello')\n    passed = True\n    for val in empty_trie._nodes.values():\n        if val == '$':\n            passed = False\n    assert passed", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef form_contains_errors(self):\n    return self.get_form(self.get_form_class()).is_valid()", "buggy_source_code": "@property\ndef form_contains_errors(self):\n    if not hasattr(self, '_form_contains_errors'):\n        self._form_contains_errors = self.get_form(self.get_form_class()).is_valid()\n    self._form_contains_errors", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_queue_limit(self):\n    return self.get('cluster', 'queue_limit')", "buggy_source_code": "def get_queue_limit(self):\n    return int(self.get('cluster', 'queue_limit'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_max_age(self):\n    return self.get('cluster', 'max_age')", "buggy_source_code": "def get_max_age(self):\n    return int(self.get('cluster', 'max_age'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def IsHeaderFile(filename):\n    extension = os.path.splitext(filename)[1]\n    return extension in ['.h', '.hxx', '.hpp', '.hh']", "buggy_source_code": "def IsHeaderFile(filename):\n    extension = os.path.splitext(filename)[1]\n    return extension in ['.h', '.hxx', '.hpp', '.hh', '.inl']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def read_keypair(keypairfilename):\n    return EC.load_key(keypairfilename)", "buggy_source_code": "def read_keypair(keypairfilename):\n    membuf = BIO.MemoryBuffer(open(keypairfilename, 'rb').read())\n    key = EC.load_key_bio(membuf)\n    membuf.close()\n    return key", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@bp.route('/<object_id>', methods=['DELETE'])\ndef delete_object(object_id):\n    msg = 'objects of type %s can not be deleted' % object_type\n    return generic.http_badrequest(msg)", "buggy_source_code": "@bp.route('/<object_id>', methods=['DELETE'])\ndef delete_object(object_id):\n    msg = 'objects of type %s can not be deleted' % object_type\n    return generic.http_badrequest(msg=msg)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def analyse_text(text):\n    return re.match('^\\\\s*\\\\parameters\\\\s*\\\\{', text)", "buggy_source_code": "def analyse_text(text):\n    if re.search('^\\\\s*parameters\\\\s*\\\\{', text, re.M):\n        return 1.0\n    else:\n        return 0.0", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def Eg(T):\n    return self.Eg0 - self.Eg_alpha * T ** 2 / (T + self.Eg_betta)", "buggy_source_code": "def Eg(self, T):\n    return self.Eg0 - self.Eg_alpha * T ** 2 / (T + self.Eg_betta)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _span(r):\n    return abs(r.end - r.start)", "buggy_source_code": "def _span(r):\n    end = r.end if r.end != None else 0\n    start = r.start if r.start != None else 0\n    return abs(end - start)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef path_trails(cls, path):\n    return cls.objects.existing().filter(aggregations__path=path)", "buggy_source_code": "@classmethod\ndef path_trails(cls, path):\n    trails = cls.objects.existing().filter(aggregations__path=path)\n    return trails.order_by('topo_object').distinct('topo_object')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def discover_devices(self):\n    return Roku.discover()", "buggy_source_code": "def discover_devices(self):\n    for _ in range(3):\n        obj = Roku.discover()\n        if obj:\n            return obj\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def clear(self):\n    if not self.printed:\n        return\n    self._writeprogress('\\r%s\\r' % (' ' * self.width()))", "buggy_source_code": "def clear(self):\n    if not self.printed:\n        return\n    self._writeprogress('\\r%s\\r' % (' ' * self.width()))\n    self._bar._ui.ferr.flush()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def znorm_dec(fn):\n\n    def znorm_fn(self, X, Y):\n        (X, normalize) = znorm(X)\n        return fn(self, X, Y)\n    return znorm_fn", "buggy_source_code": "def znorm_dec(fn):\n\n    def znorm_fn(self, X, Y):\n        (X, normalize) = znorm(X)\n        return fn(self, X, Y, normalize)\n    return znorm_fn", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, text, messages=1):\n    self.text = text\n    self.send_messages = messages\n    pass", "buggy_source_code": "def __init__(self, text, messages=1, raise_error=False):\n    self.text = text\n    self.send_messages = messages\n    self.raise_error = raise_error\n    self.token = 'TOKEN'\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getaddrinfo(*args, **kw):\n    pass", "buggy_source_code": "def getaddrinfo(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def gethostbyaddr(*args, **kw):\n    pass", "buggy_source_code": "def gethostbyaddr(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getdefaulttimeout(*args, **kw):\n    pass", "buggy_source_code": "def getdefaulttimeout(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getnameinfo(*args, **kw):\n    pass", "buggy_source_code": "def getnameinfo(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def gethostbyname(*args, **kw):\n    pass", "buggy_source_code": "def gethostbyname(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def bind(self, *args, **kw):\n    pass", "buggy_source_code": "def bind(self, *args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def gethostname(*args, **kw):\n    pass", "buggy_source_code": "def gethostname(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getservbyname(*args, **kw):\n    pass", "buggy_source_code": "def getservbyname(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def htons(*args, **kw):\n    pass", "buggy_source_code": "def htons(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def inet_ntoa(*args, **kw):\n    pass", "buggy_source_code": "def inet_ntoa(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def inet_aton(*args, **kw):\n    pass", "buggy_source_code": "def inet_aton(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getservbyport(*args, **kw):\n    pass", "buggy_source_code": "def getservbyport(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def gethostbyname_ex(*args, **kw):\n    pass", "buggy_source_code": "def gethostbyname_ex(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setdefaulttimeout(*args, **kw):\n    pass", "buggy_source_code": "def setdefaulttimeout(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def htonl(*args, **kw):\n    pass", "buggy_source_code": "def htonl(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    pass", "buggy_source_code": "def close(self):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ntohl(*args, **kw):\n    pass", "buggy_source_code": "def ntohl(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getprotobyname(*args, **kw):\n    pass", "buggy_source_code": "def getprotobyname(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ntohs(*args, **kw):\n    pass", "buggy_source_code": "def ntohs(*args, **kw):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_feature_names(self):\n    if self._labels:\n        return self._labels\n    else:\n        listify(self._task)", "buggy_source_code": "def get_feature_names(self):\n    if self._labels:\n        return self._labels\n    else:\n        return listify(self._task)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _get_params(self, **kwargs):\n    return dict(((k, v) for (k, v) in kwargs.items() if v))", "buggy_source_code": "def _get_params(self, **kwargs):\n    return dict(((k, v) for (k, v) in kwargs.items() if v is not None))", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_syntax_error(self, e):\n    return '```py\\n{0.text}{1:>{0.offset}}\\n{2}: {0}```'.format(e, '^', type(e).__name__)", "buggy_source_code": "def get_syntax_error(self, e):\n    if e.text is None:\n        return '```py\\n{0.__class__.__name__}: {0}\\n```'.format(e)\n    return '```py\\n{0.text}{1:>{0.offset}}\\n{2}: {0}```'.format(e, '^', type(e).__name__)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, bot: DiscordBot):\n    self.bot = bot\n    self.sessions = set()", "buggy_source_code": "def __init__(self, bot: DiscordBot):\n    self.bot = bot\n    self._last_result = None\n    self.sessions = set()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse_buffer(self):\n    (frame, buffer_in) = amqp_spec.decode_frame(self.buffer_in)\n    print(frame)\n    self.buffer_in = buffer_in\n    return frame", "buggy_source_code": "def parse_buffer(self):\n    (frame, buffer_in) = amqp_spec.decode_frame(self.buffer_in)\n    print('IN: ' + str(frame))\n    self.buffer_in = buffer_in\n    return frame", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def write(self, value):\n    print(value)\n    self.output_buffer = value.encoded\n    IOLoop.current().modify_to_write()", "buggy_source_code": "def write(self, value):\n    print('OUT:' + str(value))\n    self.output_buffer += value.encoded\n    IOLoop.current().modify_to_write()", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def help_compare(op, x, ys):\n    return ast.Compare(help_expr(x), op(), [help_expr(y) for y in ys])", "buggy_source_code": "def help_compare(op, x, ys):\n    return ast.Compare(help_expr(x), [op()] * len(ys), [help_expr(y) for y in ys])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _allowed_methods(self):\n    allowed = ['HEAD', 'OPTIONS', 'PROPFIND', 'LOCK', 'UNLOCK', 'GET', 'DELETE', 'PROPPATCH', 'COPY', 'MOVE', 'PUT']\n    return allowed", "buggy_source_code": "def _allowed_methods(self):\n    allowed = ['HEAD', 'OPTIONS', 'PROPFIND', 'LOCK', 'UNLOCK', 'GET', 'DELETE', 'PROPPATCH', 'COPY', 'MOVE', 'PUT', 'MKCOL']\n    return allowed", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def main():\n    df = pd.read_pickle(FLAGS.pickle_file)\n    transformed_df = transform_vectors_with_inter_class_pca(df, class_column='category', n_components=200)", "buggy_source_code": "def main():\n    df = pd.read_pickle(FLAGS.pickle_file)\n    transformed_df = transform_vectors_with_inter_class_pca(df, class_column='category', n_components=200)\n    similarity_matrix(transformed_df, 'category')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, relay_name, utility_name, avg_consumption):\n    self.UTILITY_NAME = utility_name\n    Relaydevice.__init__(self, relay_name, avg_consumption)", "buggy_source_code": "def __init__(self, relay_name, utility_name, avg_consumption):\n    self.UTILITY_NAME = utility_name\n    self.watts = 0\n    Relaydevice.__init__(self, relay_name, avg_consumption)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_temperature(self):\n    if not self.is_smart_supported():\n        return 'NaN'\n    return self.device.get_temperature()", "buggy_source_code": "def get_temperature(self):\n    if not self.is_smart_supported():\n        return 'NaN'\n    try:\n        return self.device.get_temperature()\n    except OSError:\n        return 'NaN'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_db():\n    return Database(settings.COUCH_DATABASE)", "buggy_source_code": "def get_db(postfix=None):\n    db_url = settings.COUCH_DATABASE\n    if postfix:\n        db_url = '%s__%s' % (db_url, postfix)\n    return Database(db_url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return u'<{0.__class__.__name__} {0.name}>'.format(self)", "buggy_source_code": "def __unicode__(self):\n    return u'<{class_name} {name}>'.format(class_name=self.__class__.__name__, name=self.name)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def remove(self, module):\n    self._loaded_modules.pop(module, None)\n    self._cache.pop(module, None)", "buggy_source_code": "def remove(self, module):\n    self.check_exists(module)\n    self._loaded_modules.pop(module, None)\n    self._cache.pop(module, None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.geocoder = OpenMapQuest(timeout=3)\n    self.delta_exact = 0.04\n    self.delta_placename = 0.04", "buggy_source_code": "def setUp(self):\n    self.geocoder = OpenMapQuest(scheme='http', timeout=3)\n    self.delta_exact = 0.04\n    self.delta_placename = 0.04", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.geocoder = MapQuest(env['MAPQUEST_KEY'], timeout=3)\n    self.delta_placename = 0.04", "buggy_source_code": "def setUp(self):\n    self.geocoder = MapQuest(env['MAPQUEST_KEY'], scheme='http', timeout=3)\n    self.delta_placename = 0.04", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.geocoder = LiveAddress(auth_token=env['LIVESTREETS_AUTH_KEY'])\n    self.delta_placename = 0.04", "buggy_source_code": "def setUp(self):\n    self.geocoder = LiveAddress(auth_token=env['LIVESTREETS_AUTH_KEY'], scheme='http')\n    self.delta_placename = 0.04", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.geocoder = Bing(format_string='%s', api_key=env['BING_KEY'])", "buggy_source_code": "def setUp(self):\n    self.geocoder = Bing(format_string='%s', scheme='http', api_key=env['BING_KEY'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.geocoder = GoogleV3()", "buggy_source_code": "def setUp(self):\n    self.geocoder = GoogleV3(scheme='http')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_doc_url(self):\n    if self.doc_url is None:\n        return None\n    u = self.open_url(self.doc_url)\n    self.doc_url = None\n    return u", "buggy_source_code": "def get_doc_url(self):\n    logger.debug('get_doc_url')\n    if self.doc_url is None:\n        return None\n    u = self.open_url(self.doc_url)\n    self.doc_url = None\n    return u", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def authenticate_app(self):\n    return self.flow.step1_get_authorize_url()", "buggy_source_code": "def authenticate_app(self):\n    logger.debug('OAuthHandler.authenticate_app')\n    return self.flow.step1_get_authorize_url()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def print_error(msg, back=False, flush=True, end='\\n'):\n    return _print_prio(msg, darkred, back=back, flush=flush, end=end)", "buggy_source_code": "def print_error(msg, back=False, flush=True, end='\\n'):\n    return _print_prio(msg, darkred, back=back, flush=flush, end=end, stderr=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def print_warning(msg, back=False, flush=True, end='\\n'):\n    return _print_prio(msg, brown, back=back, flush=flush, end=end)", "buggy_source_code": "def print_warning(msg, back=False, flush=True, end='\\n'):\n    return _print_prio(msg, brown, back=back, flush=flush, end=end, stderr=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def serve(self):\n    os.chdir(self.logya.dir_dst)\n    print('Serving on http://%s:%s/' % (self.host, self.port))\n    self.serve_forever()", "buggy_source_code": "def serve(self):\n    os.chdir(self.logya.dir_dst)\n    print('Serving on http://%s:%s/' % (self.logya.host, self.logya.port))\n    self.serve_forever()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_full_path(self):\n    return '%s%s' % (self.path, self.environ.get('QUERY_STRING', '') and '?' + self.environ.get('QUERY_STRING', '') or '')", "buggy_source_code": "def get_full_path(self):\n    return '%s%s' % (self.path, self.environ.get('QUERY_STRING', '') and '?' + iri_to_uri(self.environ.get('QUERY_STRING', '')) or '')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def mock_create_customer(*args: Any, **kwargs: Any) -> ListObject:\n    return util.convert_to_stripe_object(fixture_data['create_customer'])", "buggy_source_code": "def mock_create_customer(*args: Any, **kwargs: Any) -> ListObject:\n    return stripe.util.convert_to_stripe_object(fixture_data['create_customer'])", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def mock_list_sources(*args: Any, **kwargs: Any) -> ListObject:\n    return util.convert_to_stripe_object(fixture_data['list_sources'])", "buggy_source_code": "def mock_list_sources(*args: Any, **kwargs: Any) -> ListObject:\n    return stripe.util.convert_to_stripe_object(fixture_data['list_sources'])", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def mock_retrieve_customer(*args: Any, **kwargs: Any) -> ListObject:\n    return util.convert_to_stripe_object(fixture_data['retrieve_customer'])", "buggy_source_code": "def mock_retrieve_customer(*args: Any, **kwargs: Any) -> ListObject:\n    return stripe.util.convert_to_stripe_object(fixture_data['retrieve_customer'])", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, autoStart=True, prefixSigil=True):\n    self.prefixSigil = prefixSigil\n    self.old = None\n    if autoStart:\n        self.start()", "buggy_source_code": "def __init__(self, autoStart=True, prefixSigil=False):\n    self.prefixSigil = prefixSigil\n    self.old = None\n    if autoStart:\n        self.start()", "edit_actions": []}
{"fixed_source_code": "def __init__(self, base_file_path, data_folder_path):\n    super(CEARad, self).__init__(base_file_path, data_folder_path)", "buggy_source_code": "def __init__(self, base_file_path, data_folder_path, debug=False):\n    super(CEARad, self).__init__(base_file_path, data_folder_path)\n    self.debug = debug", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '{:.2f}'.format(self.value)", "buggy_source_code": "def __repr__(self):\n    output = ''\n    output += '{:.2f}'.format(self.value)\n    return output", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def search(term):\n    os.system('firefox -search ' + term)", "buggy_source_code": "def search(term):\n    os.system('nohup firefox --search ' + term + ' </dev/null &>/dev/null &')", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __new__(cls, value, multi=None):\n    return str.__new__(cls, value)", "buggy_source_code": "def __new__(cls, value, multi=None, in_dict=True):\n    return str.__new__(cls, value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, app):\n    default.Script.__init__(self, app)", "buggy_source_code": "def __init__(self, app):\n    default.Script.__init__(self, app)\n    self._loadingDocumentContent = False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture\ndef rows():\n    return random.randint(1, 10)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef rows():\n    return random.randint(1, 10)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture\ndef columns():\n    return random.randint(1, 10)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef columns():\n    return random.randint(1, 10)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def left(self):\n    t = Tree(None)\n    t.ptr = conf.lib.Tree_left_subtree(self)\n    return t", "buggy_source_code": "def left(self):\n    t = Tree(owner=False)\n    return conf.lib.Tree_left_subtree(self)\n    if t.ptr.value == 0:\n        return None\n    return t", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __del__(self):\n    conf.lib.Tree_dispose(self)", "buggy_source_code": "def __del__(self):\n    if self.owner:\n        conf.lib.Tree_dispose(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, n=None):\n    if not n:\n        return\n    self.ptr = conf.lib.Tree_create(n)", "buggy_source_code": "def __init__(self, n=0, owner=True):\n    self.owner = owner\n    if not owner:\n        return\n    self.ptr = conf.lib.Tree_create(n)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def right(self):\n    t = Tree(None)\n    t.ptr = conf.lib.Tree_right_subtree(self)\n    return t", "buggy_source_code": "def right(self):\n    t = Tree(owner=False)\n    return conf.lib.Tree_right_subtree(self)\n    if t.ptr.value == 0:\n        return None\n    return t", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_vector_size(self, vector_name):\n    count = 0\n    for name in self.nodes:\n        if name == vector_name:\n            count += 1\n    return count", "buggy_source_code": "def get_vector_size(self, vector_name):\n    count = 0\n    for name in self.nodes:\n        if name.split('[')[0] == vector_name:\n            count += 1\n    return count", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef raw(self):\n    return self._part", "buggy_source_code": "@property\ndef raw(self):\n    return self.__class__.ENCODE(self.value)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef ext(self):\n    return None", "buggy_source_code": "@property\ndef ext(self):\n    return self._ext", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_package(package_name, package_path='templates', encoding='utf-8'):\n    _jload.add_loader(PackageLoader(package_name, package_path, encoding))", "buggy_source_code": "def add_package(package_name, package_path='templates', encoding='utf-8'):\n    if not _has_jinja:\n        raise RuntimeError(_except_text)\n    _jload.add_loader(PackageLoader(package_name, package_path, encoding))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_path(searchpath, encoding='utf-8', followlinks=False):\n    _jload.add_loader(FileSystemLoader(searchpath, encoding, followlinks))", "buggy_source_code": "def add_path(searchpath, encoding='utf-8', followlinks=False):\n    if not _has_jinja:\n        raise RuntimeError(_except_text)\n    _jload.add_loader(FileSystemLoader(searchpath, encoding, followlinks))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def start_service(service):\n    subprocess.check_call(['sudo', 'service', service, 'start'])", "buggy_source_code": "def start_service(service):\n    subprocess.check_call(['sudo', 'svc', '-u', '/etc/service/' + service])", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, pck_filename, tab_filename, colour_palette, index=-1):\n    self.process_file(pck_filename, tab_filename, colour_palette, index)", "buggy_source_code": "def __init__(self, pck_filename, tab_filename, colour_palette, index=-1):\n    self.images = []\n    self.process_file(pck_filename, tab_filename, colour_palette, index)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def write(self, s):\n    self.tmpfp.write(s)\n    self.offset = self.fpsize + self.tmpfp.tell()", "buggy_source_code": "def write(self, s):\n    self.tmpfp.seek(0, 2)\n    self.tmpfp.write(s)\n    self.offset = self.fpsize + self.tmpfp.tell()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def deinit():\n    global spidev_fd\n    posix.close(spidev_fd)", "buggy_source_code": "def deinit():\n    global spidev_fd\n    posix.close(spidev_fd)\n    spidev_fd = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def find_vertex(g, deg, match):\n    ret = libgraph_tool_util.find_vertex_range(g._Graph__graph, _degree(deg), (match, match))\n    return ret", "buggy_source_code": "def find_vertex(g, deg, match):\n    ret = libgraph_tool_util.find_vertex_range(g._Graph__graph, _degree(g, deg), (match, match))\n    return ret", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, remote_exc_type, remote_exc_args, *args):\n    super(InternalCapturedServerCommunicationError, self).__init__(*args)\n    self.remote_exc_type = remote_exc_type\n    self.remote_exc_args = remote_exc_args", "buggy_source_code": "def __init__(self, remote_exc_type, remote_exc_args, *args):\n    super(InternalCapturedServerCommunicationError, self).__init__(remote_exc_type, remote_exc_args, *args)\n    self.remote_exc_type = remote_exc_type\n    self.remote_exc_args = remote_exc_args", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def Check_JSON(j):\n    d = json.loads(j, strict=True)\n    assert len(d) > 0\n    assert 'error' not in d\n    return d", "buggy_source_code": "def Check_JSON(j):\n    d = json.loads(j, strict=True)\n    logger.debug('got json %s' % d)\n    assert len(d) > 0\n    assert 'error' not in d\n    return d", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def avatar(user, size=100):\n    url = '{0}/u/{1}/avatar'.format(conf['sso_url'], user.name)\n    return '<img src=\"{0}\" class=\"gravatar\" width=\"{1}\" height=\"{1}\" />'.format(url, size)", "buggy_source_code": "def avatar(user, size=100):\n    url = '{0}/u/{1}/avatar'.format(conf['sso_url'], user.name)\n    return Markup('<img src=\"{0}\" class=\"gravatar\" width=\"{1}\" height=\"{1}\" />'.format(url, size))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, node, msg):\n    self.node = node\n    self.msg = msg", "buggy_source_code": "def __init__(self, node, msg):\n    Exception.__init__(self, msg)\n    self.node = node\n    self.msg = msg", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _callback(self, in_data, frame_count, time_info, status_flags):\n    return (self.ring.consume(), paContinue)", "buggy_source_code": "def _callback(self, in_data, frame_count, time_info, status_flags):\n    self.ring.consume(self.port)\n    return (self.port, paContinue)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def askLastTransaction(self, conn):\n    assert self.app.backup_tid is not None\n    backup_tid = self.app.pt.getBackupTid()\n    conn.answer(Packets.AnswerLastTransaction(backup_tid))", "buggy_source_code": "def askLastTransaction(self, conn):\n    assert self.app.backup_tid is not None\n    backup_tid = self.app.pt.getBackupTid(min)\n    conn.answer(Packets.AnswerLastTransaction(backup_tid))", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, cache, artifact):\n    cliapp.AppException.__init__(self, 'Failed to get the artifact %s from the artifact cache %s' % (artifact, cache))", "buggy_source_code": "def __init__(self, cache, artifact):\n    cliapp.AppException.__init__(self, 'Failed to get the artifact %s with cache key %s from the artifact cache %s' % (artifact, artifact.cache_key, cache))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, artist_name, api_key, api_secret, session_key):\n    _Search.__init__(self, 'artist', {'artist': artist_name}, api_key, api_secret, session_key)", "buggy_source_code": "def __init__(self, artist_name, api_key, api_secret, session_key=''):\n    _Search.__init__(self, 'artist', {'artist': artist_name}, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def search_for_artist(artist_name, api_key, api_secret, session_key):\n    return ArtistSearch(artist_name, api_key, api_secret, session_key)", "buggy_source_code": "def search_for_artist(artist_name, api_key, api_secret, session_key=''):\n    return ArtistSearch(artist_name, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_authenticated_user(api_key, api_secret, session_key):\n    return AuthenticatedUser(api_key, api_secret, session_key)", "buggy_source_code": "def get_authenticated_user(api_key, api_secret, session_key=''):\n    return AuthenticatedUser(api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def search_for_track(artist_name, track_name, api_key, api_secret, session_key):\n    return TrackSearch(artist_name, track_name, api_key, api_secret, session_key)", "buggy_source_code": "def search_for_track(artist_name, track_name, api_key, api_secret, session_key=''):\n    return TrackSearch(artist_name, track_name, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, id, api_key, api_secret, session_key):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.id = _number(id)", "buggy_source_code": "def __init__(self, id, api_key, api_secret, session_key=''):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.id = _number(id)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, api_key, api_secret, session_key):\n    User.__init__(self, '', api_key, api_secret, session_key)", "buggy_source_code": "def __init__(self, api_key, api_secret, session_key=''):\n    User.__init__(self, '', api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, uri, api_key, api_secret, session_key):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.uri = uri", "buggy_source_code": "def __init__(self, uri, api_key, api_secret, session_key=''):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.uri = uri", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, venue_name, country_name, api_key, api_secret, session_key):\n    _Search.__init__(self, 'venue', {'venue': venue_name, 'country': country_name}, api_key, api_secret, session_key)", "buggy_source_code": "def __init__(self, venue_name, country_name, api_key, api_secret, session_key=''):\n    _Search.__init__(self, 'venue', {'venue': venue_name, 'country': country_name}, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, album_name, api_key, api_secret, session_key):\n    _Search.__init__(self, 'album', {'album': album_name}, api_key, api_secret, session_key)", "buggy_source_code": "def __init__(self, album_name, api_key, api_secret, session_key=''):\n    _Search.__init__(self, 'album', {'album': album_name}, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, event_id, api_key, api_secret, session_key):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.id = unicode(event_id)", "buggy_source_code": "def __init__(self, event_id, api_key, api_secret, session_key=''):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.id = unicode(event_id)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, tag_name, api_key, api_secret, session_key):\n    _Search.__init__(self, 'tag', {'tag': tag_name}, api_key, api_secret, session_key)", "buggy_source_code": "def __init__(self, tag_name, api_key, api_secret, session_key=''):\n    _Search.__init__(self, 'tag', {'tag': tag_name}, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, api_key, api_secret, session_key):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    _Taggable.__init__(self, 'artist')\n    self.name = name", "buggy_source_code": "def __init__(self, name, api_key, api_secret, session_key=''):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    _Taggable.__init__(self, 'artist')\n    self.name = name", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def search_for_album(album_name, api_key, api_secret, session_key):\n    return AlbumSearch(album_name, api_key, api_secret, session_key)", "buggy_source_code": "def search_for_album(album_name, api_key, api_secret, session_key=''):\n    return AlbumSearch(album_name, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def search_for_venue(venue_name, country_name, api_key, api_secret, session_key):\n    return VenueSearch(venue_name, country_name, api_key, api_secret, session_key)", "buggy_source_code": "def search_for_venue(venue_name, country_name, api_key, api_secret, session_key=''):\n    return VenueSearch(venue_name, country_name, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, api_key, api_secret, session_key):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.name = name", "buggy_source_code": "def __init__(self, name, api_key, api_secret, session_key=''):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.name = name", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def search_for_tag(tag_name, api_key, api_secret, session_key):\n    return TagSearch(tag_name, api_key, api_secret, session_key)", "buggy_source_code": "def search_for_tag(tag_name, api_key, api_secret, session_key=''):\n    return TagSearch(tag_name, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, group_name, api_key, api_secret, session_key):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.name = group_name", "buggy_source_code": "def __init__(self, group_name, api_key, api_secret, session_key=''):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.name = group_name", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, artist_name, track_title, api_key, api_secret, session_key):\n    _Search.__init__(self, 'track', {'track': track_title, 'artist': artist_name}, api_key, api_secret, session_key)", "buggy_source_code": "def __init__(self, artist_name, track_title, api_key, api_secret, session_key=''):\n    _Search.__init__(self, 'track', {'track': track_title, 'artist': artist_name}, api_key, api_secret, session_key)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, api_key, api_secret, session_key):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.name = name", "buggy_source_code": "def __init__(self, name, api_key, api_secret, session_key=''):\n    _BaseObject.__init__(self, api_key, api_secret, session_key)\n    self.name = name", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    testcase.TestCase.setUp(self)\n    self.spec = specfile.SpecFile()\n    self.spec.read('tests/popt/pspec.xml')", "buggy_source_code": "def setUp(self):\n    testcase.TestCase.setUp(self, database=False)\n    self.spec = specfile.SpecFile()\n    self.spec.read('tests/popt/pspec.xml')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def discard_changes(self):\n    self.stackedWidget.setCurrentIndex(0)", "buggy_source_code": "def discard_changes(self):\n    self.edit_item = None\n    self.stackedWidget.setCurrentIndex(0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef dstate(self):\n    return dbus_to_python(self.drbd.get_dstate(self.res, False))", "buggy_source_code": "@property\ndef dstate(self):\n    return dbus_to_python(self.drbd.get_dstate(self.res, self.stacked))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef role(self):\n    return dbus_to_python(self.drbd.get_role(self.res, False))", "buggy_source_code": "@property\ndef role(self):\n    return dbus_to_python(self.drbd.get_role(self.res, self.stacked))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef cstate(self):\n    return dbus_to_python(self.drbd.get_cstate(self.res, False))", "buggy_source_code": "@property\ndef cstate(self):\n    return dbus_to_python(self.drbd.get_cstate(self.res, self.stacked))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ping(self):\n    celery_inspect = celery.task.control.inspect()\n    return set(celery_inspect.ping(timeout=self.interval) or {})", "buggy_source_code": "def ping(self, timeout):\n    celery_inspect = celery.task.control.inspect(timeout=timeout)\n    return set(celery_inspect.ping() or {})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, table_metadata, partitions=[]):\n    self.table_metadata = table_metadata\n    self.partitions = partitions", "buggy_source_code": "def __init__(self, table_metadata, partitions=None):\n    if partitions is None:\n        partitions = []\n    self.table_metadata = table_metadata\n    self.partitions = partitions", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_remove_config(self):\n    self.assertRaises(InvalidRun, configurator.remove_config, 'remove-config')", "buggy_source_code": "@monkeypatch.MonkeyPatch(sys, 'stderr', sys.stdout)\ndef test_remove_config(self):\n    self.assertRaises(InvalidRun, configurator.remove_config, 'remove-config')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unsubscribe(self, event, subscriber):\n    self._subscribers[event].remove(subscriber)", "buggy_source_code": "def unsubscribe(self, event, subscriber):\n    if subscriber in self._subscribers[event]:\n        self._subscribers[event].remove(subscriber)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, message_limit, interval_limit):\n    self.message_limit = message_limit\n    self.interval_limit = interval_limit\n    self.message_list = []", "buggy_source_code": "def __init__(self, message_limit, interval_limit):\n    self.message_limit = message_limit\n    self.interval_limit = interval_limit\n    self.message_list = []\n    self.error_message = '-----> !*!*!*MESSAGE RATE LIMIT REACHED, EXITING*!*!*! <-----\\n'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_fsck():\n    client = python_pachyderm.Client()\n    client.fsck()", "buggy_source_code": "def test_fsck():\n    client = python_pachyderm.Client()\n    assert len(list(client.fsck())) == 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _nosort_tobam_cmd():\n    return \"(echo '@HD\\tVN:1.3\\tSO:queryname' && cat) | {samtools} view -b - -o {out_file}\"", "buggy_source_code": "def _nosort_tobam_cmd(data):\n    if dd.get_aligner(data).startswith('bwa'):\n        fix_hd = \"(echo '@HD\\tVN:1.3\\tSO:queryname' && cat) | \"\n    else:\n        fix_hd = \"sed 's/SO:unsorted/SO:queryname/g' | \"\n    return fix_hd + '{samtools} view -b - -o {out_file}'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef gender_features(word):\n    return {'last_letter': word[-1]}", "buggy_source_code": "@staticmethod\ndef gender_features(word):\n    if not word:\n        return {'last_letter': 'a'}\n    else:\n        return {'last_letter': word[-1]}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ping(self):\n    t = time.time()\n    if t - self.last_ping > 0.5 * self.timeout:\n        self.last_ping = t\n        self.send_message('4')", "buggy_source_code": "def ping(self):\n    t = time.time()\n    if t - self.last_ping > 0.5 * self.timeout:\n        self.last_ping = t\n        self.send_message(_MSG_PING)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "async def post(self):\n    top_repo_path = self.get_json_body()['top_repo_path']\n    my_output = await self.git.diff(top_repo_path)\n    self.finish(my_output)", "buggy_source_code": "@web.authenticated\nasync def post(self):\n    top_repo_path = self.get_json_body()['top_repo_path']\n    my_output = await self.git.diff(top_repo_path)\n    self.finish(my_output)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "async def post(self):\n    body = await self.git.changed_files(**self.get_json_body())\n    self.finish(json.dumps(body))", "buggy_source_code": "@web.authenticated\nasync def post(self):\n    body = await self.git.changed_files(**self.get_json_body())\n    self.finish(json.dumps(body))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def dispatch_request(self):\n    return render_template('index.html')", "buggy_source_code": "def dispatch_request(self):\n    if not current_user.is_authenticated():\n        return redirect('/login')\n    return render_template('index.html')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super().__init__()\n    self.people = people.People.get_instance()", "buggy_source_code": "def __init__(self):\n    super().__init__()\n    self.autofix_bugs = {}\n    self.people = people.People.get_instance()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create(self, spider_name, **spider_kwargs):\n    return self._spiders[spider_name](**spider_kwargs)", "buggy_source_code": "def create(self, spider_name, **spider_kwargs):\n    try:\n        return self._spiders[spider_name](**spider_kwargs)\n    except KeyError:\n        raise KeyError('Spider not found: %s' % spider_name)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pyqtSlot(int)\ndef changeMappingMode(self, i):\n    aw.qmc.transMappingMode = i\n    self.updateTimeResults()", "buggy_source_code": "@pyqtSlot(int)\ndef changeMappingMode(self, i):\n    aw.qmc.transMappingMode = i\n    self.updatePhasesResults()\n    self.updateTimeResults()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pyqtSlot(int)\ndef phasesTableRowHeaderClicked(self, i):\n    pass", "buggy_source_code": "@pyqtSlot(int)\ndef phasesTableRowHeaderClicked(self, i):\n    if i == 1:\n        self.clearPhasesTargetTimes()\n        self.clearPhasesTargetPercent()\n        self.clearPhasesResults()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef join_date(self):\n    return (self.record_date + timedelta(hours=8)).strftime('%Y-%m-%d %H:%M:%S')", "buggy_source_code": "@property\ndef join_date(self):\n    return (self.record_date + timedelta(hours=8)).strftime('%Y-%m-%d %H:%M:%S') if self.record_date else None", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __call__(self, f):\n    f._aliases = self.aliases\n    return f", "buggy_source_code": "def __call__(self, f):\n    if isinstance(f, property):\n        f.fget._aliases = self.aliases\n    else:\n        f._aliases = self.aliases\n    return f", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_canonicalise(self):\n    from quodlibet.util.path import _normalize_path, _normalize_darwin_path\n    self._test_canonicalise(_normalize_path)\n    self._test_canonicalise(_normalize_darwin_path)", "buggy_source_code": "def test_canonicalise(self):\n    from quodlibet.util.path import _normalize_path, _normalize_darwin_path\n    self._test_canonicalise(_normalize_path)\n    if not is_win:\n        self._test_canonicalise(_normalize_darwin_path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __show_break_properties_dialog(self, break_config, is_short, parent, on_close, on_add):\n    dialog = BreakSettingsDialog(break_config, is_short, parent, self.plugin_map, on_close, on_add)\n    dialog.show()", "buggy_source_code": "def __show_break_properties_dialog(self, break_config, is_short, parent, on_close, on_add, on_remove):\n    dialog = BreakSettingsDialog(break_config, is_short, parent, self.plugin_map, on_close, on_add, on_remove)\n    dialog.show()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef expired(self):\n    return self.seconds_left < 0", "buggy_source_code": "@property\ndef expired(self):\n    return not self.is_complete and self.seconds_left < 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@register.filter\ndef to_gravatar_url(email):\n    return 'https://gravatar.com/avatar/%s?d=retro' % hashlib.md5((email or '').strip().lower()).hexdigest()", "buggy_source_code": "@register.filter\ndef to_gravatar_url(email):\n    return 'https://gravatar.com/avatar/%s?d=retro' % hashlib.md5((email or '').strip().lower().encode('utf-8')).hexdigest()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, opener, bundlefile):\n    changelog.__init__(self, opener)\n    bundlerevlog.__init__(self, opener, '00changelog.i', '00changelog.d', bundlefile)", "buggy_source_code": "def __init__(self, opener, bundlefile):\n    changelog.changelog.__init__(self, opener)\n    bundlerevlog.__init__(self, opener, '00changelog.i', '00changelog.d', bundlefile)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, opener, bundlefile, linkmapper):\n    manifest.__init__(self, opener)\n    bundlerevlog.__init__(self, opener, self.indexfile, self.datafile, bundlefile, linkmapper)", "buggy_source_code": "def __init__(self, opener, bundlefile, linkmapper):\n    manifest.manifest.__init__(self, opener)\n    bundlerevlog.__init__(self, opener, self.indexfile, self.datafile, bundlefile, linkmapper)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, stream):\n    self.stream = stream", "buggy_source_code": "def __init__(self, stream):\n    self.stream = stream\n    self.encoding = self.stream.encoding", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    self.sftp.close()\n    self.client.close()", "buggy_source_code": "def close(self):\n    if self.lofFP:\n        self.lofFP.close()\n    self.sftp.close()\n    self.client.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def requestRouter(self):\n    self.inPositionToGet = True\n    self.router.invokeRouter()", "buggy_source_code": "def requestRouter(self):\n    self.inPositionToGet = True\n    if not self.router.routerIsCalled():\n        self.router.invokeRouter()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def matches(self, r_entry):\n    return r_entry.text_content_id == self.tcid and r_entry.reader == self.reader and (r_entry.reader_version == self.reader_version)", "buggy_source_code": "def matches(self, r_entry):\n    return r_entry.text_content_id == self.tcid and r_entry.reader == self.reader and (r_entry.reader_version == self.reader_version[:20])", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self._client = ldtp", "buggy_source_code": "def __init__(self):\n    self._client = ldtp\n    if sys.version_info[:2] < (3, 0):\n        reload(sys)\n        sys.setdefaultencoding('utf-8')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def typep(x, type):\n    return not _type_mismatch(x, type)", "buggy_source_code": "@boot_defun\ndef typep(x, type):\n    return not _type_mismatch(x, type)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@defknown(('atom', '\\n', 'sex', '\\n', 'atom'))\ndef _ir_args():\n    pass", "buggy_source_code": "@defknown((_name, '\\n', _form, '\\n', ([(typep, _py.str), (typep, t)],)))\ndef _ir_args():\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_support_size(self, p=None):\n    return (pl, pr)", "buggy_source_code": "def get_support_size(self, p=None):\n    return (np.zeros(3), np.array(self.shape))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_short_name(self):\n    sname = osp.basename(self.name)\n    return sname", "buggy_source_code": "def get_short_name(self):\n    sname = osp.basename(self.name)\n    if len(sname) > 15:\n        sname = sname[:15]\n    return sname", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run():\n    pass", "buggy_source_code": "def run(self, args):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def gen_mapping(self, afq_object, row, reg_template_img, reg_template_sls, reg_subject_img, reg_subject_sls, reg_prealign):\n    return ConformedAffineMapping(np.load(self.prealign(afq_object, row)))", "buggy_source_code": "def gen_mapping(self, afq_object, row, reg_template_img, reg_template_sls, reg_subject_img, reg_subject_sls, reg_prealign):\n    return ConformedAffineMapping(np.linalg.inv(self.prealign(afq_object, row, save=False)))", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@register.inclusion_tag('assets/asset_common.html')\ndef asset_common(asset, verbose):\n    return {'asset': asset, 'verbose': verbose}", "buggy_source_code": "@register.inclusion_tag('assets/asset_common.html')\ndef asset_common(user, asset, verbose):\n    return {'user': user, 'asset': asset, 'verbose': verbose}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def daypass_change(self, no):\n    q.daypass_change(con, no)", "buggy_source_code": "def daypass_change(self, no, gym_id):\n    q.daypass_change(con, no, gym_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def member_visit_change(self, no):\n    q.member_visit_change(con, no)", "buggy_source_code": "def member_visit_change(self, no, gym_id):\n    q.member_visit_change(con, no, gym_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.contents = {'bug': 1}\n    self.first_visit = True\n    pass", "buggy_source_code": "def __init__(self):\n    self.contents = {'bug': 1}\n    self.first_visit = True\n    self.hasnt_gone_south = True\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def install_node(self):\n    sudo('yum -y install nodejs')\n    sudo('yum -y install npm')\n    sudo('npm install forever -g')", "buggy_source_code": "def install_node(self):\n    run('wget https://nodejs.org/dist/latest/node-v4.0.0-linux-x64.tar.gz')\n    run('tar xzf node-v4.0.0-linux-x64.tar.gz -C /usr/local')\n    run('rm -rf node-v4.0.0-linux-x64.tar.gz')\n    run('mv /usr/local/node-v4.0.0-linux-x64 /usr/local/node')\n    run('ln -s /usr/local/node/bin/node /usr/bin/node')\n    run('ln -s /usr/local/node/bin/npm /usr/bin/npm')\n    sudo('npm install forever -g')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_fab(user_type, instance_dns_name=None):\n    if not instance_dns_name:\n        instance_dns_name = input('Enter EC2 public dns name: ')\n    return Fab(user_type, instance_dns_name)", "buggy_source_code": "def get_fab(user_type, instance_dns_name=None, ssh_sleep=10):\n    if not instance_dns_name:\n        instance_dns_name = input('Enter EC2 public dns name: ')\n    return Fab(user_type, instance_dns_name, ssh_sleep)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def closeWindow(self):\n    self.close()", "buggy_source_code": "def closeWindow(self):\n    if 0 == self.start:\n        self.player.stop()\n    self.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def switchZ(self, newZ):\n    zval = float(newZ)\n    self.depgraph.clearPlot()\n    self.depgraph.firstPlot(zval)", "buggy_source_code": "def switchZ(self, newZ):\n    zval = float(newZ)\n    self.depgraph.clearPlot()\n    self.depgraph.firstPlot(zval=zval)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, testObj):\n    self.testObj = testObj\n    self.prefix_filename_lreg = 'prediction_lreg_'\n    self.prefix_filename_stats = 'prediction_stats_'\n    self.filepath_list = list()", "buggy_source_code": "def __init__(self, testObj):\n    self.testObj = testObj\n    self.prefix_filename_lreg = 'prediction_lreg_'\n    self.prefix_filename_stats = 'prediction_stats_'\n    self.prefix_filename_stats_all = 'prediction_allPlots_'\n    self.filepath_list = list()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _tfval_remove_unit(args: Sequence[TfValOrUnit]) -> Sequence[TfVal]:\n    return [_unit_tfval if a is core.unit else a for a in args]", "buggy_source_code": "def _tfval_remove_unit(args: Sequence[TfValOrUnit]) -> Sequence[TfVal]:\n    return [tf.constant(np.nan, tf.float32) if a is core.unit else a for a in args]", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def write_crash_log(self, crash_log):\n    filename = self.output_filename(self.FILENAME_SUFFIX_CRASH_LOG + '.txt')\n    self._write_file(filename, crash_log)", "buggy_source_code": "def write_crash_log(self, crash_log):\n    filename = self.output_filename(self.FILENAME_SUFFIX_CRASH_LOG + '.txt')\n    self._write_file(filename, crash_log.encode('utf8', 'replace'))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restart(self):\n    if not self._configured:\n        raise Exception('Please run first setConfigPath to select the correct paths')\n    j.tools.startupmanager.restartProcess('generic', self._startupmanagername)", "buggy_source_code": "def restart(self):\n    if not self._configured:\n        raise Exception('Please run first setConfigPath to select the correct paths')\n    j.tools.startupmanager.load()\n    j.tools.startupmanager.restartProcess('generic', self._startupmanagername)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, request):\n    self._request = request", "buggy_source_code": "def __init__(self, request):\n    self._request = request\n    self._channel = request.channel\n    self._peertransport = request.channel.transport", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def resetPianoImage(self):\n    system('clear')\n    print('Too far')", "buggy_source_code": "def resetPianoImage(self):\n    system('clear')\n    print('Too far')\n    self.img = tk.PhotoImage(file=IMAGE_PATH)\n    self.configure(image=self.img)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __ne__(self):\n    return self.get_name().lower() != other.get_name().lower()", "buggy_source_code": "def __ne__(self, other):\n    return self.get_name().lower() != other.get_name().lower()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _url_safe(text):\n    if type(text) == unicode:\n        text = text\n    return urllib.quote_plus(urllib.quote_plus(text)).lower()", "buggy_source_code": "def _url_safe(text):\n    if type(text) == unicode:\n        text = text.encode('utf-8')\n    return urllib.quote_plus(urllib.quote_plus(text)).lower()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, network, status, details):\n    self.status = status\n    self.details = details", "buggy_source_code": "def __init__(self, network, status, details):\n    self.status = status\n    self.details = details\n    self.network = network", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __eq__(self):\n    return self.get_name().lower() == other.get_name().lower()", "buggy_source_code": "def __eq__(self, other):\n    return self.get_name().lower() == other.get_name().lower()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_params():\n    return {}", "buggy_source_code": "def _get_params(self):\n    return {}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.start_time = datetime.now(UTC) - timedelta(seconds=1)", "buggy_source_code": "def setUp(self):\n    super(TestGenerate, self).setUp()\n    self.start_time = datetime.now(UTC) - timedelta(seconds=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sender(self, x, event):\n    return lambda : self.msg(x, event=event)", "buggy_source_code": "def sender(self, x, event):\n    return lambda : self.msg(str(x), event=event)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def main(args=None):\n    if args is None:\n        args = ['-h']\n    process_args(args)", "buggy_source_code": "def main(args=None):\n    if len(sys.argv) == 1:\n        args = ['-h']\n    process_args(args)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def __getattr__(self, attr):\n    return getattr(self.parent, attr)", "buggy_source_code": "def __getattr__(self, attr):\n    if attr in self.__dict__:\n        return getattr(self, attr)\n    return getattr(self.parent, attr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_readonly(request):\n    return request.registry.settings.get('diecutter.readonly', False)", "buggy_source_code": "def is_readonly(request):\n    return to_boolean(request.registry.settings.get('diecutter.readonly', False))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_noerr(self):\n    decode = self.coder.decode(self.code)\n    self.assertEqual(self.string, decode)", "buggy_source_code": "def test_noerr(self):\n    (decode, _) = self.coder.decode(self.code)\n    self.assertEqual(self.string, decode)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_response_params(self, obj, success_status_code=DEFAULT_SUCCESS_STATUS_CODE, content_type=JSON):\n    cherrypy.response.headers['Content-Type'] = 'application/%s' % content_type\n    cherrypy.response.status = success_status_code if obj is None else self.ERROR_STATUS_CODE", "buggy_source_code": "def set_response_params(self, obj, success_status_code=DEFAULT_SUCCESS_STATUS_CODE, content_type=JSON):\n    cherrypy.response.headers['Content-Type'] = 'application/%s' % content_type\n    cherrypy.response.status = success_status_code if obj is not None else self.ERROR_STATUS_CODE", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def applicationDidFinishLaunching_(self, notification):\n    self.setupUI()\n    self.registerObserver()", "buggy_source_code": "def applicationDidFinishLaunching_(self, notification):\n    self.setupUI()\n    self.registerObserver()\n    self.loadConfig()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef parse_string(content, basedir=None, resolve=True):\n    return ConfigParser().parse(content, basedir, resolve)", "buggy_source_code": "@classmethod\ndef parse_string(cls, content, basedir=None, resolve=True, unresolved_value=DEFAULT_SUBSTITUTION):\n    return ConfigParser().parse(content, basedir, resolve, unresolved_value)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_cdn_certificate_keys_and_certs(self):\n    h = rhnSQL.prepare(\"\\n            SELECT ck.id, ck.description, ck.key\\n            FROM rhnCryptoKeyType ckt,\\n                 rhnCryptoKey ck\\n            WHERE ckt.label = 'SSL'\\n              AND ckt.id = ck.crypto_key_type_id\\n              AND ck.description LIKE 'CDN_%'\\n              AND ck.org_id is NULL\\n            ORDER BY ck.description\\n        \")\n    h.execute()\n    return h.fetchall_dict() or []", "buggy_source_code": "@staticmethod\ndef _get_cdn_certificate_keys_and_certs():\n    h = rhnSQL.prepare(\"\\n            SELECT ck.id, ck.description, ck.key\\n            FROM rhnCryptoKeyType ckt,\\n                 rhnCryptoKey ck\\n            WHERE ckt.label = 'SSL'\\n              AND ckt.id = ck.crypto_key_type_id\\n              AND ck.description LIKE 'CDN_%'\\n              AND ck.org_id is NULL\\n            ORDER BY ck.description\\n        \")\n    h.execute()\n    return h.fetchall_dict() or []", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def reviewer_can_read(self, user: User):\n    return self.state == VulnerabilityState.READY or (self.state == VulnerabilityState.IN_REVIEW and self.is_reviewer(user))", "buggy_source_code": "def reviewer_can_read(self, user: User):\n    return self.state == VulnerabilityState.READY or (self.state in (VulnerabilityState.IN_REVIEW, VulnerabilityState.REVIEWED, VulnerabilityState.ARCHIVED) and self.is_reviewer(user))", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def httphost(self):\n    return 'localhost'", "buggy_source_code": "def httphost(self):\n    if 'http' in self.config:\n        if 'host' in self.config['http']:\n            return self.config['http']['host']\n    return 'localhost'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def geturl(self):\n    return self._response.url", "buggy_source_code": "def geturl(self):\n    return self._response.url.replace('&&', '&')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_user_id(self):\n    return self.item['user_id']", "buggy_source_code": "def get_user_id(self):\n    if None == JBoxUserV2.TABLE:\n        return None\n    return self.item['user_id']", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_status(self, status):\n    self.item['status'] = status", "buggy_source_code": "def set_status(self, status):\n    if None == JBoxUserV2.TABLE:\n        return\n    self.item['status'] = status", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_status(self):\n    return self.item.get('status', JBoxUserV2.STATUS_ACTIVE)", "buggy_source_code": "def get_status(self):\n    if None == JBoxUserV2.TABLE:\n        return None\n    return self.item.get('status', JBoxUserV2.STATUS_ACTIVE)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def initialize(self, *args, **kwargs):\n    pass", "buggy_source_code": "def initialize(self, *args, **kwargs):\n    self.service_key = kwargs.pop('service_key')\n    self.service_version = kwargs.pop('version')\n    self.streams = kwargs.pop('streams')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def render(self, template, **params):\n    self.response.out.write(render_temp(template, **params))", "buggy_source_code": "def render(self, template, **params):\n    self.response.headers['Content-Type'] = 'text/html; charset=utf-8'\n    self.response.out.write(render_temp(template, **params))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def NotePinned(n):\n    asystags = n.get('systemtags', 0)\n    if 'pinned' in asystags:\n        return 1\n    else:\n        return 0", "buggy_source_code": "def NotePinned(n):\n    asystags = n.get('systemtags', 0)\n    if not asystags:\n        return 0\n    if 'pinned' in asystags:\n        return 1\n    else:\n        return 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def line(self, s='', **kw):\n    self.write(s + '\\n', **kw)", "buggy_source_code": "def line(self, s='', **kw):\n    self.write(s, **kw)\n    self.write('\\n')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def build_absolute_uri(relative_url):\n    if relative_url.startswith('http'):\n        return relative_url\n    current_site = Site.objects.get_current()\n    return '%s%s' % (current_site.domain, relative_url)", "buggy_source_code": "def build_absolute_uri(self, relative_url):\n    if relative_url.startswith('http'):\n        return relative_url\n    current_site = Site.objects.get_current()\n    return '%s%s' % (current_site.domain, relative_url)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_requires():\n    reqs = ['colorama']\n    try:\n        import readline\n    except ImportError:\n        reqs.append['pyreadline']\n    return reqs", "buggy_source_code": "def get_requires():\n    reqs = ['colorama']\n    try:\n        import readline\n    except ImportError:\n        reqs.append('pyreadline')\n    return reqs", "edit_actions": []}
{"fixed_source_code": "def forward_cpu(self, inputs):\n    y_expect = _batch_normalization(inputs + [self.mean, self.var, self.expander])\n    return (y_expect,)", "buggy_source_code": "def forward_cpu(self, inputs):\n    y_expect = _batch_normalization(inputs + [self.mean, self.var, self.eps, self.expander])\n    return (y_expect,)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def forward_cpu(self, inputs):\n    y_expect = _batch_normalization(inputs + [self.expander])\n    return (y_expect,)", "buggy_source_code": "def forward_cpu(self, inputs):\n    y_expect = _batch_normalization(inputs + [self.eps, self.expander])\n    return (y_expect,)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.client = MessagingClient()\n    self.values = self.client.parse_command_line()", "buggy_source_code": "def __init__(self):\n    self.client = MessagingClient()\n    self.values = self.client.parse_command_line()\n    self.client.set_debug_mode(self.values['debug'])", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_attachments(self, event):\n    queryset = Attachment.objects.filter(public=True)\n    serializer = AttachmentSerializer(instance=queryset, many=True)\n    return serializer.data", "buggy_source_code": "def get_attachments(self, event):\n    queryset = Attachment.objects.filter(event=event, public=True)\n    serializer = AttachmentSerializer(instance=queryset, many=True)\n    return serializer.data", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def randomkey(self):\n    return self._redis.randomkey()", "buggy_source_code": "def randomkey(self):\n    return str(self._redis.randomkey())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def save(self):\n    return User.objects.create_user(self.cleaned_data['username'], self.cleaned_data['email1'], self.cleaned_data['password1'])", "buggy_source_code": "def save(self):\n    return User.objects.create_user(self.cleaned_data.get('username'), self.cleaned_data.get('email1'), self.cleaned_data.get('password1'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef scores(self):\n    if self._finalised:\n        return self._scores\n    else:\n        raise AttributeError('No payoffs list has been passed to this ResultSet object.')", "buggy_source_code": "@property\ndef scores(self):\n    if self._finalised:\n        return self._scores\n    else:\n        raise AttributeError(self.unfinalised_error_msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef ranked_names(self):\n    if self._finalised:\n        return self._ranked_names\n    else:\n        raise AttributeError('No payoffs list has been passed to this ResultSet object.')", "buggy_source_code": "@property\ndef ranked_names(self):\n    if self._finalised:\n        return self._ranked_names\n    else:\n        raise AttributeError(self.unfinalised_error_msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef ranking(self):\n    if self._finalised:\n        return self._ranking\n    else:\n        raise AttributeError('No payoffs list has been passed to this ResultSet object.')", "buggy_source_code": "@property\ndef ranking(self):\n    if self._finalised:\n        return self._ranking\n    else:\n        raise AttributeError(self.unfinalised_error_msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef payoff_matrix(self):\n    if self._finalised:\n        return self._payoff_matrix\n    else:\n        raise AttributeError('No payoffs list has been passed to this ResultSet object.')", "buggy_source_code": "@property\ndef payoff_matrix(self):\n    if self._finalised:\n        return self._payoff_matrix\n    else:\n        raise AttributeError(self.unfinalised_error_msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef payoff_stddevs(self):\n    if self._finalised:\n        return self._payoff_stddevs\n    else:\n        raise AttributeError('No payoffs list has been passed to this ResultSet object.')", "buggy_source_code": "@property\ndef payoff_stddevs(self):\n    if self._finalised:\n        return self._payoff_stddevs\n    else:\n        raise AttributeError(self.unfinalised_error_msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def _get_my_department(self):\n    return self.env.user.employee_ids[0].department_id", "buggy_source_code": "def _get_my_department(self):\n    employees = self.env.user.employee_ids\n    return employees and employees[0].department_id or self.env['hr.department']", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def remove(self, url):\n    self.items.remove(url)", "buggy_source_code": "def remove(self, url):\n    self.items.remove(urlparse(url))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, *, detect_strings, use_isbn10):\n    self.detect_strings = detect_strings\n    self.use_isbn10 = use_isbn10", "buggy_source_code": "def __init__(self, *, detect_strings, use_isbn10, only_isbn):\n    self.detect_strings = detect_strings\n    self.use_isbn10 = use_isbn10\n    self.only_isbn = only_isbn", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def disconnect(self, message):\n    self.message.reply_channel.send({'accept': False})\n    self.close()", "buggy_source_code": "def disconnect(self, message, **kwargs):\n    self.message.reply_channel.send({'accept': False})\n    self.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, status_code, message):\n    self.status_code = status_code\n    self.message = message", "buggy_source_code": "def __init__(self, status_code, message):\n    self.status_code = status_code\n    if isinstance(message, unicode):\n        message = message.encode('utf-8')\n    self.message = message", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def all_pending(self):\n    return self.location_submissions().filter(state=SubmissionState.waiting_to_be_graded)", "buggy_source_code": "def all_pending(self):\n    return self.location_submissions().filter(state=SubmissionState.waiting_to_be_graded, is_duplicate=False, is_plagiarized=False)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clean(self):\n    if self.quantity != None and self.quantity < self.awarded:\n        raise ValidationError(_('Cannot reduce quantity to a lower value ' + 'than what was already promised to backers'))", "buggy_source_code": "def clean(self):\n    if self.id and self.quantity != None and (self.quantity < self.awarded):\n        raise ValidationError(_('Cannot reduce quantity to a lower value ' + 'than what was already promised to backers'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def utcnow(self):\n    return next(self.ret)", "buggy_source_code": "def utcnow(self):\n    try:\n        return next(self.ret)\n    except StopIteration:\n        raise ValueError('No more mock values!')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def LuxCoreLogHandler(msg):\n    if printLuxCoreLog:\n        print(msg, file=sys.stderr)", "buggy_source_code": "def LuxCoreLogHandler(msg):\n    if printLuxCoreLog:\n        print('[%s]%s' % (strftime('%Y-%m-%d %H:%M:%S', gmtime()), msg), file=sys.stderr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def save(self):\n    file = tkFileDialog.asksaveasfilename(parent=self.win, title='Choose a file')\n    self.indivs[self.currentplot].canvas.postscript(file=file)", "buggy_source_code": "def save(self):\n    import tkFileDialog\n    file = tkFileDialog.asksaveasfilename(parent=self.win, title='Choose a file')\n    self.indivs[self.currentplot].canvas.postscript(file=file)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def disconnect(self):\n    with self._connection_lock:\n        self._paramiko_client.close()\n    self._connected = False", "buggy_source_code": "def disconnect(self):\n    with self._connection_lock:\n        self._paramiko_client.close()\n    self._connected = False\n    self._sftp = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef sftp(self):\n    if not self._sftp:\n        self._sftp = self._client.open_sftp()\n    return self._sftp", "buggy_source_code": "@property\ndef sftp(self):\n    if not self._sftp or not self._connected:\n        self._sftp = self._client.open_sftp()\n    return self._sftp", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def execute():\n    frappe.db.sql(\"\\n        UPDATE `tabData Migration Connector`\\n        SET hostname = 'https://hubmarket.org'\\n        WHERE connector_name = 'Hub Connector'\\n    \")", "buggy_source_code": "def execute():\n    if frappe.db.table_exists('Data Migration Connector'):\n        frappe.db.sql(\"\\n\\t\\t\\tUPDATE `tabData Migration Connector`\\n\\t\\t\\tSET hostname = 'https://hubmarket.org'\\n\\t\\t\\tWHERE connector_name = 'Hub Connector'\\n\\t\\t\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def icon_url(self):\n    url = f'https://github.com/FoglyOgly/Meowth/blob/new-core/meowth/images/weather/{self.value}.png?raw=true'\n    return url", "buggy_source_code": "@property\ndef icon_url(self):\n    url = f'https://github.com/FoglyOgly/Meowth/blob/new-core/meowth/images/weather/{self.value}.png?raw=true'\n    return url", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_0_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.0',))", "buggy_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_0_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.0',), host='dummy')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_8_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.8',))", "buggy_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_8_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.8',), host='dummy')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_2_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.2',))", "buggy_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_2_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.2',), host='dummy')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_6_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.6',))", "buggy_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_3_6_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('3.6',), host='dummy')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_1_4_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('1.4',))", "buggy_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_1_4_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('1.4',), host='dummy')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __del__(self):\n    self.stop_highlight()\n    GPS.Hook('before_exit_action_hook').remove(self.__before_exit)", "buggy_source_code": "def __del__(self):\n    self.stop_highlight()\n    GPS.Hook('before_exit_action_hook').remove(self.__before_exit)\n    GPS.Hook('file_closed').remove(self.__on_file_closed)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_client_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]", "buggy_source_code": "def get_client_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def is_running_in_docker():\n    with open('/proc/1/cgroup', 'rt') as ifh:\n        return 'docker' in ifh.read()", "buggy_source_code": "def is_running_in_docker():\n    pid = os.getpid()\n    with open('/proc/{}/cgroup'.format(pid), 'rt') as ifh:\n        return 'docker' in ifh.read()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_running_in_kubepod():\n    with open('/proc/1/cgroup', 'rt') as ifh:\n        return 'kubepods' in ifh.read()", "buggy_source_code": "def is_running_in_kubepod():\n    pid = os.getpid()\n    with open('/proc/{}/cgroup'.format(pid), 'rt') as ifh:\n        return 'kubepods' in ifh.read()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_min_connections(journeys):\n    if not journeys:\n        return None\n    return min((get_nb_connections(j) for j in journeys if not to_be_deleted(j)))", "buggy_source_code": "def get_min_connections(journeys):\n    if not journeys:\n        return None\n    return min([get_nb_connections(j) for j in journeys if not to_be_deleted(j)] or [0])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, servicename, name=None):\n    ElementBin.__init__(self, name=name)\n    ProviderHandler.__init__(self, servicename)\n    self.reset_providers()", "buggy_source_code": "def __init__(self, servicename, name=None):\n    ElementBin.__init__(self, name=name)\n    ProviderHandler.__init__(self, servicename)\n    self.reset_providers()\n    self.setup_elements()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse(self):\n    self._microscopyReader.parse()", "buggy_source_code": "def parse(self):\n    self._microscopyReader.parse()\n    self._microscopyReader.close()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _build_attrs(attrs=None, **kwargs):\n    attrs = dict() if attrs is None else attrs\n    attrs.update(kwargs)\n    return attrs", "buggy_source_code": "def _build_attrs(self, attrs=None, **kwargs):\n    attrs = dict() if attrs is None else attrs\n    attrs.update(kwargs)\n    return attrs", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __exit__(self, *exc_info):\n    self.conn.rollback()\n    self.conn.autocommit = True\n    self.pool.putconn(self.conn)", "buggy_source_code": "def __exit__(self, *exc_info):\n    self.conn.rollback()\n    self.conn.autocommit = True\n    self.pool.putconn(self.conn, close=True)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __exit__(self, *exc_info):\n    self.pool.putconn(self.conn)", "buggy_source_code": "def __exit__(self, *exc_info):\n    self.pool.putconn(self.conn, close=True)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_server_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]", "buggy_source_code": "def get_server_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def waitfor(s):\n    global _message\n    if _spinner is not None:\n        raise Exception('waitfor has already been called')\n    _message = s\n    _start_spinner()", "buggy_source_code": "def waitfor(s):\n    global _message, _status\n    if _spinner is not None:\n        raise Exception('waitfor has already been called')\n    _status = ''\n    _message = s\n    _start_spinner()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_thread_stats():\n    stats = YThreadStats().get()\n    return stats", "buggy_source_code": "def get_thread_stats():\n    _pause()\n    stats = YThreadStats().get()\n    _resume()\n    return stats", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_func_stats():\n    stats = YFuncStats().get()\n    return stats", "buggy_source_code": "def get_func_stats():\n    _pause()\n    stats = YFuncStats().get()\n    _resume()\n    return stats", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def start(builtins=False, profile_threads=True):\n    if profile_threads:\n        threading.setprofile(_callback)\n    _yappi.start(builtins, profile_threads)", "buggy_source_code": "def start(builtins=False, profile_threads=True):\n    if profile_threads:\n        threading.setprofile(_callback)\n    YGlobs._profile_builtins = builtins\n    YGlobs._profile_threads = profile_threads\n    _yappi.start(builtins, profile_threads)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def embed_tweet(content):\n    content._content = re.sub('(^|[^@\\\\w])@(\\\\w{1,15})\\\\b', '\\\\1<a href=\"https://twitter.com/\\\\2\">@\\\\2</a>', re.sub('(^|[^@\\\\w])@(\\\\w{1,15})/status/(\\\\d+)\\\\b', '\\\\1<blockquote class=\"twitter-tweet\" align=\"center\"><a href=\"https://twitter.com/\\\\2/status/\\\\3\">Tweet of \\\\2/\\\\3</a></blockquote>', content._content)) + '<script src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>'", "buggy_source_code": "def embed_tweet(content):\n    if not content._content:\n        return\n    content._content = re.sub('(^|[^@\\\\w])@(\\\\w{1,15})\\\\b', '\\\\1<a href=\"https://twitter.com/\\\\2\">@\\\\2</a>', re.sub('(^|[^@\\\\w])@(\\\\w{1,15})/status/(\\\\d+)\\\\b', '\\\\1<blockquote class=\"twitter-tweet\" align=\"center\"><a href=\"https://twitter.com/\\\\2/status/\\\\3\">Tweet of \\\\2/\\\\3</a></blockquote>', content._content)) + '<script src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@abstractmethod\ndef __call__(self):\n    raise NotImplementedError", "buggy_source_code": "@abstractmethod\ndef __call__(self, val):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_get_hashes():\n    file_hashes = get_hashes.get_all_hashes('.')\n    assert file_hashes['./__init__.py'] == 'd41d8cd98f00b204e9800998ecf8427e'", "buggy_source_code": "def test_get_hashes():\n    testfile = urllib.URLopener()\n    testfile.retrieve('http://www.jarrodmillman.com/rcsds/_downloads/ds107_sub001_highres.nii', 'ds107_sub001_highres.nii')\n    file_hashes = get_hashes.get_all_hashes('.')\n    assert file_hashes['./ds107_sub001_highres.nii'] == 'fd733636ae8abe8f0ffbfadedd23896c'\n    os.remove('ds107_sub001_highres.nii')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_grain_map(self):\n    grain_map = self.data.get_data_array(name='grain_ids', as_numpy=True)\n    return grain_map", "buggy_source_code": "def get_grain_map(self):\n    if not self.data:\n        return None\n    grain_map = self.data.get_data_array(name='grain_ids', as_numpy=True)\n    return grain_map", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_mask(self):\n    mask = self.data.get_data_array(name='mask', as_numpy=True)\n    return mask", "buggy_source_code": "def get_mask(self):\n    if not self.data:\n        return None\n    mask = self.data.get_data_array(name='mask', as_numpy=True)\n    return mask", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    self.distribution.package_data = {'llvmlite.binding': get_library_files()}\n    install.run(self)", "buggy_source_code": "def run(self):\n    from llvmlite.utils import get_library_files\n    self.distribution.package_data = {'llvmlite.binding': get_library_files()}\n    install.run(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def to_string(buffer):\n    if buffer == ffi.NULL or buffer.size == 0:\n        return ''\n    return ffi.string(buffer.data, buffer.size).decode('utf-8')", "buggy_source_code": "def to_string(buffer):\n    if buffer == ffi.NULL or buffer.size == 0:\n        return ''\n    return ffi.string(buffer.data, buffer.size).decode('utf-8', 'ignore')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def ipv4_to_client(core, formname, propname, val) -> (str, TypeType):\n    return ('client', str(val))", "buggy_source_code": "def ipv4_to_client(core, formname, propname, typename, val) -> (str, TypeType):\n    return ('client', str(val))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def new_agent(cls, bindings):\n    raise NotImplementedError('new_agent not specialized on ' + cls.__name__)", "buggy_source_code": "@classmethod\ndef new_agent(cls, bindings):\n    raise NotImplementedError('new_agent not specialized on ' + cls.__name__)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@bp.route('/')\n@check_access('admin', 'library')\ndef index():\n    return render_template('admin/index.html')", "buggy_source_code": "@bp.route('/')\n@check_access('admin', 'library', 'business')\ndef index():\n    return render_template('admin/index.html')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def onProfileLoaded():\n    mw.progress.timer(NM_RESERVED_DELAY, delayedLoader, False)", "buggy_source_code": "def onProfileLoaded():\n    if not night_mode:\n        mw.progress.timer(NM_RESERVED_DELAY, delayedLoader, False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def delayedLoader():\n    from .night_mode import NightMode\n    night_mode = NightMode()\n    night_mode.load()", "buggy_source_code": "def delayedLoader():\n    global night_mode\n    from .night_mode import NightMode\n    night_mode = NightMode()\n    night_mode.load()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def save_image(data, path):\n    from PIL import Image\n    Image.fromarray(np.flipud(data)).convert('1').save(path + '.png')", "buggy_source_code": "def save_image(data, path):\n    import numpy as np\n    from PIL import Image\n    Image.fromarray(np.flipud(data)).convert('1').save(path + '.png')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_hparams_for_tpu(hparams):\n    hparams.optimizer = 'TrueAdam'\n    hparams.batch_size = 4", "buggy_source_code": "def update_hparams_for_tpu(hparams):\n    hparams.optimizer = 'Adafactor'\n    hparams.learning_rate_schedule = 'rsqrt_decay'\n    hparams.learning_rate_warmup_steps = 6000\n    hparams.batch_size = 4", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    self._serial_stop = True\n    while self._serial_thread.is_alive():\n        pass", "buggy_source_code": "def close(self):\n    self._serial_stop = True\n    if self._serial_thread is not None:\n        while self._serial_thread.is_alive():\n            pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def rotate(self, angle, center=(0, 0), update=True, finish=True):\n    pass", "buggy_source_code": "def rotate(self, angle, center=(0, 0), angleSnap=False, update=True, finish=True):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_config(self):\n    return {'http': {'hostname': '127.0.0.1', 'port': 6680, 'static_dir': None, 'zeroconf': ''}}", "buggy_source_code": "def get_config(self):\n    return {'http': {'hostname': '127.0.0.1', 'port': 6680, 'static_dir': None, 'zeroconf': '', 'allowed_origins': []}}", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, tree=None, indent='  '):\n    super().__init__(tree=tree)\n    self.level = 0\n    self.indent = indent", "buggy_source_code": "def __init__(self, tree=None, indent='  '):\n    super(CppGen, self).__init__(tree=tree)\n    self.level = 0\n    self.indent = indent", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, tree=None, indent=' '):\n    super().__init__(tree=tree)\n    self.level = 0\n    self.indent = indent", "buggy_source_code": "def __init__(self, tree=None, indent=' '):\n    super(PrettyFormatter, self).__init__(tree=tree)\n    self.level = 0\n    self.indent = indent", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef code(self):\n    code = 'import lsst.afw.display\\nlsst.afw.display.setDefaultBackend(\"ginga\")\\n\\nfrom explorer.display import {1}Display\\n{0}_display = {1}Display(butler, filt, dims=(500,500))\\n{0}_display.connect_tap(tap)\\n{0}_display.embed()'.format(self.prefix, self.prefix.capitalize())\n    return code", "buggy_source_code": "@property\ndef code(self):\n    code = 'import lsst.afw.display\\nlsst.afw.display.setDefaultBackend(\"ginga\")\\n\\nfrom explorer.display import {1}Display\\n{0}_display = {2}\\n{0}_display.connect_tap(tap)\\n{0}_display.embed()'.format(self.prefix, self.prefix.capitalize(), self.displayInit)\n    return code", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def toscipy(self):\n    warnings.deprecation('M.toscipy is deprecated; use scipy.sparse.csr_matrix(M.export(\"csr\")) instead')\n    return scipy.sparse.csr_matrix(self.export('csr'))", "buggy_source_code": "def toscipy(self):\n    warnings.deprecation('M.toscipy is deprecated; use scipy.sparse.csr_matrix(M.export(\"csr\"), M.shape) instead')\n    return scipy.sparse.csr_matrix(self.export('csr'), self.shape)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def destroy(self, request, pk=None):\n    bunny = {'error': 'method not supported :/'}\n    return Response(bunny, status.HTTP_403_FORBIDDEN)", "buggy_source_code": "def destroy(self, request, pk=None, *args, **kwargs):\n    bunny = {'error': 'method not supported :/'}\n    return Response(bunny, status.HTTP_403_FORBIDDEN)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def apply(self, chars, mainChar):\n    if not mainChar.dead:\n        chars[mainChar.yPosition][mainChar.xPosition] = mainChar.display", "buggy_source_code": "def apply(self, chars, mainChar):\n    if not mainChar.dead and (not mainChar.room):\n        chars[mainChar.yPosition][mainChar.xPosition] = mainChar.display", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dashboard_xml_rpc_handler(request):\n    return xml_rpc_handler(request, DashboardDispatcher)", "buggy_source_code": "@csrf_exempt\ndef dashboard_xml_rpc_handler(request):\n    return xml_rpc_handler(request, DashboardDispatcher)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def token_to_func(self, token):\n    try:\n        return self.functions[token]\n    except KeyError:\n        raise FunctionNotDefinedException(token)", "buggy_source_code": "def token_to_func(self, token):\n    try:\n        logger.debug('  Trying to parse token {} as a function'.format(token))\n        return self.functions[token]\n    except KeyError:\n        raise FunctionNotDefinedException(token)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def begin(self):\n    return min(self.boundary_table)", "buggy_source_code": "def begin(self):\n    if not self.boundary_table:\n        return 0\n    return min(self.boundary_table)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def end(self):\n    return max(self.boundary_table)", "buggy_source_code": "def end(self):\n    if not self.boundary_table:\n        return 0\n    return max(self.boundary_table)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def configure_debug_toolbar(app):\n    toolbar = ChangesDebugToolbarExtension(app)\n    return toolbar", "buggy_source_code": "def configure_debug_toolbar(app):\n    if not app.config['DEBUG_TB_ENABLED']:\n        return\n    toolbar = ChangesDebugToolbarExtension(app)\n    return toolbar", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def resolve_symbol(self, solist):\n    return super(WinReloc, self).resolve_symbol([x for x in solist if self.resolvewith == x.provides])", "buggy_source_code": "def resolve_symbol(self, solist):\n    return super(WinReloc, self).resolve_symbol([x for x in solist if self.resolvewith == x.provides or x.provides == None])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@XFAIL\ndef test_J7():\n    raise NotImplementedError('jv(R(-5,2), pi/2) == 12/(pi**2)')", "buggy_source_code": "def test_J7():\n    assert expand_func(besselj(R(-5, 2), pi / 2)) == 12 / pi ** 2", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@XFAIL\ndef test_J9():\n    raise NotImplementedError('diff(j0(z), z) == -j1(z)')", "buggy_source_code": "def test_J9():\n    assert besselj(0, z).diff(z) == -besselj(1, z)", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unix_date_to_kodi(unix_kodi_time):\n    return strftime('%Y-%m-%d %H:%M:%S', localtime(float(unix_kodi_time)))", "buggy_source_code": "def unix_date_to_kodi(unix_kodi_time):\n    try:\n        return strftime('%Y-%m-%d %H:%M:%S', localtime(float(unix_kodi_time)))\n    except Exception:\n        LOG.exception('Received an illegal timestamp from Plex: %s. Using 1970-01-01 12:00:00', unix_kodi_time)\n        return '1970-01-01 12:00:00'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def nextFrame(self):\n    self.current_frame += 1\n    if self.current_frame > len(self.frames) - 1:\n        self.current_frame = 0", "buggy_source_code": "def nextFrame(self):\n    self.current_frame += 1\n    if self.current_frame > len(self.frames) - 1:\n        self.current_frame = 0\n    self.syncFrameEditor()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self.logger = logging.getLogger()", "buggy_source_code": "def __init__(self):\n    self.logger = logging.getLogger()\n    self._total_scrape_attempts = 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self._cache = Library.CACHE\n    Library.CACHE = None", "buggy_source_code": "def setUp(self):\n    self._cache = Library.CACHE\n    Library.CACHE = (None, None)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_regexp_width(regexp):\n    try:\n        return sre_parse.parse(regexp).getwidth()\n    except sre_constants.error:\n        raise ValueError(regexp)", "buggy_source_code": "def get_regexp_width(regexp):\n    try:\n        return [int(x) for x in sre_parse.parse(regexp).getwidth()]\n    except sre_constants.error:\n        raise ValueError(regexp)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def lookup_user(self, handle):\n    request = self.get('people', headers={'accept': 'text/html'}, params={'q': handle})\n    return request.status_code", "buggy_source_code": "def lookup_user(self, handle):\n    request = self._connection.get('people', headers={'accept': 'text/html'}, params={'q': handle})\n    return request.status_code", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def is_pdf(self, data):\n    return data.startswith('%PDF')", "buggy_source_code": "def is_pdf(self, data):\n    return data[:1024].find('%PDF') != -1", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def delete(self):\n    if self._ref > 0:\n        self._ooop.unlink(self._model, self._ref)\n    remove(self)", "buggy_source_code": "def delete(self):\n    if self._ref > 0:\n        self._ooop.unlink(self._model, [self._ref])\n    remove(self)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "@command('cloud', [], 'SUBCOMMAND ...', subonly=True)\ndef cloud(ui, repo, **opts):\n    pass", "buggy_source_code": "@command('cloud', [], 'SUBCOMMAND ...')\ndef cloud(ui, repo, **opts):\n    raise error.Abort('you need to specify a subcommand (run with --help to see a list of subcommands)')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _do_clear(self):\n    self.delete_all()\n    self.completion.delete_all()", "buggy_source_code": "def _do_clear(self):\n    with self._handle_sql_errors():\n        self.delete_all()\n        self.completion.delete_all()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def vertex_representer(dumper, v):\n    output = dumper.represent_sequence(v.yaml_node_name, v.listify())\n    return output", "buggy_source_code": "@staticmethod\ndef vertex_representer(dumper, v):\n    output = dumper.represent_sequence(v.yaml_node_name, v.listify())\n    return output", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, verbose=0, final_activation='sigmoid'):\n    self.verbose = verbose\n    self.model = model\n    self.final_activation = final_activation", "buggy_source_code": "def __init__(self, verbose=0, model=None, final_activation='sigmoid'):\n    self.verbose = verbose\n    self.model = model\n    self.final_activation = final_activation", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@_synchronized('plugin-directory')\ndef _create_plugin_directory():\n    global _PLUGIN_DIRECTORY\n    _PLUGIN_DIRECTORY = _PluginDirectory()\n    return _PLUGIN_DIRECTORY", "buggy_source_code": "@_synchronized('plugin-directory')\ndef _create_plugin_directory():\n    global _PLUGIN_DIRECTORY\n    if _PLUGIN_DIRECTORY is None:\n        _PLUGIN_DIRECTORY = _PluginDirectory()\n    return _PLUGIN_DIRECTORY", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def on_data_change(self):\n    if self.dat_file is not None:\n        self.plot_2d_data()", "buggy_source_code": "def on_data_change(self):\n    if self.dat_file is not None:\n        self.generate_data()\n        self.plot_2d_data()\n        self.plot_linecut()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_count(self):\n    return self.get_queryset().count()", "buggy_source_code": "def get_count(self):\n    qs = self.get_queryset()\n    if not qs:\n        return 0\n    return qs.count()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def before_feature(context, feature):\n    if 'browser' in feature.tags:\n        context.browser = webdriver.Firefox()\n        context.base_url = 'http://localhost:6545'", "buggy_source_code": "def before_feature(context, feature):\n    if 'browser' in feature.tags:\n        context.browser = webdriver.Firefox()\n        context.browser.implicitly_wait(30)\n        context.base_url = 'http://localhost:6545'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_elements(self, source, xpath):\n    return self._get_parent(source).findall(xpath)", "buggy_source_code": "def get_elements(self, source, xpath):\n    return self._get_parent(source).findall(self._get_xpath(xpath))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def device_removed_from_mode(self, mode):\n    pass", "buggy_source_code": "def device_removed_from_mode(self, mode):\n    for target in self.drop_targets:\n        target.remove_from_bank(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_to_pvextractor(data_vda_jybeam_lower):\n    pytest.importorskip('pvextractor')\n    (cube, data) = cube_and_raw(data_vda_jybeam_lower)\n    cube.to_pvextractor()", "buggy_source_code": "@pytest.mark.openfiles_ignore\ndef test_to_pvextractor(data_vda_jybeam_lower):\n    pytest.importorskip('pvextractor')\n    (cube, data) = cube_and_raw(data_vda_jybeam_lower)\n    cube.to_pvextractor()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def session_methods(self):\n    return self.session_methods()", "buggy_source_code": "def session_methods(self):\n    return self._session.session_methods()", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    return render_template('index.html')", "buggy_source_code": "@app.route('/')\ndef index():\n    if g.user:\n        return redirect(url_for('home'))\n    return render_template('index.html')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_login_and_redirect(self):\n    expected_url = '%s%s' % (self.live_server_url, '/flutype/viruses/')\n    self.login(expected_url)\n    self.assertIn(expected_url, self.driver.current_url)", "buggy_source_code": "@tag('local')\ndef test_login_and_redirect(self):\n    expected_url = '%s%s' % (self.live_server_url, '/flutype/viruses/')\n    self.login(expected_url)\n    self.assertIn(expected_url, self.driver.current_url)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reverse_sort_name(self, name_items):\n    return sorted(name_items, key=itemgetter(0), reverse=True)", "buggy_source_code": "def reverse_sort_name(self, name_items):\n    return sorted(name_items, key=lambda t: t[0].cn.first(), reverse=True)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sort_name(self, name_items):\n    return sorted(name_items, key=itemgetter(0))", "buggy_source_code": "def sort_name(self, name_items):\n    return sorted(name_items, key=lambda t: t[0].cn.first())", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_user(self):\n    return flask.session.get(self.KEY_USERNAME, '')", "buggy_source_code": "def get_user(self):\n    if self.chk_login():\n        return flask.session.get(self.KEY_USERNAME, '')\n    else:\n        return ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def param_defaults(self):\n    return {'seed_id_label': 'seed_id', 'seqrun_id_label': 'seqrun_id', 'log_slack': True}", "buggy_source_code": "def param_defaults(self):\n    params_dict = IGFBaseProcess.param_defaults()\n    params_dict.update({'seed_id_label': 'seed_id', 'seqrun_id_label': 'seqrun_id'})\n    return params_dict", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def calculate_positions_value(self):\n    if len(self.position_values) == 0:\n        return 0\n    return sum(self.position_values)", "buggy_source_code": "def calculate_positions_value(self):\n    if len(self.position_values) == 0:\n        return np.float64(0)\n    return sum(self.position_values)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def validate(number):\n    return ean.validate(compact(number))", "buggy_source_code": "def validate(number):\n    number = compact(number)\n    if len(number) != 13:\n        raise InvalidLength()\n    return ean.validate(number)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '{0}({1}, {2})'.format(self.__class__.__name__, self._content_type.__name__, repr(URI(self)))", "buggy_source_code": "def __repr__(self):\n    return '{0}({1}, {2})'.format(self.__class__.__name__, self._content_type.__name__, repr(URI(self).string))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef service_root(self):\n    return ServiceRoot.get_instance(self._resource.__uri__.base)", "buggy_source_code": "@property\ndef service_root(self):\n    return ServiceRoot.get_instance(URI(self._resource).resolve('/'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def reti(self):\n    raise NotImplementedError('reti')", "buggy_source_code": "def reti(self):\n    if self._saved_pc is None:\n        raise Z80Error('reti expected _saved_pc != None')\n    self.pc = self._saved_pc\n    self._saved_pc = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Metadata({},\"{}\")'.format(self.type or 'Basic', self.content)", "buggy_source_code": "def __repr__(self):\n    return 'Metadata({},\"{}\")'.format(str(self.type), self.content)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def span(self, start, end):\n    return self.content[start:end]", "buggy_source_code": "def span(self, start, end):\n    if self.content is None:\n        return None\n    return self.content[start:end]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def info(self, **vargs):\n    pass", "buggy_source_code": "def info(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def save(self, dataset, path, **kwargs):\n    dataset.to_netcdf(path, engine='scipy')", "buggy_source_code": "def save(self, dataset, path, **kwargs):\n    dataset.to_netcdf(path, engine='scipy', **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ipdb(ui, repo, msg, **opts):\n    import IPython\n    cl = repo.changelog\n    mf = repo.manifest\n    IPython.embed()", "buggy_source_code": "def ipdb(ui, repo, msg, **opts):\n    import IPython\n    cl = repo.changelog\n    mf = repo.manifest\n    (cl, mf)\n    IPython.embed()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def address_copy():\n    root.clipboard_clear()\n    root.clipboard_append(myaddress)", "buggy_source_code": "def address_copy():\n    root.clipboard_clear()\n    root.clipboard_append(keyring.myaddress)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def unwatch():\n    gui_address_t.delete(0, END)\n    gui_address_t.insert(INSERT, myaddress)\n    refresh(myaddress, s)", "buggy_source_code": "def unwatch():\n    gui_address_t.delete(0, END)\n    gui_address_t.insert(INSERT, keyring.myaddress)\n    refresh(keyring.myaddress, s)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def recover():\n    result = recovery.recover(key)\n    messagebox.showinfo('Recovery Result', result)", "buggy_source_code": "def recover():\n    result = recovery.recover(keyring.key)\n    messagebox.showinfo('Recovery Result', result)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _add_current_schema(self, kwds):\n    kwds.setdefault('_schema_name', connection.schema_name)", "buggy_source_code": "def _add_current_schema(self, kwds):\n    kwds['_schema_name'] = kwds.get('_schema_name', connection.schema_name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def current_window(self, keyctx):\n    t = self.focus_stack().top_window()\n    if t.keyctx == keyctx:\n        return t", "buggy_source_code": "def current_window(self, keyctx):\n    for s in self.stacks_sorted_by_focus():\n        t = s.top_window()\n        if t.keyctx == keyctx:\n            return t", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def current(self, keyctx):\n    t = self.focus_stack().top_widget()\n    if t.keyctx == keyctx:\n        return t", "buggy_source_code": "def current(self, keyctx):\n    for s in self.stacks_sorted_by_focus():\n        t = s.top_widget()\n        if t.keyctx == keyctx:\n            return t", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clear_langs(self):\n    self.lst_langs.clear()", "buggy_source_code": "def clear_langs(self):\n    self.lst_langs_src.clear()\n    self.lst_langs_tgt.clear()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def authenticate(self, password):\n    user_hash = hashlib.sha512(password + self.salt).hexdigest()\n    return self.saltedhash == user_hash", "buggy_source_code": "def authenticate(self, password):\n    user_hash = hashlib.sha512(password.encode('ascii', 'xmlcharrefreplace') + self.salt).hexdigest()\n    return self.saltedhash == user_hash", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.errorhandler(404)\ndef error_404(e):\n    return render_template('404.html', users=users)", "buggy_source_code": "@app.errorhandler(404)\ndef error_404(e):\n    userObj = getCurrentUserRecord()\n    return render_template('404.html', users=users, userRecord=userObj)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@host_context\ndef reload_wsgi():\n    pid = run('supervisorctl pid {{ project_name }}')\n    run('kill -HUP {}'.format(pid))", "buggy_source_code": "@host_context\ndef reload_wsgi():\n    pid = run('supervisorctl pid {{ project_name }}-{host}'.format(host=env.host))\n    run('kill -HUP {}'.format(pid))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test02(self):\n    lasso.Logout(None, lasso.providerTypeSp).msg_url", "buggy_source_code": "def test02(self):\n    try:\n        lasso.Logout(None, lasso.providerTypeSp).msg_url\n    except:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_root(self, tree):\n    return tree.items()[0]", "buggy_source_code": "def get_root(self, tree):\n    return list(tree.items())[0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def __iter__(self):\n    for fname in self.files:\n        for line in open(fname):\n            yield tokenize(line)", "buggy_source_code": "def __iter__(self):\n    for fname in self.files:\n        print('Reading file ', fname)\n        for line in open(fname):\n            print(line)\n            yield tokenize(line)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.http_client = AsyncHTTPClient()", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(TornadoBaseAPI, self).__init__(*args, **kwargs)\n    self.http_client = AsyncHTTPClient()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def render_docx(fp, *args, **kwargs):\n    content = pydocx.Docx2Html(fp)._parsed\n    return RenderResult(content=content, assets={})", "buggy_source_code": "def render_docx(fp, *args, **kwargs):\n    content = pydocx.Docx2Html(fp)._parsed\n    return RenderResult(content=content.encode('ascii', 'ignore'), assets={})", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, root):\n    self.root = Path(root)", "buggy_source_code": "def __init__(self, root):\n    self.root = Path(root, cwd)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef json_call(cls, url):\n    return JsonClient.request(url)", "buggy_source_code": "@classmethod\ndef json_call(cls, url):\n    cls.debug('calling url: %s' % url)\n    return JsonClient.request(url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _on_url_changed(self, url: str) -> None:\n    url = url.toString()\n    validate_url(self, url)", "buggy_source_code": "def _on_url_changed(self, url: str) -> None:\n    url = url.toString()\n    if url == 'about:blank':\n        return False\n    else:\n        validate_url(self, url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@property\ndef header(self):\n    return 'Offset: %d Flags: %d UID: %d' % (self.offset, self.flags, self.uid)", "buggy_source_code": "@property\ndef header(self):\n    return 'Offset: %d Flags: %d UID: %d First 4 bytes: %r Size: %d' % (self.offset, self.flags, self.uid, self.raw[:4], len(self.raw))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def generate_manifest():\n    return textwrap.dedent('\\n        #   Edit this manifest to include information pertaining to each sample to be run.\\n        #   There are 4 tab-separated columns: filetype, paired/unpaired, UUID, URL(s) to sample\\n        #\\n        #   filetype    Filetype of the sample. Options: \"tar\" or \"fq\", for tarball/tarfile or fastq/fastq.gz\\n        #   paired      Indicates whether the data is paired or single-ended. Options:  \"paired\" or \"single\"\\n        #   UUID        This should be a unique identifier for the sample to be processed\\n        #   URL         A URL (http://, ftp://, file://, s3://, gnos://) pointing to the sample\\n        #\\n        #   If sample is being submitted as a fastq pair, provide two URLs separated by a comma.\\n        #\\n        #   Examples of several combinations are provided below. Lines beginning with # are ignored.\\n        #\\n        #   tar paired  UUID_1  file:///path/to/sample.tar\\n        #   fq  paired  UUID_2  file:///path/to/R1.fq.gz,file:///path/to/R2.fq.gz\\n        #   tar single  UUID_3  http://sample-depot.com/single-end-sample.tar\\n        #   tar paired  UUID_4  s3://my-bucket-name/directory/paired-sample.tar.gz\\n        #   fq  single  UUID_5  s3://my-bucket-name/directory/single-end-file.fq\\n        #\\n        #   Place your samples below, one per line.\\n        '[1:])", "buggy_source_code": "def generate_manifest():\n    return textwrap.dedent('\\n        #   Edit this manifest to include information pertaining to each sample to be run.\\n        #   There are 4 tab-separated columns: filetype, paired/unpaired, UUID, URL(s) to sample\\n        #\\n        #   filetype    Filetype of the sample. Options: \"tar\" or \"fq\", for tarball/tarfile or fastq/fastq.gz\\n        #   paired      Indicates whether the data is paired or single-ended. Options:  \"paired\" or \"single\"\\n        #   UUID        This should be a unique identifier for the sample to be processed\\n        #   URL         A URL {scheme} pointing to the sample\\n        #\\n        #   If sample is being submitted as a fastq pair, provide two URLs separated by a comma.\\n        #\\n        #   Examples of several combinations are provided below. Lines beginning with # are ignored.\\n        #\\n        #   tar paired  UUID_1  file:///path/to/sample.tar\\n        #   fq  paired  UUID_2  file:///path/to/R1.fq.gz,file:///path/to/R2.fq.gz\\n        #   tar single  UUID_3  http://sample-depot.com/single-end-sample.tar\\n        #   tar paired  UUID_4  s3://my-bucket-name/directory/paired-sample.tar.gz\\n        #   fq  single  UUID_5  s3://my-bucket-name/directory/single-end-file.fq\\n        #\\n        #   Place your samples below, one per line.\\n        '.format(scheme=[x + '://' for x in schemes])[1:])", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def generate_config():\n    return textwrap.dedent('\\n        # RNA-seq CGL Pipeline configuration file\\n        # This configuration file is formatted in YAML. Simply write the value (at least one space) after the colon.\\n        # Edit the values in this configuration file and then rerun the pipeline: \"toil-rnaseq run\"\\n        # Just Kallisto or STAR/RSEM can be run by supplying only the inputs to those tools\\n        # Comments (beginning with #) do not need to be removed. Optional parameters may be left blank.\\n        ##############################################################################################################\\n        # Required: URL (http, file, s3) to index tarball used by STAR\\n        star-index: s3://cgl-pipeline-inputs/rnaseq_cgl/starIndex_hg38_no_alt.tar.gz\\n\\n        # Required: URL (http, file, s3) to kallisto index file.\\n        kallisto-index: s3://cgl-pipeline-inputs/rnaseq_cgl/kallisto_hg38.idx\\n\\n        # Required: URL (http, file, s3) to reference tarball used by RSEM\\n        rsem-ref: s3://cgl-pipeline-inputs/rnaseq_cgl/rsem_ref_hg38_no_alt.tar.gz\\n\\n        # NOTE: Pipeline requires at least one output option\\n        # Optional: Provide a full file path (/path/to/output-dir) where results will appear\\n        output-dir:\\n\\n        # Optional: Provide an s3 path (s3://bucket/dir) where results will appear\\n        s3-output-dir:\\n\\n        # Optional: If true, will preprocess samples with cutadapt using adapter sequences.\\n        cutadapt: true\\n\\n        # Optional: If true, will run FastQC and include QC in sample output\\n        fastqc: true\\n\\n        # Adapter sequence to trim. Defaults set for Illumina\\n        fwd-3pr-adapter: AGATCGGAAGAG\\n\\n        # Adapter sequence to trim (for reverse strand). Defaults set for Illumina\\n        rev-3pr-adapter: AGATCGGAAGAG\\n\\n        # Optional: Provide a full path to a 32-byte key used for SSE-C Encryption in Amazon\\n        ssec:\\n\\n        # Optional: Provide a full path to a CGHub Key used to access GNOS hosted data\\n        gtkey:\\n\\n        # Optional: If true, saves the aligned bam (by coordinate) produced by STAR\\n        # You must also specify an ssec key if you want to upload to the s3-output-dir\\n        save-bam:\\n\\n        # Optional: If true, uses resource requirements appropriate for continuous integration\\n        ci-test:\\n    '[1:])", "buggy_source_code": "def generate_config():\n    return textwrap.dedent('\\n        # RNA-seq CGL Pipeline configuration file\\n        # This configuration file is formatted in YAML. Simply write the value (at least one space) after the colon.\\n        # Edit the values in this configuration file and then rerun the pipeline: \"toil-rnaseq run\"\\n        # Just Kallisto or STAR/RSEM can be run by supplying only the inputs to those tools\\n        # Local inputs follow the URL convention: file:///full/path/to/input\\n        # Comments (beginning with #) do not need to be removed. Optional parameters may be left blank.\\n        ##############################################################################################################\\n        # Required: URL {scheme} to index tarball used by STAR\\n        star-index: s3://cgl-pipeline-inputs/rnaseq_cgl/starIndex_hg38_no_alt.tar.gz\\n\\n        # Required: URL {scheme} to kallisto index file.\\n        kallisto-index: s3://cgl-pipeline-inputs/rnaseq_cgl/kallisto_hg38.idx\\n\\n        # Required: URL {scheme} to reference tarball used by RSEM\\n        rsem-ref: s3://cgl-pipeline-inputs/rnaseq_cgl/rsem_ref_hg38_no_alt.tar.gz\\n\\n        # NOTE: Pipeline requires at least one output option\\n        # Optional: Provide a full file path (/path/to/output-dir) where results will appear\\n        output-dir:\\n\\n        # Optional: Provide an s3 path (s3://bucket/dir) where results will appear\\n        s3-output-dir:\\n\\n        # Optional: If true, will preprocess samples with cutadapt using adapter sequences.\\n        cutadapt: true\\n\\n        # Optional: If true, will run FastQC and include QC in sample output\\n        fastqc: true\\n\\n        # Adapter sequence to trim. Defaults set for Illumina\\n        fwd-3pr-adapter: AGATCGGAAGAG\\n\\n        # Adapter sequence to trim (for reverse strand). Defaults set for Illumina\\n        rev-3pr-adapter: AGATCGGAAGAG\\n\\n        # Optional: Provide a full path to a 32-byte key used for SSE-C Encryption in Amazon\\n        ssec:\\n\\n        # Optional: Provide a full path to a CGHub Key used to access GNOS hosted data\\n        gtkey:\\n\\n        # Optional: If true, saves the aligned bam (by coordinate) produced by STAR\\n        # You must also specify an ssec key if you want to upload to the s3-output-dir\\n        save-bam:\\n\\n        # Optional: If true, uses resource requirements appropriate for continuous integration\\n        ci-test:\\n    '.format(scheme=[x + '://' for x in schemes])[1:])", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_preflop(self):\n    self.assertEqual(False, self.state.is_preflop())", "buggy_source_code": "def test_preflop(self):\n    self.assertEqual(True, self.state.is_preflop())", "edit_actions": []}
{"fixed_source_code": "def make_tuple(data):\n    out = [round(i, 4) for i in data]\n    return tuple(out)", "buggy_source_code": "def make_tuple(data):\n    out = [round(i, ROUND) for i in data]\n    return tuple(out)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def failure(self, exception, text):\n    self.done_event.set()", "buggy_source_code": "def failure(self, exception, text):\n    self.playback_error = True\n    self.playback_error_message = f'Could not play back {text}: {exception}'\n    self.done_event.set()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_error_code_from_error(error):\n    code = error.code\n    if isinstance(code, Enum):\n        code = code.value\n    if code not in ERROR_CODES:\n        return ERROR_CODE_UNKNOWN\n    return code", "buggy_source_code": "def get_error_code_from_error(error):\n    code = error.code\n    if isinstance(code, Enum):\n        code = code.value\n    if code not in ERROR_CODES:\n        return 'null'\n    return code", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, debug_level, filename):\n    self.filename = filename\n    self.f = None\n    self.debug_level = int(debug_level)", "buggy_source_code": "def __init__(self, debug_level, filename):\n    self.filename = os.path.expanduser(filename)\n    self.f = None\n    self.debug_level = int(debug_level)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _rpc(self, frame_value):\n    if self.channel.closed:\n        raise exceptions.ChannelClosedException()\n    return self.channel.rpc(frame_value)", "buggy_source_code": "def _rpc(self, frame_value):\n    LOGGER.debug('Issuing RPC to RabbitMQ: %r', frame_value)\n    if self.channel.closed:\n        raise exceptions.ChannelClosedException()\n    return self.channel.rpc(frame_value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def finish(self):\n    self.running = False", "buggy_source_code": "def finish(self):\n    self.lock.acquire()\n    self.running = False\n    self.lock.release()\n    self.thErrorHandler.join()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_process_market_book(self):\n    with self.assertRaises(NotImplementedError):\n        mock_market_book = mock.Mock()\n        self.base_recorder.process_market_book(mock_market_book)", "buggy_source_code": "def test_process_market_book(self):\n    with self.assertRaises(NotImplementedError):\n        mock_market_book = mock.Mock()\n        self.base_recorder.process_market_book(mock_market_book, 0)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def write(self, data):\n    logger.debug('Send to %s' % self.name)\n    logger.debug('  message: %s' % (data,))\n    self.socket.send_json(data)", "buggy_source_code": "def write(self, data):\n    logger.debug('Send from %s to %s' % (self.my_actor, self.name))\n    logger.debug('  message: %s' % (data,))\n    self.socket.send_json(data)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __enter__(self):\n    return self", "buggy_source_code": "def __enter__(self):\n    self._uti_mpi('in')\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef ControlTypeName(self):\n    return ControlTypeNameDict[self.ControlType]", "buggy_source_code": "@property\ndef ControlTypeName(self):\n    return ControlTypeNameDict.get(self.ControlType, 'UnknownControl')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def copy(self):\n    parser_copy = RequestParser(self.argument_class, self.namespace_class)\n    parser_copy.args = deepcopy(self.args)\n    return parser_copy", "buggy_source_code": "def copy(self):\n    parser_copy = self.__class__(self.argument_class, self.namespace_class)\n    parser_copy.args = deepcopy(self.args)\n    return parser_copy", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR + 'chembl_{}uM.csv'.format(self.value))", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR.format(self.version) + 'chembl_{}uM.csv'.format(self.value))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def requires(self):\n    return [FinalTask(1), FinalTask(10)]", "buggy_source_code": "def requires(self):\n    return [FinalTask(value=1, version=self.version), FinalTask(value=10, version=self.version)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def requires(self):\n    return [GetActivities(self.value)]", "buggy_source_code": "def requires(self):\n    return [GetActivities(value=self.value, version=self.version)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def requires(self):\n    return [GetDrugs(), MakeModel(self.value)]", "buggy_source_code": "def requires(self):\n    return [GetDrugs(version=self.version), MakeModel(value=self.value, version=self.version)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR + 'chembl_drugs.csv')", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR.format(self.version) + 'chembl_drugs.csv')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR + 'final_result_{}uM.csv'.format(self.value))", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR.format(self.version) + 'final_result_{}uM.csv'.format(self.value))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR + 'merged_tables.csv')", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR.format(self.version) + 'merged_tables.csv')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR + 'models/{}uM/mNB_{}uM_all.pkl'.format(self.value, self.value))", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR.format(self.version) + 'models/{}uM/mNB_{}uM_all.pkl'.format(self.value, self.value))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR + 'drug_predictions_{}uM.csv'.format(self.value))", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(OUT_DIR.format(self.version) + 'drug_predictions_{}uM.csv'.format(self.value))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def CSVPVsOverall(self):\n    return [int(self.engine)] + self.tensorInputPVsOverall()", "buggy_source_code": "def CSVPVsOverall(self):\n    if self.tensorInputPVsOverall() is not None:\n        return [int(self.engine)] + self.tensorInputPVsOverall()\n    return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def read_events(eventsfile):\n    import pandas as pd\n    data = pd.read_csv(eventsfile)\n    params = read_metadata(eventsfile + '.meta')\n    return EventData(data, eventsfile, params)", "buggy_source_code": "def read_events(eventsfile):\n    import pandas as pd\n    data = pd.read_csv(eventsfile).fillna('')\n    params = read_metadata(eventsfile + '.meta')\n    return EventData(data, eventsfile, params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cursor_position(x=0, y=0, get_string=False):\n    return escape(CSI + attributes(y + 1, x + 1), get_string)", "buggy_source_code": "def cursor_position(x=0, y=0, get_string=False):\n    return escape(CSI + attributes(y + 1, x + 1) + 'f', get_string)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def _bytes(s, encoding='ascii'):\n    return s.encode(encoding)", "buggy_source_code": "def _bytes(s, encoding='ascii'):\n    if isinstance(s, bytes):\n        return s\n    else:\n        return s.encode(encoding)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def version():\n    tprint('orangetool', font='bulbhead')\n    return 'orangetool-v' + VERSION", "buggy_source_code": "def version():\n    tprint('orangetool', font='bulbhead')\n    tprint('v' + VERSION, font='bulbhead')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_all_permissions(self, user, obj):\n    if obj is None:\n        return set()\n    checker = ObjectPermissionChecker(user)\n    return checker.get_perms(obj)", "buggy_source_code": "def get_all_permissions(self, user, obj=None):\n    if obj is None:\n        return set()\n    checker = ObjectPermissionChecker(user)\n    return checker.get_perms(obj)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def squealy_interface(request):\n    return render(request, 'index.html')", "buggy_source_code": "@api_view(['GET'])\n@permission_classes(SquealySettings.get('Authoring_Interface_Permission_Classes', (IsAdminUser,)))\ndef squealy_interface(request):\n    return render(request, 'index.html')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_procedure_params(self):\n    return []", "buggy_source_code": "def _get_procedure_params(self):\n    logging.debug('Retrieving procedure parameters')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_checks(self):\n    return []", "buggy_source_code": "def _get_checks(self):\n    logging.debug('Retrieving check constraints')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_foreign_key_cols(self):\n    return []", "buggy_source_code": "def _get_foreign_key_cols(self):\n    logging.debug('Retrieving foreign key columns')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_tables(self):\n    return []", "buggy_source_code": "def _get_tables(self):\n    logging.debug('Retrieving tables')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_procedures(self):\n    return []", "buggy_source_code": "def _get_procedures(self):\n    logging.debug('Retrieving procedures')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_views(self):\n    return []", "buggy_source_code": "def _get_views(self):\n    logging.debug('Retrieving views')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_unique_key_cols(self):\n    return []", "buggy_source_code": "def _get_unique_key_cols(self):\n    logging.debug('Retrieving unique key columns')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_relation_cols(self):\n    return []", "buggy_source_code": "def _get_relation_cols(self):\n    logging.debug('Retrieving relation columns')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_function_params(self):\n    return []", "buggy_source_code": "def _get_function_params(self):\n    logging.debug('Retrieving function parameters')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_functions(self):\n    return []", "buggy_source_code": "def _get_functions(self):\n    logging.debug('Retrieving functions')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_tablespaces(self):\n    return []", "buggy_source_code": "def _get_tablespaces(self):\n    logging.debug('Retrieving tablespaces')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_index_cols(self):\n    return []", "buggy_source_code": "def _get_index_cols(self):\n    logging.debug('Retrieving index columns')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_triggers(self):\n    return []", "buggy_source_code": "def _get_triggers(self):\n    logging.debug('Retrieving triggers')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_schemas(self):\n    return []", "buggy_source_code": "def _get_schemas(self):\n    logging.debug('Retrieving schemas')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_aliases(self):\n    return []", "buggy_source_code": "def _get_aliases(self):\n    logging.debug('Retrieving aliases')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_foreign_keys(self):\n    return []", "buggy_source_code": "def _get_foreign_keys(self):\n    logging.debug('Retrieving foreign keys')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_trigger_dependencies(self):\n    return []", "buggy_source_code": "def _get_trigger_dependencies(self):\n    logging.debug('Retrieving trigger dependencies')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_datatypes(self):\n    return []", "buggy_source_code": "def _get_datatypes(self):\n    logging.debug('Retrieving datatypes')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_view_dependencies(self):\n    return []", "buggy_source_code": "def _get_view_dependencies(self):\n    logging.debug('Retrieving view dependencies')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_check_cols(self):\n    return []", "buggy_source_code": "def _get_check_cols(self):\n    logging.debug('Retrieving check constraint columns')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_indexes(self):\n    return []", "buggy_source_code": "def _get_indexes(self):\n    logging.debug('Retrieving indexes')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_unique_keys(self):\n    return []", "buggy_source_code": "def _get_unique_keys(self):\n    logging.debug('Retrieving unique keys')\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef name(self):\n    name = self._data['name']\n    name = name.replace('_', ' ')\n    return name", "buggy_source_code": "@property\ndef name(self):\n    name = self._data['name'].value\n    name = name.replace('_', ' ')\n    return name", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def handle_confirm_no(self):\n    self.state = 'dialog'\n    self.dialog = create_prompt('Would you like to sell anything else?')\n    self.next = 'company_menu'\n    self.confirm_menu = None\n    self.shop_menu = None", "buggy_source_code": "def handle_confirm_no(self):\n    self.state = 'dialog'\n    self.dialog = create_prompt('Would you like to sell anything else?')\n    self.company_menu_type = 'selling'\n    self.next = 'company_menu'\n    self.confirm_menu = None\n    self.shop_menu = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def build_mock_mapping(name):\n    mock_driver = mock.Mock()\n    browser_mapping = {name: mock_driver}\n    mock_driver.name = name\n    return browser_mapping", "buggy_source_code": "def build_mock_mapping(name):\n    mock_driver = mock.Mock()\n    browser_mapping = {name: mock_driver}\n    mock_driver.return_value.name = name\n    return browser_mapping", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def vertices_from_face(self, face):\n    return self._loop_topo(TopAbs_VERTEX, face)", "buggy_source_code": "def vertices_from_face(self, face: TopoDS_Face) -> Iterator[TopoDS_Vertex]:\n    return self._loop_topo(TopAbs_VERTEX, face)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def faces_from_solids(self, solid):\n    return self._loop_topo(TopAbs_FACE, solid)", "buggy_source_code": "def faces_from_solids(self, solid: TopoDS_Solid) -> Iterator[TopoDS_Face]:\n    return self._loop_topo(TopAbs_FACE, solid)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_edge(topods_shape):\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_EDGE", "buggy_source_code": "def is_edge(topods_shape: TopoDS_Shape) -> bool:\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_EDGE", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_solid(topods_shape):\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_SOLID", "buggy_source_code": "def is_solid(topods_shape: TopoDS_Shape) -> bool:\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_SOLID", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def wires_from_face(self, face):\n    return self._loop_topo(TopAbs_WIRE, face)", "buggy_source_code": "def wires_from_face(self, face: TopoDS_Face) -> Iterator[TopoDS_Wire]:\n    return self._loop_topo(TopAbs_WIRE, face)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_face(topods_shape):\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_FACE", "buggy_source_code": "def is_face(topods_shape: TopoDS_Shape) -> bool:\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_FACE", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@property\ndef CURRENT_ADMIN(self):\n    with sa.Session() as session:\n        return session.admin_attendee().to_dict()", "buggy_source_code": "@property\ndef CURRENT_ADMIN(self):\n    try:\n        with sa.Session() as session:\n            return session.admin_attendee().to_dict()\n    except:\n        return {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def stop_sys_pipes():\n    global _mighty_wurlitzer\n    if _mighty_wurlitzer is not None:\n        _mighty_wurlitzer.__exit__(None, None, None)\n        _mighty_wurlitzer = None", "buggy_source_code": "def stop_sys_pipes():\n    global _mighty_wurlitzer\n    with _mighty_lock:\n        if _mighty_wurlitzer is not None:\n            _mighty_wurlitzer.__exit__(None, None, None)\n            _mighty_wurlitzer = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_cursor(self, name=None):\n    return self.get_conn().cursor(name=name)", "buggy_source_code": "def get_cursor(self, name=None):\n    if name:\n        return self.get_conn().cursor(name=name)\n    return self.get_conn().cursor()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def usage():\n    sys.stderr.write('usage: ' + sys.argv[0] + ' <inputfile.csv> ' + '<outputfile.pdb>\\n')", "buggy_source_code": "def usage():\n    sys.stderr.write('usage: ' + sys.argv[0] + ' <inputfile.csv> ' + '<outputfile.pdb>\\n')\n    sys.stderr.write(sys.argv[0] + ' converts files in comma-separated format ' + '(CSV) into PDB files for molecular graphics visualisation software')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_weighted_feature_edit_distance(self):\n    self.assertEqual(self.weighted_feature_edit_distance('p', 'b'), 1 / 8)", "buggy_source_code": "def test_weighted_feature_edit_distance(self):\n    self.assertEqual(self.dist.weighted_feature_edit_distance('p', 'b'), 1 / 8)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_weighted_feature_edit_distance_div_maxlen(self):\n    self.assertEqual(self.weighted_feature_edit_distance_div_maxlen('p', 'b'), 1 / 8)", "buggy_source_code": "def test_weighted_feature_edit_distance_div_maxlen(self):\n    self.assertEqual(self.dist.weighted_feature_edit_distance_div_maxlen('p', 'b'), 1 / 8)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def login_failure(self):\n    if self.change_email:\n        return JSONResponse({'redirect': self.failure_url})\n    return super(BrowserIDVerify, self).login_success()", "buggy_source_code": "def login_failure(self, error=None):\n    if self.change_email:\n        return JSONResponse({'redirect': self.failure_url})\n    return super(BrowserIDVerify, self).login_failure(error)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def update(self):\n    try:\n        self._animation.update()\n    except StopIteration:\n        raise", "buggy_source_code": "def update(self):\n    if not self._animation:\n        return\n    try:\n        self._animation.update()\n    except StopIteration:\n        raise", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reset(self):\n    return False", "buggy_source_code": "def reset(self, modelfile, sourcefile):\n    os.unlink(modelfile)\n    os.unlink(modelfile.replace('.ibase', '.wgt'))\n    os.unlink(modelfile.replace('.train', '.train'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def lineString_to_GPX(geom):\n    return [point_to_GPX(point) for point in geom]", "buggy_source_code": "def lineString_to_GPX(geom):\n    return [point_to_GPX(point, klass=gpxpy.gpx.GPXRoutePoint) for point in geom]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_map_path(self, source_key, path, color):\n    self.sources.append(source_key)\n    self.ids.track.add_path(str(source_key), path, color)", "buggy_source_code": "def add_map_path(self, source_key, path, color):\n    self.sources[str(source_key)] = source_key\n    self.ids.track.add_path(str(source_key), path, color)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def item(self):\n    return self.lib[self.id]", "buggy_source_code": "def item(self):\n    if self.id in self.lib:\n        return self.lib[self.id]\n    else:\n        raise ValueError(f'Uncached item of id {self.id}.')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ex_unfreeze_container(self, container, ex_timeout):\n    return self._do_container_action(container=container, action='unfreeze', timeout=ex_timeout, force=True, stateful=True)", "buggy_source_code": "def ex_unfreeze_container(self, container, ex_timeout=default_time_out):\n    return self._do_container_action(container=container, action='unfreeze', timeout=ex_timeout, force=True, stateful=True)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def ex_freeze_container(self, container, ex_timeout):\n    return self._do_container_action(container=container, action='freeze', timeout=ex_timeout, force=True, stateful=True)", "buggy_source_code": "def ex_freeze_container(self, container, ex_timeout=default_time_out):\n    return self._do_container_action(container=container, action='freeze', timeout=ex_timeout, force=True, stateful=True)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    print('Python Haxelow Example')\n    db = HaxeLow('db.json')\n    db.col(Person).append(Person('Test', 50))\n    db.save()", "buggy_source_code": "def __init__(self):\n    print('Python Haxelow Example')\n    db = HaxeLow('db.json')\n    db.col(Person).append(Person('Test', 50))\n    db.save()\n    print('open /bin/db.json')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send_notifications(self, request):\n    self.send_email_notification(request, ['marthaurion@gmail.com'])\n    if self.parent:\n        self.parent.notify_authors(request)", "buggy_source_code": "def send_notifications(self, request):\n    self.send_email_notification(request, ['marthaurion@gmail.com'])\n    if self.parent:\n        self.send_email_notification(request, self.parent.notify_authors(request))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def configure(self, interval=2, timeout=10):\n    self.interval = interval\n    self.timeout = timeout", "buggy_source_code": "def configure(self, interval=2, timeout=10, **kwargs):\n    self.interval = interval\n    self.timeout = timeout", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@share\ndef clean():\n    session.clean()\n    fm = FileManager()\n    fm.removeDir('build')\n    fm.removeDir('source/script')", "buggy_source_code": "@share\ndef clean():\n    session.clean()\n    profile = Profile.Profile(session)\n    fm = profile.getFileManager()\n    fm.removeDir('build')\n    fm.removeDir('source/script')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def animation_stop():\n    global animation, animation_image_backup, animation_frames\n    animation = None\n    animation_frames = 0\n    if animation_image_backup is not None:\n        draw_image(animation_image_backup)\n    animation_image_backup = None", "buggy_source_code": "def animation_stop():\n    global animation, animation_image_backup, animation_frames\n    animation = None\n    animation_frames = 0\n    if animation_image_backup is not None:\n        draw_image(animation_image_backup)\n        show()\n    animation_image_backup = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def artist_paned_button_press_callback(self, widget, *args):\n    self._from_paned_handle = True", "buggy_source_code": "def artist_paned_button_press_callback(self, widget, event):\n    self._from_paned_handle = 1\n    if event.type == Gdk.EventType._2BUTTON_PRESS:\n        self._from_paned_handle = 2", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef chest_giant_index(self):\n    return 0", "buggy_source_code": "@property\ndef chest_giant_index(self):\n    return self.chests['cycle'].index('Giant')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_version(self):\n    ptr = self._get_version_func()\n    version_number = ctypes.cast(ptr, ctypes.c_char_p).value\n    self._free_json_mem_func(ptr)\n    return version_number", "buggy_source_code": "def get_version(self):\n    ptr = self._get_version_func()\n    version_number = ctypes.cast(ptr, ctypes.c_char_p).value\n    self._free_json_mem_func(ctypes.c_void_p(ptr))\n    return version_number", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _stop_wav(self):\n    self.stream.close()", "buggy_source_code": "def _stop_wav(self):\n    try:\n        self.stream.close()\n    except AttributeError:\n        self.stream = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _queue_wav(self, wav_file, start=False):\n    self._wf = wave.open(wav_file)\n    self._get_stream(start=start)", "buggy_source_code": "def _queue_wav(self, wav_file, start=False):\n    self.wf = wave.open(wav_file)\n    self.validate()\n    self._get_stream(start=start)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def clearSubscribers():\n    self.subscribers = []", "buggy_source_code": "def clearSubscribers(self):\n    self.subscribers = []", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def upcoming(self):\n    today = timezone.now()\n    next_week = today + timezone.timedelta(weeks=1)\n    return self.filter(start__gte=today, start__lte=next_week)", "buggy_source_code": "def upcoming(self):\n    today = timezone.now()\n    next_week = today + timezone.timedelta(weeks=1)\n    return self.filter(start__gte=today, start__lte=next_week).order_by('start')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'podcast stuff'", "buggy_source_code": "def __str__(self):\n    return self.get_latest_rev().title", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _user_id_default(self):\n    return pwd.getpwnam(self.user.name).pw_uid", "buggy_source_code": "def _user_id_default(self):\n    import pwd\n    return pwd.getpwnam(self.user.name).pw_uid", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def argerror(*msg_args):\n    print(*msg_args, '\\n')\n    cmany_main(['-h'])\n    exit(1)", "buggy_source_code": "def argerror(*msg_args):\n    print(*msg_args, end='')\n    print('\\n')\n    cmany_main(['-h'])\n    exit(1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def __call__(self, value):\n    if value < self.value:\n        raise ValidationError('Must be greater than or equal to {0}.'.format(value))", "buggy_source_code": "def __call__(self, value):\n    if value < self.value:\n        raise ValidationError('Must be greater than or equal to {0}.'.format(self.value))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def endFunc(self):\n    self.gen.asm.append('\\t.size ' + self.funcName + ', .-' + self.funcName + '\\n')\n    pass", "buggy_source_code": "def endFunc(self):\n    self.showMap()\n    self.gen.asm.append('\\t.size ' + self.funcName + ', .-' + self.funcName + '\\n')\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_victim_notstarted(self):\n    response = self.client.get(reverse('DiscoveredVictimsView'))\n    self.assertEqual(response.status_code, 200)", "buggy_source_code": "@patch('breach.helpers.network.scan_network')\ndef test_victim_notstarted(self, scan_network):\n    response = self.client.get(reverse('DiscoveredVictimsView'))\n    self.assertEqual(response.status_code, 200)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, username=None, password=None):\n    Token.__init__(self)\n    self.username = username\n    self.password = password", "buggy_source_code": "def __init__(self, username=None, password=None):\n    Token.__init__(self)\n    self.username = username\n    self.password = password\n    self.nonce = None\n    self.created = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_opt_defaults():\n    log.set_defaults(default_log_levels=['amqp=WARNING', 'amqplib=WARNING', 'qpid.messaging=INFO', 'oslo.messaging=INFO', 'sqlalchemy=WARNING', 'stevedore=INFO', 'eventlet.wsgi.server=INFO', 'iso8601=WARNING', 'requests=WARNING', 'neutronclient=WARNING', 'glanceclient=WARNING', 'urllib3.connectionpool=WARNING', 'keystonemiddleware.auth_token=INFO', 'keystoneauth.session=INFO'])", "buggy_source_code": "def update_opt_defaults():\n    log.set_defaults(default_log_levels=['amqp=WARNING', 'amqplib=WARNING', 'qpid.messaging=INFO', 'oslo.messaging=INFO', 'oslo_messaging=INFO', 'sqlalchemy=WARNING', 'stevedore=INFO', 'eventlet.wsgi.server=INFO', 'iso8601=WARNING', 'requests=WARNING', 'neutronclient=WARNING', 'glanceclient=WARNING', 'urllib3.connectionpool=WARNING', 'keystonemiddleware.auth_token=INFO', 'keystoneauth.session=INFO'])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_type_definition(self, name):\n    if name in self._unavailables_types:\n        raise KeyError()\n    else:\n        return self.parent.get_type_definition(name)", "buggy_source_code": "def get_type_definition(self, name):\n    if name in self._unavailables_types:\n        raise KeyError('This type definition is not available here')\n    else:\n        return self.parent.get_type_definition(name)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, _globals=None, _locals=None):\n    self._reset()", "buggy_source_code": "def __init__(self, debug=False, _globals=None, _locals=None):\n    self._reset()\n    self._debug = debug", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _finalize(self):\n    if self.codec is not None:\n        (self.fourcc, self.codec) = fourcc.resolve(self.codec)", "buggy_source_code": "def _finalize(self):\n    MediaInfo._finalize(self)\n    if self.codec is not None:\n        (self.fourcc, self.codec) = fourcc.resolve(self.codec)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _finalize(self):\n    if self.codec is not None:\n        (self.fourcc, self.codec) = fourcc.resolve(self.codec)", "buggy_source_code": "def _finalize(self):\n    MediaInfo._finalize(self)\n    if self.codec is not None:\n        (self.fourcc, self.codec) = fourcc.resolve(self.codec)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def interrupt_Event(queue, gpio, level, tick):\n    queue.put(time())", "buggy_source_code": "def interrupt_Event(queue, gpio, level, tick):\n    queue.put(int(time()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_version():\n    global __version__\n    if __version__ is not None:\n        import cerberus\n        __version__ = cerberus.__version__", "buggy_source_code": "def get_version():\n    global __version__\n    if __version__ is not None:\n        import cerberus\n        __version__ = cerberus.__version__\n    return __version__", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@python_api_test\ndef test_with_dwarf_and_attach_to_process_with_id_api(self):\n    self.buildDwarf()\n    self.hello_world_attach_with_id_api()", "buggy_source_code": "@python_api_test\ndef test_with_dwarf_and_attach_to_process_with_id_api(self):\n    self.buildDwarf(dictionary=self.d)\n    self.setTearDownCleanup(dictionary=self.d)\n    self.hello_world_attach_with_id_api()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@python_api_test\ndef test_with_dwarf_and_process_launch_api(self):\n    self.buildDwarf()\n    self.hello_world_python()", "buggy_source_code": "@python_api_test\ndef test_with_dwarf_and_process_launch_api(self):\n    self.buildDwarf(dictionary=self.d)\n    self.setTearDownCleanup(dictionary=self.d)\n    self.hello_world_python()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@python_api_test\ndef test_with_dwarf_and_attach_to_process_with_name_api(self):\n    self.buildDwarf()\n    self.hello_world_attach_with_name_api()", "buggy_source_code": "@python_api_test\ndef test_with_dwarf_and_attach_to_process_with_name_api(self):\n    self.buildDwarf(dictionary=self.d)\n    self.setTearDownCleanup(dictionary=self.d)\n    self.hello_world_attach_with_name_api()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_login_and_redirect(self):\n    expected_url = '%s%s' % (self.live_server_url, '/flutype/viruses/')\n    self.login(expected_url)\n    self.assertIn(expected_url, self.driver.current_url)", "buggy_source_code": "@tag('local')\ndef test_login_and_redirect(self):\n    expected_url = '%s%s' % (self.live_server_url, '/flutype/viruses/')\n    self.login(expected_url)\n    self.assertIn(expected_url, self.driver.current_url)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def hasHotkey(self, seq):\n    try:\n        seq = QKeySequence(seq)\n    except:\n        pass\n    return seq.toString in config.default.get('hotkeys', {})", "buggy_source_code": "def hasHotkey(self, seq):\n    try:\n        seq = QKeySequence(seq)\n    except:\n        pass\n    return seq.toString() in config.default.get('hotkeys', {})", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def get_action(self, action_name):\n\n    def print_lamba(state):\n        print('Executing {0}'.format(action_name))\n    return print_lamba", "buggy_source_code": "def get_action(self, action_name):\n\n    def print_lamba(c):\n        c.s.label = action_name\n        print('Executing {0}'.format(action_name))\n    return print_lamba", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_with_nested_folder(self, generate_logs, p):\n    result = p.process_logs('xgs', ref_type='folder')\n    self.check(p, result)", "buggy_source_code": "@pytest.mark.usefixtures('generate_logs')\ndef test_with_nested_folder(self, tmpdir, p):\n    result = p.process_logs(tmpdir.strpath, ref_type='folder')\n    self.check(p, result)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _init_attrs(self, args):\n    for (key, value) in six.iteritems(args):\n        setattr(self, key, ParseType.convert_from_parse(value))", "buggy_source_code": "def _init_attrs(self, args):\n    for (key, value) in six.iteritems(args):\n        setattr(self, key, ParseType.convert_from_parse(value))\n    self._is_loaded = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def send_message(self, msg, binary=False):\n    self.base.send('msg,' + self.name + ',' + msg)", "buggy_source_code": "def send_message(self, msg, stats=True, binary=False):\n    self.base.send('msg,' + self.name + ',' + msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_entitlement(self):\n    self.assertTrue(self.downloader.check_els_entitlement(self.doi))", "buggy_source_code": "def test_entitlement(self):\n    self.assertTrue(self.downloader.check_els_entitlement(self.doi) in [True, False])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, sess, tid):\n    RefType.__init__(self, sess, tid)", "buggy_source_code": "def __init__(self, sess, tid):\n    RefType.__init__(self, sess, 'L', tid)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@skip('NI')\ndef test_interactive(self):\n    pass", "buggy_source_code": "@patch('code.interact')\ndef test_interactive(self, mock_interact):\n    debug_cmd = self.get_instance()\n    debug_cmd.do_debug('--interact')\n    self.assertTrue(mock_interact.called)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return ', '.join(self.errors)", "buggy_source_code": "def __str__(self):\n    return ', '.join(sorted(self.errors))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __repr__(self):\n    return 'SignupException(%s)' % ', '.join(self.errors)", "buggy_source_code": "def __repr__(self):\n    return 'SignupException(%s)' % ', '.join(sorted(self.errors))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def send_api_response(data_json):\n    response = flask.make_response(data_json)\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    response.headers['Content-Type'] = 'application/json'\n    return response", "buggy_source_code": "def send_api_response(data_json):\n    response = flask.make_response(data_json)\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    response.headers['Content-Type'] = 'application/json'\n    response.status_code = 200\n    return response", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def match_request(self, req):\n    return", "buggy_source_code": "def match_request(self, req):\n    return req.path_info == '/milestones'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def substitute(self, variables):\n\n    def get_var(varname):\n        return str(variables[varname])\n    return self._subst(get_var)", "buggy_source_code": "def substitute(self, variables):\n\n    def get_var(varname):\n        return str(variables[varname])\n    print('--- variables={}'.format(variables))\n    return self._subst(get_var)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_errors_are_built(self):\n    assert_equals(len(self._errors), 1)\n    assert_equals(self._errors[0].message, \"Error in file 'normal.html' in table 'Settings': Resource file 'nope' does not exist.\")", "buggy_source_code": "def test_errors_are_built(self):\n    assert_equals(len(self._errors.messages), 1)\n    assert_equals(self._errors.messages[0].message, \"Error in file 'normal.html' in table 'Settings': Resource file 'nope' does not exist.\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set(self, **kwargs):\n    self.set_value(kwargs.pop('value', None))", "buggy_source_code": "def set(self, **kwargs):\n    if kwargs.has_key('value'):\n        self.set_value(kwargs.pop('value', None))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def native_str(s):\n    if isinstance(s, bytes):\n        return s.decode('utf-8')\n    return s", "buggy_source_code": "def native_str(s, replace=False):\n    if isinstance(s, bytes):\n        return s.decode('utf-8', 'replace' if replace else 'strict')\n    return s", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _validate_type_objectid(self, field, value):\n    if not re.match('[a-f0-9]{24}', value):\n        self._error(field, ERROR_BAD_TYPE % 'ObjectId')", "buggy_source_code": "def _validate_type_objectid(self, field, value):\n    if not re.match('[a-f0-9]{24}', value):\n        self._error(field, errors.ERROR_BAD_TYPE % 'ObjectId')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def password_reset_complete(request):\n    form = AuthenticationForm()\n    return jingo.render(request, 'users/pw_reset_complete.html', {'form': form})", "buggy_source_code": "@mobile_template('users/{mobile/}pw_reset_complete.html')\ndef password_reset_complete(request, template):\n    form = AuthenticationForm()\n    return jingo.render(request, template, {'form': form})", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def password_reset_sent(request):\n    return jingo.render(request, 'users/pw_reset_sent.html')", "buggy_source_code": "@mobile_template('users/{mobile/}pw_reset_sent.html')\ndef password_reset_sent(request, template):\n    return jingo.render(request, template)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_y_span_list(self):\n    return self.y_span_list", "buggy_source_code": "def get_y_span_list(self):\n    return [e['y_span'] for e in self.xylandscapes]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return \"<unloaded module '%s'>\" % self._data[0]", "buggy_source_code": "def __repr__(self):\n    if self._module:\n        return \"<proxied module '%s'>\" % self._data[0]\n    return \"<unloaded module '%s'>\" % self._data[0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def can_compile(self, src):\n    if src.lower().endswith('.f95'):\n        return True\n    return False", "buggy_source_code": "def can_compile(self, src):\n    suffix = os.path.splitext(src)[1].lower()\n    if suffix == '.f' or suffix == '.f95':\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def failed_to_parse_line(self, timestamp):\n    if self.show_invalid_syntax:\n        self.x_invalid_syntax.append(timestamp)", "buggy_source_code": "def failed_to_parse_line(self, timestamp, line):\n    if self.show_invalid_syntax:\n        self.x_invalid_syntax.append(timestamp)\n    if not self.ignore_invalid_syntax:\n        print('failed to parse line: %r' % line)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __call__(self, prefix, phrase, context):\n    Equals(prefix, phrase.resolve(context), context)", "buggy_source_code": "def __call__(self, prefix, phrase, context):\n    path = prefix.topath(context)\n    context[path] = phrase.resolve(context.getorcreatesubcontext(path[:-1]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def most_common_artist_link(self, artist):\n    return self.sc.getName(artist, 'artist').artisturl", "buggy_source_code": "def most_common_artist_link(self, artist):\n    song = self.sc.getName(artist, 'artist')\n    return song.artisturl if song != None else None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def most_common_song_link(self, song):\n    return self.sc.getName(song, 'song').songurl", "buggy_source_code": "def most_common_song_link(self, song):\n    song = self.sc.getName(song, 'song')\n    return song.songurl if song != None else None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_app_type(filename):\n    if 'ipa' in filename:\n        app_type = IOS\n    elif 'apk' in filename:\n        app_type = ANDR\n    return app_type", "buggy_source_code": "def get_app_type(filename):\n    if 'ipa' in filename:\n        app_type = IOS\n    elif 'apk' in filename:\n        app_type = ANDR\n    else:\n        raise TypeError('Unknown file type. Supported types: ipa, apk.')\n    return app_type", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def DATE_DIFF(builder, expr1, expr2):\n    return (builder(expr1), ' - ', builder(expr2))", "buggy_source_code": "def DATE_DIFF(builder, expr1, expr2):\n    return ('((', builder(expr1), ' - ', builder(expr2), \") * interval '1 day')\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def save_shopping(shopping):\n    with open('http/shopping.json', 'w') as f:\n        json.dump(shopping, f)", "buggy_source_code": "def save_shopping(shopping):\n    print('/save_shopping')\n    with open('http/shopping.json', 'w') as f:\n        json.dump(shopping, f)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load_shopping():\n    with open('http/shopping.json', 'r') as f:\n        tmp = f.readlines()\n    return json.loads('\\n'.join(tmp))", "buggy_source_code": "def load_shopping():\n    print('/load_shopping')\n    with open('http/shopping.json', 'r') as f:\n        tmp = f.readlines()\n    return json.loads('\\n'.join(tmp))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, key):\n    self.key = key.format(prefix=self.prefix)", "buggy_source_code": "def __init__(self, key):\n    self.key = key.format(prefix=self.prefix)\n    Env._instances.append(self)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def working_storage() -> Storage:\n    return FileSystemStorage(location=settings.WORKING_ROOT, base_url='/local/working')", "buggy_source_code": "def working_storage() -> Storage:\n    return FileSystemStorage(location=settings.WORKING_ROOT, base_url='/local/working') if settings.WORKING_ROOT else GoogleCloudStorage(bucket_name='stencila-hub-working')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_time_columns(self):\n    return [i for (i, d) in enumerate(self.channel_kwargs) if d['parameter'].lower() == 'time']", "buggy_source_code": "def get_time_columns(self):\n    return [i for (i, d) in enumerate(self.channel_kwargs) if d['parameter'] and d['parameter'].lower() == 'time']", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def list_databases(self):\n    return self.databases", "buggy_source_code": "def list_databases(self):\n    self.databases = set(self.all_databases + self._get_databases())\n    return self.databases", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    self.w = UpdateThread(endpoint=self.endpoint, key=self.key)\n    self.w.start()\n    self.mainloop()", "buggy_source_code": "def run(self):\n    self.w = UpdateThread(endpoint=self.endpoint, key=self.key)\n    self.w.start()\n    self.register_exit_handlers()\n    self.mainloop()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, device):\n    self.source = device.detached()\n    self.latest_ping = 0\n    self.latest_ping_alert_threshold = -1\n    self.latest_voltage_level = None", "buggy_source_code": "def __init__(self, device):\n    self.source = device.detached()\n    self.latest_ping = time() - 0.5\n    self.latest_ping_alert_threshold = -1\n    self.latest_voltage_level = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef __santatize_username(username):\n    sanatized = username.replace(' ', '_')\n    return sanatized.lower()", "buggy_source_code": "@staticmethod\ndef __santatize_username(username):\n    sanatized = username.replace(' ', '_')\n    sanatized = sanatized.replace(\"'\", '')\n    return sanatized.lower()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def animation_stop():\n    global animation\n    animation = None\n    draw_image(animation_image_backup)", "buggy_source_code": "def animation_stop():\n    global animation, animation_image_backup\n    animation = None\n    if animation_image_backup is not None:\n        draw_image(animation_image_backup)\n    animation_image_backup = None", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@pytest.fixture\ndef machine_node():\n    mocked_machine_node = MagicMock()\n    mocked_machine_node.container_id = 'machine_1'\n    return mocked_machine_node", "buggy_source_code": "@pytest.fixture\ndef machine_node():\n    mocked_machine_node = MagicMock()\n    mocked_machine_node.container_id = 'machine_1'\n    mocked_machine_node.preferred_material = 'preferred_material'\n    return mocked_machine_node", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def downgrade():\n    op.drop_constraint('auth_policy_acl_template_keys')\n    op.drop_table('auth_policy_template')\n    op.drop_constraint('auth_acl_template_template', 'auth_acl_template')\n    op.drop_table('auth_acl_template')", "buggy_source_code": "def downgrade():\n    op.drop_constraint('auth_policy_acl_template_keys', 'auth_policy_template')\n    op.drop_table('auth_policy_template')\n    op.drop_constraint('auth_acl_template_template', 'auth_acl_template')\n    op.drop_table('auth_acl_template')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def addIgnoreIP(self, ip):\n    self.ignoreIpList.append(ip)", "buggy_source_code": "def addIgnoreIP(self, ip):\n    self.logSys.debug('Add ' + ip + ' to ignore list')\n    self.ignoreIpList.append(ip)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_descripions_as_dict():\n    descriptions = ion.Description()\n    descriptions[tmp_filename] = description\n    assert descriptions[tmp_filename] == description", "buggy_source_code": "def test_descripions_as_dict():\n    descriptions = descript.ion.Description()\n    descriptions[tmp_filename] = description\n    assert descriptions[tmp_filename] == description", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_read_write_with_file_with_spaces_in_name():\n    with ion.open(tmp_filename + ' test', 'a+') as f:\n        f.description = description\n        assert f.description == description\n        del f.description", "buggy_source_code": "def test_read_write_with_file_with_spaces_in_name():\n    with descript.ion.open(tmp_filename + ' test', 'a+') as f:\n        f.description = description\n        assert f.description == description\n        del f.description", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def cmd():\n    gettlasyntax()\n    return tlaobj()", "buggy_source_code": "def cmd():\n    global tlaobj\n    gettlasyntax()\n    return tlaobj", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_db_prep_value(self, value):\n    if value is None:\n        return None\n    return unicode(value)", "buggy_source_code": "def get_db_prep_value(self, value, connection, prepared=False):\n    if value is None:\n        return None\n    return unicode(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def redirect_to(url):\n    raise httpexceptions.HTTPFound(url)", "buggy_source_code": "def redirect_to(url):\n    raise httpexceptions.HTTPFound('%s%s' % (get_prefix(pylons.request.environ), url))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef tearDownClass(cls):\n    metadata.drop_all(bind=cls.engine)", "buggy_source_code": "@classmethod\ndef tearDownClass(cls):\n    metadata.drop_all(bind=cls.engine)\n    auth.database_session = ContextManagedSession(bind=conf.DATABASE_ENGINE)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_file(self, filename):\n    self._files[filename] = {'keys': {}, 'chunks': []}", "buggy_source_code": "def add_file(self, filename):\n    if filename not in self._files:\n        self._files[filename] = {'keys': {}, 'chunks': []}", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def decorator(f):\n    return f", "buggy_source_code": "def decorator(f):\n\n    def decorate(_func):\n\n        def inner(*args, **kwargs):\n            return f(_func, *args, **kwargs)\n        return inner\n    return decorate", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def refresh_columns(self):\n    self.tableModel.reset()", "buggy_source_code": "def refresh_columns(self):\n    self.tableModel.beginResetModel()\n    self.tableModel.endResetModel()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, meta, ref, entity, chain=None):\n    super(ArtefactCreationCell, self).__init__(meta, ref, chain)\n    self.entity = entity", "buggy_source_code": "def __init__(self, meta, ref, entity, chain=None):\n    super(ArtefactCreationCell, self).__init__(meta, ref, chain)\n    self.entity = entity.to_map()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init_bees(self, n_bees):\n    self.bees = [Bee(x, y, rand() * 2 + 1, grid) for _ in range(n_bees)]", "buggy_source_code": "def init_bees(self, n_bees):\n    self.bees = [Bee(self.x, self.y, rand() * 2 + 1, self.grid) for _ in range(n_bees)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def is_newborn(case):\n    return is_pregnant_mother(case) and (is_recently_delivered(case) or get_related_prop(case, 'birth_status') == 'live_birth')", "buggy_source_code": "def is_newborn(case):\n    return is_pregnant_mother(case) and (is_recently_delivered(case) or get_related_prop(case, 'birth_status') == 'live_birth') and get_add(case)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def errors_response(status, errors):\n    return ({'errors': errors, _STATUS: status}, status)", "buggy_source_code": "def errors_response(status, errors):\n    document = {'errors': errors, 'jsonapi': {'version': JSONAPI_VERSION}, 'meta': {_STATUS: status}}\n    return (document, status)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def database_connect(self):\n    log.info('Connecting to Metadata storage database (MongoDB)')\n    mongodb_uri = 'mongodb://localhost:27017'\n    self.metastore = pymongo.MongoClient(host='localhost', port=27017)", "buggy_source_code": "def database_connect(self):\n    log.info('Connecting to Metadata storage database (MongoDB)')\n    mongodb_uri = 'mongodb://localhost:27017'\n    self.metastore = pymongo.MongoClient(host='localhost', port=27017, socketTimeoutMS=5000, connectTimeoutMS=5000)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _handler_md(self, e):\n    self._helper_handler_preamble(e)\n    self.event.middle_button = True\n    self._helper_glyph_button_down('middle_button_down')", "buggy_source_code": "def _handler_md(self, e):\n    self._helper_handler_preamble(e)\n    self.event.middle_button = True\n    self._helper_glyph_button_down('middle_button_down')\n    self._helper_handler_capture('m')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _handler_mu(self, e):\n    self._helper_handler_preamble(e, focus=False)\n    self.event.middle_button = False\n    self._helper_glyph_button_up('middle_button_up')", "buggy_source_code": "def _handler_mu(self, e):\n    self._helper_handler_preamble(e, focus=False)\n    self._helper_handler_capture_release('m')\n    self.event.middle_button = False\n    self._helper_glyph_button_up('middle_button_up')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _handler_ld(self, e):\n    self._helper_handler_preamble(e)\n    self.event.left_button = True\n    self._helper_glyph_button_down('left_button_down')", "buggy_source_code": "def _handler_ld(self, e):\n    self._helper_handler_preamble(e)\n    self.event.left_button = True\n    self._helper_glyph_button_down('left_button_down')\n    self._helper_handler_capture('l')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _handler_lu(self, e):\n    dprint('_handler_lu::')\n    self._helper_handler_preamble(e, focus=False)\n    self.event.left_button = False\n    self._helper_glyph_button_up('left_button_up')", "buggy_source_code": "def _handler_lu(self, e):\n    dprint('_handler_lu::')\n    self._helper_handler_preamble(e, focus=False)\n    self._helper_handler_capture_release('l')\n    self.event.left_button = False\n    self._helper_glyph_button_up('left_button_up')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _del(self):\n    entities.remove(self)", "buggy_source_code": "def _del(self):\n    entities.remove(self)\n    if self.being_created:\n        available_color_ids.append(self.id.color_id)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    run_pybuilder()", "buggy_source_code": "def run(self):\n    try:\n        run_pybuilder()\n    except ExecutionError as error:\n        sublime.error_message(str(error))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef result_stdout_size(self):\n    try:\n        return os.stat(self.result_stdout_file).st_size\n    except:\n        return 0", "buggy_source_code": "@property\ndef result_stdout_size(self):\n    try:\n        return os.stat(self.result_stdout_file).st_size\n    except:\n        return len(self.result_stdout)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef test_opposite_before_self(value: EReference, references):\n    return references.index(value.eOpposite) < references.index(value)", "buggy_source_code": "@staticmethod\ndef test_opposite_before_self(value: EReference, references):\n    try:\n        return references.index(value.eOpposite) < references.index(value)\n    except ValueError:\n        return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def onFileClose(self, event=None):\n    self.filename = None\n    self.filetype = None\n    self.text.setText()\n    self.status.setText(self.filename)", "buggy_source_code": "def onFileClose(self, event=None):\n    self.filename = ''\n    self.filetype = None\n    self.text.setText()\n    self.status.setText(self.filename)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def onFilePrintSettings(self, event=None):\n    pass", "buggy_source_code": "def onFilePrintSettings(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onFilePreview(self, event=None):\n    pass", "buggy_source_code": "def onFilePreview(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onEditUndo(self, event=None):\n    pass", "buggy_source_code": "def onEditUndo(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onFileInfo(self, event=None):\n    pass", "buggy_source_code": "def onFileInfo(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onEditPaste(self, event=None):\n    pass", "buggy_source_code": "def onEditPaste(self, event=None):\n    text = self.selection_get(selection='CLIPBOARD')\n    self.text.text.insert(tk.INSERT, text)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onFilePrint(self, event=None):\n    pass", "buggy_source_code": "def onFilePrint(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onFileSaveAs(self, event=None):\n    pass", "buggy_source_code": "def onFileSaveAs(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onFileSave(self, event=None):\n    pass", "buggy_source_code": "def onFileSave(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onEditRedo(self, event=None):\n    pass", "buggy_source_code": "def onEditRedo(self, event=None):\n    print('dummy')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _format(self, values):\n    return ' '.join((v for v in values if v))", "buggy_source_code": "def _format(self, values):\n    return ' '.join((str(v) for v in values if v))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef last_deploy(self):\n    return 'Not deployed yet'", "buggy_source_code": "@property\ndef last_deploy(self):\n    deployment = self.deployments.last()\n    if deployment:\n        return '{finished_at} - {ref}'.format(**deployment.__dict__)\n    return 'Not deployed yet'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def open_keyword(self, line):\n    return self.open_keyword[-1]", "buggy_source_code": "def open_keyword(self, keyword):\n    self.open_keywords.append(keyword)\n    return self.open_keywords[-1]", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def stop_http_server(self):\n    if self._http_pid is None:\n        raise OperationFailed('busybox httpd not running, but stop_http_server called.')\n    self.run('kill %s' % self._http_pid)\n    self._http_pid = None", "buggy_source_code": "def stop_http_server(self, runner):\n    if self._http_pid is None:\n        raise OperationFailed('busybox httpd not running, but stop_http_server called.')\n    runner.run('kill %s' % self._http_pid)\n    self._http_pid = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __nonzero__():\n    return True", "buggy_source_code": "def __nonzero__(self):\n    return True", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def idle_reset(self):\n    self._idle_count = 0", "buggy_source_code": "def idle_reset(self):\n    self._idle_count = 0\n    self._start_time = time.time()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    self._socket.close()", "buggy_source_code": "def close(self):\n    LOG(LOGGER, 'DEBUG', 'Closing Socket - %d' % self.identify())\n    self._socket.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def allDestinationServers():\n    return set([server for server in rule.destinations for rule in rules])", "buggy_source_code": "def allDestinationServers():\n    return set([server for rule in rules for server in rule.destinations])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _loadImage(self):\n    reader = QImageReader(self.source)\n    reader.setAutoTransform(self.autoTransform)\n    return reader.read()", "buggy_source_code": "def _loadImage(self):\n    with lock(self):\n        reader = QImageReader(self.source)\n        reader.setAutoTransform(self.autoTransform)\n        return reader.read()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def forward_expected(self, inputs):\n    (x,) = inputs\n    y = utils.force_array(x.clip(0, 6.0))\n    return (y,)", "buggy_source_code": "def forward_expected(self, inputs):\n    (x,) = inputs\n    y = utils.force_array(x.clip(0, 6.0), x.dtype)\n    return (y,)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def event_by_id(self, id):\n    return pickle.loads(self.db.hget('events', id))", "buggy_source_code": "def event_by_id(self, id):\n    return pickle.loads(self.db.hget(self.prefix + 'events', id))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super(RedisStore, self).__init__()\n    self.db = redis.Redis()", "buggy_source_code": "def __init__(self):\n    super(RedisStore, self).__init__()\n    self.db = redis.Redis()\n    self.prefix = 'activity-'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_sources(self):\n    return unpickle_dict(self.db.hgetall('sources'))", "buggy_source_code": "def get_sources(self):\n    return unpickle_dict(self.db.hgetall(self.prefix + 'sources'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def events_by_source_count(self):\n    return dict(((source_id, self.db.zcard('events-by-source:' + source_id)) for source_id in self.get_source_ids()))", "buggy_source_code": "def events_by_source_count(self):\n    return dict(((source_id, self.db.zcard(self.prefix + 'events-by-source:' + source_id)) for source_id in self.get_source_ids()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def events_by_slug(self, slug):\n    id = self.db.hget('events-by-slug', slug)\n    return [self.event_by_id(id)] if id is not None else []", "buggy_source_code": "def events_by_slug(self, slug):\n    id = self.db.hget(self.prefix + 'events-by-slug', slug)\n    return [self.event_by_id(id)] if id is not None else []", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def events_by_ids(self, ids):\n    if not ids:\n        return []\n    return (pickle.loads(p) for p in self.db.hmget('events', ids))", "buggy_source_code": "def events_by_ids(self, ids):\n    if not ids:\n        return []\n    return (pickle.loads(p) for p in self.db.hmget(self.prefix + 'events', ids))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_source_ids(self):\n    return self.db.hkeys('sources')", "buggy_source_code": "def get_source_ids(self):\n    return self.db.hkeys(self.prefix + 'sources')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unmarshal_code(self, bytedata):\n    try:\n        return pickle.loads(bytedata)\n    except Exception as e:\n        raise ImportError('could not unpack cached module code') from e", "buggy_source_code": "@debug\ndef unmarshal_code(self, bytedata):\n    try:\n        return pickle.loads(bytedata)\n    except Exception as e:\n        raise ImportError('could not unpack cached module code') from e", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def marshal_code(self, code):\n    return pickle.dumps(code)", "buggy_source_code": "@debug\ndef marshal_code(self, code):\n    return pickle.dumps(code)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __verify_sufficient_data__(self, data_source):\n    if not data_source.developers or __key__ not in data_source.developers[0]:\n        raise DataNotSufficientError('Either ' + data_source + \" is empty or '\" + __key__ + \"' was not valid as a key\")", "buggy_source_code": "def __verify_sufficient_data__(self, data_source):\n    if not data_source.developers or self.__key__ not in data_source.developers[0]:\n        raise DataNotSufficientError('Either ' + data_source + \" is empty or '\" + self.__key__ + \"' was not valid as a key\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef getDefaultProviders(cls):\n    return [cls('showRSS', 'showrss.info', False, '', 'title', 'eponly', True, True, True, True)]", "buggy_source_code": "@classmethod\ndef getDefaultProviders(cls):\n    return [cls('showRSS', 'showrss.info', False, '', 'title', 'eponly', False, False, False, True)]", "edit_actions": []}
{"fixed_source_code": "def __init__(self, username=None, password=None):\n    Token.__init__(self)\n    self.username = username\n    self.password = password", "buggy_source_code": "def __init__(self, username=None, password=None):\n    Token.__init__(self)\n    self.username = username\n    self.password = password\n    self.nonce = None\n    self.created = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _estimate_encryption_inflation(self, data):\n    return len(data) * 1.3334", "buggy_source_code": "def _estimate_encryption_inflation(self, data):\n    return len(data) * 1.3334 ** 2", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def calc_staterror(self, data):\n    return _statfcts.calc_chi2constvar_errors(data)", "buggy_source_code": "@staticmethod\ndef calc_staterror(data):\n    return _statfcts.calc_chi2constvar_errors(data)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_language_name(language_id):\n    print('Retrieving language data...')\n    language_name = language_parser.get_language_name(language_id)\n    if not language_name:\n        raise RuntimeError('Cannot retrieve language data. Aborting.')", "buggy_source_code": "def get_language_name(language_id):\n    print('Retrieving language data...')\n    language_name = language_parser.get_language_name(language_id)\n    if not language_name:\n        raise RuntimeError('Cannot retrieve language data. Aborting.')\n    return language_name", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def log(self, *args):\n    if self.verbose:\n        print(*args)", "buggy_source_code": "def log(self, *args):\n    if self.verbose:\n        print(*args, file=sys.stderr)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _wss_connected_slot(self, id):\n    self._running_instances[id] = RunningInstanceState.WS_CONNECTED", "buggy_source_code": "def _wss_connected_slot(self, id):\n    instance = self._model.getInstanceById(id)\n    instance.state = RunningInstanceState.WS_CONNECTED\n    self._model.updateInstanceFields(instance, ['state'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def write(self, buf):\n    return self._object.write(buf)", "buggy_source_code": "def write(self, buf):\n    with _error_converter():\n        return self._object.write(buf)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def exists(self, hash):\n    return lfutil.instore(self.remote, hash)", "buggy_source_code": "def exists(self, hashes):\n    retval = {}\n    for hash in hashes:\n        retval[hash] = lfutil.instore(self.remote, hash)\n    return retval", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, error_code=InstErrorCode.REQUIRED_PARAMETER, msg=None):\n    InstrumentException.__init__(error_code, msg)", "buggy_source_code": "def __init__(self, error_code=InstErrorCode.REQUIRED_PARAMETER, msg=None):\n    InstrumentException.__init__(self, error_code, msg)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, error_code=InstErrorCode.TIMEOUT, msg=None):\n    InstrumentException.__init__(error_code, msg)", "buggy_source_code": "def __init__(self, error_code=InstErrorCode.TIMEOUT, msg=None):\n    InstrumentException.__init__(self, error_code, msg)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef controlling_parameter_name(self):\n    return self._controlling_parameter_name", "buggy_source_code": "@property\ndef controlling_parameter_name(self):\n    return self.getGlobalParameterName(1)", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.ina = INA219(0.1, 0.4)", "buggy_source_code": "def setUp(self):\n    self.ina = INA219(0.1, 0.4)\n    self.ina._i2c.writeList = Mock()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_highest_offer_empty(self):\n    highest_offer = ob.highest_offer([])\n    assert highest_offer is None", "buggy_source_code": "def test_highest_offer_empty(self):\n    highest_offer = ob.highest_offer([])\n    assert_is_none(highest_offer)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_lowest_offer_empty(self):\n    lowest_offer = ob.lowest_offer([])\n    assert lowest_offer is None", "buggy_source_code": "def test_lowest_offer_empty(self):\n    lowest_offer = ob.lowest_offer([])\n    assert_is_none(lowest_offer)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def install_wrapper(func):\n\n    def wrapper(app):\n        app.backup.create_backup_dir()\n        app.install_symlinks()\n        func(app)\n    return wrapper", "buggy_source_code": "def install_wrapper(func):\n\n    def wrapper(app):\n        if not app.backup_ignore:\n            app.backup.create_backup_dir()\n        app.install_symlinks()\n        func(app)\n    return wrapper", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run_(self, args):\n    if 'event' in args:\n        del args['event']\n    return self.run(**args)", "buggy_source_code": "def run_(self, someIntNotUsed, args):\n    if 'event' in args:\n        del args['event']\n    return self.run(**args)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, warningPattern=None, **kwargs):\n    self.warningPattern = warningPattern\n    ShellCommand.__init__(self, **kwargs)\n    self.addFactoryArguments(warningPattern=warningPattern)", "buggy_source_code": "def __init__(self, warningPattern=None, **kwargs):\n    if warningPattern:\n        self.warningPattern = warningPattern\n    ShellCommand.__init__(self, **kwargs)\n    self.addFactoryArguments(warningPattern=warningPattern)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def run(self):\n    from warnings import warn\n    warn('This test module is deprecated because it has moved to `django.contrib.gis.%s.tests` and will disappear in 1.2.' % self.mod, DeprecationWarning)\n    self.tests.run()", "buggy_source_code": "def run(self):\n    from warnings import warn\n    warn('This test module is deprecated because it has moved to `django.contrib.gis.%s.tests` and will disappear in 1.2.' % self.mod_name, DeprecationWarning)\n    tests = import_module('django.contrib.gis.%s.tests' % self.mod_name)\n    tests.run()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def finish(self):\n    self.max_frames = 1\n    self.update()\n    BaseAnimation.finish(self)", "buggy_source_code": "def finish(self):\n    self.max_frames = 1\n    self.update(self.max_frames)\n    BaseAnimation.finish(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def processing_commit_sql_failed(self, repo, commit, error_message):\n    self.processed_commit(repo, commit, 'SQL_ERROR', error_message)", "buggy_source_code": "def processing_commit_sql_failed(self, repo, commit, error_message):\n    self.db.db.reset()\n    self.processed_commit(repo, commit, 'SQL_ERROR', error_message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _update_image_from_qrcode(self, text, image):\n    image.set_from_pixbuf(pil_to_pixbuf(qrcode.make(text)))", "buggy_source_code": "def _update_image_from_qrcode(self, text, image):\n    image.set_from_pixbuf(pil_to_pixbuf(qrcode.make(text, border=0, error_correction=qrcode.constants.ERROR_CORRECT_L)))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_move_stone_not_a_free_to_field(self):\n    self.assertFalse(self.board.move_stone('O', 'X', 3, 1, 3, 2))", "buggy_source_code": "def test_move_stone_not_a_free_to_field(self):\n    self.assertFalse(self.board.move_stone(self.player2, self.player1, 3, 1, 3, 2))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__set_board_row(self):\n    self.board._Board__size = 3\n    self.assertEqual(['*', '*', '*'], self.board._Board__set_board_row('*'))", "buggy_source_code": "def test__set_board_row(self):\n    self.board._Board__size = 3\n    self.assertEqual(['*', '*', '*'], self.board._Board__set_board_row('*', 7))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_move_stone_not_a_player_stone_at_from_field(self):\n    self.assertFalse(self.board.move_stone('O', 'X', 2, 1, 1, 1))", "buggy_source_code": "def test_move_stone_not_a_player_stone_at_from_field(self):\n    self.assertFalse(self.board.move_stone(self.player2, self.player1, 2, 1, 1, 1))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def url(self, path=''):\n    return 'http://{}:{}{}'.format(HOST, PORT, path)", "buggy_source_code": "def url(self, path=''):\n    return URL('http://{}:{}{}'.format(HOST, PORT, path))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getScreen(self):\n    assert self.obs is not None\n    return cv2.resize(cv2.cvtColor(self.obs, cv2.COLOR_RGB2GRAY), self.dims)", "buggy_source_code": "def getScreen(self):\n    assert self.obs is not None\n    return cv2.resize(cv2.cvtColor(self.obs, cv2.COLOR_RGB2GRAY) / 255.0, self.dims)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@singleton_task()\ndef refresh_appliances(self):\n    self.logger.info('Initiating regular appliance provider refresh')\n    for provider in Provider.objects.all():\n        refresh_appliances_provider.delay(provider.id)", "buggy_source_code": "@singleton_task()\ndef refresh_appliances(self):\n    self.logger.info('Initiating regular appliance provider refresh')\n    for provider in Provider.objects.filter(working=True):\n        refresh_appliances_provider.delay(provider.id)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef do():\n    Plot.do_degree_distrib()", "buggy_source_code": "@staticmethod\ndef do():\n    Plot.do_degree_distrib()\n    Plot.do_density_versus_clustering_coefficient()\n    Plot.do_centralities()\n    Plot.do_assortativity()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def downgrade():\n    pass", "buggy_source_code": "def downgrade():\n    op.drop_table('nct')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def forum_settings(context):\n    return {'forum_settings': settings}", "buggy_source_code": "def forum_settings(request):\n    return {'forum_settings': djangobb_settings, 'DEBUG': settings.DEBUG}", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def divide_by_area(data):\n    print('divide_by_area')\n    return data", "buggy_source_code": "def divide_by_area(data):\n    print('divide_by_area')\n    if surface_area == None:\n        print('Surface area data not available')\n        return data\n    return divide(data, surface_area)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def divide_by_pop(data):\n    print('divide_by_pop')\n    return data", "buggy_source_code": "def divide_by_pop(data):\n    print('divide_by_pop')\n    if total_population == None:\n        print('Total population data not available')\n        return data\n    return divide(data, total_population)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def redeem_script(self, *sequence):\n    pass", "buggy_source_code": "def redeem_script(self, for_change, n):\n    return None", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def start_transmitting(self):\n    self._start_event.set()\n    [consumer.start() for consumer in self.consumers]", "buggy_source_code": "def start_transmitting(self):\n    self._start_event.set()\n    [consumer.start() for consumer in self.consumers.values()]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def start_collecting(self):\n    [p.start() for p in self.ps_pool]", "buggy_source_code": "def start_collecting(self):\n    [p.start() for p in self.ps_pool.values()]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _db_table_exists(db, table_name):\n    query = \"SELECT name FROM sqlite_master WHERE type='table' AND name='%s'\" % table_name\n    for _ in db.execute(query):\n        return True\n    return False", "buggy_source_code": "def _db_table_exists(db, table_name):\n    query = \"SELECT name FROM sqlite_master WHERE type='table' AND name='%s'\" % table_name\n    cursor = db.execute(query)\n    results = cursor.fetchmany()\n    return len(results) > 0", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, generator_iterator, logger):\n    self._gi = generator_iterator\n    self._logger = logger", "buggy_source_code": "def __init__(self, generator, generator_iterator, logger):\n    self._fallback_lineno = _find_lastlineno(generator.__code__)\n    self._gi = generator_iterator\n    self._logger = logger", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_iter_files_simple():\n    gen = utils.iter_files(TEST_DIR)\n    assert isinstance(gen, types.GeneratorType)\n    assert list(gen) > 5", "buggy_source_code": "def test_iter_files_simple():\n    gen = utils.iter_files(TEST_DIR, ['py'])\n    assert isinstance(gen, types.GeneratorType)\n    assert len(list(gen)) > 5", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, config_file):\n    pass", "buggy_source_code": "def __init__(self, config_file):\n    self.PACKAGE = None\n    self.config = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    super(TestGenerateFamilyFiles, self).setUp()\n    self.generator_instance = FamilyTestGenerator(url=self.site.base_url(''), name='gff-test', dointerwiki='y')", "buggy_source_code": "def setUp(self):\n    super(TestGenerateFamilyFiles, self).setUp()\n    self.generator_instance = FamilyTestGenerator(url=self.site.base_url(''), name=self.familyname, dointerwiki='y')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def attrs_to_dict(self):\n    d = OrderedDict()\n    for key in self.attrs:\n        d[key] = self[key]\n    return d", "buggy_source_code": "def attrs_to_dict(self):\n    d = OrderedDict()\n    for key in self.attrs:\n        d[key] = self.val_vect[self.attrs[key]]\n    return d", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def cursor_pagedown(self, stats):\n    if self._current_page + 1 < self._page_max:\n        self._current_page += 1\n    self.cursor_position = 0", "buggy_source_code": "def cursor_pagedown(self, stats):\n    if self._current_page + 1 < self._page_max:\n        self._current_page += 1\n    else:\n        self._current_page = 0\n    self.cursor_position = 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def serve_preview(self, request, mode_name):\n    (view, args, kwargs) = self.resolve_subpage('/')\n    return view(*args, **kwargs)", "buggy_source_code": "def serve_preview(self, request, mode_name):\n    (view, args, kwargs) = self.resolve_subpage('/')\n    return view(request, *args, **kwargs)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def find_mu(self, target_n, u_int):\n    zero = lambda mu: self.lattice_ocupation(mu) - target_n\n    return fsolve(zero, u_int * target_n / 2)[0]", "buggy_source_code": "def find_mu(self, target_n, u_int):\n    zero = lambda mu: self.lattice_ocupation(mu) - target_n\n    return fsolve(zero, u_int * target_n / 2, xtol=0.005)[0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def VDI_resize_online(*args):\n    pass", "buggy_source_code": "def VDI_resize_online(self, *args):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def VDI_get_by_uuid(*args):\n    return 'hurr'", "buggy_source_code": "def VDI_get_by_uuid(self, *args):\n    return 'hurr'", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.db = moncov.conf.get_db(dbname='%s_db' % cls.__name__)\n    pass", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.db = moncov.conf.get_db(dbname='%s_db' % cls.__name__)\n    cls.whitelist = []\n    cls.blacklist = []\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<BearerToken(id={}, provider={})>'.format(self.id, self.provider.name)", "buggy_source_code": "def __repr__(self):\n    provider_name = self.provider.name if self.provider else ''\n    return '<BearerToken(id={}, provider={})>'.format(self.id, provider_name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _nvim_update_fg(self, fg):\n    self._foreground = fg\n    self._reset_attrs_cache()", "buggy_source_code": "@debug_echo\ndef _nvim_update_fg(self, fg):\n    self._foreground = fg\n    self._reset_attrs_cache()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def import_models(self, all_models):\n    self.connect()\n    return super(AppConfig, self).import_models(all_models)", "buggy_source_code": "def import_models(self, *args, **kwargs):\n    self.connect()\n    return super(AppConfig, self).import_models(*args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_unknown_commands(self):\n    return sum((st.partition(' ')[0] not in Parser.all_commands for st in self.statement_list))", "buggy_source_code": "def get_unknown_commands(self):\n    Par = bkrdoc.analysis.bkrdoc_parser.Parser\n    return sum((st.partition(' ')[0] not in Par.all_commands for st in self.statement_list))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __funcBack__(self, gx):\n    return self.A * gx + self.B", "buggy_source_code": "def __funcBack__(self, gx):\n    return self.A * np.float64(gx) + self.B", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def travis_deploy():\n    update_host()", "buggy_source_code": "def travis_deploy():\n    local('sh deploy.sh')\n    update_host()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_token_client(token_client):\n    auth_check(token_client.schema, 'token', 'cr', {'jwt': 'r'})", "buggy_source_code": "def test_token_client(token_client):\n    auth_check(token_client.schema, 'token', 'cr', {'jwt': 'r', 'code': 'cr'})", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, split, data_dir):\n    self._name = name\n    self._split = split\n    self._data_dir = data_dir", "buggy_source_code": "def __init__(self, name, split, data_dir, sample_rate):\n    self._name = name\n    self._split = split\n    self._data_dir = data_dir\n    super().__init__(sample_rate)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop_raw_reading(self):\n    self._input_device.close()", "buggy_source_code": "def stop_raw_reading(self):\n    if self._input_device:\n        self._input_device.close()\n        self._input_device = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop_input(self):\n    self._read_timer.stop()\n    if self._input_device:\n        self._input_device.close()", "buggy_source_code": "def stop_input(self):\n    self._read_timer.stop()\n    if self._input_device:\n        self._input_device.close()\n        self._input_device = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dbapi(self):\n    return sqlite", "buggy_source_code": "def dbapi(self):\n    if sqlite is None:\n        raise \"Couldn't import pysqlite2\"\n    return sqlite", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return self.slug()", "buggy_source_code": "def __unicode__(self):\n    slug = self.slug()\n    if slug is None:\n        return 'Page %d' % self.id\n    return slug", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def init_repo_root_url(self):\n    if self.repo_root_url is None:\n        self.repo_root_url = self.vcs.get_repo_root_url(self.url)", "buggy_source_code": "def init_repo_root_url(self):\n    if self.repo_root_url is None and self.vcs.is_in_a_or_a_working_copy(self.url):\n        self.repo_root_url = self.vcs.get_repo_root_url(self.url)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _render_obround(self, obround, color):\n    aper = self._get_obround(obround.width, obround.height)\n    self._render_flash(obround, aper)", "buggy_source_code": "def _render_obround(self, obround, color):\n    aper = self._get_obround(obround.width, obround.height, obround.hole_diameter, obround.hole_width, obround.hole_height)\n    self._render_flash(obround, aper)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _render_circle(self, circle, color):\n    aper = self._get_circle(circle.diameter, circle.hole_diameter)\n    self._render_flash(circle, aper)", "buggy_source_code": "def _render_circle(self, circle, color):\n    aper = self._get_circle(circle.diameter, circle.hole_diameter, circle.hole_width, circle.hole_height)\n    self._render_flash(circle, aper)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _render_rectangle(self, rectangle, color):\n    aper = self._get_rectangle(rectangle.width, rectangle.height)\n    self._render_flash(rectangle, aper)", "buggy_source_code": "def _render_rectangle(self, rectangle, color):\n    aper = self._get_rectangle(rectangle.width, rectangle.height, rectangle.hole_diameter, rectangle.hole_width, rectangle.hole_height)\n    self._render_flash(rectangle, aper)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getAdmincode(self):\n    return self.admincode.rstrip()", "buggy_source_code": "def getAdmincode(self):\n    return self._convert_string(self.admincode.rstrip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getEquipment(self):\n    return self.equipment.rstrip()", "buggy_source_code": "def getEquipment(self):\n    return self._convert_string(self.equipment.rstrip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getPatientName(self):\n    return self.patientname.rstrip()", "buggy_source_code": "def getPatientName(self):\n    return self._convert_string(self.patientname.rstrip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getSignalLabels(self):\n    return [self.signal_label(chn).strip() for chn in np.arange(self.signals_in_file)]", "buggy_source_code": "def getSignalLabels(self):\n    return [self._convert_string(self.signal_label(chn).strip()) for chn in np.arange(self.signals_in_file)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getPatientAdditional(self):\n    return self.patient_additional.rstrip()", "buggy_source_code": "def getPatientAdditional(self):\n    return self._convert_string(self.patient_additional.rstrip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getBirthdate(self):\n    return self.birthdate.rstrip()", "buggy_source_code": "def getBirthdate(self):\n    return self._convert_string(self.birthdate.rstrip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getPatientCode(self):\n    return self.patientcode.rstrip()", "buggy_source_code": "def getPatientCode(self):\n    return self._convert_string(self.patientcode.rstrip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _handle_Expr_UnaryOp(self, expr):\n    return CUnaryOp(expr.op, self._handle(expr.operand), referenced_variable=expr.referenced_variable if hasattr(expr, 'referenced_variable') else None)", "buggy_source_code": "def _handle_Expr_UnaryOp(self, expr):\n    return CUnaryOp(expr.op, self._handle(expr.operand), referenced_variable=self._handle(expr.referenced_variable) if hasattr(expr, 'referenced_variable') else None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def write_to_file(hxml, filename):\n    tree = ET.ElementTree(hxml)\n    tree.write(filename)", "buggy_source_code": "def write_to_file(hxml, filename):\n    tree = ET.ElementTree(hxml)\n    tree.write(open(filename, 'w'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def cm(self, m, z=0):\n    return self.params['K'] * (self.zc(m) + 1.0) / (z + 1.0)", "buggy_source_code": "def cm(self, m, z=0):\n    return self.params['K'] * (self.zc(m, z) + 1.0) / (z + 1.0)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __ne__(self, other):\n    return not self.__eq__(other)", "buggy_source_code": "def __ne__(self, other):\n    if self.keys() != other.keys():\n        return True\n    return not self.__eq__(other)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __del__(self):\n    if self._cap is not None:\n        self._cap.__del__()", "buggy_source_code": "def __del__(self):\n    if self._cap is not None:\n        self._cap.__del__()\n    self.force_close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __exit__(self, type, value, tb):\n    if self._cap is not None:\n        self._cap.__exit__(type, value, tb)", "buggy_source_code": "def __exit__(self, type, value, tb):\n    if self._cap is not None:\n        self._cap.__exit__(type, value, tb)\n    self.force_close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def parse(self, el):\n    self.env['date'] = parse_french_date(CleanText('./span[1]/strong')(self)).date()", "buggy_source_code": "def parse(self, el):\n    self.env['date'] = parse_french_date(u'01 %s' % CleanText('./span[1]/strong')(self)).date()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self.servers = {}\n    self.exit_code = 0\n    self.cfg = mock.Mock()\n    self.cfg.graceful_timeout = 100", "buggy_source_code": "def __init__(self):\n    self.pid = 'pid'\n    self.servers = {}\n    self.exit_code = 0\n    self.cfg = mock.Mock()\n    self.cfg.graceful_timeout = 100", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def fix_formatting(path):\n    _process_file(path, formatting='fix')", "buggy_source_code": "def fix_formatting(path, verbose=False):\n    _process_file(path, formatting='fix', verbose=verbose)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __deepcopy__(self):\n    return Booster(model_file=self.save_raw())", "buggy_source_code": "def __deepcopy__(self, memo):\n    return Booster(model_file=self.save_raw())", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def eventual_consistent_query(client):\n    return", "buggy_source_code": "def eventual_consistent_query(client):\n    pass", "edit_actions": []}
{"fixed_source_code": "def get_description(self, instrument_code):\n    return self.get_meta_data['Description']", "buggy_source_code": "def get_description(self, instrument_code):\n    return self.get_meta_data(instrument_code)['Description']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_point_size(self, instrument_code):\n    return self.get_meta_data['Pointsize']", "buggy_source_code": "def get_point_size(self, instrument_code):\n    return self.get_meta_data(instrument_code)['Pointsize']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_currency(self, instrument_code):\n    return self.get_meta_data['Currency']", "buggy_source_code": "def get_currency(self, instrument_code):\n    return self.get_meta_data(instrument_code)['Currency']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_asset_class(self, instrument_code):\n    return self.get_meta_data['AssetClass']", "buggy_source_code": "def get_asset_class(self, instrument_code):\n    return self.get_meta_data(instrument_code)['AssetClass']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def global_line_editor(gle=None):\n    if gle is not None:\n        _gle_data = gle\n    return _gle_data", "buggy_source_code": "def global_line_editor(gle=None):\n    global _gle_data\n    if gle is not None:\n        _gle_data = gle\n    return _gle_data", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, loop=None):\n    self._loop = loop\n    self._paused = False\n    self._drain_waiter = None", "buggy_source_code": "def __init__(self, loop=None):\n    self._loop = loop\n    self._paused = False\n    self._drain_waiter = None\n    self._connection_lost = False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pyqtSignature('int')\ndef on_tabWidget_currentChanged(self):\n    self.refresh_color_options()", "buggy_source_code": "@pyqtSignature('int')\ndef on_tabWidget_currentChanged(self, index):\n    if index > 0:\n        self.refresh_color_options()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@contextmanager\ndef before_after_send_handling(self):\n    self.before_send()\n    yield\n    self.after_send()", "buggy_source_code": "@contextmanager\ndef before_after_send_handling(self):\n    self._init_delivery_statuses_dict()\n    self.before_send()\n    try:\n        yield\n    finally:\n        self.after_send()\n        self._update_dispatches()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_unicode_answer(self):\n    assert self.call_howdoi('make a log scale d3')", "buggy_source_code": "def test_unicode_answer(self):\n    assert self.call_howdoi('make a log scale d3')\n    assert self.call_howdoi('python unittest -n3')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_texture(self, label):\n    return self._textures[label]", "buggy_source_code": "def get_texture(self, label):\n    return self._get_resource(label, self._textures, 'texture')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_effect(self, label):\n    return self._effects[label]", "buggy_source_code": "def get_effect(self, label):\n    return self._get_resource(label, self._effects, 'effect')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_program(self, label):\n    return self._programs[label]", "buggy_source_code": "def get_program(self, label):\n    return self._get_resource(label, self._programs, 'program')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_data(self, label):\n    return self._data[label]", "buggy_source_code": "def get_data(self, label):\n    return self._get_resource(label, self._data, 'data')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    self._db.close()", "buggy_source_code": "def close(self):\n    self._db.text_factory = None\n    self._db.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse_lldp_intf(self, data):\n    match = re.search('Interface:\\\\s*(\\\\S+)', data, re.M)\n    if match:\n        return match.group(1)", "buggy_source_code": "def parse_lldp_intf(self, data):\n    match = re.search('Interface:\\\\s*(\\\\S+)', data, re.M)\n    if match:\n        return match.group(1).strip(',')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_get_tool_matches():\n    instance = create_instance()\n    matches = instance.get_tool_matches()\n    assert matches == []", "buggy_source_code": "def test_get_tool_matches():\n    instance = Plugin(base_dir='/tmp/', vent_dir='/tmp/', vendor_dir='/tmp/', scripts_dir='/tmp/')\n    matches = instance.get_tool_matches()\n    assert matches == []", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def hpkp_pin(self, obj):\n    return mark_safe('%s<p class=\"help\">SHA-256 HPKP pin of this certificate. See also <a\\nhref=\"https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning\">HTTP Public Key Pinning</a> on\\nWikipedia.</p>' % obj.hpkp_pin)", "buggy_source_code": "def hpkp_pin(self, obj):\n    help_text = '<p class=\"help\">SHA-256 HPKP pin of this certificate. See also\\n<a href=\"https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning\">HTTP Public Key Pinning</a>\\non Wikipedia.</p>'.replace('\\n', ' ')\n    return mark_safe('%s%s' % (obj.hpkp_pin, help_text))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.ajax_url = '/'\n    self.track_function = lambda x: None\n    self.render_function = lambda x: {}\n    self.exception404 = Exception", "buggy_source_code": "def __init__(self):\n    self.ajax_url = '/'\n    self.track_function = lambda x: None\n    self.render_function = lambda x: {}\n    self.exception404 = Exception\n    self.DEBUG = True", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dns_records_delete(self, zone_id, record_id):\n    url = ''\n    pass", "buggy_source_code": "def dns_records_delete(self, zone_id, record_id):\n    uri = 'zones/' + str(zone_id) + '/dns_records/' + str(record_id)\n    return self.api_call_delete(uri, data=False)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.parent = None\n    self.lastSearchDepth = 0", "buggy_source_code": "def __init__(self):\n    self.parent = None\n    self.lastDepth = 0\n    self.data = []\n    self.lastSearchedValue = 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def get_camera_type(self, camera=None, home=None, cid=None):\n    for camera_name in self.camera_names:\n        self.camera_type = self.camera_data.cameraType(camera_name)\n        return self.camera_type", "buggy_source_code": "def get_camera_type(self, camera=None, home=None, cid=None):\n    self.camera_type = self.camera_data.cameraType(camera=camera, home=home, cid=cid)\n    return self.camera_type", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def step(self):\n    World.step(self)", "buggy_source_code": "def step(self):\n    World.step(self)\n    self.get_perspective_projection(self.spockplugin.clientinfo.position)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_user_contributions_to_touchforms_session(couch_user):\n    return {'username': couch_user.raw_username, 'user_id': couch_user.get_id, 'user_data': couch_user.user_session_data}", "buggy_source_code": "def get_user_contributions_to_touchforms_session(couch_user):\n    return {'username': couch_user.raw_username, 'user_id': couch_user.get_id, 'user_data': couch_user.user_session_data if isinstance(couch_user, CouchUser) else {}}", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def export_text_md(f, text):\n    f.write(text)\n    f.write('\\n\\n')", "buggy_source_code": "def export_text_md(f, text):\n    if text:\n        f.write(text)\n        f.write('\\n\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_weights_of_nn_sites(self, n):\n    return [e['weight'] for e in self.get_nn_info(structure, n)]", "buggy_source_code": "def get_weights_of_nn_sites(self, structure, n):\n    return [e['weight'] for e in self.get_nn_info(structure, n)]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@unittest.skipUnless(ONED_ENGINE, 'No available engine for reading 1d codes')\ndef test_1d_roi(self):\n    self._test_1d(roi)", "buggy_source_code": "@unittest.skipUnless(ONED_ENGINE, 'No available engine for reading 1d codes')\n@unittest.skipUnless(hasattr(cv2, 'createCLAHE'), 'Older cv2 without createCLAHE')\ndef test_1d_roi(self):\n    self._test_1d(roi)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@unittest.skipUnless(DM_ENGINE, 'No available engine for reading Data Matrix codes')\ndef test_dm_resize(self):\n    self._test_dm(resize)", "buggy_source_code": "@unittest.skipUnless(DM_ENGINE, 'No available engine for reading Data Matrix codes')\n@unittest.skipUnless(hasattr(cv2, 'createCLAHE'), 'Older cv2 without createCLAHE')\ndef test_dm_resize(self):\n    self._test_dm(resize)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@unittest.skipUnless(DM_ENGINE, 'No available engine for reading Data Matrix codes')\ndef test_dm_roi(self):\n    self._test_dm(roi)", "buggy_source_code": "@unittest.skipUnless(DM_ENGINE, 'No available engine for reading Data Matrix codes')\n@unittest.skipUnless(hasattr(cv2, 'createCLAHE'), 'Older cv2 without createCLAHE')\ndef test_dm_roi(self):\n    self._test_dm(roi)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __handle_replay(args):\n    replay_file_fuzz(filename=args.filename)", "buggy_source_code": "def __handle_replay(args):\n    replay_file_fuzz(filename=args.filename, show_requests=args.requests, show_responses=args.responses)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _post_exec_parent(self):\n    self.__thread = threading.Thread(target=self.__reader)\n    self.__thread.start()", "buggy_source_code": "def _post_exec_parent(self):\n    self.__thread = threading.Thread(target=self.__reader)\n    self.__thread.daemon = True\n    self.__thread.start()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _post_exec_parent(self):\n    self.__thread = threading.Thread(target=self.__writer)\n    self.__thread.start()", "buggy_source_code": "def _post_exec_parent(self):\n    self.__thread = threading.Thread(target=self.__writer)\n    self.__thread.daemon = True\n    self.__thread.start()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef id(self):\n    return self.__get_string(15, 31).rstrip()", "buggy_source_code": "@property\ndef id(self):\n    return self.__get_string(15, 31).lstrip().rstrip()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_verbose_2(self):\n    self.assertIs(None, main(['-v', '-v']))", "buggy_source_code": "def test_verbose_2(self):\n    self.assertIs(0, main(['-v', '-v']))", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def test_verbose_1(self):\n    self.assertIs(None, main(['-v']))", "buggy_source_code": "def test_verbose_1(self):\n    self.assertIs(0, main(['-v']))", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return self.name", "buggy_source_code": "def __str__(self):\n    return u'%s'.format(self.name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def start_simulation(self):\n    with self._lock:\n        vrep.simxStartSimulation(self.client_id, vrep.simx_opmode_oneshot_wait)", "buggy_source_code": "def start_simulation(self):\n    with self._lock:\n        vrep.simxStartSimulation(self.client_id, vrep.simx_opmode_oneshot_wait)\n    time.sleep(0.5)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def save_config(self):\n    self.transport.execute('copy running-config startup-config')", "buggy_source_code": "def save_config(self):\n    self.transport.execute('copy running-config startup-config', interactions=[('Proceed to copy the file.*', 'yes')])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def heartbeat(self):\n    for lock in self._acquired_locks.copy():\n        lock.heartbeat()\n    return self.lock_timeout", "buggy_source_code": "def heartbeat(self):\n    for lock in self._acquired_locks.copy():\n        lock.heartbeat()\n    self._membership_lease.refresh()\n    return min(self.lock_timeout, self.membership_timeout)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, bot):\n    self.bot = bot\n    self.commandChar = {}", "buggy_source_code": "def __init__(self, bot):\n    self.bot = bot\n    self.commandChar = {}\n    self.channels = []", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def train(n_epochs=500, lr=0.004, eps=0.01, params=None):\n    super().train(n_epochs=n_epochs, lr=lr, eps=eps, params=params)", "buggy_source_code": "def train(self, n_epochs=500, lr=0.004, eps=0.01, params=None):\n    super().train(n_epochs=n_epochs, lr=lr, eps=eps, params=params)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.browser.close()\n    self.browser.quit()\n    super(SeleniumTestCase, self).tearDown()", "buggy_source_code": "def tearDown(self):\n    self.browser.close()\n    try:\n        self.browser.quit()\n    except OSError:\n        pass\n    super(SeleniumTestCase, self).tearDown()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def generateCode(self, iSignal, iHorizon):\n    lAutoF = self.mAutoForecastBySignal[iSignal + '_' + str(iHorizon)]\n    lCodeGenerator = tscodegen.cTimeSeriesCodeGenerator()\n    lSQL = lCodeGenerator.testGeneration(lAutoF)", "buggy_source_code": "def generateCode(self, iSignal, iHorizon):\n    lAutoF = self.mAutoForecastBySignal[iSignal + '_' + str(iHorizon)]\n    lCodeGenerator = tscodegen.cTimeSeriesCodeGenerator()\n    lSQL = lCodeGenerator.testGeneration(lAutoF)\n    del lCodeGenerator", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, mpf_path, machine_path, args):\n    print('\"mpf core\" has been renamed to \"mpf game\", so run that instead.')\n    sys.exit()", "buggy_source_code": "def __init__(self, mpf_path, machine_path, args):\n    del mpf_path\n    del machine_path\n    del args\n    print('\"mpf core\" has been renamed to \"mpf game\", so run that instead.')\n    sys.exit(-1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _dig(self):\n    return self.fignum", "buggy_source_code": "def _dig(self):\n    return (dict(f=self.fignum), {})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _dig(self):\n    return self.fignum", "buggy_source_code": "def _dig(self):\n    return (dict(f=self.fignum), {})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, settings, threshold=5):\n    self.settings = settings\n    self.data = self.get_csv_data()\n    self.filter_zero_steering(threshold)", "buggy_source_code": "def __init__(self, settings, threshold=5):\n    self.settings = settings\n    self.data = self.get_csv_data()\n    self.filter_zero_steering(threshold)\n    self.filter_zero_steering(threshold)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def deserializeMapSize(inputString):\n    splitString = inputString.split(' ')\n    _width = int(splitString.pop(0))\n    _height = int(splitString.pop(0))", "buggy_source_code": "def deserializeMapSize(inputString):\n    splitString = inputString.split(' ')\n    global _width, _height\n    _width = int(splitString.pop(0))\n    _height = int(splitString.pop(0))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __getattr__(self, name):\n    return getattr(self.translator, name)", "buggy_source_code": "def __getattr__(self, name):\n    name = 'gettext' if six.PY3 and name == 'ugettext' else name\n    return getattr(self.translator, name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_expired(self):\n    decoded = jwt.decode(self.token, verify=False)\n    return decoded['exp'] <= datetime.utcnow()", "buggy_source_code": "def is_expired(self):\n    decoded = jwt.decode(self.token, verify=False)\n    return datetime.utcfromtimestamp(decoded.get('exp', 0)) <= datetime.utcnow()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef _sleep(seconds):\n    time.sleep(seconds)", "buggy_source_code": "@staticmethod\ndef _sleep(seconds):\n    try:\n        time.sleep(seconds)\n    except IOError:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __radd__(self, value):\n    return self + value", "buggy_source_code": "def __radd__(self, value):\n    return self.copy().__iadd__(value)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def install():\n    update_genders()\n    update_salutations()\n    update_global_search_doctypes()\n    setup_email_linking()", "buggy_source_code": "def install():\n    update_genders()\n    update_salutations()\n    update_global_search_doctypes()\n    setup_email_linking()\n    add_unsubscribe()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_form_saved(self, model):\n    if not model is None:\n        self.feature_models[self.current_feature] = model\n        self.editor.accept()", "buggy_source_code": "def on_form_saved(self, model):\n    if not model is None:\n        self.feature_models[self.current_feature] = model\n        if self.editor.is_valid:\n            self.editor.accept()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _(string_id):\n    if string_id in STRINGS:\n        return plugin.get_string(STRINGS[string_id])\n    else:\n        log('String is missing: %s' % string_id)\n        return string_id", "buggy_source_code": "def _(string_id):\n    if string_id in STRINGS:\n        return plugin.get_string(STRINGS[string_id]).encode('utf-8')\n    else:\n        log('String is missing: %s' % string_id)\n        return string_id", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get(self, req, lookup):\n    req.max_results = THEMES_MAX_RESULTS\n    return super().get(req, lookup)", "buggy_source_code": "def get(self, req, lookup):\n    if req:\n        req.max_results = THEMES_MAX_RESULTS\n    return super().get(req, lookup)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    self._c_polynomial = _mps.mps_chebyshev_poly_new(ctx._c_ctx, degree, 5)", "buggy_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    self._c_polynomial = _mps.mps_chebyshev_poly_new(ctx._c_ctx, int(degree), 5)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    self._c_polynomial = _mps.mps_monomial_poly_new(ctx._c_ctx, degree)", "buggy_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    deg_c = ctypes.c_long(degree)\n    self._c_polynomial = _mps.mps_monomial_poly_new(ctx._c_ctx, deg_c)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __init__(self, ctx, degree):\n    self._degree = degree\n    self._ctx = ctx", "buggy_source_code": "def __init__(self, ctx, degree):\n    self._degree = int(degree)\n    self._ctx = ctx", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _put_file(state, hostname, file_io, remote_location):\n    sftp = _get_sftp_connection(state, hostname)\n    sftp.putfo(file_io, remote_location)", "buggy_source_code": "def _put_file(state, hostname, file_io, remote_location):\n    file_io.seek(0)\n    sftp = _get_sftp_connection(state, hostname)\n    sftp.putfo(file_io, remote_location)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_prepend_library_path(self):\n    repo = self.GIRepository.get_default()\n    repo.prepend_library_path('/nope')", "buggy_source_code": "def test_prepend_library_path(self):\n    repo = self.GIRepository.get_default()\n    try:\n        repo.prepend_library_path('/nope')\n    except AttributeError:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _show_preset_file(self):\n    if self.__meta_path:\n        os.startfile(self.__meta_path.dirname())", "buggy_source_code": "def _show_preset_file(self):\n    if self.__meta_path:\n        os.startfile(str(self.__meta_path.dirname()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def stop(self):\n    self.sound.stop()", "buggy_source_code": "def stop(self):\n    if self.background and currently_playing_filename != self.filename:\n        return\n    self.sound.stop()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute(\" create or replace view report_timesheet_task_user as (\\n        select\\n         ((r.id*12)+to_number(months.m_id,'99'))::integer as id,\\n               months.name as name,\\n               r.id as user_id,\\n               to_char(to_date(months.name, 'YYYY/MM/DD'),'YYYY') as year,\\n               to_char(to_date(months.name, 'YYYY/MM/DD'),'MM') as month\\n        from res_users r,\\n                (select to_char(p.date,'YYYY-MM-01') as name,\\n            to_char(p.date,'MM') as m_id\\n                from project_task_work p\\n\\n            union\\n                select to_char(h.name,'YYYY-MM-01') as name,\\n                to_char(h.name,'MM') as m_id\\n                from hr_timesheet_sheet_sheet_day h) as months\\n\\n            group by\\n                r.id,months.m_id,months.name,\\n                to_char(to_date(months.name, 'YYYY/MM/DD'),'YYYY') ,\\n                to_char(to_date(months.name, 'YYYY/MM/DD'),'MM')\\n              ) \")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'report_timesheet_task_user')\n    cr.execute(\" create or replace view report_timesheet_task_user as (\\n        select\\n         ((r.id*12)+to_number(months.m_id,'99'))::integer as id,\\n               months.name as name,\\n               r.id as user_id,\\n               to_char(to_date(months.name, 'YYYY/MM/DD'),'YYYY') as year,\\n               to_char(to_date(months.name, 'YYYY/MM/DD'),'MM') as month\\n        from res_users r,\\n                (select to_char(p.date,'YYYY-MM-01') as name,\\n            to_char(p.date,'MM') as m_id\\n                from project_task_work p\\n\\n            union\\n                select to_char(h.name,'YYYY-MM-01') as name,\\n                to_char(h.name,'MM') as m_id\\n                from hr_timesheet_sheet_sheet_day h) as months\\n\\n            group by\\n                r.id,months.m_id,months.name,\\n                to_char(to_date(months.name, 'YYYY/MM/DD'),'YYYY') ,\\n                to_char(to_date(months.name, 'YYYY/MM/DD'),'MM')\\n              ) \")", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def display_name_with_default_escaped(block):\n    return escape(display_name_with_default(block))", "buggy_source_code": "def display_name_with_default_escaped(block):\n    return escape(display_name_with_default(block)).replace('&amp;', '&')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def commands():\n    for com in ALL_COMMANDS:\n        print('[{0}] command {1}'.format(com['name'], com['description']))", "buggy_source_code": "def commands(data):\n    for com in ALL_COMMANDS:\n        print('[{0}] command {1}'.format(com['name'], com['description']))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def serialize(self):\n    return {'type': 'date', **super().serialize()}", "buggy_source_code": "def serialize(self):\n    return {'type': 'string', 'format': 'date', **super().serialize()}", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@m.output()\ndef record_wordlist(self, wordlist):\n    self._wordlist = wordlist", "buggy_source_code": "@m.output()\ndef record_wordlist(self, wordlist):\n    from ._rlcompleter import debug\n    debug('  -record_wordlist')\n    self._wordlist = wordlist", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, intf, conf):\n    super(HardwareLayer, self).__init__(conf)\n    if intf is not None:\n        self._intf = intf", "buggy_source_code": "def __init__(self, intf, conf):\n    super(HardwareLayer, self).__init__(conf)\n    if intf is not None:\n        self._intf = intf\n        self._base_addr = conf['base_addr']", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_filename(problem, width=3, suffix=''):\n    return '{0:0{w}d}{1}.py'.format(problem, suffix, w=width)", "buggy_source_code": "def get_filename(problem, width=3, suffix=None):\n    suffix = '-' + suffix if suffix else ''\n    return '{0:0{w}d}{1}.py'.format(problem, suffix, w=width)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_deactivate_role(self):\n    old_role = self.account.deactivate_role(2)\n    assert isinstance(old_role, Role)", "buggy_source_code": "def test_deactivate_role(self):\n    old_role = self.account.deactivate_role(2)\n    assert isinstance(old_role, Role)\n    assert hasattr(old_role, 'role')\n    assert hasattr(old_role, 'label')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_get_role(self):\n    target_role = self.account.get_role(2)\n    assert isinstance(target_role, Role)", "buggy_source_code": "def test_get_role(self):\n    target_role = self.account.get_role(2)\n    assert isinstance(target_role, Role)\n    assert hasattr(target_role, 'role')\n    assert hasattr(target_role, 'label')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_update_role(self):\n    updated_role = self.account.update_role(2)\n    assert isinstance(updated_role, Role)", "buggy_source_code": "def test_update_role(self):\n    updated_role = self.account.update_role(2)\n    assert isinstance(updated_role, Role)\n    assert hasattr(updated_role, 'role')\n    assert hasattr(updated_role, 'label')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_create_role(self):\n    new_role = self.account.create_role(1)\n    assert isinstance(new_role, Role)", "buggy_source_code": "def test_create_role(self):\n    new_role = self.account.create_role(1)\n    assert isinstance(new_role, Role)\n    assert hasattr(new_role, 'role')\n    assert hasattr(new_role, 'label')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_activate_role(self):\n    activated_role = self.account.activate_role(2)\n    assert isinstance(activated_role, Role)", "buggy_source_code": "def test_activate_role(self):\n    activated_role = self.account.activate_role(2)\n    assert isinstance(activated_role, Role)\n    assert hasattr(activated_role, 'role')\n    assert hasattr(activated_role, 'label')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef launch_benchmark(self):\n    self.pubsocket.send('OVERFLOW')", "buggy_source_code": "@property\ndef launch_benchmark(self):\n    self.pubsocket.send('OVERFLOW')\n    self.workers = OrderedDict()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def image_watermark(self, water_image_url, **kwargs):\n    fops = QiniuInterface(water_image_url, **kwargs)[1]\n    self.__fops.append(fops)\n    self.__add_fops_to_resource(fops)\n    return self", "buggy_source_code": "def image_watermark(self, water_image_url, **kwargs):\n    fops = QiniuInterface.image_watermark(water_image_url, **kwargs)[1]\n    self.__fops.append(fops)\n    self.__add_fops_to_resource(fops)\n    return self", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def text_watermark(self, text, **kwargs):\n    fops = QiniuInterface(text, **kwargs)[1]\n    self.__fops.append(fops)\n    return self", "buggy_source_code": "def text_watermark(self, text, **kwargs):\n    fops = QiniuInterface.text_watermark(text, **kwargs)[1]\n    self.__fops.append(fops)\n    self.__add_fops_to_resource(fops)\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _score_change(self, value, change, **kwargs):\n    del kwargs\n    if self.active_scorereelgroup:\n        self.active_scorereelgroup.set_value(value=value)", "buggy_source_code": "def _score_change(self, value, change, **kwargs):\n    del kwargs\n    del change\n    if self.active_scorereelgroup:\n        self.active_scorereelgroup.set_value(value=value)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __closing__(self):\n    pass", "buggy_source_code": "def __closing__(self):\n    if self.dist.name == 'FASTR_RELEASE':\n        include_dir = join(self.release_project.dir, 'include')\n        shutil.rmtree(include_dir)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, limit=10):\n    self.limit = 10\n    self.pending = []\n    self.active = 0", "buggy_source_code": "def __init__(self, limit=10):\n    self.limit = limit\n    self.pending = []\n    self.active = 0", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@webob.dec.wsgify\ndef __call__(self, request):\n    if request.method == 'POST':\n        return self.rpc(request)", "buggy_source_code": "@webob.dec.wsgify\ndef __call__(self, request):\n    if request.method == 'POST':\n        return self.rpc(request)\n    raise webob.exc.HTTPMethodNotAllowed", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef _rootentry(self):\n    try:\n        return self.__rootentry\n    except (AttributeError, TypeError):\n        self._buildrootentry()\n        return self.__rootentry", "buggy_source_code": "@property\ndef _rootentry(self):\n    try:\n        return self.__rootentry\n    except (AttributeError, TypeError):\n        self.__rootentry = self._newrootentry()\n        return self.__rootentry", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_all_clickable_elements_in_page(browser, fence_filter):\n    return get_all_clickable_links_in_page(browser, fence_filter)", "buggy_source_code": "def get_all_clickable_elements_in_page(browser, fence_filter):\n    return get_all_clickable_links_in_page(browser, fence_filter) + get_all_input_type_submit_buttons_in_page(browser)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def power(self, **kwargs):\n    return self.domain.calc_power(self.val, codomain=self.target, **kwargs)", "buggy_source_code": "def power(self, **kwargs):\n    if 'codomain' in kwargs:\n        kwargs.__delitem__('codomain')\n    return self.domain.calc_power(self.val, codomain=self.target, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.process.terminate()", "buggy_source_code": "def tearDown(self):\n    super(TestSelenium, self).tearDown()\n    self.process.terminate()\n    self.driver.quit()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ticket_created(self, ticket):\n    self.watch_hours(ticket)", "buggy_source_code": "def ticket_created(self, ticket):\n    hours = convertfloat(ticket['hours'])\n    if hours > 0:\n        ticket['hours'] = hours\n        ticket.save_changes(ticket['reporter'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def start_game(self):\n    announcer.show(announcer.start)\n    announcer.show(announcer.render_board(self.table_top.board))\n    self.facilitate_turns()", "buggy_source_code": "def start_game(self):\n    self.nnouncer.show(self.announcer.start)\n    self.announcer.show(self.announcer.render_board(self.table_top.board))\n    self.facilitate_turns()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def image_file_when_debugging():\n    return GlobalVariables.IMAGE_LOCATION", "buggy_source_code": "def image_file_when_debugging():\n    if not debug.DebugCore.GLOBAL_DEBUG:\n        return user_interface.prompt_user_for_location()\n    return GlobalVariables.IMAGE_LOCATION", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@before.all\ndef init():\n    world.basedir = os.path.dirname(__file__)\n    world.renames = list()", "buggy_source_code": "@before.all\ndef init():\n    world.basedir = os.path.dirname(__file__)\n    world.renames = list()\n    world.exchanges = set()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def query(self, querystring):\n    mode = Database.MODE.READ_ONLY\n    db = Database(path=self.path, mode=mode)\n    return db.create_query(querystring)", "buggy_source_code": "def query(self, querystring):\n    mode = Database.MODE.READ_ONLY\n    db = Database(path=self.path, mode=mode)\n    return db.create_query(querystring.encode(DB_ENC))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, edit):\n    self.rescanFile(self.view, self.view.file_name())", "buggy_source_code": "def run(self, edit):\n    prefs = preferences.load(self.view)\n    self.rescanFile(prefs, self.view, self.view.file_name())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def queueBackgroundAutocompletions(self, view):\n    threadq.add(view, self.populateAutocompletionsCache)\n    threadq.trigger()", "buggy_source_code": "def queueBackgroundAutocompletions(self, prefs, view):\n    threadq.add(view, self.populateAutocompletionsCache, [prefs])\n    threadq.trigger()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, edit):\n    phpdaemon.runRemoteCommandInPHPDaemon(prefs, 'quit', [])", "buggy_source_code": "def run(self, edit):\n    prefs = preferences.load(self.view)\n    phpdaemon.runRemoteCommandInPHPDaemon(prefs, 'quit', [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def debugMsg(msg):\n    if prefs.debug_enabled == True:\n        print('[PHPCodeIntel] ' + str(msg))", "buggy_source_code": "def debugMsg(prefs, msg):\n    if prefs.debug_enabled == True:\n        print('[PHPCodeIntel] ' + str(msg))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, edit):\n    view = self.view\n    view.run_command('auto_complete', {'disable_auto_insert': True, 'api_completions_only': True, 'next_completion_if_showing': False})", "buggy_source_code": "def run(self, edit):\n    prefs = preferences.load(self.view)\n    view = self.view\n    view.run_command('auto_complete', {'disable_auto_insert': True, 'api_completions_only': True, 'next_completion_if_showing': False})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, edit):\n    db_file_path = prefs.getDBFilePath(self.view)\n    debugMsg('getDBFilePath = ' + str(db_file_path))", "buggy_source_code": "def run(self, edit):\n    prefs = preferences.load(self.view)\n    db_file_path = prefs.getDBFilePath(self.view)\n    debugMsg(prefs, 'getDBFilePath = ' + str(db_file_path))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, edit):\n    phpdaemon.runAsyncRemoteCommandInPHPDaemon(prefs, 'debugSleep', [3])", "buggy_source_code": "def run(self, edit):\n    prefs = preferences.load(self.view)\n    phpdaemon.runAsyncRemoteCommandInPHPDaemon(prefs, 'debugSleep', [3])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def triggerAutocomplete(self, view):\n    view.run_command('auto_complete', {'disable_auto_insert': True, 'api_completions_only': True, 'next_completion_if_showing': False})", "buggy_source_code": "def triggerAutocomplete(self, prefs, view):\n    view.run_command('auto_complete', {'disable_auto_insert': True, 'api_completions_only': True, 'next_completion_if_showing': False})", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _is_blacklisted(self, url):\n    return normalize_path(url) in self.blacklist", "buggy_source_code": "def _is_blacklisted(self, url):\n    path = normalize_path(url)\n    for url in self.blacklist:\n        if path.startswith(url):\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dep_stdev(self, name):\n    value = stdev(self.__dependents[name])\n    return round(value, self.__STDEV_PRECISION)", "buggy_source_code": "def dep_stdev(self, name):\n    if not self.__dependents[name]:\n        return None\n    value = stdev(self.__dependents[name])\n    return round(value, self.__STDEV_PRECISION)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ind_avg(self):\n    value = sum(self.__ind_values) / len(self)\n    return round(value, self.__ind_prec)", "buggy_source_code": "def ind_avg(self):\n    if not self.__ind_values:\n        return None\n    value = sum(self.__ind_values) / len(self)\n    return round(value, self.__ind_prec)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ind_min(self):\n    value = min(self.__ind_values)\n    return round(value, self.__ind_prec)", "buggy_source_code": "def ind_min(self):\n    if not self.__ind_values:\n        return None\n    value = min(self.__ind_values)\n    return round(value, self.__ind_prec)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ind_max(self):\n    value = max(self.__ind_values)\n    return round(value, self.__ind_prec)", "buggy_source_code": "def ind_max(self):\n    if not self.__ind_values:\n        return None\n    value = max(self.__ind_values)\n    return round(value, self.__ind_prec)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _on_menu_file_sync(self, _evt):\n    self._synchronize(False)", "buggy_source_code": "def _on_menu_file_sync(self, _evt):\n    self._synchronize(False)\n    Publisher().sendMessage('task.update')\n    Publisher().sendMessage('dict.update')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def bb_flux(wavelength, temperature, angular_radius):\n    bb_flux = np.pi * planck_function(wavelength, temperature) * angular_radius ** 2\n    return bb_flux", "buggy_source_code": "def bb_flux(wavelength, temperature, angular_radius):\n    bb_flux = np.pi * u.sr * planck_function(wavelength, temperature) * angular_radius ** 2\n    return bb_flux", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setDefinition(self, definition_id: str) -> None:\n    self._metadata['definition'] = definition_id", "buggy_source_code": "def setDefinition(self, definition_id: str) -> None:\n    self._metadata['definition'] = definition_id\n    self._definition = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super(PublicApplicationRenderer, self).__init__()\n    self.number_questions()", "buggy_source_code": "def __init__(self):\n    super(PublicApplicationRenderer, self).__init__()\n    self.number_questions()\n    self.check_field_groups()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    self.register_event_type('on_open')\n    self.register_event_type('on_dismiss')\n    super(Popup, self).__init__(**kwargs)", "buggy_source_code": "def __init__(self, **kwargs):\n    self.register_event_type('on_open')\n    self.register_event_type('on_dismiss')\n    self._parent = None\n    super(Popup, self).__init__(**kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@bot.message_handler(commands=['top_sarasti'])\ndef sarasti(message):\n    bot.send_voice(message.chat.id, 'AwADAgAD0QADNxYpSFb3d6KS2tHAAg', caption='ТОП САРАСТИ:\\n-1. АРУЛУТ\\n1. САРАСТИ\\n2. САРАСТИШЕЧКА\\n3. РАСТИШИШКА\\n4. s a r A S I S k a\\n5. СИСЕНИКА\\n6. САРАСТАТАЛО')", "buggy_source_code": "@bot.message_handler(commands=['top_sarastie'])\ndef sarasti(message):\n    text = 'ТОП САРАСТИ:\\n-1. АРУЛУТ\\n1. САРАСТИ\\n2. САРАСТИШЕЧКА\\n3. РАСТИШИШКА\\n4. s a r A S I S k a\\n5. СИСЕНИКА\\n6. САРАСТАТАЛО'\n    bot.send_voice(message.chat.id, 'AwADAgAD0QADNxYpSFb3d6KS2tHAAg', caption=text)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def show_snippet(request, snippet_id):\n    snippet = get_object_or_404(Snippet, pk=snippet_id, disabled=False)\n    return render(request, 'base/preview.html', {'snippet': snippet, 'client': PREVIEW_CLIENT})", "buggy_source_code": "def show_snippet(request, snippet_id):\n    snippet = get_object_or_404(Snippet, pk=snippet_id, disabled=False)\n    return render(request, 'base/preview.html', {'snippet': snippet, 'client': PREVIEW_CLIENT, 'preview': True})", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def clear_Ih_table(self):\n    del self.binner.Ih_table", "buggy_source_code": "def clear_Ih_table(self):\n    if self.binner:\n        self.binner.Ih_table = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def conf_brain_celery(app):\n    broker = get_brain_broker_uri()\n    backend = get_brain_backend_uri()\n    _conf_celery(app, broker, backend)", "buggy_source_code": "def conf_brain_celery(app):\n    broker = get_brain_broker_uri()\n    backend = get_brain_backend_uri()\n    queue = frontend_config.broker_brain.queue\n    _conf_celery(app, broker, backend, queue)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_urls():\n    prefix = 'https://www.rottentomatoes.com/critics/legacy_authors?letter='\n    return [prefix + letter for letter in ascii_lowercase]", "buggy_source_code": "def get_urls():\n    current = 'https://www.rottentomatoes.com/critics/authors?letter='\n    legacy = 'https://www.rottentomatoes.com/critics/legacy_authors?letter='\n    current_paths = [current + letter for letter in ascii_lowercase]\n    legacy_paths = [legacy + letter for letter in ascii_lowercase]\n    return current_paths + legacy_paths", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def add_message_handler_to(self, dispatcher):\n    dispatcher.add_message_handler(self.form_pattern, self.form)", "buggy_source_code": "def add_message_handler_to(self, dispatcher):\n    if self.form_pattern:\n        dispatcher.add_message_handler(self.form_pattern, self.form)\n    else:\n        self.warning('add_message_handler_to was called with no form_patterns. Have you loaded your fixtures?')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef download_speed(self):\n    return format_size(1 / self.avg) + '/s'", "buggy_source_code": "@property\ndef download_speed(self):\n    if self.avg == 0.0:\n        return '...'\n    return format_size(1 / self.avg) + '/s'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, payload, line):\n    Token.__init__(self, __class__, payload, line)\n    self.is_present()", "buggy_source_code": "def __init__(self, payload, line):\n    Token.__init__(self, __class__, payload, line)\n    self.is_present()\n    self.download_from_url()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, data):\n    self.program = data", "buggy_source_code": "def __init__(self, data):\n    self.program = data\n    self._glyph = self", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def write_formatted_info(self, header, info):\n    self.write(info_header(header))\n    for line in info_formatter(info):\n        self.write(' %s' % line)", "buggy_source_code": "def write_formatted_info(self, header, info):\n    self.write(info_header(header))\n    for line in info_formatter(info):\n        self.write(' %s' % line, callers=False)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __setText(self):\n    self.setText(self.__graphComponent.getName())", "buggy_source_code": "def __setText(self, *unwantedArgs):\n    self.setText(self.__graphComponent.getName())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __setName(self):\n    with Gaffer.UndoContext(self.__graphComponent.scriptNode()):\n        self.setText(self.__graphComponent.setName(self.getText()))", "buggy_source_code": "def __setName(self, *unwantedArgs):\n    with Gaffer.UndoContext(self.__graphComponent.scriptNode()):\n        self.setText(self.__graphComponent.setName(self.getText()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def before_all(context):\n    f_before_all(context)", "buggy_source_code": "def before_all(context):\n    f_before_all(context)\n    use_fixture(transformation_fixture, context, FormatTransformer, BASE_URL='http://localhost:8000', ALT_BASE_URL='http://127.0.0.1:8000')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def forceStep(val, step):\n    a = val / step\n    b = math.floor(a)\n    c = b * step\n    return c", "buggy_source_code": "def forceStep(self, val, step):\n    a = val / step\n    b = math.floor(a)\n    c = b * step\n    return c", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@synchronized\ndef __del__(self):\n    self.remove_all_load_callbacks()\n    self.__image_interface.release()", "buggy_source_code": "@synchronized\ndef __del__(self):\n    self.remove_all_load_callbacks()\n    self.__image_interface.release(self.__image_struct)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_float_list(self):\n    res = super(ProductProductImportationTraceColumn, self).get_float_list()\n    res.extend(['inventory_cost_no_move', 'inventory_cost_transport', 'inventory_cost_exchange'])\n    return res", "buggy_source_code": "def get_float_list(self):\n    res = super(ProductProductImportationTraceColumn, self).get_float_list()\n    res.extend(['inventory_cost_only_buy', 'inventory_cost_no_move', 'inventory_cost_transport', 'inventory_cost_exchange'])\n    return res", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def GetPasswordPrompt(self):\n    return re.compile('^.*@.*\\\\s+password:\\\\s*', re.I)", "buggy_source_code": "def GetPasswordPrompt(self):\n    return re.compile('^.*@.*\\\\s+password:\\\\s*', re.I | re.M)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def GetPasswordPrompt(self):\n    return re.compile('^Password:\\\\s*', re.I)", "buggy_source_code": "def GetPasswordPrompt(self):\n    return re.compile('^Password:\\\\s*', re.I | re.M)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    pass", "buggy_source_code": "def __init__(self):\n    self.cleanup_stack = []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def as_dict(self):\n    return {k: getattr(self, k, None) for k in self.props}", "buggy_source_code": "def as_dict(self):\n    return {k if not k.startswith('_') else k[1:]: getattr(self, k, None) for k in self.props}", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def assign_owner(self, req):\n    if self.owner != -1:\n        req['MDATA_KEY_OWNER_ID']", "buggy_source_code": "def assign_owner(self, req):\n    if self.owner != -1:\n        req['MDATA_KEY_OWNER_ID'] = self.owner", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.runner = CliRunner()\n    GandiModule._api = Api()", "buggy_source_code": "def setUp(self):\n    self.runner = CliRunner()\n    GandiModule._api = Api()\n    GandiModule._conffiles = {'global': {'api': {'env': 'test', 'key': 'apikey0001'}}}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    GandiModule._api = None", "buggy_source_code": "def tearDown(self):\n    GandiModule._api = None\n    GandiModule._conffiles = {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def system_update():\n    sudo('/usr/local/anaconda/bin/supervisorctl update')\n    sudo('service nginx restart')", "buggy_source_code": "def system_update(username):\n    sudo('/usr/local/anaconda/bin/supervisorctl update')\n    sudo('/usr/local/anaconda/bin/supervisorctl %s restart' % username)\n    sudo('service nginx restart')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _tableCriteria(self, collection, arg=None):\n    role = [pyatspi.ROLE_TABLE]\n    return MatchCriteria(collection, roles=role)", "buggy_source_code": "def _tableCriteria(self, collection, arg=None):\n    role = [pyatspi.ROLE_TABLE]\n    return MatchCriteria(collection, roles=role, applyPredicate=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __shift_rows(message):\n    for i in range(4):\n        message[i] = message[i:] + message[:i]\n    return message", "buggy_source_code": "def __shift_rows(message):\n    for i in range(4):\n        message[i] = message[i][i:] + message[i][:i]\n    return message", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def search_turnitin(page_title, lang):\n    turnitin_data = _parse_plagiabot_result(_make_api_request('The quick brown fox jumps over the lazy dog', lang))\n    turnitin_result = TurnitinResult(turnitin_data)\n    return turnitin_result", "buggy_source_code": "def search_turnitin(page_title, lang):\n    turnitin_data = _parse_plagiabot_result(_make_api_request(page_title, lang))\n    turnitin_result = TurnitinResult(turnitin_data)\n    return turnitin_result", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def mute(self):\n    self.muted = True\n    self.wrapped_stream.stop_stream()", "buggy_source_code": "def mute(self):\n    with self.read_lock:\n        self.muted = True\n        self.wrapped_stream.stop_stream()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unmute(self):\n    self.muted = False\n    self.wrapped_stream.start_stream()", "buggy_source_code": "def unmute(self):\n    with self.read_lock:\n        self.muted = False\n        self.wrapped_stream.start_stream()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _run_task(self):\n    query = self._get_query()\n    result = self.tooling.query(query)\n    return result['size'] > 0", "buggy_source_code": "def _run_task(self):\n    query = self._get_query()\n    result = self.tooling.query(query)\n    if result['size'] > 0:\n        self.return_values['has_einstein_perms'] = True", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def nlri(self):\n    return '%s%s' % (self.prefix(), str(self.path_info))", "buggy_source_code": "def nlri(self):\n    return '%s%s%s%s' % (self.prefix(), str(self.labels), str(self.path_info), str(self.rd))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __len__(self):\n    return len(self.dqs) + len(self.mqs)", "buggy_source_code": "def __len__(self):\n    return len(self.dqs) + len(self.mqs) if self.dqs else len(self.mqs)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef get_template_groups(cls):\n    return [cls.templates_group]", "buggy_source_code": "@classmethod\ndef get_template_groups(cls):\n    return [six.text_type(cls.templates_group)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@post_dump\ndef add_full_name(self, data, **kwargs):\n    data['author_full'] = '{}, {}'.format(data['author']['last'], data['author']['first'])", "buggy_source_code": "@post_dump\ndef add_full_name(self, data, **kwargs):\n    data['author_full'] = '{}, {}'.format(data['author']['last'], data['author']['first'])\n    return data", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def terminate(self):\n    self.quit = True\n    if not self.camera.closed:\n        self.camera.close()", "buggy_source_code": "def terminate(self):\n    self.quit = True\n    if not self.camera.closed:\n        self.camera.close()\n        del self.camera", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def invoice_series(self):\n    try:\n        return self.provider.invoice_series\n    except ProviderHistory.DoesNotExist:\n        return ''", "buggy_source_code": "@property\ndef invoice_series(self):\n    try:\n        return self.provider.invoice_series\n    except ProviderHistory.DoesNotExist:\n        return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def resource(filename):\n    path = os.path.join(tmpl_dir, filename)\n    return open(path, 'rb').read()", "buggy_source_code": "def resource(filename):\n    path = os.path.join(tmpl_dir, filename)\n    with open(path, 'rb') as f:\n        return f.read()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def left_stone(self, nb):\n    nb -= 1\n    return max(max(0, nb - lpbm.constants.WIDTH_PAGINATE / 2), self.pages - lpbm.constants.WIDTH_PAGINATE)", "buggy_source_code": "def left_stone(self, nb):\n    nb -= 1\n    return min(max(0, nb - lpbm.constants.WIDTH_PAGINATE / 2), max(0, self.pages - lpbm.constants.WIDTH_PAGINATE))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@jinjaGlobal\ndef getSecurityKey(render, **kwargs):\n    return securitykey.create(kwargs)", "buggy_source_code": "@jinjaGlobal\ndef getSecurityKey(render, **kwargs):\n    return securitykey.create(**kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def type_label(self):\n    return self.model_name + '/' + self.configuration", "buggy_source_code": "def type_label(self):\n    if self.model_name is None or self.configuration is None:\n        return None\n    return self.model_name + '/' + self.configuration", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _vis_calibrate(self, data):\n    pass", "buggy_source_code": "def _vis_calibrate(self, data, key):\n    solar_irradiance = CALIB[self.platform_id][key.name]['F']\n    data.data[:] *= 100 / solar_irradiance", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def home(self):\n    self.page = 0", "buggy_source_code": "def home(self):\n    if self.page != 0:\n        self.page = 0\n    else:\n        log.info('at home already')\n        self.ui.driver.send_error_sound()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@follows(mergeDiamondGeneCounts, loadDiamondGeneCounts)\ndef Genes():\n    pass", "buggy_source_code": "@follows(mergeDiamondGeneCounts, loadDiamondGeneCounts, barchartGeneProportions)\ndef Genes():\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def _str(self, s):\n    return s.encode('utf-8')", "buggy_source_code": "def _str(self, s):\n    if s is None:\n        return None\n    return s.encode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _uni(self, s):\n    return s.decode('utf-8', 'ignore')", "buggy_source_code": "def _uni(self, s):\n    if s is None:\n        return None\n    return s.decode('utf-8', 'ignore')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def use(self, management_ip):\n    with self.workdir:\n        cfy.use(management_ip).wait()", "buggy_source_code": "def use(self, management_ip):\n    with self.workdir:\n        cfy.use(management_ip=management_ip).wait()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def execute_uninstall(self, deployment_id, verbose=False, include_logs=True, execute_timeout=DEFAULT_EXECUTE_TIMEOUT):\n    self._execute_workflow('uninstall', deployment_id=deployment_id, execute_timeout=execute_timeout, verbose=verbose, include_logs=include_logs)", "buggy_source_code": "def execute_uninstall(self, deployment_id, verbose=False, include_logs=True, execute_timeout=DEFAULT_EXECUTE_TIMEOUT):\n    self._execute_workflow(workflow='uninstall', deployment_id=deployment_id, execute_timeout=execute_timeout, verbose=verbose, include_logs=include_logs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_timeline_feed(self):\n    return self.send_request('feed/timeline/')", "buggy_source_code": "def get_timeline_feed(self):\n    data = self.json_data({'is_prefetch': '0', 'is_pull_to_refresh': '0'})\n    return self.send_request('feed/timeline/', data, with_signature=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def compute(self, X, y):\n    self.X = X\n    self.y = y", "buggy_source_code": "def compute(self, X, y):\n    self.X = X\n    self.y = np.asarray(y)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def closeport(self):\n    self.SP.close()", "buggy_source_code": "def closeport(self):\n    if self.SP.isOpen():\n        try:\n            self.SP.close()\n        except:\n            pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, sec_timeout=600):\n    self.last_time = datetime.datetime(1970, 1, 1)\n    self.sec_timeout = sec_timeout", "buggy_source_code": "def __init__(self, sec_timeout=600):\n    self.last_time = datetime.datetime(1970, 1, 1)\n    self.sec_timeout = sec_timeout\n    self.mutex = Lock()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_table_csv(self, temp_tablename, csv2pgcat_id_aux):\n    sql = 'DELETE FROM ' + self.schema_name + '.' + temp_tablename + \"  WHERE csv2pgcat_id = '\" + str(csv2pgcat_id_aux) + \"' AND user_name = current_user\"\n    self.controller.execute_sql(sql)", "buggy_source_code": "def delete_table_csv(self, temp_tablename, csv2pgcat_id_aux):\n    sql = 'DELETE FROM ' + self.schema_name + '.' + temp_tablename + \"  WHERE csv2pgcat_id = '\" + str(csv2pgcat_id_aux) + \"' AND user_name = current_user\"\n    self.controller.execute_sql(sql, log_sql=True)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getDictionary(self):\n    dict = {}\n    dict['registrationPlate'] = self.registrationPlate\n    dict['service'] = self.service\n    return dict", "buggy_source_code": "def getDictionary(self):\n    dict = {}\n    dict['registrationPlate'] = self.registrationPlate\n    dict['service'] = self.service\n    dict['report'] = self.report.getDictionary()\n    return dict", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _is_valid_dest(self, state, index):\n    return state.is_empty_at_index(index)", "buggy_source_code": "def _is_valid_dest(self, state, index):\n    try:\n        return state.is_empty_at_index(index)\n    except:\n        return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_allowed_cash_choice_ids():\n    return set([1, 4, 9, 10, 11])", "buggy_source_code": "def get_allowed_cash_choice_ids():\n    return set([1, 4, 9, 10, 11, 15])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def _checkConf(conf):\n    if not conf:\n        raise endpoints.NotFoundException('No conference found.')", "buggy_source_code": "def _checkConf(self, conf):\n    if not conf:\n        raise endpoints.NotFoundException('No conference found.')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def CreateDownload(url):\n    resp = urllib2.urlopen(url)\n    return resp.read()", "buggy_source_code": "def CreateDownload(url):\n    try:\n        resp = urllib2.urlopen(url)\n        return resp.read()\n    except Exception as e:\n        return", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def var_func(position, distortion, _noise_type1, _noise_type2):\n    return noise.variable_lacunarity(position, distortion, _noise_type1, _noise_type2)", "buggy_source_code": "def var_func(position, distortion, _noise_type1, _noise_type2):\n    return noise.variable_lacunarity(position, distortion, noise_type1=_noise_type1, noise_type2=_noise_type2)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef service_url(self):\n    return Ogone.get_action()", "buggy_source_code": "@property\ndef service_url(self):\n    return Ogone.get_action(production=not settings.MERCHANT_TEST_MODE)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_headers(from_file):\n    with open(from_file, 'r') as ff:\n        reader = csv.DictReader(ff)\n        return reader.fieldnames", "buggy_source_code": "def get_headers(from_file):\n    with open(from_file, 'r', encoding='utf8') as ff:\n        reader = csv.DictReader(ff)\n        return reader.fieldnames", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def fourstore_httpd(name, port):\n    check_call(['4s-httpd', '-p', str(port), name])", "buggy_source_code": "def fourstore_httpd(name, port):\n    check_call(['4s-backend', name])\n    check_call(['4s-httpd', '-p', str(port), name])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def display_error(self, e):\n    self.gadget.set_status_lines(['Error encountered', 'while fetching.', 'Will try later.'])", "buggy_source_code": "def display_error(self, e):\n    self.gadget.set_background_status(gadget.BackgroundStatus.Error)\n    self.gadget.set_status_lines(['Error encountered', 'while fetching.', 'Will try later.'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef from_rep(x):\n    return transit_types.true if x == 't' else transit_types.false", "buggy_source_code": "@staticmethod\ndef from_rep(x):\n    print('*****Bool:', x)\n    return transit_types.true if x == 't' else transit_types.false", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def orderOfMagnitude(field):\n    if field:\n        return (unicode(int(round(math.log10(field)))),)\n    else:\n        return ()", "buggy_source_code": "def orderOfMagnitude(field):\n    if field and field > 0:\n        return (unicode(int(round(math.log10(field)))),)\n    else:\n        return ()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def from_neighbor_pores(target, pore_prop, mode='min'):\n    return _misc.from_neighbor_pores(target=target, pore_prop=pore_prop, mode=mode)", "buggy_source_code": "def from_neighbor_pores(target, pore_prop='pore.diameter', mode='min'):\n    return _misc.from_neighbor_pores(target=target, pore_prop=pore_prop, mode=mode)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def terminate(self):\n    self.exitStatus.set()\n    return None", "buggy_source_code": "def terminate(self):\n    self.exitSetHere = True\n    self.exitStatus.set()\n    return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_all():\n    try:\n        elastic.delete_index('website')\n    except pyelasticsearch.exceptions.ElasticHttpNotFoundError as e:\n        logger.error(e)\n        logger.error(\"The index 'website' was not deleted from elasticsearch\")", "buggy_source_code": "@requires_search\ndef delete_all():\n    try:\n        elastic.delete_index('website')\n    except pyelasticsearch.exceptions.ElasticHttpNotFoundError as e:\n        logger.error(e)\n        logger.error(\"The index 'website' was not deleted from elasticsearch\")", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@wraps(type_.set_into_collide_mask, assigned=('__name__', '__doc__'))\ndef set_into_collide_mask(self, into_collide_mask):\n    self.node().set_into_collide_mask(into_collide_mask)", "buggy_source_code": "@wraps(type_.set_into_collide_mask, assigned=('__name__', '__doc__'))\ndef set_into_collide_mask(self, into_collide_mask):\n    self.node().set_into_collide_mask(Bitmask32(into_collide_mask))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def list_matches_ajax(block_id, atts, column_number, block_type, current_page):\n    videos = get_matches_ajax(block_id, atts, column_number, block_type, current_page)\n    return list_matches(videos)", "buggy_source_code": "def list_matches_ajax(block_id, atts, column_number, block_type, current_page):\n    print('=====list_matches_ajax({0})'.format(block_id))\n    videos = get_matches_ajax(block_id, atts, column_number, block_type, current_page)\n    return list_matches(videos)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def etree_write(tree, stream):\n    tree.write(stream, encoding='UTF-8', xml_declaration=True)", "buggy_source_code": "def etree_write(tree, stream):\n    enc = 'unicode' if anyconfig.compat.IS_PYTHON_3 else 'utf-8'\n    tree.write(stream, encoding=enc, xml_declaration=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def tweet_poll(self, tweet):\n    self.twitter.PostUpdate(tweet)", "buggy_source_code": "def tweet_poll(self, tweet):\n    if not isinstance(tweet, Tweet):\n        raise TweetError('Object passed is not a Tweet object. Unable to post')\n    else:\n        self.twitter.PostUpdate(tweet)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def release(self):\n    status = MSP430_Close(TRUE)\n    if status != STATUS_OK:\n        raise IOError('Could not close the library')", "buggy_source_code": "def release(self):\n    status = MSP430_Close(TRUE)\n    if status != STATUS_OK:\n        raise IOError('Could not close the library: %s' % MSP430_Error_String(MSP430_Error_Number()))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def regwrite(self, regnum, value):\n    status = MSP430_WriteRegister(regnum, value)\n    if status != STATUS_OK:\n        raise IOError('Could not write register')", "buggy_source_code": "def regwrite(self, regnum, value):\n    status = MSP430_WriteRegister(regnum, value)\n    if status != STATUS_OK:\n        raise IOError('Could not write register: %s' % MSP430_Error_String(MSP430_Error_Number()))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setDebugLevel(self, level):\n    global DEBUG\n    DEBUG = level\n    _parjtag.configure(DEBUG_OPTION, level)", "buggy_source_code": "def setDebugLevel(self, level):\n    global DEBUG\n    DEBUG = level\n    if backend == CTYPES_MSPGCC:\n        _parjtag.configure(DEBUG_OPTION, level)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def configure(self, mode, value=0):\n    status = MSP430_Configure(mode, value)\n    if status != STATUS_OK:\n        raise IOError('Could not change mode')", "buggy_source_code": "def configure(self, mode, value=0):\n    status = MSP430_Configure(mode, value)\n    if status != STATUS_OK:\n        raise IOError('Could not change mode: %s' % MSP430_Error_String(MSP430_Error_Number()))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@ask.on_playback_stopped()\ndef stopped(offset):\n    queue.paused_offset = offset\n    app.logger.debug(render_template('stopped', offset=offset))", "buggy_source_code": "@ask.on_playback_stopped()\ndef stopped(offset):\n    queue.paused_offset = offset\n    app.logger.debug(render_template('stopped', offset=offset))\n    return empty_response()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@ask.on_playback_finished()\ndef finished():\n    queue.next()", "buggy_source_code": "@ask.on_playback_finished()\ndef finished():\n    queue.next()\n    return empty_response()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@ask.on_playback_started()\ndef started(offset):\n    app.logger.debug(render_template('started', offset=offset))", "buggy_source_code": "@ask.on_playback_started()\ndef started(offset):\n    app.logger.debug(render_template('started', offset=offset))\n    return empty_response()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _handle_date(self, val, key=None):\n    return val.strftime(DATE_FORMAT)", "buggy_source_code": "def _handle_date(self, val, key=None):\n    return self._escape_query(val.strftime(DATE_FORMAT))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def reload_karabiner():\n    call(['karabiner', 'enable', 'private.easy_karabiner'])\n    call(['karabiner', 'reloadxml'])", "buggy_source_code": "def reload_karabiner():\n    call(['karabiner', 'enable', 'private.easy_karabiner'])\n    call(['karabiner', 'reloadxml'])\n    print('Reload Karabiner config xml file.')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def has_valid_effective_date(posting):\n    return 'effective_date' in posting.meta and type(posting.meta['effective_date']) == datetime.date", "buggy_source_code": "def has_valid_effective_date(posting):\n    return posting.meta is not None and 'effective_date' in posting.meta and (type(posting.meta['effective_date']) == datetime.date)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef build(cls, config, workingdir=None):\n    return cls(workingdir)", "buggy_source_code": "@classmethod\ndef build(cls, config, parent=None, graph=None, workingdir=None):\n    return cls(workingdir)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef week(self):\n    return self.start_date.date().isocalendar()[1]", "buggy_source_code": "@property\ndef week(self):\n    return 'CW{week}'.format(week=self.start_date.date().isocalendar()[1])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def load_data(self, products_path, listings_path):\n    self.products = self.load(Product, products_path)\n    self.listings = self.load(Listing, listings_path)", "buggy_source_code": "def load_data(self, products_path, listings_path):\n    print('loading data')\n    self.products = self.load(Product, products_path)\n    self.listings = self.load(Listing, listings_path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def write_results(self, results_path):\n    with open(results_path, 'w') as file:\n        self.matcher.write_results(file)", "buggy_source_code": "def write_results(self, results_path):\n    print('writing %s' % results_path)\n    with open(results_path, 'w') as file:\n        self.matcher.write_results(file)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_known_change_diff():\n    assert get_changed_paths('1228fc9^', '1228fc9') == set(['travistooling/decisionmaker.py', 'travistooling/decisions.py'])", "buggy_source_code": "def test_known_change_diff():\n    git('fetch', 'origin', '--unshallow')\n    assert get_changed_paths('1228fc9^', '1228fc9') == set(['travistooling/decisionmaker.py', 'travistooling/decisions.py'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def allOpts(self):\n    chain(self.sandboxOpt, self.optimizationOpt, self.jobsOpt)", "buggy_source_code": "def allOpts(self):\n    chain(self.sandboxOpt(), self.optimizationOpt(), self.jobsOpt())", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    super(BaseTestCase, cls).setUpClass()\n    cls.network = None\n    cls.credentials = None\n    cls.testcase = None", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    super(BaseTestCase, cls).setUpClass()\n    cls.network = None\n    cls.credentials = None\n    cls.testcase = None\n    cls._results = []", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef appliance_load(self):\n    if self.appliance_limit is None:\n        return 0.0\n    return float(self.num_currently_managing) / float(self.appliance_limit)", "buggy_source_code": "@property\ndef appliance_load(self):\n    if self.appliance_limit is None or self.appliance_limit == 0:\n        return 0.0\n    return float(self.num_currently_managing) / float(self.appliance_limit)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def notification(e):\n    return 'Notice of {0} on {1} sent to {2}'.format(e['notification_type'], e['host'], e['users'].join(', '))", "buggy_source_code": "def notification(e):\n    return 'Notice of {0} on {1} sent to {2}'.format(e['notification_type'], e['host'], ', '.join(e['users']))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def finished(self):\n    return self.roundsFinished >= self.ruleset.minRounds", "buggy_source_code": "def finished(self):\n    if self.ruleset:\n        return self.roundsFinished >= self.ruleset.minRounds", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.temp_dir = tempfile.mkdtemp()", "buggy_source_code": "def setUp(self):\n    self.temp_dir = tempfile.mkdtemp()\n    self.maxDiff = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clean_question_src(question):\n    question = re.sub('<(span|strong)[^>]*>|</(strong|span)>', '', question)\n    return question", "buggy_source_code": "def clean_question_src(question):\n    question = re.sub('<(span|strong)[^>]*>|</(strong|span)>', '', question)\n    question = re.sub('\\\\\\\\:', ':', question)\n    return question", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef imageBase(self):\n    return self.segments[0].header.p_vaddr - self.segments[0].header.p_offset", "buggy_source_code": "@property\ndef imageBase(self):\n    return self.segments[0].header.p_vaddr - self.segments[0].header.p_offset if len(self.segments) > 0 else 0", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def step(self):\n    super().step()", "buggy_source_code": "def step(self, random=False):\n    super().step(random)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def check_error_stanza(self, iq):\n    error = xpath.queryForNodes('/iq/error', iq)\n    assert error['code'] == '404'\n    assert error['type'] == 'cancel'", "buggy_source_code": "def check_error_stanza(self, iq):\n    error = xpath.queryForNodes('/iq/error', iq)[0]\n    assert error['code'] == '404'\n    assert error['type'] == 'cancel'", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def assert_move_right(self):\n    assert self.player.x == self.x + 1\n    assert self.player.y == self.y\n    assert self.player.score == self.score", "buggy_source_code": "def assert_move_right(self):\n    assert self.player.x == self.x + 1\n    assert self.player.y == self.y\n    assert self.player.score == self.score + config.score_move_forward", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def assert_move_left(self):\n    assert self.player.x == self.x - 1\n    assert self.player.y == self.y\n    assert self.player.score == self.score", "buggy_source_code": "def assert_move_left(self):\n    assert self.player.x == self.x - 1\n    assert self.player.y == self.y\n    assert self.player.score == self.score + config.score_move_forward", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def assert_score(self, score):\n    assert self.player.x == self.x\n    assert self.player.y == self.y\n    assert self.player.score == score", "buggy_source_code": "def assert_score(self, score):\n    assert self.player.x == self.x\n    assert self.player.y == self.y\n    assert self.player.score == score + config.score_move_forward", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _do_select(self, *args):\n    self.emit('selected', self._icon_entry.get_text())\n    self._close_window()", "buggy_source_code": "def _do_select(self, *args):\n    if self._apply_button.get_sensitive():\n        self.emit('selected', self._icon_entry.get_text())\n        self._close_window()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_user(self, username):\n    return None", "buggy_source_code": "def get_user(self, username):\n    return {}", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def search(self, searchstring):\n    return []", "buggy_source_code": "def search(self, searchstring):\n    return {}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    pass", "buggy_source_code": "def __init__(self, config, logger, name, attrslist, key):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def checkDBVersion(self):\n    try:\n        if self.hasTable('db_version'):\n            return self.select('SELECT db_version FROM db_version')\n    except:\n        return 0", "buggy_source_code": "def checkDBVersion(self):\n    try:\n        if self.hasTable('db_version'):\n            return self.select('SELECT db_version FROM db_version')[0]['db_version']\n    except:\n        return 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_attachment_mime(self, attachment_id):\n    suffix_endpoint = f'users/{self._mailbox_to_fetch}/messages/{attachment_id}/$value'\n    mime_content = self._http_request('GET', suffix_endpoint, resp_type='text')\n    return mime_content", "buggy_source_code": "def _get_attachment_mime(self, message_id, attachment_id):\n    suffix_endpoint = f'users/{self._mailbox_to_fetch}/messages/{message_id}/attachments/{attachment_id}/$value'\n    mime_content = self._http_request('GET', suffix_endpoint, resp_type='text')\n    return mime_content", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_up_help(request):\n    return render(request, 'set_up_help.html')", "buggy_source_code": "def set_up_help(request):\n    return render(request, 'set_up_help.html', {'custom': CUSTOM_LOOKUP})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def put(self, item: Item, priority: float) -> None:\n    self.queue.put(item)", "buggy_source_code": "def put(self, item: Item, priority: float) -> None:\n    assert priority <= 0\n    self.queue.append(PItem(priority, item))\n    self.dirty = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def saturate_channel(I, channel_idx):\n    set_channel_value(I, channel_idx, 255)\n    return I", "buggy_source_code": "def saturate_channel(X, channel_idx):\n    I = X.copy()\n    I = set_channel_value(I, channel_idx, 255)\n    return I", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _on_back_button_clicked(self, button):\n    self.register_widget.emit('back')\n    self.back_button.set_sensitive(not self.register_widget.applied_screen_history.is_empty())", "buggy_source_code": "def _on_back_button_clicked(self, button):\n    self.clear_info()\n    self.register_widget.emit('back')\n    self.back_button.set_sensitive(not self.register_widget.applied_screen_history.is_empty())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def extdiff(ui, repo, *pats, **opts):\n    return dodiff(ui, repo, opts['program'] or 'diff -Npru', pats, opts)", "buggy_source_code": "def extdiff(ui, repo, *pats, **opts):\n    return dodiff(ui, repo, opts['program'] or 'diff', opts['option'] or ['-Npru'], pats, opts)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_user(user):\n    url = 'https://api.github.com/users/{}'.format(user)\n    response = requests.get(url, auth=_auth, headers=headers)\n    return response.json()", "buggy_source_code": "def get_user(user):\n    url = 'https://api.github.com/users/{}'.format(user.replace('@', ''))\n    response = requests.get(url, auth=_auth, headers=headers)\n    return response.json()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_start(self):\n    self.cli.add('echo', 'This is the output')\n    out = self.cli.start('echo', '-w')\n    self.assertIn('This is the output', out)", "buggy_source_code": "def test_start(self):\n    self.cli.add('echo', 'This is the output', '--off')\n    out = self.cli.start('echo', '-w')\n    self.assertIn('This is the output', out)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_cant_add_twice(self):\n    self.cli.add('echo', 'hi')\n    with self.assertRaises(errors.ChalmersError):\n        self.cli.add('echo', 'hi')", "buggy_source_code": "def test_cant_add_twice(self):\n    self.cli.add('echo', 'hi', '--off')\n    with self.assertRaises(errors.ChalmersError):\n        self.cli.add('echo', 'hi', '--off')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_add_remove(self):\n    self.cli.add('echo', 'hi')\n    self.cli.remove('echo')", "buggy_source_code": "def test_add_remove(self):\n    self.cli.add('echo', 'hi', '--off')\n    self.cli.remove('echo')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_show(self):\n    self.cli.add('echo', 'hi')\n    out = self.cli.show('echo')", "buggy_source_code": "def test_show(self):\n    self.cli.add('echo', 'hi', '--off')\n    out = self.cli.show('echo')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_representation(self):\n    workspace = WorkspaceEdit()\n    workspace.save()\n    workspace_item = workspace.workspace_items.create()\n    self.assertTrue(unicode(workspace_item))", "buggy_source_code": "def test_representation(self):\n    workspace = WorkspaceEdit()\n    workspace.save()\n    workspace_item = workspace.workspace_items.create(name='workspace_item')\n    self.assertTrue(unicode(workspace_item))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, elem, page):\n    self.elem = elem\n    self.page = page", "buggy_source_code": "def __init__(self, elem, page):\n    self.elem = elem\n    self.page = page\n    graph = self.get_graph()\n    graph.wait_until_graph_is_visible()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def custom_tight_layout(self):\n    try:\n        self.fig_canvas.figure.tight_layout()\n    except ValueError:\n        pass", "buggy_source_code": "def custom_tight_layout(self):\n    try:\n        self.fig_canvas.figure.tight_layout()\n    except ValueError:\n        msg = 'Title is wider than figure.This causes undesired behavior and is a known bug.'\n        self.statusBar.showMessage(msg, 2000)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_targets(self):\n    villin_des = rd.Design(pdb='pdbs/1vii.pdb')\n    self.assertEqual(villin_des.targets, None)", "buggy_source_code": "def test_targets(self):\n    villin_des = rd.Design(pdb='pdbs/1vii.pdb')\n    self.assertEqual(villin_des.targets, range(36))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self) -> str:\n    return '{} ({})'.format(self.name, self.username)", "buggy_source_code": "def __str__(self) -> str:\n    return '{} ({})'.format(self.name, self.username or self.email)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, username: str, name: str, email: Optional[str]=None):\n    self.username = username\n    self.name = name\n    self.email = email", "buggy_source_code": "def __init__(self, username: Optional[str], name: str, email: Optional[str]=None):\n    self.username = username\n    self.name = name\n    self.email = email", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_anonymous_name_for(g):\n    if g.tohu_name is not None:\n        return f'ANONYMOUS_ANONYMOUS_ANONYMOUS_{g.tohu_name}'\n    else:\n        return f'ANONYMOUS_ANONYMOUS_ANONYMOUS_{g.tohu_id}'", "buggy_source_code": "def get_anonymous_name_for(g):\n    if g.tohu_name is not None:\n        return f'ANONYMOUS_ANONYMOUS_ANONYMOUS_{g.tohu_name}'\n    else:\n        return f'ANONYMOUS_ANONYMOUS_ANONYMOUS_{g.__class__.__name__}_{g.tohu_id}'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __dir__(self):\n    return list(map(camelize, self._library.handlers.keys()))", "buggy_source_code": "def __dir__(self):\n    return list(chain(super(TestLibraryInspector, self).__dir__(), (camelize(h.name) for h in self._library.handlers)))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __call__(self, sequence=Stream.NoNewData):\n    return sequence", "buggy_source_code": "def __call__(self, sequence=Stream.NoNewData):\n    if isinstance(sequence, More):\n        sequence = sequence.output\n    return sequence", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _remove_feature(self, name):\n    wd = self._featurename_wds[name]\n    del self._wd_featurepaths[wd]\n    del self._featurename_wds[name]", "buggy_source_code": "def _remove_feature(self, name):\n    log.debug('removing feature %s', name)\n    wd = self._featurename_wds[name]\n    del self._wd_featurepaths[wd]\n    del self._featurename_wds[name]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def make_kill_regexps():\n    result = {'pylint_rating': '^[Yy]our code has been rated.*$'}\n    return result", "buggy_source_code": "def make_kill_regexps():\n    result = {'long_dash': '^-+ *', 'pylint_rating': '^[Yy]our code has been rated.*$'}\n    return result", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_solve_2sat_trivial():\n    a = Variable('a')\n    clauses = {Clause(a)}\n    obs = solve_2sat(clauses)\n    exp = {a}\n    assert obs == exp", "buggy_source_code": "def test_solve_2sat_trivial():\n    a = Variable('a')\n    clauses = {Clause(a)}\n    (_, obs) = solve_2sat(clauses)\n    exp = {a}\n    assert obs == exp", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getobjectlist(self, window_name):\n    (window_handle, name, app) = self._get_window_handle(window_name)\n    object_list = self._get_appmap(window_handle, name)\n    return object_list.keys()", "buggy_source_code": "def getobjectlist(self, window_name):\n    (window_handle, name, app) = self._get_window_handle(window_name, True)\n    object_list = self._get_appmap(window_handle, name, True)\n    return object_list.keys()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _dict_singleton_conll_formatter(v, v_delimiter):\n    return v", "buggy_source_code": "def _dict_singleton_conll_formatter(v, v_delimiter):\n    if v is not None:\n        return v\n    else:\n        error_msg = 'Singleton value cannot be None'\n        raise FormatError(error_msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __check_readable(self):\n    pass", "buggy_source_code": "def __check_readable(self):\n    if self.mode != 'r':\n        raise IOError('File not open for reading')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __check_writable(self):\n    pass", "buggy_source_code": "def __check_writable(self):\n    if self.mode != 'w':\n        raise IOError('File not open for writing')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_headers(self):\n    return {}", "buggy_source_code": "def get_headers(self):\n    return {'content-type': 'application/json'}", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_queryset(self):\n    return Board.objects.for_user(self.request.user)", "buggy_source_code": "def get_queryset(self):\n    qs = Board.objects.all()\n    if not self.request.user.is_superuser:\n        qs = qs.for_user(self.request.user)\n    return qs", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def fetch_partial_balance(part, params={}):\n    balance = self.fetch_balance(params)\n    return balance[part]", "buggy_source_code": "def fetch_partial_balance(self, part, params={}):\n    balance = self.fetch_balance(params)\n    return balance[part]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    ResponseHandler.responses = []\n    return", "buggy_source_code": "def setUp(self):\n    ResponseHandler.responses = []\n    print('Handler is listening on %s:%s' % tuple(self.server.socket.getsockname()), file=stderr)\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_ground_plane():\n    bpy.ops.mesh.primitive_plane_add(radius=1000)\n    return bpy.context.object", "buggy_source_code": "def add_ground_plane():\n    bpy.ops.mesh.primitive_plane_add(location=(0, 0, 0), radius=1000)\n    return bpy.context.object", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def your_settings(req):\n    return __serve_page(req, 'web/your_settings.html')", "buggy_source_code": "def your_settings(req):\n    return __serve_page(req, 'web/your_settings.html', mimetype='text/html')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@task(test)\ndef bump(context, version='patch'):\n    context.run('bumpversion %s' % version)\n    context.run('git commit --amend')", "buggy_source_code": "@task(test)\ndef bump(context, version='patch'):\n    context.run('pandoc --from=markdown --to=rst README.md -o README.rst')\n    context.run('bumpversion %s' % version)\n    context.run('git commit --amend')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef childNodes(self):\n    from NodeList import NodeList\n    return NodeList(self.doc, self.tag.contents)", "buggy_source_code": "@property\ndef childNodes(self):\n    from NodeList import NodeList\n    return Node.wrap(self.doc, NodeList(self.doc, self.tag.contents))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef block_instructions(self):\n    questionnaire_block = models.QuestionnaireBlock.objects.get(block=self.questionnaire_item.item.block)\n    return questionnaire_block.instructions", "buggy_source_code": "@property\ndef block_instructions(self):\n    questionnaire_block = models.QuestionnaireBlock.objects.get(study=self.study, block=self.questionnaire_item.item.block)\n    return questionnaire_block.instructions", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@fixture(scope='session')\ndef reads_with_mutations(sandbox, fasta):\n    return gen_reads(fasta=fasta, output_dir=sandbox, bam_output=True, vcf_output=True, mutation_rate=0.1)", "buggy_source_code": "@fixture(scope='session')\ndef reads_with_mutations(sandbox, fasta):\n    return gen_reads(fasta=fasta['fasta'], output_dir=sandbox, bam_output=True, vcf_output=True, mutation_rate=0.1)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def getVol():\n    vol = media('getVol')\n    vol = str(int(float(vol) * 100)) + '%'\n    return vol", "buggy_source_code": "def getVol():\n    vol = media('getVol', _ok_code=media_codes)\n    vol = str(int(float(vol) * 100)) + '%'\n    return vol", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def splitPrefix(self, name):\n    if ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "buggy_source_code": "def splitPrefix(self, name):\n    if name is not None and ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@extra(name='Force log out', desc='Force log out WeChat session.\\nUsage: {function_name}')\ndef force_log_out(self, param=''):\n    self.itchat.logout()", "buggy_source_code": "@extra(name='Force log out', desc='Force log out WeChat session.\\nUsage: {function_name}')\ndef force_log_out(self, param=''):\n    self.itchat.logout()\n    return 'Done.'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def compile_query(query):\n    expr = Parser(tokenize(query)).expr()\n    tree = expr.visit()\n    log.debug('AST: %s', tree)\n    return tree", "buggy_source_code": "def compile_query(query):\n    expr = Parser(tokenize(query)).expr()\n    tree = expr.visit()\n    log.debug('AST: %s', json.dumps(tree))\n    return tree", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _start_from_profile_path(self, path):\n    os.environ['XRE_PROFILE_PATH'] = path\n    self.process = Popen([self._start_cmd, '-no-remote', '--verbose'])", "buggy_source_code": "def _start_from_profile_path(self, path):\n    os.environ['XRE_PROFILE_PATH'] = path\n    os.environ['MOZ_CRASHREPORTER_DISABLE'] = '1'\n    self.process = Popen([self._start_cmd, '-no-remote', '--verbose'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tab_size_changed():\n    view = active_view()\n    reconfig_file(view)\n    client_info = cli.get_or_add_file(view.file_name())\n    client_info.pending_changes = True", "buggy_source_code": "def tab_size_changed():\n    view = active_view()\n    if view is None:\n        return\n    reconfig_file(view)\n    client_info = cli.get_or_add_file(view.file_name())\n    client_info.pending_changes = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def log(module, msg):\n    xbmc.log((u'### [%s] - %s' % (module, msg)).encode('utf-8'))", "buggy_source_code": "def log(module, msg):\n    xbmc.log((u'### [%s] - %s' % (module, msg)).encode('utf-8'), xbmc.LOGERROR)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def pause(self):\n    if self.stream:\n        self.stream.close()\n        self.stream = None\n    return self", "buggy_source_code": "def pause(self):\n    if self.stream:\n        self.stream.stop_stream()\n        self.stream.close()\n        self.stream = None\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, router, parent_prefix, parent_item=None):\n    self.router = router\n    self.parent_prefix = parent_prefix\n    self.parent_item = parent_item", "buggy_source_code": "def __init__(self, router, parent_prefix, parent_item=None, parent_viewset=None):\n    self.router = router\n    self.parent_prefix = parent_prefix\n    self.parent_item = parent_item\n    self.parent_viewset = parent_viewset", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def train(self, n_epochs=1000):\n    for i in tqdm(range(n_epochs)):\n        self._train_epoch()", "buggy_source_code": "def train(self, n_epochs=1000):\n    for i in tqdm(range(n_epochs), desc='AIRL train'):\n        self._train_epoch()\n    self.epochs_so_far += n_epochs", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture(scope='session')\ndef listener_info(self):\n    return type('Listener', (object,), {'host': self.listener_host, 'port': self.listener_port})", "buggy_source_code": "@pytest.fixture(scope='session')\ndef listener_info(self):\n    return type('Listener', (object,), {'host': self.listener_host(), 'port': self.listener_port})", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, wsgi_file):\n    self.wsgi_file = wsgi_file", "buggy_source_code": "def __init__(self, wsgi_file=None, wsgi_module=None, processes=None, threads=None):\n    self.wsgi_file = wsgi_file\n    self.processes = processes\n    self.threads = threads\n    self.wsgi_module = wsgi_module", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_sampling_results_acceptance_ratio(self):\n    s = SamplingResults(self.sampler)\n    assert s.acceptance > 0.25\n    assert s.L == s.acceptance * self.nwalkers * self.niter", "buggy_source_code": "def test_sampling_results_acceptance_ratio(self):\n    s = SamplingResults(self.sampler)\n    assert s.acceptance > 0.25\n    assert np.isclose(s.L, s.acceptance * self.nwalkers * self.niter)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef _dictify_boards(boards):\n    return BoardList({board.serial for board in boards})", "buggy_source_code": "@staticmethod\ndef _dictify_boards(boards):\n    return BoardList({board.serial: board for board in boards})", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def convert_f2c(temp):\n    return (temp - 32) * Fraction(5, 9)", "buggy_source_code": "def convert_f2c(temp):\n    return float((temp - 32) * Fraction(5, 9))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, func):\n    self.func = func", "buggy_source_code": "def __init__(self, func):\n    self.__doc__ = getattr(func, '__doc__')\n    self.func = func", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clean_name(self):\n    return self.name.replace('-', '_')", "buggy_source_code": "def clean_name(self):\n    return self.name.replace('-', '_').replace(\"'\", '')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def nginx_restart():\n    subprocess.call('sudo service nginx restart', shell=True)\n    subprocess.call('sudo systemctl restart nginx', shell=True)\n    cprint('Nginx has been successfully restarted.', 'green', attrs=['bold'])", "buggy_source_code": "def nginx_restart():\n    subprocess.call('sudo service nginx restart', shell=True)\n    subprocess.call('sudo systemctl restart nginx', shell=True)\n    cprint('Nginx has been successfully restarted.', 'white', 'on_red', attrs=['bold'])", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def serialize(self):\n    return self.commit", "buggy_source_code": "def serialize(self):\n    return u'{c}'.format(c=self.commit)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def do_postprocessing():\n    make_apex_cubes.do_postprocessing(mergepath=mergepath, h2copath=h2copath, molpath=molpath)", "buggy_source_code": "def do_postprocessing():\n    make_apex_cubes.do_postprocessing(mergepath=make_apex_cubes.mergepath, h2copath=make_apex_cubes.h2copath, molpath=make_apex_cubes.molpath)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def test_url_for(self):\n    assert url_for('odesk.login') == '/odesk/login'\n    assert url_for('odesk.logout') == '/odesk/logout'", "buggy_source_code": "def test_url_for(self):\n    assert url_for('odesk.login') == '/odesk/login'\n    assert url_for('odesk.complete') == '/odesk/complete'\n    assert url_for('odesk.logout') == '/odesk/logout'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_minutiae(self, data, idc=-1):\n    super().set_minutiae(data, idc=idc)\n    return self.set_pairing(data, idc)", "buggy_source_code": "def set_minutiae(self, data, idc=-1):\n    ret = super().set_minutiae(data, idc=idc)\n    self.set_pairing(data, idc)\n    return ret", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def launch(self):\n    pass", "buggy_source_code": "def launch(self):\n    return self.create()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    frappe.db.sql('delete from `tabBulk Email`')", "buggy_source_code": "def setUp(self):\n    frappe.db.sql('delete from `tabBulk Email`')\n    frappe.set_user('test1@example.com')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setup(self):\n    os.chdir(support)\n    self.sys_exit = patch('sys.exit').start()", "buggy_source_code": "def setup(self):\n    os.chdir(support)\n    if not hasattr(self, 'sys_exit'):\n        self.sys_exit = patch('sys.exit').start()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __eq__(self, json_str):\n    return self.expected == json.loads(json_str)", "buggy_source_code": "def __eq__(self, json_str):\n    assert self.expected == json.loads(json_str)\n    return self.expected == json.loads(json_str)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, pipe=False):\n    self.running_procs = collections.deque()\n    self.pipe = pipe", "buggy_source_code": "def __init__(self, pipe=False):\n    self.running_procs = collections.deque()\n    self.pipe = pipe\n    self.finished_pids = []", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate(self):\n    self.validate_repeat_on()", "buggy_source_code": "def validate(self):\n    self.validate_repeat_on()\n    if self.present == 1:\n        validate_duration(self)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef save(user):\n    flask_db.db[User.collection_name].save(user)", "buggy_source_code": "@staticmethod\ndef save(user):\n    user_to_save = copy.deepcopy(user)\n    flask_db.db[User.collection_name].save(user_to_save)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def mark_as_read(self):\n    self.q(css='.edx-notifications-container .mark_notifications_read>a').click()\n    self.wait_for_ajax()", "buggy_source_code": "def mark_as_read(self):\n    self.q(css='.edx-notifications-container .mark_notifications_read>a').click()\n    self.wait_for_ajax()\n    self.wait_for_element_visibility('.edx-notifications-content', 'Notification messages list not found')\n    return self.q(css='.edx-notifications-content').text", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read_yml(file):\n    with open(file, 'r') as yaml_file:\n        return yaml.load(yaml_file)", "buggy_source_code": "def read_yml(file):\n    with open(file, 'r') as yaml_file:\n        return yaml.load(yaml_file, Loader=yaml.FullLoader)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef parent(self):\n    spacecraft_id = self.id % 1000\n    return Body(spacecraft_id)", "buggy_source_code": "@property\ndef parent(self):\n    offset = 0 if self.id % 1000 == 0 else -1\n    spacecraft_id = self.id / 1000 + offset\n    return Body(spacecraft_id)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef children(self):\n    return list(_child_generator(self.id * 1000, self.id * 1000 + 1000))", "buggy_source_code": "@property\ndef children(self):\n    return list(_child_generator(self.id * 1000, self.id * 1000 - 1000, -1))", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def execute(self):\n    self.executor.execute()\n    self._task_aggs.clear()", "buggy_source_code": "def execute(self):\n    try:\n        self.executor.execute()\n    finally:\n        self._task_aggs.clear()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def __init__(self, owner=None):\n    observer.Observable.__init__(self)\n    self.status = PENDING\n    self.owner = owner", "buggy_source_code": "def __init__(self, owner=None):\n    observer.Observable.__init__(self)\n    self.status = PENDING\n    self.owner = owner\n    self.connection = owner.owner", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def waitForEvent(self, block=True, timeout=None):\n    try:\n        return self.events_queue.get(block, timeout)\n    except Empty:\n        return False", "buggy_source_code": "def waitForEvent(self, block=True, timeout=None):\n    try:\n        return self.events_queue.get(block, timeout)\n    except Empty:\n        print('Empty Queue!')\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_get_submission_alias(self):\n    pass", "buggy_source_code": "def test_get_submission_alias(self):\n    e = EBISubmission('2', 'Study Title', 'Study Abstract', 'metagenome')\n    obs = e._get_submission_alias()\n    exp = 'qiime_submission_2'\n    self.assertEqual(obs, exp)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "async def get_prefix(message, client):\n    await client.send_message(message.channel, 'Current command prefix: `' + pfix + '`')", "buggy_source_code": "async def get_prefix(message, client):\n    await client.send_message(message.channel, 'Current command prefix: `' + client.pfix + '`')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def predict(x_in):\n    raise NotImplemented", "buggy_source_code": "def predict(x_in):\n    if debug_mode:\n        print('Neural net. Predict function')\n    raise NotImplemented", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def deploy():\n    if not env.sudo_password:\n        env.sudo_password = Credentials.get('sudo_password')\n    prepare_local()\n    update_remote()\n    post_update()", "buggy_source_code": "def deploy():\n    if not env.sudo_password:\n        env.sudo_password = Credentials.get('sudo_password')\n    prepare_local()\n    remote_setup()\n    update_remote()\n    post_update()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def notify_all(self):\n    with self.condition:\n        self.condition.notify_all()", "buggy_source_code": "def notify_all(self):\n    with self.condition:\n        try:\n            self.condition.notify_all()\n        except RuntimeError:\n            self.condition.notify_all()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cleanup(self):\n    self.connection.cleanup()", "buggy_source_code": "def cleanup(self):\n    self.connection.cleanup()\n    self.connection = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setup_module(module):\n    import locale\n    locale.setlocale(locale.LC_ALL, 'C')", "buggy_source_code": "def setup_module(module):\n    import locale\n    locale.setlocale(locale.LC_ALL, ('C', 'ascii'))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_HEAD(self):\n    self.handle_headers()", "buggy_source_code": "def do_HEAD(self):\n    logging.debug('Got the following HEAD request:\\n{header}'.format(header=self.headers))\n    self.handle_headers()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *children):\n    self.children: typing.Tuple[Expr, ...] = children", "buggy_source_code": "def __init__(self, *children: 'Expr') -> None:\n    self.children: typing.Tuple[Expr, ...] = children", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_hour(x):\n    import pandas as pd\n    return pd.Series(x).dt.hour.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_hour(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.hour.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_is_leap_year(x):\n    import pandas as pd\n    return pd.Series(x).dt.is_leap_year.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_is_leap_year(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.is_leap_year.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_dayofweek(x):\n    import pandas as pd\n    return pd.Series(x).dt.dayofweek.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_dayofweek(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.dayofweek.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_second(x):\n    import pandas as pd\n    return pd.Series(x).dt.second.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_second(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.second.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def hide(self):\n    self._hud.hide()\n    self._scene.hide()", "buggy_source_code": "def hide(self):\n    logger.debug('Hiding view')\n    self._hud.hide()\n    self._scene.hide()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def show(self):\n    self._hud.show()\n    self._scene.show()", "buggy_source_code": "def show(self):\n    logger.debug('Showing view')\n    self._hud.show()\n    self._scene.show()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def show(self):\n    self.timer.timerText.show()", "buggy_source_code": "def show(self):\n    logger.debug('Showing HUD')\n    self.timer.timerText.show()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def hide(self):\n    self.timer.timerText.hide()", "buggy_source_code": "def hide(self):\n    logger.debug('Hiding HUD')\n    self.timer.timerText.hide()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def showCursor(self, show=True):\n    props = WindowProperties()\n    props.setCursorHidden(not show)\n    base.win.requestProperties(props)", "buggy_source_code": "def showCursor(self, show=True):\n    logger.debug('Toggling cursor')\n    props = WindowProperties()\n    props.setCursorHidden(not show)\n    base.win.requestProperties(props)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop(self):\n    taskMgr.remove('timer-task')", "buggy_source_code": "def stop(self):\n    logger.debug('Stopping timer')\n    name = 'timer-task'\n    if self._countdown:\n        name = 'countdown-task'\n    taskMgr.remove(name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def wait(self, ms):\n    self.waitTimer.setInterval(ms)\n    self.waitTimer.start()\n    self.waitLoop.exec()", "buggy_source_code": "def wait(self, ms):\n    self.waitTimer.setInterval(ms)\n    self.waitTimer.start()\n    self.waitLoop.exec()\n    if self.interruptionFlag:\n        raise ValueError()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def execute():\n    frappe.reload_doc('hr', 'doctype', 'shift_assignment')\n    frappe.db.sql('update `tabShift Assignment` set end_date=date, start_date=date where date IS NOT NULL and start_date IS NULL and end_date IS NULL;')", "buggy_source_code": "def execute():\n    frappe.reload_doc('hr', 'doctype', 'shift_assignment')\n    if frappe.db.has_column('Shift Assignment', 'date'):\n        frappe.db.sql('update `tabShift Assignment`\\n            set end_date=date, start_date=date\\n            where date IS NOT NULL and start_date IS NULL and end_date IS NULL;')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def next_tick(self):\n    curtick = self.tick\n    r = []\n    while self.tick == curtick:\n        r.append(self.advance())\n    return r", "buggy_source_code": "def next_tick(self):\n    curtick = self.tick\n    r = []\n    while self.tick == curtick:\n        r.append(self.advance())\n    return r[:-1]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, axes=None):\n    self.axes = axes\n    super(AffAtom, transpose).__init__()", "buggy_source_code": "def __init__(self, expr, axes=None):\n    self.axes = axes\n    super(AffAtom, self).__init__(expr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def start_new_testrun():\n    with db.session.begin:\n        newrun = models.Runtime()\n        db.session.add(newrun)\n    return newrun", "buggy_source_code": "def start_new_testrun():\n    with db.session.begin():\n        newrun = models.Runtime()\n        db.session.add(newrun)\n    return newrun", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, ruleNr):\n    self.ruleNr = ruleNr\n    self.rules = None\n    self.names = list()", "buggy_source_code": "def __init__(self, ruleNr):\n    self.ruleNr = int(ruleNr)\n    self.rules = None\n    self.names = list()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def linear_function(signal, derivative=False):\n    if derivative:\n        return 1\n    else:\n        return signal", "buggy_source_code": "def linear_function(signal, derivative=False):\n    if derivative:\n        return np.ones(signal.shape)\n    else:\n        return signal", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@app.errorhandler(InvalidAPIUsage)\ndef handle_invalid_usage(error):\n    response = jsonify(error.to_dict())\n    response.status_code = error.status_code\n    return response", "buggy_source_code": "@app.errorhandler((InvalidAPIUsage, InvalidAttemptError))\ndef handle_invalid_usage(error):\n    response = jsonify(error.to_dict())\n    response.status_code = error.status_code\n    return response", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef working_dir(self):\n    return fs.dirname(self.json_path)", "buggy_source_code": "@property\ndef working_dir(self):\n    return fs.dirname(self.json_path or '')", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_generate_per_split(self):\n    return True", "buggy_source_code": "@property\ndef is_generate_per_split(self):\n    return True", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_detach_controller(self):\n    roster = FlockRoster.instantiate()\n    controller = Protocol()\n    roster.attach_controller(controller)\n    self.assertEqual(0, roster.detach_controller(controller))", "buggy_source_code": "def test_detach_controller(self):\n    roster = FlockRoster.instantiate()\n    controller = Controller('foo', 'bar', 'prot')\n    roster.attach_controller(controller)\n    self.assertEqual(0, roster.detach_controller(controller))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update(self):\n    self._update_widgets()", "buggy_source_code": "def update(self):\n    try:\n        self._update_widgets()\n    except Exception as e:\n        logging.exception(e)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_filename_derived(downloader):\n    downloader.derive_filename = True\n    downloader._determine_filename()\n    assert downloader.filename.endswith('folge-10.mp4')", "buggy_source_code": "@pytest.mark.vcr\ndef test_filename_derived(downloader):\n    downloader.derive_filename = True\n    downloader._determine_filename()\n    assert downloader.filename.endswith('der-gute-weg.mp4')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __init__(self, code=None):\n    self.code = code", "buggy_source_code": "def __init__(self, code=None):\n    self.code = code\n    if not os.path.exists('running'):\n        os.mkdir('running')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, code=None):\n    self.code = code\n    self.compiler = 'gcc'", "buggy_source_code": "def __init__(self, code=None):\n    self.code = code\n    self.compiler = 'gcc'\n    if not os.path.exists('running'):\n        os.mkdir('running')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def html_escape(text):\n    return cgi.escape(text, quote=True)", "buggy_source_code": "def html_escape(text):\n    try:\n        from html import escape\n    except ImportError:\n        from cgi import escape\n    return escape(text, quote=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_in_project(self, uid, project_id):\n    dn = self.__project_to_dn(project_id)\n    return self.__is_in_group(uid, dn)", "buggy_source_code": "@sanitize\ndef is_in_project(self, uid, project_id):\n    dn = self.__project_to_dn(project_id)\n    return self.__is_in_group(uid, dn)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def remove_from_project(self, uid, project_id):\n    dn = self.__project_to_dn(project_id)\n    return self.__remove_from_group(uid, dn)", "buggy_source_code": "@sanitize\ndef remove_from_project(self, uid, project_id):\n    dn = self.__project_to_dn(project_id)\n    return self.__remove_from_group(uid, dn)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_user_from_access_key(self, access):\n    query = '(accessKey=%s)' % access\n    dn = FLAGS.ldap_user_subtree\n    return self.__to_user(self.__find_object(dn, query))", "buggy_source_code": "@sanitize\ndef get_user_from_access_key(self, access):\n    query = '(accessKey=%s)' % access\n    dn = FLAGS.ldap_user_subtree\n    return self.__to_user(self.__find_object(dn, query))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def has_role(self, uid, role, project_id=None):\n    role_dn = self.__role_to_dn(role, project_id)\n    return self.__is_in_group(uid, role_dn)", "buggy_source_code": "@sanitize\ndef has_role(self, uid, role, project_id=None):\n    role_dn = self.__role_to_dn(role, project_id)\n    return self.__is_in_group(uid, role_dn)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_user(self, uid):\n    attr = self.__get_ldap_user(uid)\n    return self.__to_user(attr)", "buggy_source_code": "@sanitize\ndef get_user(self, uid):\n    attr = self.__get_ldap_user(uid)\n    return self.__to_user(attr)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_project(self, pid):\n    dn = self.__project_to_dn(pid)\n    attr = self.__find_object(dn, LdapDriver.project_pattern)\n    return self.__to_project(attr)", "buggy_source_code": "@sanitize\ndef get_project(self, pid):\n    dn = self.__project_to_dn(pid)\n    attr = self.__find_object(dn, LdapDriver.project_pattern)\n    return self.__to_project(attr)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def remove_role(self, uid, role, project_id=None):\n    role_dn = self.__role_to_dn(role, project_id)\n    return self.__remove_from_group(uid, role_dn)", "buggy_source_code": "@sanitize\ndef remove_role(self, uid, role, project_id=None):\n    role_dn = self.__role_to_dn(role, project_id)\n    return self.__remove_from_group(uid, role_dn)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def init_windows(self):\n    self.stdscr = curses.initscr()\n    self.stdscr.clear()\n    self.main_window = MainWindow(self.stdscr)", "buggy_source_code": "def init_windows(self):\n    self.stdscr = curses.initscr()\n    self.stdscr.clear()\n    self.stdscr.nodelay(True)\n    self.main_window = MainWindow(self.stdscr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_snmp_trap_host(self, data):\n    request = '/api/sys/service/snmp-svc/snmp-trap'\n    self._patch(request)", "buggy_source_code": "def update_snmp_trap_host(self, data):\n    request = '/api/sys/service/snmp-svc/snmp-trap'\n    self._patch(request, data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_app(self, data):\n    request = '/app'\n    return self._delete(request)", "buggy_source_code": "def delete_app(self, data):\n    request = '/app'\n    return self._delete(request, data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_app(self, data):\n    request = '/app'\n    return self._patch(request)", "buggy_source_code": "def update_app(self, data):\n    request = '/app'\n    return self._patch(request, data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_dns_server(self, data):\n    request = '/sys/service/dns-svc/dns'\n    self._patch(request)", "buggy_source_code": "def update_dns_server(self, data):\n    request = '/sys/service/dns-svc/dns'\n    self._patch(request, data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_dns_server(self, data):\n    request = '/sys/service/dns-svc/dns'\n    self._post(request)", "buggy_source_code": "def set_dns_server(self, data):\n    request = '/sys/service/dns-svc/dns'\n    self._post(request, data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def save_overview(self):\n    map.set_overview(self.overview, self.z)", "buggy_source_code": "def save_overview(self):\n    self.map.set_overview(self.overview, self.z)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, method):\n    super(verify_base, self).__init__(method)\n    self.method = method", "buggy_source_code": "def __init__(self, method):\n    super(verify_base, self).__init__(method)\n    self.method = method\n    self.no_compatible_method = ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _check_visa_support(rsrc):\n    if rsrc.resource_name.startswith('ASRL') and _is_CovesionOC(rsrc):\n        return None\n    return None", "buggy_source_code": "def _check_visa_support(rsrc):\n    if rsrc.resource_name.startswith('ASRL') and _is_CovesionOC(rsrc):\n        return 'CovesionOC'\n    return None", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    pass", "buggy_source_code": "def tearDown(self):\n    server.shopping_carts = None\n    server.current_shopping_cart_id = 0\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __getattr__(self, key):\n    return getattr(self._context, key)", "buggy_source_code": "def __getattr__(self, key):\n    if not hasattr(self, '_stack'):\n        return super(State, self).__getattr__(key)\n    return getattr(self._context, key)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef __pattern_name(monitor):\n    if monitor is pexpect.EOF:\n        return u'@eof@'\n    return monitor", "buggy_source_code": "@staticmethod\ndef __pattern_name(monitor):\n    if monitor is pexpect.EOF:\n        return u'@eof@'\n    return repr(monitor)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, config=assocparser.AssocParserConfig()):\n    self.config = config\n    self.report = assocparser.Report()", "buggy_source_code": "def __init__(self, config=assocparser.AssocParserConfig()):\n    self.config = config\n    self.report = assocparser.Report(config=self.config)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_helpers(self):\n    return {'localized_url_for_static': localized_url_for_static, 'get_uv_url': get_uv_url, 'get_user_management_url': get_user_management_url}", "buggy_source_code": "def get_helpers(self):\n    return {'localized_url_for_static': localized_url_for_static, 'get_uv_url': get_uv_url, 'get_user_management_url': get_user_management_url, 'user_display_name': user_display_name}", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __show_information_about_selected_individual(self):\n    if self.simulation.selected_individual != None:\n        print(str(self.simulation.selected_individual))", "buggy_source_code": "def __show_information_about_selected_individual(self):\n    if self.simulation.selected_individual is not None:\n        print(str(self.simulation.selected_individual))", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, path_config):\n    self.locales_path = path_config.project_path.joinpath('locales')", "buggy_source_code": "def __init__(self, *, path_config):\n    self.locales_path = path_config.project_path.joinpath('locales')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def cleanup():\n    os.rmdir('.pubrunner_lock')\n    if os.path.isdir('.snakemake'):\n        shutil.rmtree('.snakemake')", "buggy_source_code": "def cleanup():\n    if os.path.isdir('.pubrunner_lock'):\n        shutil.remove('.pubrunner_lock')\n    if os.path.isdir('.snakemake'):\n        shutil.rmtree('.snakemake')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_current_user(self):\n    return getpass.getuser()", "buggy_source_code": "def get_current_user(self, args):\n    return getpass.getuser()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_repos_path(self):\n    return tempfile.mkdtemp(dir='/var/lib/gitfs')", "buggy_source_code": "def get_repos_path(self, args):\n    return tempfile.mkdtemp(dir='/var/lib/gitfs')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_current_group(self):\n    gid = os.getegid()\n    return grp.getgrgid(gid).gr_name", "buggy_source_code": "def get_current_group(self, args):\n    gid = os.getegid()\n    return grp.getgrgid(gid).gr_name", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def upgrade(self, *args, **kwargs):\n    return self", "buggy_source_code": "def upgrade(self, *args, **kwargs):\n    if self.font == 'Courier':\n        self.font = 'Courier New'\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def variables(self):\n    return self.ops.variables() + sum([c.variables() for c in self.components], [])", "buggy_source_code": "def variables(self):\n    return list(set(self.ops.variables() + sum([c.variables() for c in self.components], [])))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def generate_code_for_group(group, expiration_date):\n    msg = generate_msg_part_for_group(group, expiration_date)\n    return str(sign_code(msg))", "buggy_source_code": "def generate_code_for_group(group, expiration_date):\n    msg = generate_msg_part_for_group(group, expiration_date)\n    return sign_code(msg).decode('ascii')", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def hashret(self):\n    return self.nonce", "buggy_source_code": "def hashret(self):\n    return raw(self.nonce)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def first_request(self):\n    return self.communications.all()[0].communication", "buggy_source_code": "def first_request(self):\n    try:\n        return self.communications.all()[0].communication\n    except IndexError:\n        return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, simidentifier, **kwargs):\n    super().__init__(simidentifier, **kwargs)", "buggy_source_code": "def __init__(self, simidentifier, **kwargs):\n    super(FbpicReader, self).__init__(simidentifier, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def timed_enable(self, milliseconds, **kwargs):\n    self.pulse(milliseconds)", "buggy_source_code": "def timed_enable(self, milliseconds, **kwargs):\n    del kwargs\n    self.pulse(milliseconds)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    RESTControllerSkeleton.__init__(self, *args, **kwargs)\n    self.movie_controller = MoviesController()", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    RESTControllerSkeleton.__init__(self, *args, **kwargs)\n    self.log = logging.getLogger(__name__)\n    self.movie_controller = MoviesController()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, obj_prop, **args):\n    self.field_id = False\n    function.__init__(self, self._fnct_read, False, self._fnct_write, (obj_prop,), **args)", "buggy_source_code": "def __init__(self, obj_prop, **args):\n    self.field_id = {}\n    function.__init__(self, self._fnct_read, False, self._fnct_write, (obj_prop,), **args)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_throttled(e):\n    return True if hasattr(e, 'response') and 'Error' in e.response and (e.response['Error']['Code'] in ['Throttling', 'RequestLimitExceeded']) else False", "buggy_source_code": "def is_throttled(e):\n    return True if hasattr(e, 'response') and 'Error' in e.response and (e.response['Error']['Code'] in ['Throttling', 'RequestLimitExceeded', 'ThrottlingException']) else False", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def is_vowell(self):\n    return is_vowell(self._text)", "buggy_source_code": "def is_vowell(self):\n    try:\n        return is_vowell(self._text)\n    except IndexError as e:\n        raise InvalidLetter(\"Unknown letter when determining if something was a vowell: '%s'\" % e.args[0])", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return '{0}: {1} ({2})'.format(self._message, REDError._error_code_names[self.error_code], self._error_code)", "buggy_source_code": "def __str__(self):\n    return '{0}: {1} ({2})'.format(self._message, REDError._error_code_names.get(self.error_code, '<unknown>'), self._error_code)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def help_info():\n    print(\"\\nUsage:\\n\\n    python getNeuroML.py\\n        Pull (or clone) the latest version of all NeuroML 2 repos & compile/install with Maven if applicable\\n\\n    python getNeuroML.py clean\\n        Run 'mvn clean' on all Java repos\\n\\n    python getNeuroML.py master\\n       Switch all repos to master branch\\n\\n    python getNeuroML.py development\\n       Switch relevant repos to development branch\\n\\n\")", "buggy_source_code": "def help_info():\n    usage = \"        Usage: python getNeuroML.py [OPTION]\\n        Script to install NeuroML libraries.\\n        Note: requires internet connectivity.\\n\\n        python getNeuroML.py\\n            Pull (or clone) the latest version of all NeuroML 2 repos &\\n            compile/install with Maven if applicable\\n\\n        python getNeuroML.py clean\\n            Run 'mvn clean' on all Java repos\\n\\n        python getNeuroML.py master\\n            Switch all repos to master branch\\n\\n        python getNeuroML.py development\\n            Switch relevant repos to development branch\\n        \"\n    print(dedent(usage))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def _to_permissions(self, *permissions):\n    return filter(lambda x: x is not None, [Permissions.find(permission) for permission in permissions])", "buggy_source_code": "def _to_permissions(self, *permissions):\n    return list(set(filter(lambda x: x is not None, [Permissions.find(permission) for permission in permissions])))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _from_permissions(self, *permissions):\n    return [permission.key for permission in permissions]", "buggy_source_code": "def _from_permissions(self, *permissions):\n    return list(set([permission.key for permission in permissions]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _from_groups(self, *groups):\n    return [group.key for group in groups]", "buggy_source_code": "def _from_groups(self, *groups):\n    return list(set([group.key for group in groups]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _to_groups(self, *groups):\n    return filter(lambda x: x is not None, [self._group_manager._to_group(group) for group in groups])", "buggy_source_code": "def _to_groups(self, *groups):\n    return list(set(filter(lambda x: x is not None, [self._group_manager._to_group(group) for group in groups])))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@state_dec\ndef check_testfunction_call(name, state=None):\n    obj = Ex(state).test_not(test_student_typed('{:s}\\\\s*\\\\('.format(name)), msg=CHEAT_MSG)\n    return obj", "buggy_source_code": "@state_dec\ndef check_testfunction_call(name, state=None):\n    obj = Ex(state).test_not(test_student_typed('{:s}\\\\s*\\\\('.format(name)), msg=CHEAT_MSG.format(name))\n    return obj", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef service_catalog(self):\n    return self.os_client.service_catalog", "buggy_source_code": "@property\ndef service_catalog(self):\n    if not self.os_client.service_catalog:\n        self.os_client.get_token()\n    return self.os_client.service_catalog", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testSource(self):\n    ayrton.main('source (\"ayrton/tests/data/source.ay\");\\nprint (a)')\n    self.assertEqual(self.a.buffer.getvalue(), b'42\\n')", "buggy_source_code": "def testSource(self):\n    ayrton.main('source (\"ayrton/tests/data/source.ay\");\\nprint (a)')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'42\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testO(self):\n    ayrton.main('ls (o (full_time=True))')", "buggy_source_code": "def testO(self):\n    ayrton.main('ls (o (full_time=True))')\n    os.close(1)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testExportSetsGlobalVar(self):\n    ayrton.main('export (foo=42);\\nprint (foo)')\n    self.assertEqual(self.a.buffer.getvalue(), b'42\\n')", "buggy_source_code": "def testExportSetsGlobalVar(self):\n    ayrton.main('export (foo=42);\\nprint (foo)')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'42\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    CheckEngine.setUp(self)", "buggy_source_code": "def setUp(self, number_datasets_used_in_testing=5):\n    CheckEngine.setUp(self, number_datasets_used_in_testing)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    CheckEngine.setUp(self)", "buggy_source_code": "def setUp(self, number_datasets_used_in_testing=5):\n    CheckEngine.setUp(self, number_datasets_used_in_testing)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    CheckEngine.setUp(self)", "buggy_source_code": "def setUp(self, number_datasets_used_in_testing=5):\n    CheckEngine.setUp(self, number_datasets_used_in_testing)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.maxDiff = None\n    self.items = self.create_dataset_items()", "buggy_source_code": "def setUp(self, number_datasets_used_in_testing):\n    self.maxDiff = None\n    self.items = self.create_dataset_items()\n    self.number_datasets_used_in_testing = number_datasets_used_in_testing", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef get_latest_for_current_user():\n    return Clock.get_latest_value('activity', include_null=False)", "buggy_source_code": "@staticmethod\ndef get_latest_for_current_user():\n    return Clock.get_latest_value('activity', include_null=False) or Activity.get_default()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def upgrade_db():\n    log.info('Beginning database migration...')\n    migrate.upgrade()\n    create_system_roles", "buggy_source_code": "def upgrade_db():\n    log.info('Beginning database migration...')\n    migrate.upgrade()\n    create_system_roles()", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def check_environment(kwargs):\n    set_debug_level(5)\n    set_dry_run(kwargs.pop('dry_run', 'false'))", "buggy_source_code": "def check_environment(kwargs):\n    set_debug_level(kwargs.pop('debug', 0))\n    set_dry_run(kwargs.pop('dry_run', 'false'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def connectionClosed(self, error):\n    pass", "buggy_source_code": "def connectionClosed(self, error):\n    raise error\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def quit(self):\n    if os.path.exists('./scrot/temp.png'):\n        os.remove('./scrot/temp.png')", "buggy_source_code": "def quit(self):\n    if os.path.exists(self.tempfile):\n        os.remove(self.tempfile)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clone_repo(self):\n    scenarios_repo = git.Repo.clone_from(GIT_REPO_URL, self.SCENARIOS_ROOT)\n    scenarios_repo = git.Repo(self.SCENARIOS_ROOT)\n    LATEST = True\n    return LATEST", "buggy_source_code": "def clone_repo(self):\n    scenarios_repo = git.Repo.clone_from(GIT_REPO_URL, self.SCENARIOS_ROOT)\n    scenarios_repo = git.Repo(self.SCENARIOS_ROOT)\n    latest = True\n    return (scenarios_repo, latest)", "edit_actions": ["insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@transaction.atomic\ndef atomic_read(request):\n    return read(request)", "buggy_source_code": "@log_exceptions\n@transaction.atomic\ndef atomic_read(request):\n    return read(request)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@Route.register\ndef replay_bridge(plugin, **kwargs):\n    item_module = importlib.import_module(kwargs.get('item_module'))\n    return item_module.replay_entry(plugin, kwargs.get('item_id'))", "buggy_source_code": "@Route.register\ndef replay_bridge(plugin, **kwargs):\n    defr\n    item_module = importlib.import_module(kwargs.get('item_module'))\n    return item_module.replay_entry(plugin, kwargs.get('item_id'))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def main():\n    cqu.import_needed_module()\n    run()", "buggy_source_code": "def main():\n    cqu.import_needed_module()\n    exception = run()\n    if isinstance(exception, Exception):\n        error_handler(exception)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef fatal_msg(node, msg=None):\n    LAST_FATAL_MSG = msg\n    NodeError.fatal_msg(node, msg)", "buggy_source_code": "@staticmethod\ndef fatal_msg(node, msg=None):\n    LAST_FATAL_MSG = msg\n    NodeError._make_msg(node, NodeError.NODE_ERROR_FATAL, msg)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clear_log(self, tab_ui):\n    tab_ui.output_textedit.clear()\n    tab_ui.stat_dict = self.get_default_stats()\n    self.refresh_stat_display(tab_ui)", "buggy_source_code": "def clear_log(self, tab_ui):\n    tab_ui.output_textedit.clear()\n    tab_ui.stat_dict = self.get_default_stats()\n    tab_ui.last_num = -1\n    self.refresh_stat_display(tab_ui)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@copy_docstring(State.exit_if)\ndef exit_if(self) -> 'InRelationState':\n    return self", "buggy_source_code": "@copy_docstring(State.exit_if)\ndef exit_if(self) -> 'InRelationState':\n    self.scopes.pop()\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@copy_docstring(State.exit_loop)\ndef exit_loop(self) -> 'InRelationState':\n    return self", "buggy_source_code": "@copy_docstring(State.exit_loop)\ndef exit_loop(self) -> 'InRelationState':\n    self.scopes.pop()\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@copy_docstring(State.enter_if)\ndef enter_if(self) -> 'InRelationState':\n    return self", "buggy_source_code": "@copy_docstring(State.enter_if)\ndef enter_if(self) -> 'InRelationState':\n    self.scopes.append(Scope.Branch)\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@copy_docstring(State.enter_loop)\ndef enter_loop(self) -> 'InRelationState':\n    return self", "buggy_source_code": "@copy_docstring(State.enter_loop)\ndef enter_loop(self) -> 'InRelationState':\n    self.scopes.append(Scope.Loop)\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@copy_docstring(Lattice.top)\ndef top(self):\n    self._replace(InRelationState())\n    return self", "buggy_source_code": "@copy_docstring(Lattice.top)\ndef top(self):\n    self._replace(InRelationState(scopes=self.scopes))\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _update_times(self):\n    self._times = np.arange(self.n_times) / float(self.info['sfreq'])", "buggy_source_code": "def _update_times(self):\n    self._times = np.arange(self.n_times) / float(self.info['sfreq'])\n    self._times.flags.writeable = False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, wizard, conn, model):\n    WizardEditorStep.__init__(self, conn, wizard, model)\n    self._update_widgets()", "buggy_source_code": "def __init__(self, wizard, conn, model):\n    WizardEditorStep.__init__(self, conn, wizard, model)\n    self.open_date.set_sensitive(False)\n    self._update_widgets()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_logs(self):\n    return self.__logs", "buggy_source_code": "def get_logs(self):\n    return dict(((plugin, '\\n'.join(entries)) for (plugin, entries) in self.__logs.iteritems()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def GetPath(self, region):\n    for path in paths:\n        if region.contains(path[0]):\n            return path[1]", "buggy_source_code": "def GetPath(self, region):\n    for path in paths:\n        if region.contains(path[0]):\n            return (path[1], path[2])", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _append_device_id(self, path, device_id):\n    if device_id:\n        path += '&device_id=%s' % device_id\n    return path", "buggy_source_code": "def _append_device_id(self, path, device_id):\n    if device_id:\n        if '?' in path:\n            path += '&device_id=%s' % device_id\n        else:\n            path += '?device_id=%s' % device_id\n    return path", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def EXP_MSG(str, exe):\n    return \"'%s' %s expected result\" % (str, 'returns' if exe else 'matches')", "buggy_source_code": "def EXP_MSG(str, actual, exe):\n    return \"'%s' %s expected result, got '%s'\" % (str, 'returns' if exe else 'matches', actual.strip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __del__(self):\n    self.run_test_set(WebtestRunner.after_set)", "buggy_source_code": "def __del__(self):\n    if self.after_set:\n        self.run_test_set(WebtestRunner.after_set)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, **variables):\n    self.variables = variables\n    self.run_test_set(WebtestRunner.before_set)", "buggy_source_code": "def __init__(self, **variables):\n    self.variables = variables\n    if self.before_set:\n        self.run_test_set(WebtestRunner.before_set)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef warning(notification):\n    print(colored(notification, 'yellow'))", "buggy_source_code": "@staticmethod\ndef warning(notification):\n    print('[%s] %s' % (time.strftime('%H:%M:%S'), colored(notification, 'yellow')))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef error(notification):\n    print(colored(notification, 'red'))", "buggy_source_code": "@staticmethod\ndef error(notification):\n    print('[%s] %s' % (time.strftime('%H:%M:%S'), colored(notification, 'red')))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef notice(notification):\n    print(colored(notification, 'blue'))", "buggy_source_code": "@staticmethod\ndef notice(notification):\n    print('[%s] %s' % (time.strftime('%H:%M:%S'), colored(notification, 'blue')))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_fixture_file_path_abs(self, fixtures_pack, fixtures_type, fixture_name):\n    return os.path.join(get_fixtures_base_path(), fixtures_type, fixture_name)", "buggy_source_code": "def get_fixture_file_path_abs(self, fixtures_pack, fixtures_type, fixture_name):\n    return os.path.join(get_fixtures_base_path(), fixtures_pack, fixtures_type, fixture_name)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def setPixelWidth(self, width):\n    self.impl.setPixelWidth(self.getCanvasElement(), width)", "buggy_source_code": "def setPixelWidth(self, width):\n    FocusWidget.setWidth(self, width)\n    self.impl.setPixelWidth(self.getCanvasElement(), width)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setPixelHeight(self, height):\n    self.impl.setPixelHeight(self.getCanvasElement(), height)", "buggy_source_code": "def setPixelHeight(self, height):\n    FocusWidget.setHeight(self, height)\n    self.impl.setPixelHeight(self.getCanvasElement(), height)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def iati_organisation_role_label(self):\n    return dict(self.IATI_ROLES).get(self.iati_organisation_role)", "buggy_source_code": "def iati_organisation_role_label(self):\n    if self.iati_organisation_role:\n        return dict(self.IATI_ROLES).get(self.iati_organisation_role)\n    else:\n        return ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def iati_role_to_partner_type(self):\n    return dict(self.ROLES_TO_PARTNER_TYPES_MAP).get(int(self.iati_organisation_role))", "buggy_source_code": "def iati_role_to_partner_type(self):\n    if self.iati_organisation_role:\n        return dict(self.ROLES_TO_PARTNER_TYPES_MAP).get(int(self.iati_organisation_role))\n    else:\n        return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@contract\ndef get_max_ram(vir_connection, uuid):\n    domain = vir_connection.lookupByUUIDString(uuid)\n    if domain:\n        return domain.maxMemory() / 1024\n    return None", "buggy_source_code": "@contract\ndef get_max_ram(vir_connection, uuid):\n    try:\n        domain = vir_connection.lookupByUUIDString(uuid)\n        return domain.maxMemory() / 1024\n    except libvirt.libvirtError:\n        return None", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_tabs_visibility(self):\n    pass", "buggy_source_code": "def set_tabs_visibility(self):\n    self.tab_main.removeTab(3)\n    self.tab_main.removeTab(3)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, iface, dialog, layer, feature):\n    super(ConnecDialog, self).__init__(iface, dialog, layer, feature)\n    self.init_config_connec()", "buggy_source_code": "def __init__(self, iface, dialog, layer, feature):\n    super(ConnecDialog, self).__init__(iface, dialog, layer, feature)\n    self.init_config_connec()\n    self.feature = feature", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _replace_posargs(self, match):\n    return self._do_replace_posargs(lambda : match.group('substitution_value'))", "buggy_source_code": "def _replace_posargs(self, match, quote):\n    return self._do_replace_posargs(lambda : match.group('substitution_value'))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def rational_expand(u):\n    return expand(rationalise(u))", "buggy_source_code": "def rational_expand(u):\n    from ..polynomials.general_polynomial import expand\n    return expand(rationalise(u))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_error(node):\n    for child_node in node.get_children():\n        if isinstance(child_node, astroid.Raise):\n            return True\n        return False", "buggy_source_code": "def is_error(node: astroid.node_classes.NodeNG) -> bool:\n    for child_node in node.get_children():\n        if isinstance(child_node, astroid.Raise):\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_attr_private(attrname):\n    regex = re.compile('^_{2,}.*[^_]+_?$')\n    return regex.match(attrname)", "buggy_source_code": "def is_attr_private(attrname: str) -> Optional[Match[str]]:\n    regex = re.compile('^_{2,}.*[^_]+_?$')\n    return regex.match(attrname)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_builtin_object(node):\n    return node and node.root().name == BUILTINS_NAME", "buggy_source_code": "def is_builtin_object(node: astroid.node_classes.NodeNG) -> bool:\n    return node and node.root().name == BUILTINS_NAME", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_comprehension(node):\n    comprehensions = (astroid.ListComp, astroid.SetComp, astroid.DictComp, astroid.GeneratorExp)\n    return isinstance(node, comprehensions)", "buggy_source_code": "def is_comprehension(node: astroid.node_classes.NodeNG) -> bool:\n    comprehensions = (astroid.ListComp, astroid.SetComp, astroid.DictComp, astroid.GeneratorExp)\n    return isinstance(node, comprehensions)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_super(node):\n    if getattr(node, 'name', None) == 'super' and node.root().name == BUILTINS_NAME:\n        return True\n    return False", "buggy_source_code": "def is_super(node: astroid.node_classes.NodeNG) -> bool:\n    if getattr(node, 'name', None) == 'super' and node.root().name == BUILTINS_NAME:\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def supports_delitem(value):\n    return _supports_protocol(value, _supports_delitem_protocol)", "buggy_source_code": "def supports_delitem(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol(value, _supports_delitem_protocol)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_node_inside_try_except(node):\n    context = find_try_except_wrapper_node(node)\n    return isinstance(context, astroid.TryExcept)", "buggy_source_code": "def is_node_inside_try_except(node: astroid.Raise) -> bool:\n    context = find_try_except_wrapper_node(node)\n    return isinstance(context, astroid.TryExcept)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _supports_async_iteration_protocol(value):\n    return _supports_protocol_method(value, AITER_METHOD)", "buggy_source_code": "def _supports_async_iteration_protocol(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol_method(value, AITER_METHOD)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def supports_setitem(value):\n    return _supports_protocol(value, _supports_setitem_protocol)", "buggy_source_code": "def supports_setitem(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol(value, _supports_setitem_protocol)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_attr_protected(attrname):\n    return attrname[0] == '_' and attrname != '_' and (not (attrname.startswith('__') and attrname.endswith('__')))", "buggy_source_code": "def is_attr_protected(attrname: str) -> bool:\n    return attrname[0] == '_' and attrname != '_' and (not (attrname.startswith('__') and attrname.endswith('__')))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _supports_membership_test_protocol(value):\n    return _supports_protocol_method(value, CONTAINS_METHOD)", "buggy_source_code": "def _supports_membership_test_protocol(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol_method(value, CONTAINS_METHOD)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def supports_membership_test(value):\n    supported = _supports_protocol(value, _supports_membership_test_protocol)\n    return supported or is_iterable(value)", "buggy_source_code": "def supports_membership_test(value: astroid.node_classes.NodeNG) -> bool:\n    supported = _supports_protocol(value, _supports_membership_test_protocol)\n    return supported or is_iterable(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_raising(body):\n    for node in body:\n        if isinstance(node, astroid.Raise):\n            return True\n    return False", "buggy_source_code": "def is_raising(body: astroid.node_classes.NodeNG) -> bool:\n    for node in body:\n        if isinstance(node, astroid.Raise):\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _supports_setitem_protocol(value):\n    return _supports_protocol_method(value, SETITEM_METHOD)", "buggy_source_code": "def _supports_setitem_protocol(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol_method(value, SETITEM_METHOD)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_builtin(name):\n    return name in builtins or name in SPECIAL_BUILTINS", "buggy_source_code": "def is_builtin(name: str) -> bool:\n    return name in builtins or name in SPECIAL_BUILTINS", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _supports_mapping_protocol(value):\n    return _supports_protocol_method(value, GETITEM_METHOD) and _supports_protocol_method(value, KEYS_METHOD)", "buggy_source_code": "def _supports_mapping_protocol(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol_method(value, GETITEM_METHOD) and _supports_protocol_method(value, KEYS_METHOD)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _supports_delitem_protocol(value):\n    return _supports_protocol_method(value, DELITEM_METHOD)", "buggy_source_code": "def _supports_delitem_protocol(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol_method(value, DELITEM_METHOD)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_mapping(value):\n    return _supports_protocol(value, _supports_mapping_protocol)", "buggy_source_code": "def is_mapping(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol(value, _supports_mapping_protocol)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def supports_getitem(value):\n    return _supports_protocol(value, _supports_getitem_protocol)", "buggy_source_code": "def supports_getitem(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol(value, _supports_getitem_protocol)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _supports_iteration_protocol(value):\n    return _supports_protocol_method(value, ITER_METHOD) or _supports_protocol_method(value, GETITEM_METHOD)", "buggy_source_code": "def _supports_iteration_protocol(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol_method(value, ITER_METHOD) or _supports_protocol_method(value, GETITEM_METHOD)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _supports_getitem_protocol(value):\n    return _supports_protocol_method(value, GETITEM_METHOD)", "buggy_source_code": "def _supports_getitem_protocol(value: astroid.node_classes.NodeNG) -> bool:\n    return _supports_protocol_method(value, GETITEM_METHOD)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'VisTrails_Module'", "buggy_source_code": "def __str__(self):\n    return '<<%s>>' % str(self.__class__)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_stderr_received(self, data):\n    sys.stderr.write(data.decode().replace(os.linesep, '\\n'))", "buggy_source_code": "def on_stderr_received(self, data):\n    sys.stderr.write(data.decode('utf-8', 'replace').replace(os.linesep, '\\n'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_stdout_received(self, data):\n    sys.stdout.write(data.decode().replace(os.linesep, '\\n'))", "buggy_source_code": "def on_stdout_received(self, data):\n    sys.stdout.write(data.decode('utf-8', 'replace').replace(os.linesep, '\\n'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def configuration(parent_package='', top_path=None):\n    from numpy.distutils.misc_util import Configuration\n    config = Configuration('fparser', parent_package, top_path)\n    return config", "buggy_source_code": "def configuration(parent_package='', top_path=None):\n    from numpy.distutils.misc_util import Configuration\n    config = Configuration('fparser', parent_package, top_path)\n    config.add_data_files('log.config')\n    return config", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def overdue_status(self):\n    if datetime.date.today() > self.due_date:\n        return 1", "buggy_source_code": "def overdue_status(self):\n    if self.due_date and datetime.date.today() > self.due_date:\n        return 1", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_nearest(self, point):\n    pass", "buggy_source_code": "def get_nearest(self, point):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def _encode(s, encoding=ENCODING):\n    return s.encode(encoding) if isinstance(s, unicode) else s", "buggy_source_code": "def _encode(s, encoding=None):\n    if encoding is None:\n        encoding = ENCODING\n    return s.encode(encoding) if isinstance(s, unicode) else s", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _decode(s, encoding=ENCODING):\n    return s if isinstance(s, unicode) else s.decode(encoding)", "buggy_source_code": "def _decode(s, encoding=None):\n    if encoding is None:\n        encoding = ENCODING\n    return s if isinstance(s, unicode) else s.decode(encoding)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def bdecode(data):\n    decoded = decode(data)\n    asDict = mkdict(decoded)\n    print(asDict)\n    print('\\n')\n    return asDict", "buggy_source_code": "def bdecode(data):\n    decoded = decode(data)\n    asDict = mkdict(decoded)\n    print('<<<<<<<<<<')\n    print(asDict)\n    print('\\n')\n    return asDict", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clone_attr(attr):\n    return TextAttribute(attr.get_fg_idx(), attr.get_bg_idx(), attr.get_mode())", "buggy_source_code": "def clone_attr(attr):\n    mode = {}\n    mode.update(attr.get_mode())\n    return TextAttribute(attr.get_fg_idx(), attr.get_bg_idx(), mode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def hightlight(self):\n    self.highlight = 1", "buggy_source_code": "def hightlight(self):\n    if self.highlight == 0:\n        self.highlight = 1\n    else:\n        self.highlight = 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def default(self, *args, **kwargs):\n    return \"\\n                <html><head></head><body style='text-align:center'>\\n                    <h2 style='color:red'>Hope you had a great MAGFest!</h2>\\n                    Preregistration for MAGFest 13 will open in the summer.\\n                </body></html>\\n            \"", "buggy_source_code": "def default(self, *args, **kwargs):\n    return \"\\n                <html><head></head><body style='text-align:center'>\\n                    <h2 style='color:red'>Hope you had a great {event}!</h2>\\n                    Preregistration for {event} {year} will open in a few months.\\n                </body></html>\\n            \".format(event=EVENT_NAME, year=1 + int(YEAR) if YEAR else '')", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def undebug_func(self, f):\n    if f in self._updb_debug_func:\n        setattr(self, f, self._updb_debug_func.pop(f))", "buggy_source_code": "def undebug_func(self, f):\n    if f in self._updb_debug_func:\n        setattr(self, f, self._updb_debug_func.pop(f)[0])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def add_songs_to_playlist(self, songs, list_name='Default'):\n    for song in songs:\n        self.add_song_to_playlist(song, list_name=list_name)", "buggy_source_code": "def add_songs_to_playlist(self, songs, list_name='Default'):\n    print('PlayList.add_songs_to_playlist()')\n    print('list name:', list_name)\n    for song in songs:\n        self.add_song_to_playlist(song, list_name=list_name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __cmp__(self, other):\n    return cmp(self.total_frames, other.total_frames)", "buggy_source_code": "def __cmp__(self, other):\n    if not isinstance(other, Timecode):\n        raise TypeError\n    return cmp(self.total_frames, other.total_frames)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.movements = []", "buggy_source_code": "def __init__(self):\n    self.movements = []\n    self.motor = OpenTrons()\n    self.motor.connection = GCodeLogger()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def process_data(self, value, has_formdata):\n    self.data = has_formdata and False or value", "buggy_source_code": "def process_data(self, value, has_formdata):\n    if has_formdata:\n        self.data = False\n    else:\n        self.data = value", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *arg_strs, **flags):\n    self.arg_strs = arg_strs\n    self.sig_flags = flags\n    self._num_default_args = 0\n    self._make_arg_handlers()", "buggy_source_code": "def __init__(self, *arg_strs, **flags):\n    self.arg_strs = arg_strs\n    self.sig_flags = flags\n    self._handle_flags(self.sig_flags)\n    self._num_default_args = 0\n    self._make_arg_handlers()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef first_name(self):\n    return self.names[0]", "buggy_source_code": "@property\ndef first_name(self):\n    if not self.names:\n        return ''\n    return self.names[0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _getbugs(self, idlist):\n    r = self._proxy.Bug.get_bugs({'ids': idlist})\n    return [i['internals'] for i in r['bugs']]", "buggy_source_code": "def _getbugs(self, idlist):\n    r = self._proxy.Bug.get_bugs({'ids': idlist, 'permissive': 1})\n    return [i['internals'] for i in r['bugs']]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME)\ndef update_status(self, text):\n    app.update_status(text)", "buggy_source_code": "@dbus.service.method(dbus_interface=HOTOT_DBUS_NAME, in_signature='s', out_signature='')\ndef update_status(self, text):\n    self.app.update_status(text)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/')\n@crossdomain(origin='*')\ndef index():\n    return responsify('ok', 'ok')", "buggy_source_code": "@app.route('/', methods=['GET', 'OPTIONS'])\n@crossdomain(origin='*', methods=['GET', 'OPTIONS'])\ndef index():\n    return responsify('ok', 'ok')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_latest_author_by_email(self, name):\n    return self.authors_by_email[name]", "buggy_source_code": "def get_latest_author_by_email(self, name):\n    name = name.decode('unicode_escape', 'ignore')\n    return self.authors_by_email[name]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_screenshots(tigl_script):\n    subprocess.run(['tiglviewer-3', '--script', tigl_script], timeout=3600)", "buggy_source_code": "def create_screenshots(tigl_script):\n    subprocess.run(['tiglviewer-3', '--script', tigl_script, '--suppress-errors'], timeout=3600)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def findEnglishWord(term):\n    word = db['words'].find_one(english=term)\n    return word", "buggy_source_code": "def findEnglishWord(term):\n    word = db['words'].find_one(english=term)\n    if word is None:\n        raise LookupError\n    return word", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close_dialog(self):\n    ParentAction.close_dialog(self)\n    self.search_plus.refresh_data()", "buggy_source_code": "def close_dialog(self):\n    ParentAction.close_dialog(self)\n    try:\n        self.search_plus.refresh_data()\n    except:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __resetZoom(self, checked):\n    self._frontPlot.resetZoom()\n    self._sidePlot.resetZoom()", "buggy_source_code": "def __resetZoom(self, checked):\n    self._frontPlot.resetZoom()\n    self._sidePlot.resetZoom()\n    self._axialPlot.resetZoom()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def coordToPolar(x, y):\n    r = np.sqrt(x ** 2 + y ** 2)\n    phi = math.atan2(x, y)\n    return (r, phi)", "buggy_source_code": "def coordToPolar(self, x, y):\n    r = np.sqrt(x ** 2 + y ** 2)\n    phi = math.atan2(x, y)\n    return (r, phi)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def distance(x, y, x_prev, y_prev):\n    return np.sqrt((x - x_prev) ** 2 + (y - y_prev) ** 2)", "buggy_source_code": "def distance(self, x, y, x_prev, y_prev):\n    return np.sqrt((x - x_prev) ** 2 + (y - y_prev) ** 2)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self._app.route('/', callback=self._resource_listing)\n    self._app.route('/<filename>', callback=self._api_declaration)", "buggy_source_code": "def __init__(self):\n    self._app.route('/', callback=self._resource_listing)\n    self._app.route('/<filename>', callback=self._api_declaration)\n    self._base = 'frontend/api/modules/docs/specs'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_do_docker_sync_filesystem(self):\n    delay = do_docker_sync_filesystem.delay('id')\n    self.assertEqual(delay.result, False)", "buggy_source_code": "def test_do_docker_sync_filesystem(self):\n    delay = do_docker_sync_filesystem.delay('id')\n    (container, log) = delay.result\n    self.assertEqual(container, 'id')\n    self.assertEqual(log, '')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_do_docker_create(self):\n    delay = do_docker_create.delay('image')\n    self.assertEqual(delay.result, None)", "buggy_source_code": "def test_do_docker_create(self):\n    delay = do_docker_create.delay('image')\n    (container, log) = delay.result\n    self.assertEqual(container, None)\n    self.assertEqual(log, '')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef representative_image_url(self):\n    if representative_image:\n        return self.representative_image.url\n    return ''", "buggy_source_code": "@property\ndef representative_image_url(self):\n    if self.representative_image:\n        return self.representative_image.url\n    return ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def dependencies_for_myprogram():\n    from scipy.sparse.csgraph import _validation\n    import PyQt4.QtSvg\n    import PyQt4.QtXml", "buggy_source_code": "def dependencies_for_myprogram():\n    from scipy.sparse.csgraph import _validation\n    from scipy.interpolate import UnivariateSpline\n    import PyQt4.QtSvg\n    import PyQt4.QtXml", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@bottle.route('/search/universal/relative')\ndef get():\n    return response", "buggy_source_code": "@bottle.route('/search/universal/relative')\ndef get():\n    import time\n    time.sleep(sleep_seconds)\n    return response", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return repr(self.value)", "buggy_source_code": "def __str__(self):\n    return '%s (Error code: %s)' % (repr(self.value), self.error_code)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, description) -> None:\n    super().__init__()\n    self.description = description", "buggy_source_code": "def __init__(self, description: str) -> None:\n    super().__init__()\n    self.description = description", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, enum: Enum):\n    super().__init__([*enum._member_map_.keys()])\n    self.enum = enum", "buggy_source_code": "def __init__(self, enum: Type[Enum]):\n    super().__init__([*cast(Enum, enum)._member_map_.keys()])\n    self.enum = enum", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _get_backend_from_config():\n    conf = get_config()\n    if conf['blobs']:\n        return BlobsServerState('filesystem', conf['blobs_path'])\n    return CouchServerState(conf['couch_url'])", "buggy_source_code": "def _get_backend_from_config():\n    conf = get_config()\n    if conf['blobs']:\n        return BlobsServerState('filesystem', blobs_path=conf['blobs_path'])\n    return CouchServerState(conf['couch_url'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, parameter):\n    super(MissingPOSTParameterError, self).__init__(message='The following POST parameters are required but were missing in the request body: %s.' % parameter)", "buggy_source_code": "def __init__(self, *parameters):\n    super(MissingPOSTParameterError, self).__init__(message='The following POST parameters are required but were missing in the request body: \"%s\".' % '\", \"'.join(parameters))", "edit_actions": ["insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def get_config_key(key):\n    return config.get(section=SECTION, option=key)", "buggy_source_code": "def get_config_key(key):\n    try:\n        return config.get(section=SECTION, option=key)\n    except configparser.NoOptionError:\n        return None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def other_job():\n    bot.sendMessage(chat_id=get_chat_id(), text=os.popen('date').read())", "buggy_source_code": "def other_job():\n    bot.sendMessage(chat_id=get_config_key('chat_id'), text=os.popen('date').read())", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def valuefrompostdata(self, postdata):\n    if self.id in postdata:\n        return postdata[self.id]\n    else:\n        return None", "buggy_source_code": "def valuefrompostdata(self, postdata):\n    if self.id in postdata:\n        return postdata[self.id]\n    else:\n        return self.default", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@JSON.translates(TFN)\ndef t_tfn(node, scope):\n    return {'true': True, 'false': False, 'null': None}", "buggy_source_code": "@JSON.translates(TFN)\ndef t_tfn(node, scope):\n    return {'true': True, 'false': False, 'null': None}[node.value]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_sniff_path_flowcell_path(self, manager, mock_genomics_server):\n    logger.info('test `_sniff_path()` for flowcell path')\n    path_type = manager._sniff_path(mock_genomics_server['flowcell_path'])\n    assert path_type == 'flowcell_path'", "buggy_source_code": "def test_sniff_path_flowcell_path(self, managerdata, mock_genomics_server):\n    (manager, rundata, _) = managerdata\n    logger.info('test `_sniff_path()` for flowcell path')\n    path_type = manager._sniff_path(rundata['path'])\n    assert path_type == 'flowcell_path'", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_collect_flowcellrun(self, importer):\n    logger.info('test `_collect_flowcellrun()`')\n    flowcellrun = importer._collect_flowcellrun()\n    assert type(flowcellrun) == docs.FlowcellRun", "buggy_source_code": "def test_collect_flowcellrun(self, importerdata):\n    (importer, _) = importerdata\n    logger.info('test `_collect_flowcellrun()`')\n    flowcellrun = importer._collect_flowcellrun()\n    assert type(flowcellrun) == docs.FlowcellRun", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_sniff_path_flowcell_path(self, manager, mock_genomics_server):\n    logger.info('test `_sniff_path()` for flowcell path')\n    path_type = manager._sniff_path(mock_genomics_server['flowcell_path'])\n    assert path_type == 'flowcell_path'", "buggy_source_code": "def test_sniff_path_flowcell_path(self, managerdata, mock_genomics_server):\n    (manager, rundata, _) = managerdata\n    logger.info('test `_sniff_path()` for flowcell path')\n    path_type = manager._sniff_path(rundata['path'])\n    assert path_type == 'flowcell_path'", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def app_installed(app):\n    return app in settings.INSTALLED_APPS", "buggy_source_code": "def app_installed(app):\n    from django.conf import settings\n    return app in settings.INSTALLED_APPS", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send_new_mail(subject, message, from_email, recipient_list, bcc_list):\n    return EmailMessage(subject, message, from_email, recipient_list, bcc_list).send()", "buggy_source_code": "def send_new_mail(self, subject, message, from_email, recipient_list, bcc_list):\n    return EmailMessage(subject, message, from_email, recipient_list, bcc_list).send()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name):\n    self.code = 409\n    super(VersionConflictException, self).__init__('The version for thing %s does not match the expected version.' % name)", "buggy_source_code": "def __init__(self, name):\n    self.code = 409\n    super(VersionConflictException, self).__init__('VersionConflictException', 'The version for thing %s does not match the expected version.' % name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __getattr__(self, name):\n    return getattr(self._atoms, name)", "buggy_source_code": "def __getattr__(self, name):\n    if name != '_atoms':\n        return getattr(self._atoms, name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef build_title_jpn_string(json_data):\n    return 'Japanese Title: ' + pprint.pformat(json_data['gmetadata'][0]['title_jpn'])", "buggy_source_code": "@staticmethod\ndef build_title_jpn_string(json_data):\n    if 'title_jpn' in json_data['gmetadata'][0]:\n        return 'Japanese Title: ' + pprint.pformat(json_data['gmetadata'][0]['title_jpn'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_headless():\n    return 'DISPLAY' in os.environ", "buggy_source_code": "def is_headless():\n    return 'DISPLAY' not in os.environ", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def generateRepoUrl(self):\n    rpmrepo = 'http://kojipkgs.fedoraproject.org/repos/%s/latest/%s' % (self.pdcdata['koji_tag'], ARCH)\n    return rpmrepo", "buggy_source_code": "def generateRepoUrl(self):\n    rpmrepo = 'http://kojipkgs.fedoraproject.org/repos/%s/latest/%s' % (self.pdcdata['koji_tag'] + '-build', ARCH)\n    return rpmrepo", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def decrypt(self, payload: bytes) -> bytes:\n    decryptor = self.aes.decryptor()\n    return decryptor.update(payload) + decryptor.finalize()", "buggy_source_code": "def decrypt(self, payload: bytes) -> bytes:\n    decryptor = self.aes.decryptor()\n    return decryptor.update(bytes(payload)) + decryptor.finalize()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def update_aes(self, key: bytes) -> None:\n    self.aes = Cipher(algorithms.AES(key), modes.CBC(self.iv), backend=default_backend())", "buggy_source_code": "def update_aes(self, key: bytes) -> None:\n    self.aes = Cipher(algorithms.AES(bytes(key)), modes.CBC(self.iv), backend=default_backend())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def delete(key):\n    if key in self._dict:\n        del self._dict[key]", "buggy_source_code": "def delete(self, key):\n    if key in self._dict:\n        del self._dict[key]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get(key=None):\n    if not key:\n        return _dict\n    if key in self._dict:\n        return self._dict[key]\n    return None", "buggy_source_code": "def get(self, key=None):\n    if not key:\n        return self._dict\n    if key in self._dict:\n        return self._dict[key]\n    return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@app.route('/cheating/load', methods=['POST'])\ndef add_load():\n    agent.cheat_load = float(request.get_data(as_text=True))", "buggy_source_code": "@app.route('/cheating/load', methods=['POST'])\ndef add_load():\n    agent.cheat_load = float(request.get_data(as_text=True))\n    return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef cpu():\n    if cheat_load:\n        return cheat_load\n    return psutil.cpu_percent(0)", "buggy_source_code": "def cpu(self):\n    if self.cheat_load:\n        return self.cheat_load\n    return psutil.cpu_percent(0)", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/cheating/load', methods=['DELETE'])\ndef remove_load():\n    agent.cheat_load = None", "buggy_source_code": "@app.route('/cheating/load', methods=['DELETE'])\ndef remove_load():\n    agent.cheat_load = None\n    return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@atexit.register\ndef python_shutting_down():\n    print('Disconnecting MessageHub client')", "buggy_source_code": "@atexit.register\ndef python_shutting_down():\n    print('Disconnecting MessageHub client')\n    producer.flush()\n    producer.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    deskbar.interfaces.Module.__init__(self)\n    self.indexer = deskbar.core.Indexer.Indexer()", "buggy_source_code": "def __init__(self):\n    deskbar.interfaces.Module.__init__(self)\n    self.indexer = deskbar.core.Indexer.Indexer()\n    self.monitor_id = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, filename, loc, name):\n    Message.__init__(self, filename, loc, message_args=(name,))\n    self.name = name", "buggy_source_code": "def __init__(self, filename, loc, name):\n    Message.__init__(self, filename, loc, level='E', message_args=(name,))\n    self.name = name", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, filename, loc, name):\n    Message.__init__(self, filename, loc, message_args=(name,))\n    self.name = name", "buggy_source_code": "def __init__(self, filename, loc, name):\n    Message.__init__(self, filename, loc, level='E', message_args=(name,))\n    self.name = name", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, filename, loc, name):\n    Message.__init__(self, filename, loc, message_args=(name,))\n    self.name = name", "buggy_source_code": "def __init__(self, filename, loc, name):\n    Message.__init__(self, filename, loc, level='E', message_args=(name,))\n    self.name = name", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run_module(queue, module, target, file_type):\n    if module.run_each_with_type(target, file_type):\n        module._results['result'] = True\n    queue.put(module)", "buggy_source_code": "def run_module(queue, module, target, file_type):\n    if module.run_each_with_type(target, file_type):\n        module._results['result'] = True\n    queue.put(module.to_dict())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_writer(self, output, generator):\n    writer = StreamXmlWriter(output)\n    writer.start('robot')\n    return writer", "buggy_source_code": "def _get_writer(self, output, generator):\n    writer = StreamXmlWriter(output, encoding='UTF-8')\n    writer.start('robot')\n    return writer", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _log(txt, severity=xbmc.LOGDEBUG):\n    message = _normalize_string('Artwork Downloader: %s' % txt)\n    xbmc.log(msg=message, level=severity)", "buggy_source_code": "def _log(txt, severity=xbmc.LOGDEBUG):\n    message = unicode(message, 'utf-8', errors='ignore')\n    message = 'Artwork Downloader: %s' % txt\n    xbmc.log(msg=message, level=severity)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def start(self):\n    self._start_probe(restricted=False)", "buggy_source_code": "def start(self):\n    urwid.connect_signal(self.app, 'debug-shell-exited', self._maybe_reprobe_block)\n    self._start_probe(restricted=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _invalid_key_err(self, key):\n    attr_list = list(self.attributes)\n    raise Exception(\"invalid parameter to FirewallRule, '{key}' is not in {attributes}\".format(key=key, attributes=attr_list))", "buggy_source_code": "def _invalid_key_err(self, key):\n    attr_list = list(self.attributes.keys())\n    raise Exception(\"invalid parameter to FirewallRule, '{key}' is not in {attributes}\".format(key=key, attributes=attr_list))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getState(self):\n    return StateSet(STATE_SHOWING)", "buggy_source_code": "def getState(self):\n    ss = StateSet()\n    ss.add(STATE_SHOWING)\n    return ss", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def migrate3(self):\n    cu.execute('\\n            DROP SEQUENCE \"inventory_network_information_id_seq\"\\n        ')\n    cu.execute('\\n            CREATE SEQUENCE \"inventory_system_network_information_id_seq\"\\n        ')", "buggy_source_code": "def migrate3(self):\n    cu = self.db.cursor()\n    cu.execute('\\n            DROP SEQUENCE \"inventory_network_information_id_seq\"\\n        ')\n    cu.execute('\\n            CREATE SEQUENCE \"inventory_system_network_information_id_seq\"\\n        ')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, storage_object, parent):\n    name = storage_object.name\n    UIRTSLibNode.__init__(self, name, storage_object, parent)\n    self.refresh()", "buggy_source_code": "def __init__(self, storage_object, parent):\n    name = storage_object.name\n    UIRTSLibNode.__init__(self, name, storage_object, parent)\n    self.refresh()\n    UIALUATargetPortGroups(self)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef from_default_triple(cls):\n    return cls.from_triple(get_default_triple())", "buggy_source_code": "@classmethod\ndef from_default_triple(cls):\n    triple = get_default_triple()\n    if os.name == 'nt':\n        triple += '-elf'\n    return cls.from_triple(triple)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_phantom_html(text):\n    global stylesheet\n    return '<body id=inline-error>{}\\n                <div class=\"error\">\\n                    <span class=\"message\">{}</span>\\n                    <a href=\"code-actions\">Code Actions</a>\\n                </div>\\n                </body>'.format(stylesheet, html.escape(text, quote=False))", "buggy_source_code": "def create_phantom_html(text: str) -> str:\n    global stylesheet\n    return '<body id=inline-error>{}\\n                <div class=\"error\">\\n                    <span class=\"message\">{}</span>\\n                    <a href=\"code-actions\">Code Actions</a>\\n                </div>\\n                </body>'.format(stylesheet, html.escape(text, quote=False))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_in_workspace(window, file_path):\n    workspace_path = get_project_path(window)\n    common_dir = os.path.commonprefix([workspace_path, file_path])\n    return workspace_path == common_dir", "buggy_source_code": "def is_in_workspace(window: sublime.Window, file_path: str) -> bool:\n    workspace_path = get_project_path(window)\n    common_dir = os.path.commonprefix([workspace_path, file_path])\n    return workspace_path == common_dir", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_region(view, diagnostic):\n    return sublime.Region(view.text_point(*diagnostic.range.start), view.text_point(*diagnostic.range.end))", "buggy_source_code": "def create_region(view, diagnostic: Diagnostic) -> sublime.Region:\n    return sublime.Region(view.text_point(*diagnostic.range.start), view.text_point(*diagnostic.range.end))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_supported_view(view):\n    if config_for_scope(view):\n        return True\n    else:\n        return False", "buggy_source_code": "def is_supported_view(view: sublime.View) -> bool:\n    if config_for_scope(view):\n        return True\n    else:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send_notification(self, notification):\n    debug('notify: ' + notification.method)\n    self.send_call(notification)", "buggy_source_code": "def send_notification(self, notification: Notification):\n    debug('notify: ' + notification.method)\n    self.send_call(notification)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_document_state(path):\n    if path not in document_states:\n        document_states[path] = DocumentState(path)\n    return document_states.get(path)", "buggy_source_code": "def get_document_state(path: str) -> DocumentState:\n    if path not in document_states:\n        document_states[path] = DocumentState(path)\n    return document_states.get(path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, path):\n    self.path = path\n    self.version = 0", "buggy_source_code": "def __init__(self, path: str):\n    self.path = path\n    self.version = 0", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def format_severity(severity):\n    return diagnostic_severity_names[severity]", "buggy_source_code": "def format_severity(severity: int) -> str:\n    return diagnostic_severity_names.get(severity, '???')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def retweet(self, message_id):\n    self.__make_post_calls('https://api.twitter.com/1.1/statuses/retweet/' + str(message_id) + '.json', body='id=' + str(message_id))", "buggy_source_code": "def retweet(self, message_id):\n    self.flash.flash(self.trUtf8('Retweetting...'))\n    self.__make_post_calls('https://api.twitter.com/1.1/statuses/retweet/' + str(message_id) + '.json', body='id=' + str(message_id))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __len__(self):\n    return self.index.shape[0]", "buggy_source_code": "def __len__(self):\n    return int(np.ceil(self.n_frames / float(self.batch_size)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_string(self, metadata):\n    return u'{}: {}'.format(metadata['type'], metadata['value'])", "buggy_source_code": "def to_string(self, metadata):\n    return u'{}: {}'.format(metadata['type'], truncatechars(metadata['value'].splitlines()[0], 100))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_activity(activity_id):\n    self.protocol.delete('/activities/{id}', id=activity_id)", "buggy_source_code": "def delete_activity(self, activity_id):\n    self.protocol.delete('/activities/{id}', id=activity_id)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set(self, name, value):\n    self.variable[name] = value\n    return self", "buggy_source_code": "def set(self, name, value):\n    self.variable[name] = value.format(**self.variable)\n    return self", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cmd(self, text):\n    self.main += [text]\n    return self", "buggy_source_code": "def cmd(self, text):\n    self.main += [text.format(**self.variable)]\n    return self", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, version):\n    self.version = version", "buggy_source_code": "def __init__(self, version):\n    super().__init__()\n    self.version = version", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_cache_key(self, endpoint, resource_id):\n    return '%s%s' % (endpoint, resource_id)", "buggy_source_code": "def _get_cache_key(self, endpoint, resource_id):\n    return '%s%s' % (endpoint, resource_id or '')", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def learn(self, msg):\n    self.socket.sendto(msg, (self.host, self.remoteport))", "buggy_source_code": "def learn(self, msg):\n    self.socket.sendto(msg, (self.host, self.remoteport))\n    self.socket.recvfrom(8 * 1024)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "async def get(self):\n    data = await self.redis.get(self.KEY)\n    if data:\n        return json.loads(data)", "buggy_source_code": "async def get(self):\n    data = await self.redis.get(self.KEY)\n    if data:\n        return json.loads(data.decode('utf-8'))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_xmlns(self):\n    root = nsparse('<html><p xmlns:foo=\"f\">xxx<f:moo/>')", "buggy_source_code": "def test_xmlns(self):\n    root = parse('<html><p xmlns:foo=\"f\">xxx<f:moo/>')\n    self.ae(tostring(root), '<html><head/><body><p xmlns-foo=\"f\">xxx<f-moo/></p></body></html>')\n    root = parse('<p xmlns=\"x\"><p xmlns:=\"y\"><svg xmlns:xlink=\"xxx\">')\n    self.ae(tostring(root), '<html xmlns:xlink=\"http://www.w3.org/1999/xlink\"><head/><body><p/><p><svg/></p></body></html>')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_disk_usage(self):\n    psutil.disk_usage(self.uexe)", "buggy_source_code": "def test_disk_usage(self):\n    path = tempfile.mkdtemp(prefix='psutil', suffix='è')\n    psutil.disk_usage(path)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remove(self, pb):\n    self.vbox.remove(pb)", "buggy_source_code": "def remove(self, pb):\n    self.vbox.remove(pb)\n    if len(self.vbox.get_children()) == 0:\n        self.destroy()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def wait(self):\n    with self.lock:\n        pass\n    if self.lock.locked():\n        self.wait()\n    return True", "buggy_source_code": "def wait(self):\n    with self.lock:\n        pass\n    qkit.flow.sleep(0.1)\n    if self.lock.locked():\n        self.wait()\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def banner():\n    print(\"'||'  '||' '||''''|  '||''|.   '||    ||' '||''''|   .|'''.| \")\n    print(\" ||    ||   ||  .     ||   ||   |||  |||   ||  .     ||..  ' \")\n    print(\" ||''''||   ||''|     ||''|'    |'|..'||   ||''|      ''|||. \")\n    print(\" ||    ||   ||        ||   |.   | '|' ||   ||       .     '||\")\n    print(\".||.  .||. .||.....| .||.  '|' .|. | .||. .||.....| |'....|' \")", "buggy_source_code": "def banner():\n    print(\"'||'  '||' '||''''|  '||''|.   '||    ||' '||''''|   .|'''.| \")\n    print(\" ||    ||   ||  .     ||   ||   |||  |||   ||  .     ||..  ' \")\n    print(\" ||''''||   ||''|     ||''|'    |'|..'||   ||''|      ''|||. \")\n    print(\" ||    ||   ||        ||   |.   | '|' ||   ||       .     '||\")\n    print(\".||.  .||. .||.....| .||.  '|' .|. | .||. .||.....| |'....|' \")\n    print('')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def home(request):\n    context = {'project': '+nefo', 'request': request, 'current_lang': get_language() or 'en'}\n    return template('home', context)", "buggy_source_code": "def home(request):\n    context = {'timeout': TIMEOUT, 'project': '+nefo', 'request': request, 'current_lang': get_language() or 'en'}\n    return template('home', context)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run():\n    dogs.remove({})\n    bulk_add_shelters()\n    bulk_add_dogs()", "buggy_source_code": "def run():\n    dogs.remove({})\n    shelters.remove({})\n    bulk_add_shelters()\n    bulk_add_dogs()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, model):\n    self.model = model\n    self.statements = []\n    self._mod_conditions = {}\n    self._activity_conditions = {}", "buggy_source_code": "def __init__(self, model):\n    self.model = model\n    self.statements = []\n    self._mod_conditions = {}\n    self._activity_conditions = {}\n    self._agents = {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _is_modification(feature):\n    return get_modification_type(feature) == 'modification'", "buggy_source_code": "def _is_modification(feature):\n    return isinstance(feature, bp.ModificationFeature) and get_modification_type(feature) == 'modification'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _is_activity(feature):\n    return get_modification_type(feature) in {'activity', 'inactivity'}", "buggy_source_code": "def _is_activity(feature):\n    return isinstance(feature, bp.ModificationFeature) and get_modification_type(feature) in {'activity', 'inactivity'}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def process_html(self, url, headers, content, parsed):\n    return", "buggy_source_code": "def process_html(self, url, headers, content, parsed):\n    logger.error('In base process_html: {}'.format(traceback.format_exc()))\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return \"{}Supervised Descent Method for AAMs:\\n - Parametric '{}' Regressor\\n - {} training images.\\n\".format(self.aam.__str__(), self._fitters[0].regressor.__name__, self._n_training_images)", "buggy_source_code": "def __str__(self):\n    return \"{}Supervised Descent Method for AAMs:\\n - Parametric '{}' Regressor\\n - {} training images.\\n\".format(self.aam.__str__(), name_of_callable(self._fitters[0].regressor), self._n_training_images)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_message(self, message):\n    self.message.append(message)", "buggy_source_code": "def add_message(self, message):\n    self.message += '\\n%s' % message if self.message is not '' else message", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def divround(a, b):\n    return round(a / b)", "buggy_source_code": "def divround(a, b):\n    return int(round(a / b))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, rest_url, base):\n    super().__init__(rest_url)\n    self.base = base", "buggy_source_code": "def __init__(self, rest_url, base):\n    super(FileREST, self).__init__(rest_url)\n    self.base = base", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self._browser = _Browser()\n    self.HOST = 'http://www.cambridgelms.org'", "buggy_source_code": "def __init__(self):\n    self._browser = _Browser()\n    self.HOST = 'http://www.cambridgelms.org'\n    self.debug = False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _after_train(self):\n    self._hook.end()", "buggy_source_code": "def _after_train(self):\n    self._hook.end(self.trainer.sess)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@enforce_ssl(required_all=True)\ndef __before__(self, **kwargs):\n    pass", "buggy_source_code": "@enforce_ssl(required_all=True)\ndef __before__(self, **kwargs):\n    c.signed_in_person = h.signed_in_person()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@cron(0, 3, -1, -1, -1, target='mule')\ndef roskom_check(num):\n    print('Running roskom_check')\n    tasks.perform_scan()\n    print('roskom_check finished')", "buggy_source_code": "@cron(0, 3, -1, -1, -1, target='mule')\ndef roskom_check(num):\n    print('Running roskom_check')\n    tasks.perform_scan('auto')\n    print('roskom_check finished')", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def init_action(args: argparse.Namespace):\n    from importlib import reload", "buggy_source_code": "def init_action(args: argparse.Namespace):\n    try:\n        from importlib import reload\n    except ImportError:\n        from imp import reload", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_transport_closed(self, event):\n    self.disconnected = event.transport.condition or 'unknown'", "buggy_source_code": "def on_transport_closed(self, event):\n    if not self.closing:\n        self.disconnected = event.transport.condition or 'unknown'", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, cache, serializer=None):\n    self._cache = cache\n    self._serializer = serializer or self.__class__.SERIALIZER", "buggy_source_code": "def __init__(self, cache, serializer=None):\n    cls = self.__class__\n    self._cache = cache\n    self._serializer = serializer or cls.SERIALIZER", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def plot_generated_data():\n    PlotlyBarChart().main_method(data_to_give_plotly)", "buggy_source_code": "def plot_generated_data():\n    print(data_to_give_plotly)\n    PlotlyBarChart().main_method(data_to_give_plotly)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def error_router(self, original_handler, e):\n    if self._has_fr_route():\n        return self.handle_error(e)\n    return original_handler(e)", "buggy_source_code": "def error_router(self, original_handler, e):\n    if self._has_fr_route() or self._is_404_error(e):\n        return self.handle_error(e)\n    return original_handler(e)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load(filename):\n    f = open(filename, 'r')\n    obj = pickle.load(f)\n    f.close()\n    return obj", "buggy_source_code": "def load(filename):\n    f = open(os.path.join(_basedir, filename), 'r')\n    obj = pickle.load(f)\n    f.close()\n    return obj", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _get_text(self):\n    return self._text", "buggy_source_code": "def _get_text(self):\n    try:\n        return self._text.decode('utf8')\n    except AttributeError:\n        return str(self._text)\n    except UnicodeEncodeError:\n        return self._text", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, id_data, pubkey, privkey):\n    self.id_data = id_data\n    self.pubkey = pubkey\n    self.privkey = privkey", "buggy_source_code": "def __init__(self, id_data, pubkey, privkey, tenant_token=''):\n    self.id_data = id_data\n    self.pubkey = pubkey\n    self.privkey = privkey\n    self.tenant_token = tenant_token", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef poll(self, context):\n    obj = bpy.context.edit_object\n    if obj and obj.data.total_face_sel == 2:\n        return True", "buggy_source_code": "@classmethod\ndef poll(self, context):\n    obj = bpy.context.edit_object\n    if obj and obj.data.total_face_sel == 2:\n        return True\n    return are_two_objects_in_editmode(bpy.context.selected_objects)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reconnect(self):\n    self.connection_attempts += 1\n    self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n    self.connect((self.server, self.port))", "buggy_source_code": "def reconnect(self):\n    self.reconnecting = False\n    self.connection_attempts += 1\n    self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n    self.connect((self.server, self.port))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __hide_conversation(self, status):\n    self.webview.clear_conversation(status.id_)", "buggy_source_code": "def __hide_conversation(self, status):\n    del self.conversations[status.id_]\n    self.webview.clear_conversation(status.id_)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_statuses(self, statuses):\n    self.statuses = self.webview.update_statuses(statuses)", "buggy_source_code": "def update_statuses(self, statuses):\n    self.statuses = self.webview.update_statuses(statuses)\n    self.conversations = {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, docstring=None):\n    self.name = name\n    self.docstring = docstring", "buggy_source_code": "def __init__(self, name, docstring=None):\n    if name == 'type':\n        name = 'type_'\n    self.name = name\n    self.docstring = docstring", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def post_call_block(self):\n    return ''", "buggy_source_code": "def post_call_block(self):\n    if self.is_error():\n        return textwrap.dedent(f'                if pError.value != 0:\\n                    raise OpenVRError(str(pError))\\n            ')\n    return ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    return render_template('form.html')", "buggy_source_code": "@app.route('/')\ndef index():\n    return render_template('form.html', debug=app.debug)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def connectionMade(self):\n    self.xmlstream.initiating = False\n    self.xmlstream.sid = '1'\n    self.xmlstream.sendHeader()", "buggy_source_code": "def connectionMade(self):\n    self.xmlstream.initiating = False\n    self.xmlstream.sid = '1'\n    self.xmlstream.version = '0.9'\n    self.xmlstream.namespace = 'jabber:client'\n    self.xmlstream.sendHeader()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def api_test():\n    return api(boxhome=BOXHOME)", "buggy_source_code": "def api_test(*args, **kwargs):\n    if 'boxhome' not in kwargs:\n        kwargs['boxhome'] = BOXHOME\n    return api(*args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def change_graph_to_t_rads(self):\n    self.change_graph(self.model.t_rads, 't_rads', '(K)')", "buggy_source_code": "def change_graph_to_t_rads(self):\n    self.change_graph(self.model.t_rads.value, 't_rads', '(K)')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def load_fixtures():\n    fixtures = ['admin_user', 'formulations', 'countries', 'suppliers', 'prices', 'exchange_rates', 'msh_prices', 'products']\n    for fixture in fixtures:\n        load_fixture(fixture)", "buggy_source_code": "def load_fixtures():\n    fixtures = ['admin_user', 'formulations', 'countries', 'suppliers', 'prices', 'exchange_rates', 'msh_prices', 'products', 'temp_data']\n    for fixture in fixtures:\n        load_fixture(fixture)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def description_level63():\n    message = ugettext('')\n    return build_description(title_level63, message)", "buggy_source_code": "def description_level63():\n    message = ugettext('')\n    return build_description(title_level63(), message)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def description_level62():\n    message = ugettext('You have to go out of your way to solve this! Are you up for the ' + 'challenge?')\n    return build_description(title_level62, message)", "buggy_source_code": "def description_level62():\n    message = ugettext('You have to go out of your way to solve this! Are you up for the ' + 'challenge?')\n    return build_description(title_level62(), message)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@api.app_errorhandler(404)\ndef not_found(e):\n    pass", "buggy_source_code": "@api.app_errorhandler(404)\ndef not_found(e):\n    res = jsonify({'status': 404, 'error': 'not found', 'message': 'invalid resource URL'})\n    res.status_code = 404\n    return res", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@api.errorhandler(405)\ndef method_not_supported(e):\n    pass", "buggy_source_code": "@api.errorhandler(405)\ndef method_not_supported(e):\n    res = jsonify({'status': 405, 'error': 'method not supported', 'message': 'the method is not supported'})\n    res.status_code = 405\n    return res", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_url(self, url):\n    self.url = url", "buggy_source_code": "def on_url(self, url):\n    if not self.url:\n        self.url = url\n    else:\n        self.url += url", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def my_savefig(filename, dir=''):\n    if filename is not None:\n        full_filename = os.path.join(dir, filename)\n        pylab.savefig(full_filename)", "buggy_source_code": "def my_savefig(filename, dir=''):\n    if filename is not None:\n        full_filename = os.path.join(dir, filename)\n        pylab.savefig(full_filename)\n        pylab.close()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def patch_target(self):\n    self._carry_fixed_aspects()", "buggy_source_code": "def patch_target(self):\n    if self.source is not None:\n        self._carry_fixed_aspects()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return self.title", "buggy_source_code": "def __unicode__(self):\n    return unicode(self.title)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_led_state_async(self, led):\n    (self.led_l, self.led_r) = led\n    self.update_buttons()", "buggy_source_code": "def get_led_state_async(self, led):\n    (self.led_l, self.led_r) = led\n    self.get_button_state_async((self.button_l, self.button_r))", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop(self):\n    self.cbe_button_state.set_period(0)", "buggy_source_code": "def stop(self):\n    self.cbe_button_state.set_period(0)\n    self.cbe_led_state.set_period(0)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def splitPrefix(self, name):\n    if ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "buggy_source_code": "def splitPrefix(self, name):\n    if name is not None and ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def keys(self):\n    return map(self._unmap_key, self._dstore.keys())", "buggy_source_code": "def keys(self):\n    return list(map(self._unmap_key, self._dstore.keys()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def desc(self):\n    return 'Google Cloud Text-to-Speech (%d voices).' % len(set(map(lambda x: x[0][:5], self._voice_list)))", "buggy_source_code": "def desc(self):\n    return 'Google Cloud Text-to-Speech (%d voices).' % len(set(map(lambda x: self._languageCode(x[0]), self._voice_list)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@login_required\ndef reflow_app(request):\n    return render_to_response('reflow_app.html', {}, context_instance=RequestContext(request))", "buggy_source_code": "@login_required(redirect_field_name=None)\ndef reflow_app(request):\n    return render_to_response('reflow_app.html', {}, context_instance=RequestContext(request))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def make(target, conf):\n    Maker.inst().make(target, conf)", "buggy_source_code": "def make(target, conf):\n    if not isinstance(conf, dict):\n        conf = vars(conf)\n    Maker.inst().make(target, conf)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _name_from_signature(self, signature):\n    return stringify_with_ellipses(signature)", "buggy_source_code": "def _name_from_signature(self, signature):\n    m = re.match('[a-zA-Z ]+', signature)\n    if m:\n        return m.group(0).strip()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def _get_all_by_type(node, node_type):\n    return getattr(node, node_type).all()", "buggy_source_code": "def _get_all_by_type(self, node, node_type):\n    return getattr(node, node_type).all()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_product_name(product_id):\n    return Product.get(product_id).name", "buggy_source_code": "def _get_product_name(self, product_id):\n    return Product.get(product_id).name", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, dev_mode=False):\n    self.dev_mode = dev_mode\n    self.json_encoder = ClasticJSONEncoder(dev_mode=self.dev_mode)", "buggy_source_code": "def __init__(self, dev_mode=False, encoding='utf-8'):\n    self.dev_mode = dev_mode\n    self.encoding = encoding\n    self.json_encoder = ClasticJSONEncoder(encoding=encoding, dev_mode=self.dev_mode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _write_abjad_include(outfile):\n    if ABJADPATH is not None:\n        outfile.write('\\\\include \"%s/scm/abjad.scm\"\\n' % ABJADPATH)", "buggy_source_code": "def _write_abjad_include(outfile):\n    if ABJADPATH is not None:\n        abjad_include = os.path.join(ABJADPATH, 'scm', 'abjad.scm')\n        outfile.write('\\\\include \"%s\"\\n' % abjad_include)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def config_get_cache_directory():\n    return os.path.expanduser(config_get('Cache.Directory'))", "buggy_source_code": "def config_get_cache_directory():\n    cd = config_get('Cache.Directory')\n    if cd:\n        return os.path.expanduser(cd)\n    return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def snapshot(self):\n    self.scales_states = {k: [s.get_state() for s in self.scales[k]] for k in self.scales}", "buggy_source_code": "def snapshot(self):\n    self.scales_states = {k: [s.get_state()[0] for s in self.scales[k]] for k in self.scales}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def solution_fitness(self):\n    return None", "buggy_source_code": "def solution_fitness(self):\n    return 0", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, stream):\n    self.stream = stream\n    self.encoding = self.stream.encoding", "buggy_source_code": "def __init__(self, stream):\n    self.stream = stream\n    self.errors = self.stream.errors\n    self.encoding = self.stream.encoding", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def mock_send_out_email(self, recipient, message, cur, con):\n    self.email_queue.put(dict({'recipient': recipient, 'message': message}))", "buggy_source_code": "def mock_send_out_email(self, recipient, message, msg_type, cur, con):\n    self.email_queue.put(dict({'recipient': recipient, 'message': message}))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse(self, input):\n    self.parser.parse(input, debug=True)", "buggy_source_code": "def parse(self, input, lexer):\n    self.parser.parse(input, lexer)\n    return self.ast", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def p_error(self, p):\n    print(p)", "buggy_source_code": "def p_error(self, p):\n    self.ast.register_error(p, 'Critical grammar error: {}'.format(p))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def path_mappings_from_dict(d):\n    return [join_path_mapping(v) for v in d.items()]", "buggy_source_code": "def path_mappings_from_dict(d):\n    return [join_path_mapping(v) for v in sorted(d.items())]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def on_finish(self):\n    try:\n        self.session.commit()\n    finally:\n        self.session.close()", "buggy_source_code": "def on_finish(self):\n    try:\n        self.session.commit()\n    finally:\n        self.session.close()\n    return super(SessionMixin, self).on_finish()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, url, socket=None):\n    super(TcpTransport, self).__init__()\n    self.url = url\n    self.socket = socket", "buggy_source_code": "def __init__(self, url, socket=None):\n    super(TcpTransport, self).__init__()\n    self.url = url\n    self.socket = socket\n    self._cleanup_thread = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init_hidden(self):\n    hidden = torch.zeros(1, 1, self.hidden_dims)\n    return Variable(hidden)", "buggy_source_code": "def init_hidden(self):\n    hidden = torch.zeros(1, 1, self.hidden_dims)\n    hidden = Variable(hidden)\n    if USE_CUDA:\n        return hidden.cuda()\n    return hidden", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def init_hidden(self):\n    hidden = Variable(torch.zeros(1, 1, self.hidden_dims))\n    return hidden", "buggy_source_code": "def init_hidden(self):\n    hidden = Variable(torch.zeros(1, 1, self.hidden_dims))\n    if USE_CUDA:\n        return hidden.cuda()\n    return hidden", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, term_server):\n    self.term_server = term_server", "buggy_source_code": "def __init__(self, term_server):\n    self.term_server = term_server\n    self.resources = self._get_sources()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def write(self, s):\n    self.tmpfp.write(s)\n    self.offset = self.fpsize + self.tmpfp.tell()", "buggy_source_code": "def write(self, s):\n    self.tmpfp.seek(0, 2)\n    self.tmpfp.write(s)\n    self.offset = self.fpsize + self.tmpfp.tell()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'IndexedSlices(indices=%s, values=%s%s)' % (self._indices, self._values, ', dense_shape=%s' % self._dense_shape if self._dense_shape is not None else '')", "buggy_source_code": "def __str__(self):\n    return 'IndexedSlices(indices=%s, values=%s%s)' % (self._indices, self._values, ', dense_shape=%s' % (self._dense_shape,) if self._dense_shape is not None else '')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def set_lasterror_options(self, **kwargs):\n    for (key, value) in kwargs.iteritems():\n        self.__set_safe_option(key, value)", "buggy_source_code": "def set_lasterror_options(self, **kwargs):\n    for (key, value) in kwargs.iteritems():\n        self.__set_safe_option(key, value, check=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@then('we get no email')\ndef step_we_get_no_email(context):\n    assert len(context.outbox) == 0", "buggy_source_code": "@then('we get {count} emails')\ndef step_we_get_no_email(context, count):\n    assert len(context.outbox) == int(count)", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def store_in_dynamo(signup_data):\n    table = ddb.Table(application.config['STARTUP_SIGNUP_TABLE'])\n    table.put_item(Item=signup_data)", "buggy_source_code": "def store_in_dynamo(signup_data):\n    table = ddb.Table(application.config['STARTUP_SIGNUP_TABLE'])\n    table.put_item(Item=signup_data)\n    print('PutItem succeeded:')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_pywt_wavelet(wavelet):\n    wavelet = pywt_wavelet(wavelet)\n    assert isinstance(wavelet, pywt.Wavelet)\n    wavelet = pywt_wavelet(wavelet)\n    assert isinstance(wavelet, pywt.Wavelet)", "buggy_source_code": "def test_pywt_wavelet(wavelet):\n    wavelet = pywt_wavelet(wavelet)\n    assert isinstance(wavelet, pywt.Wavelet)\n    wavelet2 = pywt_wavelet(wavelet)\n    assert isinstance(wavelet2, pywt.Wavelet)\n    assert wavelet2 is wavelet", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_otherexception(self):\n    params = {'plateifu': '84.85-1901'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: Unknown exception'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_otherexception(self):\n    params = {'plateifu': '84.85-1901', 'mode': 'local'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: Unknown exception'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_noresultsfound(self):\n    params = {'plateifu': '8485-0923'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: No Results Found'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_noresultsfound(self):\n    params = {'plateifu': '8485-0923', 'mode': 'local'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: No Results Found'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodrpver(self):\n    config.drpver = None\n    params = {'mangaid': self.mangaid}\n    errMsg = 'drpver not set in config'\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodrpver(self):\n    config.drpver = None\n    params = {'mangaid': self.mangaid, 'mode': 'local'}\n    errMsg = 'drpver not set in config'\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodbconnected(self):\n    config.db = None\n    params = {'mangaid': self.mangaid}\n    errMsg = 'No db connected'\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodbconnected(self):\n    config.db = None\n    params = {'mangaid': self.mangaid, 'mode': 'local'}\n    errMsg = 'No db connected'\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def error_handling(self, res):\n    if res.json().get('error_code'):\n        error = res.json()\n        raise exceptions.KeenApiError(error)", "buggy_source_code": "def error_handling(self, res):\n    if res.status_code / 100 != 2:\n        error = res.json()\n        raise exceptions.KeenApiError(error)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_undo_arabic_pane(self, arabic):\n    pass", "buggy_source_code": "def test_undo_arabic_pane(self, arabic, nammu):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_undo_split_secondary_pane(self, simpletext):\n    pass", "buggy_source_code": "def test_undo_split_secondary_pane(self, simpletext, nammu):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_edit_compound(self):\n    controller = self.nammu.atfAreaController\n    controller.edit_area.setText('a')\n    listener = controller.view.edit_listener\n    assert 'edits: []' not in controller.undo_manager.toString()", "buggy_source_code": "def test_edit_compound(self, nammu):\n    controller = nammu.atfAreaController\n    controller.edit_area.setText('a')\n    listener = controller.view.edit_listener\n    assert 'edits: []' not in controller.undo_manager.toString()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_undo_split_primary_pane(self, simpletext):\n    pass", "buggy_source_code": "def test_undo_split_primary_pane(self, simpletext, nammu):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_undo_arabic_primary(self, arabic):\n    pass", "buggy_source_code": "def test_undo_arabic_primary(self, arabic, nammu):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_redo_empty_pane(self):\n    controller = self.nammu.atfAreaController\n    controller.clearAtfArea()\n    controller.redo()\n    assert 'edits: []' in controller.undo_manager.toString()", "buggy_source_code": "def test_redo_empty_pane(self, nammu):\n    controller = nammu.atfAreaController\n    controller.clearAtfArea()\n    controller.redo()\n    assert 'edits: []' in controller.undo_manager.toString()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.indent_level = 0\n    self.indent_stack = []", "buggy_source_code": "def __init__(self):\n    self.indent_level = 0\n    self.indent_stack = []\n    if DEBUG:\n        self._last_unindent_stack = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def websocket_off():\n    try:\n        device.close()\n    except:\n        print('[WARNING]: Device not closed properly')\n    os._exit(1)", "buggy_source_code": "def websocket_off():\n    try:\n        device.close()\n    except:\n        print('[' + name + '] ' + '[WARN]: Device not closed properly')\n    os._exit(1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def set_current_step(t, net_id=0):\n    Global.set_current_step(t, self.id)", "buggy_source_code": "def set_current_step(self, t, net_id=0):\n    Global.set_current_step(t, self.id)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_time(net_id=0):\n    return Global.get_time(self.id)", "buggy_source_code": "def get_time(self, net_id=0):\n    return Global.get_time(self.id)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_current_step(net_id=0):\n    return Global.get_current_step(self.id)", "buggy_source_code": "def get_current_step(self, net_id=0):\n    return Global.get_current_step(self.id)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reset(populations=True, projections=False, synapses=False):\n    Global.reset(populations, projections, synapses, self.id)", "buggy_source_code": "def reset(self, populations=True, projections=False, synapses=False):\n    Global.reset(populations, projections, synapses, self.id)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_time(t, net_id=0):\n    Global.set_time(t, self.id)", "buggy_source_code": "def set_time(self, t, net_id=0):\n    Global.set_time(t, self.id)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def log(self, message):\n    self.import_log += '%s\\n' % message\n    self.modified_on = timezone.now()\n    self.save()", "buggy_source_code": "def log(self, message):\n    self.import_log += '%s\\n' % message\n    self.modified_on = timezone.now()\n    self.save(update_fields=['import_log', 'modified_on'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getRpcTypesHeader():\n    return '{doNotModifyHeader}\\n#ifndef {prefix}TYPES_H\\n#define {prefix}TYPES_H\\n\\n#include <stddef.h>\\n\\n{rpc_enum}\\ntypedef struct {{\\n\\t{prefix}RESULT result;\\n\\tsize_t size;\\n}} {prefix}SIZE_RESULT;\\n\\ntypedef enum {{\\n    {prefix}mutex_parsing_complete,\\n    {prefix}mutex_caller,\\n    {prefix}mutex_in_caller,\\n    {prefix}mutex_answer,\\n    {prefix}MUTEX_COUNT\\n}} {prefix}mutex_id;\\n#define {prefix}number_of_mutexes 4\\n\\n#endif /* {prefix}TYPES_H */\\n'.format(doNotModifyHeader=doNotModifyHeader, rpc_enum=get_rpc_enum(), prefix=prefix)", "buggy_source_code": "def getRpcTypesHeader():\n    files = getFilePaths()\n    return '{doNotModifyHeader}\\n#ifndef RPC_TYPES_H\\n#define RPC_TYPES_H\\n\\n#include <stddef.h>\\n\\n{extrainclude}\\n\\n{rpc_enum}\\ntypedef struct {{\\n\\tRPC_RESULT result;\\n\\tsize_t size;\\n}} RPC_SIZE_RESULT;\\n\\ntypedef enum {{\\n    RPC_mutex_parsing_complete,\\n    RPC_mutex_caller,\\n    RPC_mutex_in_caller,\\n    RPC_mutex_answer,\\n    RPC_MUTEX_COUNT\\n}} RPC_mutex_id;\\n#define RPC_number_of_mutexes 4\\n\\n#endif /* RPC_TYPES_H */\\n'.format(doNotModifyHeader=doNotModifyHeader, rpc_enum=get_rpc_enum(), prefix=prefix, extrainclude=files['EXTRA_INCLUDE_INTO_CLIENT_TYPES_H'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    super(FiwareRegionsBaseTests, cls).setUpClass()\n    cls.region_conf = cls.conf[PROPERTIES_CONFIG_REGION]\n    cls.glance_conf = cls.conf[PROPERTIES_CONFIG_GLANCE]", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    super(FiwareRegionsBaseTests, cls).setUpClass()\n    cls.region_conf = cls.conf[PROPERTIES_CONFIG_REGION]\n    cls.glance_conf = cls.conf[PROPERTIES_CONFIG_TEST][PROPERTIES_CONFIG_GLANCE]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_temp_file_path():\n    f = tempfile.NamedTemporaryFile(delete=False)\n    temp_file_name = f.name\n    f.close()\n    return temp_file_name", "buggy_source_code": "def get_temp_file_path(prefix=None):\n    f = tempfile.NamedTemporaryFile(delete=False, prefix=prefix)\n    temp_file_name = f.name\n    f.close()\n    return temp_file_name", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, filename):\n    self.filename = filename\n    self.tgz = tarfile.TarFile.open(filename, self.mode)\n    self.info = pkginfo.sdist(filename)", "buggy_source_code": "def __init__(self, filename):\n    self.filename = filename\n    self.tgz = tarfile.TarFile.open(filename, self.mode)\n    self.info = pkginfo.sdist.SDist(filename)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def toggle_debug():\n    global _debug\n    _debug = bool(_debug ^ 1)", "buggy_source_code": "def toggle_debug():\n    global _debug\n    _debug = bool(_debug ^ 1)\n    if _debug:\n        logger.setLevel(logging.DEBUG)\n    else:\n        logger.setLevel(logging.INFO)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.log = logging.getLogger(__name__)\n    self.token = None\n    self.address = None", "buggy_source_code": "def __init__(self):\n    self.log = logging.getLogger(__name__)\n    self.token = None\n    self.address = None\n    self.file_prefix = ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dependencies_for_myprogram():\n    from scipy.sparse.csgraph import _validation", "buggy_source_code": "def dependencies_for_myprogram():\n    from scipy.sparse.csgraph import _validation\n    import PyQt4.QtSvg", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unknown_error(message):\n    return error(500, 'internal server error', message)", "buggy_source_code": "def unknown_error(message):\n    logger.error(message)\n    return error(500, 'internal server error', message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def samplelearn(self, samplesize):\n    data = self.sample_entries[:samplesize]\n    self.learn(data)", "buggy_source_code": "def samplelearn(self, samplesize):\n    shuffle(self.sample_entries)\n    data = self.sample_entries[:samplesize]\n    self.learn(data)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def runTest(self):\n    self.compile(self.directory, self.module, self.workdir)", "buggy_source_code": "def runTest(self):\n    self.compile(self.directory, self.module, self.workdir, self.directory, self.expect_errors)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def download_naips(self):\n    self.configure_s3cmd()\n    naip_filenames = self.list_naips()\n    shuffle(naip_filenames)\n    naip_local_paths = self.download_from_s3()\n    return naip_local_paths", "buggy_source_code": "def download_naips(self):\n    self.configure_s3cmd()\n    naip_filenames = self.list_naips()\n    shuffle(naip_filenames)\n    naip_local_paths = self.download_from_s3(naip_filenames)\n    return naip_local_paths", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def startup(self):\n    self.connection = boto.ses.connect_to_region('us-east-1', aws_access_key_id=self.id, aws_secret_access_key=self.key)", "buggy_source_code": "def startup(self):\n    self.connection = boto.ses.connect_to_region(self.region, aws_access_key_id=self.id, aws_secret_access_key=self.key)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def pop_region(self, start, end, inclusive=False):\n    self.get_region(start, end, inclusive, _pop=True)", "buggy_source_code": "def pop_region(self, start, end, inclusive=False):\n    return self.get_region(start, end, inclusive, _pop=True)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _request_key(self, request):\n    return request_fingerprint(request)", "buggy_source_code": "def _request_key(self, request):\n    return to_bytes(request_fingerprint(request))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def open_browser():\n    world.browser = Browser('phantomjs')", "buggy_source_code": "def open_browser():\n    world.browser = Browser('phantomjs')\n    world.browser.driver.maximize_window()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def experiment_new(self):\n    self.experiment_set(elaps.Experiment())\n    self.on_call_new()\n    self.log('Reset Experiment')", "buggy_source_code": "def experiment_new(self):\n    self.experiment_set(elaps.Experiment())\n    self.experiment.calls.append([''])\n    self.log('Reset Experiment')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def array_2d_to_str(array_2d):\n    output_str = ''\n    for line in array_2d:\n        output_str += ''.join([str(i) for i in line]) + '\\n'\n    return output_str", "buggy_source_code": "def array_2d_to_str(array_2d, delim=''):\n    output_str = ''\n    for line in array_2d:\n        output_str += delim.join([str(i) for i in line]) + '\\n'\n    return output_str", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.github = GitHub()", "buggy_source_code": "def __init__(self):\n    if settings.GITHUB_USERNAME:\n        self.github = login(settings.GITHUB_USERNAME, settings.GITHUB_PASSWORD)\n    else:\n        self.github = GitHub()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef _format_x_ticks_as_dates(plot):\n    return plot", "buggy_source_code": "@staticmethod\ndef _format_x_ticks_as_dates(plot):\n    plot.xaxis.set_major_formatter(mpl.dates.DateFormatter('%Y-%m-%d'))\n    plot.get_xaxis().get_label().set_visible(False)\n    return plot", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send_message(self, message):\n    pass", "buggy_source_code": "def send_message(self, message):\n    self.webSocketRouter.broadcast(PrinterUpdateConnection.connections, message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef _get_stddevs(cls, coeffs):\n    return coeffs['sigma']", "buggy_source_code": "def _get_stddevs(self, coeffs, stddev_types):\n    for stddev_type in stddev_types:\n        assert stddev_type in self.DEFINED_FOR_STANDARD_DEVIATION_TYPES\n    log_stddev = coeffs['sigma']\n    ln_stddev = log_stddev * np.log(10)\n    return ln_stddev", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def make_item_price(item, price_list_name, item_price):\n    frappe.get_doc({'doctype': 'Item Price', 'price_list': price_list_name, 'item_code': item, 'price_list_rate': item_price}).insert(ignore_permissions=True)", "buggy_source_code": "def make_item_price(item, price_list_name, item_price):\n    frappe.get_doc({'doctype': 'Item Price', 'price_list': price_list_name, 'item_code': item, 'price_list_rate': item_price}).insert(ignore_permissions=True, ignore_mandatory=True)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_dataloader(self, max_len=-1):\n    return data.DataLoader(self, collate_fn=lambda batch: self.collate_fn(batch, max_len))", "buggy_source_code": "def get_dataloader(self, max_len=-1, batch_size=1):\n    return data.DataLoader(self, collate_fn=lambda batch: self.collate_fn(batch, max_len), batch_size=batch_size, shuffle=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def linesToData(self):\n    self.data = self.doLinesToData(self.lines)", "buggy_source_code": "def linesToData(self):\n    if self.isBinary:\n        pass\n    else:\n        self.data = self.doLinesToData(self.lines)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dataToLines(self):\n    self.lines = self.doDataToLines(self.data)", "buggy_source_code": "def dataToLines(self):\n    if self.isBinary:\n        self.lines = self.doBinaryDataToLines(self.data)\n    else:\n        self.lines = self.doDataToLines(self.data)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _module_has_routes(self, plugin, plugin_type):\n    plugin_components = self._get_modules_in_path('plugins/{}/{}'.format(plugin_type, plugin))\n    return ROUTES_MODULE_NAME in plugin_components", "buggy_source_code": "def _module_has_routes(self, plugin, plugin_type):\n    plugin_components = self._get_modules_in_path('{}/plugins/{}/{}'.format(get_src_dir(), plugin_type, plugin))\n    return ROUTES_MODULE_NAME in plugin_components", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def extract_uid(self, data):\n    return str(data.get('create_time'))", "buggy_source_code": "def extract_uid(self, data):\n    if 'sub' not in data:\n        raise ProviderException('Globus OAuth error', data)\n    return str(data['sub'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, times=None):\n    if times is not None:\n        self.times = times\n    else:\n        self.times = self.DEFAULT_TIMES", "buggy_source_code": "def __init__(self, times=None, *args, **kwargs):\n    if times is not None:\n        self.times = times\n    else:\n        self.times = self.DEFAULT_TIMES", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef students_count(self):\n    return -1", "buggy_source_code": "@property\ndef students_count(self):\n    return Order.objects.filter(live_class=self, status=Order.PAID).count()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_cover_data(self, cover_url):\n    try:\n        return common.get_url_contents(cover_url, self.user_agent)\n    except IOError:\n        return None", "buggy_source_code": "def get_cover_data(self, cover_url):\n    if not cover_url:\n        return None\n    try:\n        return common.get_url_contents(cover_url, self.user_agent)\n    except IOError:\n        return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_list_view(self):\n    list_view = self.builder.generate_list_view()\n    self.assertEqual(list_view.__name__, 'TestmodelListView')\n    self.assertEqual(list_view.table_pagination, self.builder.tables2_pagination)", "buggy_source_code": "def test_list_view(self):\n    list_view = self.builder.generate_list_view()\n    self.assertEqual(list_view.__name__, 'TestmodelListView')\n    self.assertEqual(list_view.table_pagination, {'per_page': self.builder.tables2_pagination})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, form_list, initial=None):\n    self.form_list = form_list[:]\n    self.initial = initial or {}\n    extra_context = {}\n    self.step = 0", "buggy_source_code": "def __init__(self, form_list, initial=None):\n    self.form_list = form_list[:]\n    self.initial = initial or {}\n    self.extra_context = {}\n    self.step = 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _as_graph_element(self):\n    return self.out_tensor._as_graph_element()", "buggy_source_code": "def _as_graph_element(self):\n    if '_as_graph_element' in dir(self.out_tensor):\n        return self.out_tensor._as_graph_element()\n    else:\n        return self.out_tensor", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@validate('tree')\ndef valid_field_in_tree(arch):\n    return all((child.tag in ('field', 'button') for child in arch.xpath('/tree/*')))", "buggy_source_code": "@validate('tree')\ndef valid_field_in_tree(arch):\n    return all((child.tag in ('field', 'button', 'renamed_field') for child in arch.xpath('/tree/*')))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_exception__invalid_username():\n    with pytest.raises(exceptions.InvalidUsernameError):\n        malaffinity.MALAffinity('ALDDJFfnjegenfmekfmejfefep9re9444')", "buggy_source_code": "def test_exception__invalid_username():\n    time.sleep(const.WAIT_BETWEEN_REQUESTS)\n    with pytest.raises(exceptions.InvalidUsernameError):\n        malaffinity.MALAffinity('ALDDJFfnjegenfmekfmejfefep9re9444')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clear(self):\n    (w, h) = self.sheet.size\n    self.used_rects = []\n    self.free_rects = [Rect(w, h)]", "buggy_source_code": "def clear(self):\n    (w, h) = self.sheet.size\n    self.used_rects = []\n    self.free_rects = [Rect(w, h)]\n    self.debug_image_count = 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.tb = gr.top_block()", "buggy_source_code": "def setUp(self):\n    self.tb = gr.top_block()\n    random.seed(0)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def Create(name):\n    obj = FreeCAD.ActiveDocument.addObject('Path::FeaturePython', name)\n    proxy = PathAdaptive(obj)\n    return obj", "buggy_source_code": "def Create(name, obj=None):\n    if obj is None:\n        obj = FreeCAD.ActiveDocument.addObject('Path::FeaturePython', name)\n    proxy = PathAdaptive(obj, name)\n    return obj", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_10_largest_items_size(self):\n    return sum((x.size for x in sorted(self._data, key=lambda x: x.size)[:10]))", "buggy_source_code": "def get_10_largest_items_size(self):\n    return sum((x.size for x in sorted(self._data, key=lambda x: x.size, reverse=True)[:10]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef categories(self):\n    return self._categories", "buggy_source_code": "@property\ndef categories(self):\n    try:\n        return self._categories\n    except AttributeError as e:\n        raise IOError('Load passage %s from pickle saved with UCCA<1.1. Please load from XML instead.' % self.root.ID) from e", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __c(x):\n    return unichr(x)", "buggy_source_code": "def __c(x):\n    return six.unichr(x)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, application, request, dispatcher=None, stream=None):\n    super(_ShortLivedHandler, self).__init__(application, request)\n    self.dispatcher = dispatcher", "buggy_source_code": "def __init__(self, application, request, dispatcher=None, stream=None):\n    super(_ShortLivedHandler, self).__init__(application, request)\n    self.dispatcher = dispatcher\n    self.stream = stream", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    gc.disable()", "buggy_source_code": "def setUp(self):\n    gc.collect()\n    locks = self.retrieve_lock_instances_from_gc()\n    assert 0 == len(locks)\n    gc.disable()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    close(self.fp)", "buggy_source_code": "def close(self):\n    self.fp.close()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef yieldThread():\n    time.sleep(0)", "buggy_source_code": "@staticmethod\ndef yieldThread() -> None:\n    time.sleep(0)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def start(self):\n    JobQueue.getInstance().add(self)", "buggy_source_code": "def start(self) -> None:\n    JobQueue.getInstance().add(self)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def getResult(self):\n    return self._result", "buggy_source_code": "def getResult(self) -> Any:\n    return self._result", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def migrate():\n    manage('migrate')", "buggy_source_code": "def migrate():\n    manage('migrate')\n    manage('loaddata super_archives/fixture/initial_data.json')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __new__(cls, *args, **kwargs):\n    super().__new__(cls)", "buggy_source_code": "def __new__(cls, *args, **kwargs):\n    instance = super().__new__(cls)\n    instance.__init__(*args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef timezone(cls):\n    return cls.random_element(cls.countries)['timezones'].pop(0)", "buggy_source_code": "@classmethod\ndef timezone(cls):\n    return random.choice(cls.random_element(cls.countries)['timezones'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def volume_group(self):\n    return WVolumeGroup(self.volume_group_name())", "buggy_source_code": "def volume_group(self):\n    return WVolumeGroup(self.volume_group_name(), sudo=self.lvm_command().sudo())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _euclidean_distance(self, value):\n    return sqrt(self._fluxes_a[value] - self._fluxes_b[value])", "buggy_source_code": "def _euclidean_distance(self, value):\n    return sqrt(self._fluxes_a[value] ** 2 - self._fluxes_b[value] ** 2)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_user_password(self, username, password):\n    pass", "buggy_source_code": "def set_user_password(self, user, password, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_user(self, username):\n    pass", "buggy_source_code": "def delete_user(self, user, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_group(self, groupname):\n    pass", "buggy_source_code": "def delete_group(self, group, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def rename_user(self, username, new_username):\n    pass", "buggy_source_code": "def rename_user(self, user, new_name, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def plateSearch(self):\n    self.findContour()\n    self.cropPlate()\n    self.showResults()\n    return True", "buggy_source_code": "def plateSearch(self):\n    self.findContour()\n    self.cropPlate()\n    if self.plate_image is not None:\n        self.readPlateNumber()\n    self.showResults()\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/index')\ndef index():\n    return 'Hello World!'", "buggy_source_code": "@app.route('/index')\ndef index():\n    return render_template('index.html')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, name=None, data=None):\n    super(State, self).__init__()\n    self._name = name\n    self._data = data", "buggy_source_code": "def __init__(self, name=str(), data=None):\n    super(State, self).__init__()\n    self._name = name\n    self._data = data", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.mark.django_db\ndef test_health_check(client: Client) -> None:\n    response = client.get('/health/')\n    assert response.status_code == 200", "buggy_source_code": "@pytest.mark.django_db()\ndef test_health_check(client: Client) -> None:\n    response = client.get('/health/')\n    assert response.status_code == 200", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def fit(X, y):\n    _ = [clf.fit(X, y) for clf in self.__clfs__]", "buggy_source_code": "def fit(self, X, y):\n    _ = [clf.fit(X, y) for clf in self.__clfs__]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_current_key(self):\n    pass", "buggy_source_code": "def update_current_key(self):\n    self._listwindow.select(self.controller.get_current_key_index())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _fire_item_clicked(self, list_item):\n    self.emit('item-clicked', list_item)", "buggy_source_code": "def _fire_item_clicked(self, listview, list_item):\n    self.emit('item-clicked', list_item)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_expiry(self, key):\n    return self.redis_instance.ttl(key) or 0", "buggy_source_code": "def get_expiry(self, key):\n    return (self.redis_instance.ttl(key) or 0) + time.time()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def change_output_resolution(self):\n    raise NotImplementedError('This method must be implemented.')", "buggy_source_code": "def change_output_resolution(self, width, height):\n    raise NotImplementedError('This method must be implemented.')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def changed_10026(self, fields):\n    self.changed_9614(fields)\n    fields.insert_field(BitMaskField('flags_2'), before='buy_price')", "buggy_source_code": "def changed_10026(self, fields):\n    self.changed_9614(fields)\n    fields.insert_field(BitMaskField('flags_2', flags=self.FLAGS_2), before='buy_price')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getTypedOutgoingRelations(self):\n    d = DefaultDict(default=[])\n    for r in self.outgoingRelations:\n        d[r.id].append(r)\n    return d", "buggy_source_code": "def getTypedOutgoingRelations(self):\n    d = DefaultDict(default=[])\n    for r in self.outgoingRelations:\n        d[r.type.id].append(r)\n    return d", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def getTypedIncomingRelations(self):\n    d = DefaultDict(default=[])\n    for r in self.incomingRelations:\n        d[r.id].append(r)\n    return d", "buggy_source_code": "def getTypedIncomingRelations(self):\n    d = DefaultDict(default=[])\n    for r in self.incomingRelations:\n        d[r.type.id].append(r)\n    return d", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get(self, request, *args, **kwargs):\n    return HttpResponse('{\"last_update\":\"%s\"}' % str(cache.get('last_summarydb_update')), 'application/javascript')", "buggy_source_code": "def get(self, request, *args, **kwargs):\n    return HttpResponse('{\"last_update\":\"%s\"}' % str(cache.get('last_summarydb_update').isoformat()), 'application/javascript')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def to_file(self, filename):\n    self.cbuffer.tofile(filename)", "buggy_source_code": "def to_file(self, filename):\n    self.cbuffer.tofile(filename)\n    return self", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    self.make(kwargs)", "buggy_source_code": "def __init__(self, **kwargs):\n    self.make(**kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def joined(self, channel):\n    try:\n        self.userdata[channel]\n    except KeyError:\n        self.userdata[channel] = {}", "buggy_source_code": "def joined(self, channel):\n    try:\n        self.userdata[0][channel]\n    except KeyError:\n        self.userdata[0][channel] = {}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _is_db_connection_error(args):\n    conn_err_codes = ('2002', '2003', '2006')\n    for err_code in conn_err_codes:\n        if args.find(err_code) != -1:\n            return True\n    return False", "buggy_source_code": "def _is_db_connection_error(args):\n    conn_err_codes = ('2002', '2003', '2006', '-30081')\n    for err_code in conn_err_codes:\n        if args.find(err_code) != -1:\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    self.env = {'GIT_EDITOR': prefs.editor(), 'GIT_SEQUENCE_EDITOR': sequence_editor()}\n    self.env.update(kwargs)", "buggy_source_code": "def __init__(self, **kwargs):\n    self.env = {'GIT_EDITOR': prefs.editor(), 'GIT_SEQUENCE_EDITOR': sequence_editor(), 'GIT_XBASE_CANCEL_ACTION': 'save'}\n    self.env.update(kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_ID():\n    return ''.join((random.choice(string.ascii_letters) for i in range(16)))", "buggy_source_code": "def create_ID(self, email):\n    return ''.join((random.choice(string.ascii_letters) for i in range(16))) + email", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_clip_planes(self):\n    self.unset_clip_planes()\n    self.set_clip_planes()", "buggy_source_code": "def update_clip_planes(self):\n    if self.gl_active > 0:\n        self.unset_clip_planes()\n        self.set_clip_planes()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_background_colors():\n    return self.background_colors.insert(0, '#d9d2e9')", "buggy_source_code": "def get_background_colors(self):\n    return self.background_colors.insert(0, '#d9d2e9')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def setTimeout(v):\n    self.timeout = v\n    self.loadReader()\n    return", "buggy_source_code": "def setTimeout(self, v):\n    self.timeout = v\n    self.loadReader()\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setMaxCount(v):\n    self.max_count = v\n    self.loadReader()\n    return", "buggy_source_code": "def setMaxCount(self, v):\n    self.max_count = v\n    self.loadReader()\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_genlims_connection():\n    assert 'tg3' in genlims.db.name\n    if os.environ.get('DB_PARAM_FILE') != 'default.ini':\n        assert genlims.db.collection_names()", "buggy_source_code": "def test_genlims_connection():\n    db = genlims.connect()\n    assert 'tg3' in db.name\n    if os.environ.get('DB_PARAM_FILE') != 'default.ini':\n        assert db.collection_names()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run(self):\n    reactor.run(installSignalHandlers=False)", "buggy_source_code": "def run(self):\n    try:\n        reactor.run(installSignalHandlers=False)\n    except ReactorAlreadyRunning:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def to_widget(self, x, y):\n    (x, y) = self.parent.to_widget(x, y)\n    return self.to_local(x, y)", "buggy_source_code": "def to_widget(self, x, y):\n    if self.parent:\n        (x, y) = self.parent.to_widget(x, y)\n    return self.to_local(x, y)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def test_reprcompare_notin():\n    detail = plugin.pytest_assertrepr_compare('not in', 'foo', 'aaafoobbb')[1:]\n    assert '- aaabbb' in detail\n    assert '+ aaafoobbb' in detail", "buggy_source_code": "def test_reprcompare_notin():\n    detail = plugin.pytest_assertrepr_compare('not in', 'foo', 'aaafoobbb')[1:]\n    assert detail == [\"'foo' is contained here:\", '  aaafoobbb', '?    +++']", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _set_changed(self):\n    if not self.modifiable:\n        raise NonRecoverableError('Cannot modify runtime properties of relationship node instances')\n    self.dirty = True", "buggy_source_code": "def _set_changed(self):\n    if hasattr(self, 'modifiable') and (not self.modifiable):\n        raise NonRecoverableError('Cannot modify runtime properties of relationship node instances')\n    self.dirty = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _bombs_process(self):\n    for p in self._sticky_actions:\n        for b in p._bombs_live[:]:\n            b.tick()", "buggy_source_code": "def _bombs_process(self):\n    for p in self._sticky_actions:\n        for b in p._bombs_live[:]:\n            if b in p._bombs_live:\n                b.tick()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def TareForceTorqueSensor(hand):\n    if not hand.ft_simulated:\n        hand.ft_sensor.SendCommand('Tare')\n        sleep(2)", "buggy_source_code": "def TareForceTorqueSensor(hand):\n    if not hand.ft_simulated:\n        hand.ft_sensor.SendCommand('Tare')\n        time.sleep(2)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_404_page(self):\n    resp = self.app.get('/;jsdafjahs;dfjas;')\n    self.assertTrue('class=\"page-not-found\"' in resp.body)", "buggy_source_code": "def test_404_page(self):\n    resp = self.app.get('/;jsdafjahs;dfjas;', expect_errors=True)\n    self.assertTrue('class=\"page-not-found\"' in resp.body)\n    self.assertEqual(resp.status_int, 404)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@task\ndef host_type():\n    run('uname -a')", "buggy_source_code": "@task\ndef host_type(ctx):\n    ctx.run('uname -a')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@task\ndef clean_update():\n    run('git fetch --all && git reset --hard origin/master')", "buggy_source_code": "@task\ndef clean_update(ctx):\n    ctx.run('git fetch --all && git reset --hard origin/master')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@task\ndef createuser():\n    run('createuser {db_user} -rd -U postgres'.format(**env))", "buggy_source_code": "@task\ndef createuser(ctx):\n    ctx.run('createuser {db_user} -rd -U postgres'.format(**env))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@task\ndef createdb():\n    run('createdb {db_name} -U {db_user}'.format(**env))", "buggy_source_code": "@task\ndef createdb(ctx):\n    ctx.run('createdb {db_name} -U {db_user}'.format(**env))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@task(aliases=['idb', 'init_db'])\ndef initialize_database_schema():\n    run_chain('python manage.py makemigrations', 'python manage.py migrate')", "buggy_source_code": "@task(aliases=['idb', 'init_db'])\ndef initialize_database_schema(ctx):\n    run_chain('python manage.py makemigrations', 'python manage.py migrate')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@task(aliases=['ri'])\ndef rebuild_index(noinput=False):\n    cmd = 'python manage.py rebuild_index'\n    if noinput:\n        cmd += ' --noinput'\n    run(cmd)", "buggy_source_code": "@task(aliases=['ri'])\ndef rebuild_index(ctx, noinput=False):\n    cmd = 'python manage.py rebuild_index'\n    if noinput:\n        cmd += ' --noinput'\n    ctx.run(cmd)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@task\ndef server(ip='0.0.0.0', port=8000):\n    dj('runserver {ip}:{port}'.format(ip=ip, port=port), capture=False)", "buggy_source_code": "@task\ndef server(ctx, ip='0.0.0.0', port=8000):\n    dj('runserver {ip}:{port}'.format(ip=ip, port=port), capture=False)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def splitPrefix(self, name):\n    if ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "buggy_source_code": "def splitPrefix(self, name):\n    if name is not None and ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    Gtk.Menu.__init__(self)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    Gtk.Menu.__init__(self, *args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, args):\n    self.debug = args.debug\n    self.args = args", "buggy_source_code": "def __init__(self, args):\n    self.debug = args.debug\n    self.args = args\n    if not hasattr(self.args, 'jtag'):\n        self.args.jtag = False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read_all(self):\n    return [h.read_all() for h in self.HDUs]", "buggy_source_code": "def read_all(self):\n    return [h.read_all() for h in self.HDUs.values()]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def show_user(self):\n    self.juju(self._show_user, ('--format', 'yaml'))", "buggy_source_code": "def show_user(self):\n    self.juju(self._show_user, ('--format', 'yaml'), include_e=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef qref(self):\n    if self._qref is None:\n        raise ValueError('qref is not computed yet.')\n    return self._return_interp_variables(self._qref)", "buggy_source_code": "@property\ndef qref(self):\n    if self._qref is None:\n        raise ValueError('qref is not computed yet.')\n    return self._return_interp_variables(variable=self._qref, interp_axis=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef meridional_heat_flux(self):\n    if self._meridional_heat_flux is None:\n        raise ValueError('meridional_heat_flux is not computed yet.')\n    return self._return_interp_variables(self._meridional_heat_flux)", "buggy_source_code": "@property\ndef meridional_heat_flux(self):\n    if self._meridional_heat_flux is None:\n        raise ValueError('meridional_heat_flux is not computed yet.')\n    return self._return_interp_variables(variable=self._meridional_heat_flux, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef u_baro(self):\n    if self._u_baro is None:\n        raise ValueError('u_baro is not computed yet.')\n    return self._return_interp_variables(self._u_baro)", "buggy_source_code": "@property\ndef u_baro(self):\n    if self._u_baro is None:\n        raise ValueError('u_baro is not computed yet.')\n    return self._return_interp_variables(variable=self._u_baro, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef adv_flux_f1(self):\n    if self._adv_flux_f1 is None:\n        raise ValueError('adv_flux_f1 is not computed yet.')\n    return self._return_interp_variables(self._adv_flux_f1)", "buggy_source_code": "@property\ndef adv_flux_f1(self):\n    if self._adv_flux_f1 is None:\n        raise ValueError('adv_flux_f1 is not computed yet.')\n    return self._return_interp_variables(variable=self._adv_flux_f1, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef adv_flux_f3(self):\n    if self._adv_flux_f3 is None:\n        raise ValueError('adv_flux_f3 is not computed yet.')\n    return self._return_interp_variables(self._adv_flux_f3)", "buggy_source_code": "@property\ndef adv_flux_f3(self):\n    if self._adv_flux_f3 is None:\n        raise ValueError('adv_flux_f3 is not computed yet.')\n    return self._return_interp_variables(variable=self._adv_flux_f3, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef interpolated_theta(self):\n    if self._interpolated_theta is None:\n        raise ValueError('interpolated_theta is not present in the QGField object.')\n    return self._return_interp_variables(self._interpolated_theta)", "buggy_source_code": "@property\ndef interpolated_theta(self):\n    if self._interpolated_theta is None:\n        raise ValueError('interpolated_theta is not present in the QGField object.')\n    return self._return_interp_variables(variable=self._interpolated_theta, interp_axis=1, northern_hemisphere_results_only=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef uref(self):\n    if self._uref is None:\n        raise ValueError('uref field is not computed yet.')\n    return self._return_interp_variables(self._uref)", "buggy_source_code": "@property\ndef uref(self):\n    if self._uref is None:\n        raise ValueError('uref field is not computed yet.')\n    return self._return_interp_variables(variable=self._uref, interp_axis=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef ptref(self):\n    if self._ptref is None:\n        raise ValueError('ptref field is not computed yet.')\n    return self._return_interp_variables(self._ptref)", "buggy_source_code": "@property\ndef ptref(self):\n    if self._ptref is None:\n        raise ValueError('ptref field is not computed yet.')\n    return self._return_interp_variables(variable=self._ptref, interp_axis=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef qgpv(self):\n    if self._qgpv is None:\n        raise ValueError('QGPV field is not present in the QGField object.')\n    return self._return_interp_variables(self._qgpv)", "buggy_source_code": "@property\ndef qgpv(self):\n    if self._qgpv is None:\n        raise ValueError('QGPV field is not present in the QGField object.')\n    return self._return_interp_variables(variable=self._qgpv, interp_axis=1, northern_hemisphere_results_only=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef interpolated_u(self):\n    if self._interpolated_u is None:\n        raise ValueError('interpolated_u is not present in the QGField object.')\n    return self._return_interp_variables(self._interpolated_u)", "buggy_source_code": "@property\ndef interpolated_u(self):\n    if self._interpolated_u is None:\n        raise ValueError('interpolated_u is not present in the QGField object.')\n    return self._return_interp_variables(variable=self._interpolated_u, interp_axis=1, northern_hemisphere_results_only=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef lwa_baro(self):\n    if self._lwa_baro is None:\n        raise ValueError('lwa_baro is not computed yet.')\n    return self._return_interp_variables(self._lwa_baro)", "buggy_source_code": "@property\ndef lwa_baro(self):\n    if self._lwa_baro is None:\n        raise ValueError('lwa_baro is not computed yet.')\n    return self._return_interp_variables(variable=self._lwa_baro, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef convergence_zonal_advective_flux(self):\n    if self._convergence_zonal_advective_flux is None:\n        raise ValueError('convergence_zonal_advective_flux is not computed yet.')\n    return self._return_interp_variables(self._convergence_zonal_advective_flux)", "buggy_source_code": "@property\ndef convergence_zonal_advective_flux(self):\n    if self._convergence_zonal_advective_flux is None:\n        raise ValueError('convergence_zonal_advective_flux is not computed yet.')\n    return self._return_interp_variables(variable=self._convergence_zonal_advective_flux, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef divergence_eddy_momentum_flux(self):\n    if self._divergence_eddy_momentum_flux is None:\n        raise ValueError('divergence_eddy_momentum_flux is not computed yet.')\n    return self._return_interp_variables(self._divergence_eddy_momentum_flux)", "buggy_source_code": "@property\ndef divergence_eddy_momentum_flux(self):\n    if self._divergence_eddy_momentum_flux is None:\n        raise ValueError('divergence_eddy_momentum_flux is not computed yet.')\n    return self._return_interp_variables(variable=self._divergence_eddy_momentum_flux, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef interpolated_v(self):\n    if self._interpolated_v is None:\n        raise ValueError('interpolated_v is not present in the QGField object.')\n    return self._return_interp_variables(self._interpolated_v)", "buggy_source_code": "@property\ndef interpolated_v(self):\n    if self._interpolated_v is None:\n        raise ValueError('interpolated_v is not present in the QGField object.')\n    return self._return_interp_variables(variable=self._interpolated_v, interp_axis=1, northern_hemisphere_results_only=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef adv_flux_f2(self):\n    if self._adv_flux_f2 is None:\n        raise ValueError('adv_flux_f2 is not computed yet.')\n    return self._return_interp_variables(self._adv_flux_f2)", "buggy_source_code": "@property\ndef adv_flux_f2(self):\n    if self._adv_flux_f2 is None:\n        raise ValueError('adv_flux_f2 is not computed yet.')\n    return self._return_interp_variables(variable=self._adv_flux_f2, interp_axis=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef lwa(self):\n    if self._lwa is None:\n        raise ValueError('lwa is not computed yet.')\n    return self._return_interp_variables(self._lwa)", "buggy_source_code": "@property\ndef lwa(self):\n    if self._lwa is None:\n        raise ValueError('lwa is not computed yet.')\n    return self._return_interp_variables(variable=self._lwa, interp_axis=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cancelScheduled(self, scheduled):\n    if scheduled is not None and (not schedule.cancelled):\n        scheduled.cancel()", "buggy_source_code": "def cancelScheduled(self, scheduled):\n    if scheduled is not None and (not scheduled.cancelled) and (not scheduled.called):\n        scheduled.cancel()", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_key(self, key, pressed):\n    if pressed:\n        self.world.on_key_pressed(key)", "buggy_source_code": "def on_key(self, key, pressed):\n    if pressed:\n        self.world.on_key_pressed(key)\n        debug.on_key_pressed(key)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_tick(self):\n    bacon.clear(0, 0, 0, 1)\n    self.world.update()\n    self.world.draw()", "buggy_source_code": "def on_tick(self):\n    bacon.clear(0, 0, 0, 1)\n    self.world.update()\n    self.world.draw()\n    debug.draw()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def fill_slot(self, slot, character):\n    self.sprites.append(Sprite(character.image, slot.x, slot.y))", "buggy_source_code": "def fill_slot(self, slot, character):\n    slot.content = character\n    self.sprites.append(Sprite(character.image, slot.x, slot.y))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, x, y):\n    self.x = x\n    self.y = y", "buggy_source_code": "def __init__(self, x, y):\n    self.x = x\n    self.y = y\n    self.content = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def analyser_osmosis_all(self):\n    self.run(sql10.format('', ''), self.callback10)", "buggy_source_code": "def analyser_osmosis_all(self):\n    self.run(sql10.format('', '', ''), self.callback10)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, opener):\n    self.opener = opener\n    self.dirty = 0\n    self.map = None", "buggy_source_code": "def __init__(self, opener, ui):\n    self.opener = opener\n    self.dirty = 0\n    self.ui = ui\n    self.map = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def funding_partnerships(self):\n    return self.partnerships.filter(iati_organisation_role=Partnership.IATI_FUNDING_PARTNER)", "buggy_source_code": "def funding_partnerships(self):\n    return self.partnerships.filter(iati_organisation_role=Partnership.IATI_FUNDING_PARTNER).order_by('organisation__name')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def scope(self, user):\n    return super(UncheckedManager, self).scope(user).filter(checked=0)", "buggy_source_code": "def scope(self, user=None):\n    return super(UncheckedManager, self).scope(user).filter(checked=0)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, parent):\n    urwid.Edit.__init__(self)\n    self.history = ['']\n    self.count = 0", "buggy_source_code": "def __init__(self, parent):\n    self.parent = parent\n    urwid.Edit.__init__(self)\n    self.history = ['']\n    self.count = 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reconnectmqtt():\n    subprocess.call(['sudo', 'pm2', 'restart', 'mqtt'])", "buggy_source_code": "def reconnectmqtt():\n    subprocess.call(['sudo', 'pm2', 'delete', 'mqtt'])\n    subprocess.call(['sudo', 'pm2', 'start', '/home/pi/Public/NodeJS-Server/mqtt.js'])", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __init__(self, key):\n    self.key = key\n    super(RedisDict, self).__init__(self.load())", "buggy_source_code": "def __init__(self, key):\n    self.key = key\n    g.stuffList[self.key] = self\n    super(RedisDict, self).__init__(self.load())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, key, initial=None):\n    self.key = key\n    super(RedisList, self).__init__(self.load())", "buggy_source_code": "def __init__(self, key):\n    self.key = key\n    g.stuffList[self.key] = self\n    super(RedisList, self).__init__(self.load())", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _conventional_xc(exp_disc, sim_disc, upsample_factor):\n    (shifts, error, _) = register_translation(exp_disc, sim_disc, upsample_factor)\n    return shifts", "buggy_source_code": "def _conventional_xc(exp_disc, sim_disc, upsample_factor):\n    (shifts, error, _) = register_translation(exp_disc, sim_disc, upsample_factor)\n    shifts = np.flip(shifts)\n    return shifts", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def assertLogContent(self, content):\n    f = open(os.path.join(self.cfg.basePath, 'logs', 'jobmaster.log'))\n    assert content in f.read()", "buggy_source_code": "def assertLogContent(self, content):\n    f = open(os.path.join(self.cfg.basePath, 'logs', 'jobmaster.log'))\n    assert content in f.read(), \"'%s' did not appear in log\" % content", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    self._rss_publisher = None\n    self._template_names = None\n    super().__init__(**kwargs)", "buggy_source_code": "def __init__(self, **kwargs):\n    self._rss_publisher = None\n    self._template_names = None\n    super(CommandProcessor, self).__init__(**kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def producedEvents(self):\n    return ['AFFILIATE', 'NETBLOCK', 'RAW_RIPE_DATA']", "buggy_source_code": "def producedEvents(self):\n    return ['AFFILIATE', 'NETBLOCK', 'RAW_RIPE_DATA', 'BGP_AS', 'PROVIDER_INTERNET']", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef setUpClass():\n    config.reset(mock_cassandra=False)", "buggy_source_code": "@staticmethod\ndef setUpClass():\n    config.reset(mock_cassandra=False)\n    config.session.execute(\"CREATE KEYSPACE IF NOT EXISTS ksp WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\")", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_player_eligible(self, player, week):\n    return player.status in self.prohibited_status_list or player.bye_week == week", "buggy_source_code": "def is_player_eligible(self, player, week):\n    return player.status in self.prohibited_status_list or player.bye_weeks.week == week", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "@after_setup_task_logger.connect\ndef setup_cloudify_logger(loglevel=None, **kwargs):\n    setup_logger(loglevel, kwargs)", "buggy_source_code": "@after_setup_task_logger.connect\ndef setup_cloudify_logger(loglevel=None, **kwargs):\n    setup_logger(loglevel, **kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    CScreen.__init__(self)\n    Logger.__init__(self)", "buggy_source_code": "def __init__(self, **kwargs):\n    CScreen.__init__(self, **kwargs)\n    Logger.__init__(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def to_dict(self):\n    return {param: getattr(self, param, None) for param in self.__slots__}", "buggy_source_code": "def to_dict(self):\n    return {param: getattr(self, param, None) for param in self.__class__.__slots__}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def flash_message(self, message):\n    if hasattr(self.request, 'session'):\n        self.request.session.flash(message)", "buggy_source_code": "def flash_message(self, message, status='success'):\n    if hasattr(self.request, 'session'):\n        self.request.session.flash([message, status])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def args(self):\n    return ['java', '-Xss1M', '-classpath', ':'.join((self.env.resource_path('js.jar'), self.env.resource_path('compiler.jar'))), 'org.mozilla.javascript.tools.shell.Main']", "buggy_source_code": "def args(self):\n    return ['java', '-Xss100M', '-classpath', ':'.join((self.env.resource_path('js.jar'), self.env.resource_path('compiler.jar'))), 'org.mozilla.javascript.tools.shell.Main', '-opt', '-1']", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def t_assign_UNTERMINATEDDQUOTESTRING(t):\n    t.lexer.lineno += t.value.count('\\n')\n    raise oelite.parse.ParseError(None, 'Unterminated string', t)", "buggy_source_code": "def t_assign_UNTERMINATEDDQUOTESTRING(t):\n    t.lexer.lineno += t.value.count('\\n')\n    raise oelite.parse.ParseError(t.lexer.parser, 'Unterminated string', t)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def t_assign_UNTERMINATEDSQUOTESTRING(t):\n    t.lexer.lineno += t.value.count('\\n')\n    raise oelite.parse.ParseError('Unterminated string', t)", "buggy_source_code": "def t_assign_UNTERMINATEDSQUOTESTRING(t):\n    t.lexer.lineno += t.value.count('\\n')\n    raise oelite.parse.ParseError(t.lexer.parser, 'Unterminated string', t)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def t_assign_UNQUOTEDSTRING(t):\n    raise oelite.parse.ParseError('Unquoted string', t)", "buggy_source_code": "def t_assign_UNQUOTEDSTRING(t):\n    raise oelite.parse.ParseError(t.lexer.parser, 'Unquoted string', t)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_all(self, repo):\n    repo = self._get_repo(repo)\n    return PullRequest.query().filter(PullRequest.other_repo == repo).all()", "buggy_source_code": "def get_all(self, repo):\n    repo = self._get_repo(repo)\n    return PullRequest.query().filter(PullRequest.other_repo == repo).order_by(PullRequest.created_on).all()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, api='etree'):\n    HTMLParser.__init__(self, tree=treebuilders.getTreeBuilder(api, ElementTree))", "buggy_source_code": "def __init__(self, api='etree'):\n    implementation = self.defaults.get(api, None)\n    HTMLParser.__init__(self, tree=treebuilders.getTreeBuilder(api, implementation))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def cleanup(self, img):\n    os.rename(img + '.tmp', img)", "buggy_source_code": "def cleanup(self, img):\n    os.remove(img)\n    os.rename(img + '.tmp', img)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __del__(self):\n    self.cursor.close()\n    self.connection.close()", "buggy_source_code": "def __del__(self):\n    if self.cursor is not None:\n        self.cursor.close()\n    if self.connection is not None:\n        self.connection.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@diracCommand\ndef getReplicas(lfns):\n    return dirac.getReplicas(lfns, active=True, preferDisk=True)", "buggy_source_code": "@diracCommand\ndef getReplicas(lfns):\n    import traceback\n    traceback.print_stack()\n    return dirac.getReplicas(lfns, active=True, preferDisk=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop(self):\n    self.player.command('stop')\n    self.callback('STOPPED')", "buggy_source_code": "def stop(self):\n    self.stopped = True\n    self.player.command('stop')\n    self.callback('STOPPED')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def open(self, url):\n    self.player.play(url)", "buggy_source_code": "def open(self, url):\n    self.vid_url = url\n    self.player.play(url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_datelimit(source, startdate):\n    c['Comment']['LastUpdated'].update_one({'source': source}, {'date': startdate})", "buggy_source_code": "def set_datelimit(source, startdate):\n    c['Comment']['LastUpdated'].replace_one({'source': source}, {'source': source, 'date': startdate})", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def updatecache(request, jobids):\n    bvfs_update(jobids)\n    return JsonResponse(True, safe=False)", "buggy_source_code": "def updatecache(request, jobids=None):\n    if jobids is None:\n        return JsonResponse(False, safe=False)\n    bvfs_update(jobids)\n    return JsonResponse(True, safe=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef monitors(self):\n    return self.sparsities", "buggy_source_code": "@property\ndef monitors(self):\n    return [self.cost] + self.sparsities", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.champion_list = json.load(getChampionJSON())", "buggy_source_code": "def __init__(self):\n    self.champion_list = json.load(RiotAPI.getChampionJSON())", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@staticmethod\ndef getChampionJSON():\n    champURL = f'https://na1.api.riotgames.com/lol/static-data/v3/champions?locale=en_US&tags=all&dataById=false&api_key={config.riot_token}'\n    champJSON = __doHTTPGetReq(champURL)\n    return champJSON", "buggy_source_code": "@staticmethod\ndef getChampionJSON():\n    champURL = f'https://na1.api.riotgames.com/lol/static-data/v3/champions?locale=en_US&tags=all&dataById=false&api_key={config.riot_token}'\n    champJSON = RiotAPI.__doHTTPGetReq(champURL)\n    return champJSON", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_edge(self, feature):\n    cost = self.costfunction(feature)\n    return Edge(feature, cost)", "buggy_source_code": "def get_edge(self, feature):\n    cost = self.costfunction(feature)\n    e = Edge(feature, cost)\n    return e", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def configure_module(self, module, app):\n    _logger.trace('Found models: {m.path}', module)\n    models = module.load_python_module_by_name('models.py')", "buggy_source_code": "def configure_module(self, module, app):\n    _logger.trace('Found models: {m.path}', module)\n    models = module.load_python_module_by_name('models.py')\n    _ = app", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    Dumper.__init__(self)\n    self.childrenPrefix = '['\n    self.chidrenSuffix = '] '\n    self.indent = 0\n    self.isCli = True", "buggy_source_code": "def __init__(self):\n    Dumper.__init__(self)\n    self.childrenPrefix = '['\n    self.chidrenSuffix = '] '\n    self.indent = 0\n    self.isCli = True\n    self.setupDumpers({})", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _initialize(self):\n    yield from itertools.accumulate(self.upstream, self.func or operator.add)", "buggy_source_code": "def _initialize(self):\n    for x in itertools.accumulate(self.upstream, self.func or operator.add):\n        yield x", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _initialize(self):\n    yield from map(self.func, self.upstream, *self.iterables)", "buggy_source_code": "def _initialize(self):\n    for x in map(self.func, self.upstream, *self.iterables):\n        yield x", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _initialize(self):\n    yield from itertools.starmap(self.func, self.upstream)", "buggy_source_code": "def _initialize(self):\n    for x in itertools.starmap(self.func, self.upstream):\n        yield x", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _initialize(self):\n    yield from zip(self.upstream, *self.iterables)", "buggy_source_code": "def _initialize(self):\n    for x in zip(self.upstream, *self.iterables):\n        yield x", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    pass", "buggy_source_code": "def tearDown(self):\n    backend = self.mock.create_backend_object()\n    list = backend.get_share_list()\n    for l in list:\n        backend.delete(l.get_share_name())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, parent):\n    asyncore.dispatcher.__init__(self)\n    self.session = parent", "buggy_source_code": "def __init__(self, sock, parent):\n    asyncore.dispatcher.__init__(self)\n    self.session = parent", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _connect(self):\n    return mysql.connect(db=self.database, **self.connect_params)", "buggy_source_code": "def _connect(self):\n    if mysql is None:\n        raise ImproperlyConfigured('MySQL driver not installed!')\n    return mysql.connect(db=self.database, **self.connect_params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setup(self):\n    self.serial = serial.Serial('/dev/ttyUSB1')", "buggy_source_code": "def setup(self):\n    try:\n        self.serial = serial.Serial('/dev/ttyUSB0')\n    except serial.serialutil.SerialException:\n        self.serial = serial.Serial('/dev/ttyUSB1')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _build_search(args):\n    build_search(args.n, args.repeats, args.path, args.alg, args.task, args.zip)", "buggy_source_code": "def _build_search(args):\n    build_search(args.path, args.name, args.n, args.repeats, args.alg, args.task, args.zip)", "edit_actions": ["move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, subject):\n    self.subject = subject\n    self.frontier = Heap()\n    self.explored = []\n    self.success_node = None", "buggy_source_code": "def __init__(self, subject):\n    self.subject = subject\n    self.frontier = Heap()\n    self.explored = []\n    self.success_node = None\n    self.current_cost = 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return self.meta.name", "buggy_source_code": "def __unicode__(self):\n    return force_unicode(self.meta.name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@callback\ndef _handle_coordinator_update(self):\n    self._async_update_from_latest_data()\n    self.async_write_ha_state()", "buggy_source_code": "@callback\ndef _handle_coordinator_update(self):\n    self.hass.async_create_task(self._async_update_bridge_id())\n    self._async_update_from_latest_data()\n    self.async_write_ha_state()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def writeErrors(errors):\n    file = open('ERROR_LOG.txt', 'w')\n    for x in errors:\n        print(x, file=file)", "buggy_source_code": "def writeErrors(errors):\n    file = open('ERROR_LOG.txt', 'w')\n    for x in errors:\n        print(x, file=file)\n    file.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def device_reset(self, state):\n    updated_resource = self.execute_operation(state['path'], state['value'])\n    return (True, self.MSG_RESET, updated_resource)", "buggy_source_code": "def device_reset(self, state):\n    updated_resource = self.execute_operation(state['path'], state['value'])\n    return (True, self.MSG_RESET, updated_resource.data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_fake_falcon():\n    falcon.HTTPNotAcceptable()", "buggy_source_code": "def test_fake_falcon():\n    falcon.HTTPNotAcceptable('nothing')", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, requirements, check_file=False, create=False):\n    self._shell = None\n    super(DiracProxyInfo, self).__init__(requirements, check_file, create)", "buggy_source_code": "def __init__(self, requirements, check_file=False, create=False):\n    self._shell = Shell()\n    super(DiracProxyInfo, self).__init__(requirements, check_file, create)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _tarball(self, xml_parent):\n    self._add_script(xml_parent, '/usr/local/jenkins/slave_scripts/create-tarball.sh %s' % self.data['project'])", "buggy_source_code": "def _tarball(self, xml_parent):\n    self._add_script(xml_parent, '/usr/local/jenkins/slave_scripts/create-tarball.sh %s' % self.data['main']['project'])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def sprint_info(self, board_id, sprint_id):\n    return self._get_json('rapid/charts/sprintreport?rapidViewId=%s&sprintId=%s' % (board_id, sprint_id), base=GREENHOPPER_BASE_URL)['sprint']", "buggy_source_code": "def sprint_info(self, board_id, sprint_id):\n    return self._get_json('rapid/charts/sprintreport?rapidViewId=%s&sprintId=%s' % (board_id, sprint_id), base=self.GREENHOPPER_BASE_URL)['sprint']", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def build_single_shift_column(shift):\n    return {'columns': shift.shift_length, 'class': 'shift', 'id': shift.id, 'owner': shift.owner, 'start_at': shift.start_time}", "buggy_source_code": "def build_single_shift_column(shift):\n    return {'columns': shift.shift_length, 'class': 'shift', 'id': shift.id, 'owner': shift.owner, 'start_at': shift.start_time.astimezone(DENVER_TIMEZONE)}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def start_server():\n    with cd(run_dir):\n        run('uwsgi --ini /srv/www/rocketlaunches.org/rocketlaunches/rocketapp.ini')", "buggy_source_code": "def start_server():\n    run_dir = '/srv/www/'\n    with cd(run_dir):\n        run('uwsgi --ini /srv/www/rocketlaunches.org/rocketlaunches/rocketapp.ini')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop_server():\n    with cd(run_dir):\n        run('uwsgi --stop /tmp/rocketlaunches.pid')", "buggy_source_code": "def stop_server():\n    run_dir = '/srv/www/'\n    with cd(run_dir):\n        run('uwsgi --stop /tmp/rocketlaunches.pid')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restart_server():\n    with cd(run_dir):\n        run('kill -HUP `cat /tmp/rocketlaunches.pid`')", "buggy_source_code": "def restart_server():\n    run_dir = '/srv/www/'\n    with cd(run_dir):\n        run('kill -HUP `cat /tmp/rocketlaunches.pid`')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def options(self, context, module_options):\n    return", "buggy_source_code": "def options(self, context, module_options):\n    self.ps_script = obfs_ps_script('mimikittenz/Invoke-mimikittenz.ps1')\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __del__(self):\n    self.set_draw_type(bpy.context, 'TEXTURED')\n    if self.click_ok == False:\n        utils.delete_object_and_children(self.obstacle.obj_bp)", "buggy_source_code": "def __del__(self):\n    self.set_draw_type(bpy.context, 'TEXTURED')\n    if self.click_ok == False and (not self.modify_existing):\n        utils.delete_object_and_children(self.obstacle.obj_bp)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, parent, analysis):\n    super(ExportAnalysisEventsRTDC, self).__init__(parent, analysis, ext='rtdc', non_scalars=['contour', 'image', 'trace'])", "buggy_source_code": "def __init__(self, parent, analysis):\n    super(ExportAnalysisEventsRTDC, self).__init__(parent, analysis, ext='rtdc', non_scalars=['contour', 'image', 'mask', 'trace'])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def _get_issue_sort_key(issue):\n    return (not issue.get('assignee'), issue.get('votes'), issue.get('comments'), issue.get('updated_at'))", "buggy_source_code": "def _get_issue_sort_key(issue):\n    return (not issue.get('assignee'), issue.get('coach'), issue.get('votes'), issue.get('comments'), issue.get('updated_at'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_redhat_storage_is_false(self):\n    data = dict(redhat_storage=False)\n    result = util.get_install_extra_vars(data)\n    assert not result", "buggy_source_code": "def test_redhat_storage_is_false(self):\n    data = dict(redhat_storage=False)\n    result = util.get_install_extra_vars(data)\n    assert result == {'ceph_stable': True}", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@login_required(login_url='/login/')\ndef issues(request):\n    return render_to_response('issues.html', {})", "buggy_source_code": "@login_required(login_url='/login/')\ndef issues(request):\n    projects = Project.objects.all()\n    return render_to_response('projects.html', {'projects': projects})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _compose_command_args(self):\n    return ['echo', 'da']", "buggy_source_code": "@staticmethod\ndef _compose_command_args():\n    return ['echo', 'da']", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def current_time(self):\n    return time.monotonic()", "buggy_source_code": "@staticmethod\ndef current_time():\n    return time.monotonic()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remove(self, value):\n    self.redis.lrem(self.key, self._to_redis(value))", "buggy_source_code": "def remove(self, value):\n    self.redis.lrem(self.key, 1, self._to_redis(value))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def nextMove(self, board, currentPlayer):\n    self._optimalNextMove(board, currentPlayer)", "buggy_source_code": "def nextMove(self, board, currentPlayer):\n    currentPlayer = 'O' if currentPlayer == 'X' else 'X'\n    self._optimalNextMove(board, currentPlayer)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def open_class(self, cf_name):\n    if not cf_name.endswith('.class'):\n        cf_name = '%s.class' % cf_name\n    cf = ClassFile(self[cf_name], str_as_buffer=True)\n    return cf", "buggy_source_code": "def open_class(self, cf_name):\n    if not cf_name.endswith('.class'):\n        cf_name = '%s.class' % cf_name\n    cf = ClassFile(self.read(cf_name), str_as_buffer=True)\n    return cf", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def close_all(self):\n    for logger in self.loggers:\n        logger.close()", "buggy_source_code": "def close_all(self):\n    for logger in self.loggers.values():\n        logger.close()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def Product(stack):\n    seq = MakeList(stack)\n    r = 1\n    for element in seq:\n        r = r * element\n    return r", "buggy_source_code": "def Product(stack):\n    seq = MakeList(stack)\n    r = 1\n    for element in seq:\n        r = r * element\n    stack.push(r)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@command('^(?:[Nn]imious|<@!?163167281042423810>)$', access=100)\nasync def nimious(self, msg):\n    dank_meme = \"Shut the fuck up <:ww_link_ugh:230236082892046337> Nimious <:ww_link_ugh:230236082892046337>. You're :zzz: fraudulent. You can't do anything besides <:bomb:230238267067334656> spam <:bow:230238510169325580>. That's what you have :cancer: Rosa :star2: as a :second_place: secondary :second_place: because she complements your :cartwheel: roll habits :cartwheel: you cocky :toilet: ass low level smasher :toilet:. Gtfoh bruh. Your entire play style is :regional_indicator_z: 2 buttons :b:. You give Link mains a bad name. The reason no one cheers for you is because of the :cheese: fraudulence :cheese: you show in your play. A real Link main like :muscle: Izaw :muscle: gets my respect.\\n<:dank_link:230168078980218881> You literally aren't shit dude <:dank_link:230168078980218881>\"\n    await self.send_message(msg.channel, dank_meme)\n    await self.delete_message(msg)", "buggy_source_code": "@command('^(?:[Nn]imious|<@!?163167281042423810>)$', access=100)\nasync def nimious(self, msg, arguments):\n    dank_meme = \"Shut the fuck up <:ww_link_ugh:230236082892046337> Nimious <:ww_link_ugh:230236082892046337>. You're :zzz: fraudulent. You can't do anything besides <:bomb:230238267067334656> spam <:bow:230238510169325580>. That's what you have :cancer: Rosa :star2: as a :second_place: secondary :second_place: because she complements your :cartwheel: roll habits :cartwheel: you cocky :toilet: ass low level smasher :toilet:. Gtfoh bruh. Your entire play style is :regional_indicator_z: 2 buttons :b:. You give Link mains a bad name. The reason no one cheers for you is because of the :cheese: fraudulence :cheese: you show in your play. A real Link main like :muscle: Izaw :muscle: gets my respect.\\n<:dank_link:230168078980218881> You literally aren't shit dude <:dank_link:230168078980218881>\"\n    await self.send_message(msg.channel, dank_meme)\n    await self.delete_message(msg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.config = ConfigManager()\n    return", "buggy_source_code": "def __init__(self):\n    self.config = ConfigManager().get_instance()\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.user_dict = {}\n    self.logger = logging.getLogger(__name__)\n    self.timeout = 35", "buggy_source_code": "def __init__(self):\n    self.user_dict = {}\n    self.logger = logging.getLogger(__name__)\n    self.timeout = 35\n    self.max_retries = 3", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_access_point_paths(self):\n    interface = dbus.Interface(self.proxy, self.__class__.NAMESPACE)\n    return interface.GetAccessPoints()", "buggy_source_code": "def get_access_point_paths(self):\n    interface = dbus.Interface(self.proxy, self.__class__.NAMESPACE)\n    if not self.is_wireless():\n        return []\n    return interface.GetAccessPoints()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def try_premirror(self, d, ud):\n    if os.path.exists(ud.clonedir):\n        return False\n    return True", "buggy_source_code": "def try_premirror(self, u, ud, d):\n    if os.path.exists(ud.clonedir):\n        return False\n    return True", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validateaddress(self, addr):\n    isvalid = is_valid(addr)\n    out = {'isvalid': isvalid}\n    if isvalid:\n        out['address'] = addr", "buggy_source_code": "def validateaddress(self, addr):\n    isvalid = is_valid(addr)\n    out = {'isvalid': isvalid}\n    if isvalid:\n        out['address'] = addr\n    return out", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef videos(self):\n    all_attachments = self.attachments.order_by('-starred')\n    return all_attachments.exclude(attachment_video='')", "buggy_source_code": "@property\ndef videos(self):\n    all_attachments = self.attachments.all().order_by('-starred')\n    return all_attachments.exclude(attachment_video='')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cluster(self, trajectories):\n    return coor.cluster_kmeans(data=trajectories, k=self.numClusters, max_iter=500, stride=self.stride)", "buggy_source_code": "def cluster(self, trajectories):\n    return coor.cluster_kmeans(data=trajectories, k=self.numClusters, max_iter=500, stride=self.stride, fixed_seed=self.seed)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_exec_cmd(self):\n    (status, output) = exec_cmd('unoconv --help')\n    assert status == 1\n    assert output[:84] == 'usage: unoconv [options] file [file2 ..]\\nConvert from and to any format supported by'", "buggy_source_code": "def test_exec_cmd(self, envpath_no_venv):\n    (status, output) = exec_cmd('unoconv --help')\n    assert status == 1\n    assert output[:84] == 'usage: unoconv [options] file [file2 ..]\\nConvert from and to any format supported by'", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unbind(self, evtspec):\n    self._w.document.body.unbind(evtspec)", "buggy_source_code": "def unbind(self, evtspec, callback):\n    self._w.document.body.unbind(evtspec, callback)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def service_restart(service):\n    sudo('service %scelery stop' % (service,))\n    sudo('service %s restart' % (service,))", "buggy_source_code": "def service_restart(service):\n    sudo('systemctl daemon-reload')\n    try:\n        sudo('service %scelery stop' % (service,))\n    except:\n        pass\n    sudo('service %s restart' % (service,))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_open_failure(self):\n    self.assertRaises(ValueError, epr.open, '')", "buggy_source_code": "def test_open_failure(self):\n    self.assertRaises(epr.EPRError, epr.open, '')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def run(self, env):\n    self.var.set(env, self.rhs.eval(env))", "buggy_source_code": "def run(self, env):\n    self.var.set(env, self.rhs.eval(copy.deepcopy(env)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _getAttrWValue(self, attrName):\n    return taurus.Attribute(attrName).read().wvalue.magnitude", "buggy_source_code": "def _getAttrWValue(self, attrName):\n    value = taurus.Attribute(attrName).read().wvalue\n    if hasattr(value, 'magnitude'):\n        value = value.magnitude\n    return value", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@property\ndef attrValue(self):\n    return self._attrProxy.read().rvalue.magnitude", "buggy_source_code": "@property\ndef attrValue(self):\n    value = self._attrProxy.read().rvalue\n    if hasattr(value, 'magnitude'):\n        value = value.magnitude\n    return value", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@property\ndef attrWValue(self):\n    return self._attrProxy.read().wvalue.magnitude", "buggy_source_code": "@property\ndef attrWValue(self):\n    value = self._attrProxy.read().wvalue\n    if hasattr(value, 'magnitude'):\n        value = value.magnitude\n    return value", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def _getAttrValue(self, attrName):\n    return taurus.Attribute(attrName).read().rvalue.magnitude", "buggy_source_code": "def _getAttrValue(self, attrName):\n    value = taurus.Attribute(attrName).read().rvalue\n    if hasattr(value, 'magnitude'):\n        value = value.magnitude\n    return value", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def call(self, *args, **kwargs):\n    raise NotImplementedError('must be implemented in subclass')", "buggy_source_code": "def call(self, function, *args, **kwargs):\n    raise NotImplementedError('must be implemented in subclass')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_outbox(self):\n    self.assertEqual(len(self.emails), 1)", "buggy_source_code": "def test_outbox(self):\n    self.assertEqual(len(self.emails), BATCH_SIZE)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def _interpolate_values(self):\n    self.logh2logk = MonoCubicInterp(self._hnodes, self._kvals)", "buggy_source_code": "def _interpolate_values(self):\n    if self.__BADPARAM:\n        self.logh2logk = None\n    else:\n        self.logh2logk = MonoCubicInterp(self._hnodes, self._kvals)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    shutil.rmtree(self.directory)", "buggy_source_code": "def tearDown(self):\n    shutil.rmtree(self.directory)\n    if self.cwd_drive:\n        os.chdir(self.cwd_drive)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _install_done(self, success):\n    self.on_install_done_event.emit(success)\n    self.show_deployment_details()", "buggy_source_code": "def _install_done(self, success):\n    self.on_install_done_event.emit(success)\n    if success:\n        self.show_deployment_details()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def goApproach(self, target, speed):\n    self._movePath(self._approachPath(target, speed))", "buggy_source_code": "def goApproach(self, speed):\n    target = self.targetPosition()\n    self._movePath(self._approachPath(target, speed))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate_configuration(self):\n    pass", "buggy_source_code": "def validate_configuration(self):\n    try:\n        self.qc_config['significance_threshold']\n    except KeyError:\n        raise ConfigurationError(\"The {} handler expects 'significance_threshold' to be set. Perhaps it is missing from the configuration file?\".format(self.__class__.__name__))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def d_contextualize_option(a, enter, margin, indent):\n    assert isinstance(a, Feature)\n    return '{margin}option {option}'.format(margin=margin, option=d_feature(a))", "buggy_source_code": "def d_contextualize_option(a, enter, margin, indent):\n    assert isinstance(a, Feature)\n    return '{margin}option {option}'.format(margin=margin, option=d_feature(a, enter, margin, indent))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, genome):\n    self.basepairs_chain0 = self.makeFromGenome(genome)\n    self.basepairs = self.basepairs_chain0\n    self.center_in_z()", "buggy_source_code": "def __init__(self, genome, chain=0):\n    self.basepairs_chain0 = self.makeFromGenome(genome, chain=chain)\n    self.basepairs = self.basepairs_chain0\n    self.center_in_z()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def StopForwardingHost(self, host_port):\n    self._device.adb.ForwardRemove('tcp:%d' % host_port)", "buggy_source_code": "def StopForwardingHost(self, host_port):\n    try:\n        self._device.adb.ForwardRemove('tcp:%d' % host_port)\n    except device_errors.AdbCommandFailedError:\n        logging.critical('Attempted to unforward port tcp:%d but failed.', host_port)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def replace_in_seq(text, *replacements):\n    for (original, replacement) in replacements:\n        text = text.replace(original, replacement)\n    return text", "buggy_source_code": "def replace_in_seq(text, *replacements):\n    if not text:\n        return u''\n    for (original, replacement) in replacements:\n        text = text.replace(original, replacement)\n    return text", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def segment(text):\n    pt = wordcut(stopNumber=False, removeNonCharacter=True, caseSensitive=False, removeRepeat=True)\n    return pt.segment(text)", "buggy_source_code": "def segment(text):\n    pt = wordcut(stopNumber=False, removeNonCharacter=True, caseSensitive=False, removeRepeat=True)\n    return mergelistlen(pt.segment(text), 1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def remove_duplicate_renditions(apps, schema_editor):\n    schema_editor.execute(\"\\n        DELETE FROM wagtailimages_rendition WHERE image_id || '-' || filter_id IN (\\n            SELECT image_id || '-' || filter_id FROM wagtailimages_rendition WHERE focal_point_key IS NULL GROUP BY image_id, filter_id HAVING COUNT(*) > 1\\n        ) AND focal_point_key IS NULL\\n    \")", "buggy_source_code": "def remove_duplicate_renditions(apps, schema_editor):\n    if schema_editor.connection.vendor == 'mysql':\n        schema_editor.execute(\"\\n            DELETE FROM `wagtailimages_rendition` WHERE CONCAT(image_id, '-', filter_id) IN (\\n                SELECT CONCAT(image_id, '-', filter_id) FROM (SELECT * FROM `wagtailimages_rendition`) as x WHERE `focal_point_key` IS NULL GROUP BY image_id, filter_id HAVING COUNT(*) > 1\\n            ) AND `focal_point_key` IS NULL\\n        \")\n    else:\n        schema_editor.execute(\"\\n            DELETE FROM wagtailimages_rendition WHERE image_id || '-' || filter_id IN (\\n                SELECT image_id || '-' || filter_id FROM wagtailimages_rendition WHERE focal_point_key IS NULL GROUP BY image_id, filter_id HAVING COUNT(*) > 1\\n            ) AND focal_point_key IS NULL\\n        \")", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def activation(self, e):\n    pass", "buggy_source_code": "def activation(self, e):\n    self.oneD_testing()\n    self.twoD_testing()\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def extractInfo(self, srcdir):\n    return False", "buggy_source_code": "def extractInfo(self, srcdir, bindir):\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def extractInfo(self, srcdir):\n    return False", "buggy_source_code": "def extractInfo(self, srcdir, bindir):\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.errorhandler(403)\ndef page_403(_):\n    return render_template('403.htm', user=session['username'])", "buggy_source_code": "@app.errorhandler(403)\ndef page_403(_):\n    return render_template('403.htm', user=session.get('username'))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@app.errorhandler(500)\ndef page_500(e):\n    return render_template('500.htm', e=e, user=session['username'])", "buggy_source_code": "@app.errorhandler(500)\ndef page_500(e):\n    return render_template('500.htm', e=e, user=session.get('username'))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@app.errorhandler(404)\ndef page_404(_):\n    return render_template('404.htm', user=session['username'])", "buggy_source_code": "@app.errorhandler(404)\ndef page_404(_):\n    return render_template('404.htm', user=session.get('username'))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def handle_exception(self, exc):\n    self.log_error('%r', exc)\n    self.send_500()", "buggy_source_code": "def handle_exception(self, exc):\n    self.log_error('Exception while handling request: %r', exc, exc_info=True)\n    self.send_500()", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return '{0} [ErrorCode {1}]'.format(self.message, self.error_code)", "buggy_source_code": "def __str__(self):\n    msg = '{0} [ErrorCode {1}]'\n    return msg.format(self.message, self.error_code)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def create_dummy_channel():\n    with bound_socket() as (host, port):\n        return grpc.insecure_channel('{}:{}'.format(host, port))", "buggy_source_code": "def create_dummy_channel():\n    (host, port, sock) = get_socket()\n    sock.close()\n    return grpc.insecure_channel('{}:{}'.format(host, port))", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_plugin_changed(self, event):\n    self.svc._view.update()", "buggy_source_code": "def on_plugin_changed(self, *args, **kwargs):\n    if self.svc.started:\n        self.svc._view.update()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_amb_file():\n    amb_file = expanduser('~/.genome/F1L3/') + 'F1L3.fa.gz.amb'\n    with open(amb_file, 'r') as f:\n        assert '5252759 94 1 575 10 N' == ' '.join(f.splitlines())", "buggy_source_code": "def test_amb_file():\n    amb_file = expanduser('~/.genome/F1L3/') + 'F1L3.fa.gz.amb'\n    with open(amb_file, 'r') as f:\n        assert '5252759 94 1 575 10 N' == ' '.join(f.read().splitlines())", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_starts_at(self):\n    starts_at_naive = self.starts_at.replace(tzinfo=None)\n    starts_at_local = self.time_zone.localize(starts_at_naive)\n    return starts_at_local", "buggy_source_code": "def get_starts_at(self):\n    starts_at_naive = self.starts_at.replace(tzinfo=None)\n    starts_at_local = self.time_zone.localize(starts_at_naive)\n    starts_at_normal = self.time_zone.normalize(starts_at_local)\n    return starts_at_normal", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_ends_at(self):\n    ends_at_naive = self.ends_at.replace(tzinfo=None)\n    ends_at_local = self.time_zone.localize(ends_at_naive)\n    return ends_at_local", "buggy_source_code": "def get_ends_at(self):\n    ends_at_naive = self.ends_at.replace(tzinfo=None)\n    ends_at_local = self.time_zone.localize(ends_at_naive)\n    ends_at_normal = self.time_zone.normalize(ends_at_local)\n    return ends_at_normal", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __new__(cls, database, program, showRemind, categories):\n    return super(PopupMenu, cls).__new__(cls, 'script-tvguide-menu.xml', ADDON.getAddonInfo('path'), SKIN)", "buggy_source_code": "def __new__(cls, database, program, showRemind, category, categories):\n    return super(PopupMenu, cls).__new__(cls, 'script-tvguide-menu.xml', ADDON.getAddonInfo('path'), SKIN)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def kappaOnFinished(self):\n    self.kappaOnOngoing = False", "buggy_source_code": "def kappaOnFinished(self, *args):\n    self.kappaOnOngoing = False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def kappaOnStarted(self):\n    self.kappaOnOngoing = True", "buggy_source_code": "def kappaOnStarted(self, *args):\n    self.kappaOnOngoing = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def kappaOffFinished(self):\n    self.kappaOffOngoing = False", "buggy_source_code": "def kappaOffFinished(self, *args):\n    self.kappaOffOngoing = False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def kappaOffStarted(self):\n    self.kappaOffOngoing = True", "buggy_source_code": "def kappaOffStarted(self, *args):\n    self.kappaOffOngoing = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def actualAvatar(self):\n    return self.avatar", "buggy_source_code": "def actualAvatar(self):\n    return getKeyUrl(self.avatar)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def search(self):\n    return render('entry/search.html')", "buggy_source_code": "def search(self):\n    c.content_section = 'search'\n    return render('entry/search.html')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __hash__(self):\n    return hash(' '.join(sorted('{}:{}'.format(ep.pred.short_form(), len(ep.argdict)))))", "buggy_source_code": "def __hash__(self):\n    return hash(' '.join(sorted(('{}:{}'.format(ep.pred.short_form(), len(ep.argdict)) for ep in self.eps))))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef is_enabled(cls, course, user=None):\n    if ENABLE_DATES_TAB.is_enabled(course.id):\n        return CourseOverview.get_from_id(course.id) == 'instructor'\n    return False", "buggy_source_code": "@classmethod\ndef is_enabled(cls, course, user=None):\n    if ENABLE_DATES_TAB.is_enabled(course.id):\n        return not CourseOverview.get_from_id(course.id).self_paced\n    return False", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, method):\n    self.method = method", "buggy_source_code": "def __init__(self, method_name, method):\n    self.method_name = method_name\n    self.method = method", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def config():\n    logging.basicConfig(filename=log_file, level=logging.DEBUG, format='%(message)s')\n    warnings.simplefilter('ignore', np.RankWarning)", "buggy_source_code": "def config(log_file):\n    logging.basicConfig(filename=log_file, level=logging.DEBUG, format='%(message)s')\n    warnings.simplefilter('ignore', np.RankWarning)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def tuples_to_str(seq):\n    return ('\\t'.join(member) + '\\n' for member in seq)", "buggy_source_code": "def tuples_to_str(seq, sep='\\t'):\n    return (sep.join(member) + '\\n' for member in seq)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef rank(cls):\n    return SQL('rank')", "buggy_source_code": "@classmethod\ndef rank(cls, *args):\n    if args:\n        return cls.bm25(*args)\n    else:\n        return SQL('rank')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_snodgrass():\n    rot = diff_rot(10, 30 * u.deg, rot_type='snodgrass')\n    assert rot == 135.4232 * u.deg", "buggy_source_code": "def test_snodgrass():\n    rot = diff_rot(10 * seconds_per_day, 30 * u.deg, rot_type='snodgrass')\n    assert rot == 135.4232 * u.deg", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_howard():\n    rot = diff_rot(10, 30 * u.deg, rot_type='howard')\n    assert rot == 136.8216 * u.deg", "buggy_source_code": "def test_howard():\n    rot = diff_rot(10 * seconds_per_day, 30 * u.deg, rot_type='howard')\n    assert rot == 136.8216 * u.deg", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_allen():\n    rot = diff_rot(10, 30 * u.deg, rot_type='allen')\n    assert rot == 136.9 * u.deg", "buggy_source_code": "def test_allen():\n    rot = diff_rot(10 * seconds_per_day, 30 * u.deg, rot_type='allen')\n    assert rot == 136.9 * u.deg", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_fail():\n    with pytest.raises(ValueError):\n        rot = diff_rot(10, 30 * u.deg, rot_type='garbage')", "buggy_source_code": "def test_fail():\n    with pytest.raises(ValueError):\n        rot = diff_rot(10 * seconds_per_day, 30 * u.deg, rot_type='garbage')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_sidereal():\n    rot = diff_rot(10, 30 * u.deg, rot_type='howard', frame_time='sidereal')\n    assert rot == 136.8216 * u.deg", "buggy_source_code": "def test_sidereal():\n    rot = diff_rot(10 * seconds_per_day, 30 * u.deg, rot_type='howard', frame_time='sidereal')\n    assert rot == 136.8216 * u.deg", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_single():\n    rot = diff_rot(10, 30 * u.deg)\n    assert rot == 136.8216 * u.deg", "buggy_source_code": "def test_single():\n    rot = diff_rot(10 * seconds_per_day, 30 * u.deg)\n    assert rot == 136.8216 * u.deg", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def main() -> None:\n    try:\n        _main()\n    except KeyboardInterrupt:\n        log('Training interrupted by user.')\n        exit(1)", "buggy_source_code": "def main() -> None:\n    try:\n        _main()\n    except KeyboardInterrupt:\n        log('Training interrupted by user.')\n        debug(traceback.format_exc())\n        exit(1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef awx_playbook_path(cls):\n    return os.path.join(os.path.dirname(awx.__file__), 'playbooks')", "buggy_source_code": "@classmethod\ndef awx_playbook_path(cls):\n    return os.path.abspath(os.path.join(os.path.dirname(awx.__file__), 'playbooks'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@pytest.fixture\ndef executor(request):\n    executor = ThreadPoolExecutor(max_workers=3)\n\n    def fin():\n        executor.shutdown()\n    request.addfinalizer(fin)\n    return executor", "buggy_source_code": "@pytest.fixture\ndef executor(request, pg_server):\n    executor = ThreadPoolExecutor(max_workers=3)\n\n    def fin():\n        executor.shutdown()\n    request.addfinalizer(fin)\n    return executor", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _set_other(self, req):\n    return apache.OK", "buggy_source_code": "@staticmethod\ndef _set_other(_req):\n    return apache.OK", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _cleanup_request_processor(self):\n    return apache.OK", "buggy_source_code": "@staticmethod\ndef _cleanup_request_processor():\n    return apache.OK", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef labels(self):\n    return self._labels_to_masks.keys()", "buggy_source_code": "@property\ndef labels(self):\n    return list(self._labels_to_masks.keys())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, terms):\n    (self.value, self.start, self.end) = terms", "buggy_source_code": "def __init__(self, terms):\n    Expression.__init__(self, terms)\n    (self.value, self.start, self.end) = terms", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return u' for '.join([self.person, self.event])", "buggy_source_code": "def __unicode__(self):\n    return u' for '.join([self.person.__unicode__(), self.event.__unicode__()])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def host_base_url():\n    return URL('', '', host=True).split('/' + request.controller)[0]", "buggy_source_code": "def host_base_url():\n    request = current.request\n    return URL('', '', host=True).split('/' + request.controller)[0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@asyncio.coroutine\ndef _do_execute(self, command):\n    yield from self._room.write('Shame on you {0}!'.format(command.author))", "buggy_source_code": "@asyncio.coroutine\ndef _do_execute(self, command):\n    yield from self._room.write('Shame on you {0}!'.format(command.author.mention))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_progress_starting(self):\n    run_tracker = self.create_with_pipeline_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('.-.-Fasta2CSV', progress)", "buggy_source_code": "def test_run_progress_starting(self):\n    run_tracker = self.create_with_pipeline_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('.-.', progress['status'])\n    self.assertSequenceEqual('Fasta2CSV', progress['name'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_progress_no_run(self):\n    run_tracker = RunToProcess()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('?-Run', progress)", "buggy_source_code": "def test_run_progress_no_run(self):\n    run_tracker = RunToProcess()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('?', progress['status'])\n    self.assertSequenceEqual('Run', progress['name'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_progress_empty_pipeline(self):\n    run_tracker = self.create_with_empty_pipeline()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('--Run', progress)", "buggy_source_code": "def test_run_progress_empty_pipeline(self):\n    run_tracker = self.create_with_empty_pipeline()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('-', progress['status'])", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __hide(self):\n    if self.__searchable and self.__searchMenu:\n        self.__searchMenu.hide()", "buggy_source_code": "def __hide(self):\n    if self.__searchable and self.__searchMenu:\n        self.__searchLine.clearFocus()\n        self.__searchMenu.hide()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def build_name(namespace, name):\n    return '.'.join(filter(lambda n: n is not None, [namespace, name.replace(' ', '')]))", "buggy_source_code": "def build_name(namespace, name):\n    return '.'.join(filter(lambda n: n is not None and n != '', [namespace, name.replace(' ', '')]))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def open(self, filename):\n    return open(self.get_full_path(filename), 'a+b')", "buggy_source_code": "def open(self, filename):\n    filehandle = open(self.get_full_path(filename), 'a+b')\n    filehandle.seek(0)\n    return filehandle", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_last_used(self):\n    return self.last_used.strftime(BINGO_IMAGE_DATETIME_FORMAT)", "buggy_source_code": "def get_last_used(self):\n    return timezone.localtime(self.last_used).strftime(BINGO_IMAGE_DATETIME_FORMAT)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    pass", "buggy_source_code": "def __init__(self, error):\n    self.error = error", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _store_logs(self):\n    key = self._get_log_key()\n    self.details['logs'] = self._task_logs\n    cache.delete(key)", "buggy_source_code": "def _store_logs(self):\n    key = self._get_log_key()\n    try:\n        self.details['logs'] = self._task_logs\n    except AttributeError:\n        pass\n    cache.delete(key)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture\ndef vmware_provider():\n    return setup_a_provider(prov_class='infra', prov_type='virtualcenter')", "buggy_source_code": "@pytest.fixture(scope='module')\ndef vmware_provider():\n    return setup_a_provider(prov_class='infra', prov_type='virtualcenter')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, lcd, name):\n    self.name = name\n    self.items = []", "buggy_source_code": "def __init__(self, lcd, name):\n    self.lcd = lcd\n    self.name = name\n    self.items = []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def qdump__Debugger__Internal__WatchItem(d, value):\n    d.putByteArrayValue(value['iname'])\n    d.putPlainChildren(value)", "buggy_source_code": "def qdump__Debugger__Internal__WatchItem(d, value):\n    d.putByteArrayValue(value['d']['iname'])\n    d.putPlainChildren(value)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, client):\n    super(_DG, self).__init__(client, 'DG')\n    self._namedObjects = []", "buggy_source_code": "def __init__(self, client):\n    super(_DG, self).__init__(client, 'DG')\n    self._namedObjects = {}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, client):\n    super(_RT, self).__init__(client, 'RT')", "buggy_source_code": "def __init__(self, client):\n    super(_RT, self).__init__(client, 'RT')\n    self.__prototypes = {}\n    self.__registeredTypes = {}", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef max_market_fee(self):\n    from .amount import Amount\n    return Amount({'amount': self['options']['max_market_fee'], 'asset_id': self['id']})", "buggy_source_code": "@property\ndef max_market_fee(self):\n    from .amount import Amount\n    return Amount({'amount': self['options']['max_market_fee'], 'asset_id': self['id']}, blockchain_instance=self.blockchain)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_valid_token(token):\n    ttl = timedelta(hours=12)\n    return token.get('created') + ttl >= utcnow()", "buggy_source_code": "def is_valid_token(token):\n    ttl = timedelta(hours=12)\n    created = arrow.get(token.get('created')).datetime\n    return created + ttl >= utcnow()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def disable_instrumentation(self):\n    eulfedora.server.ApiFacade = eulfedora.server.RealApiFacade", "buggy_source_code": "def disable_instrumentation(self):\n    eulfedora.server.ApiFacade = eulfedora.server.RealApiFacade\n    eulfedora.server.ResourceIndex = eulfedora.server.RealResourceIndex\n    eulfedora.models.ResourceIndex = eulfedora.models.RealResourceIndex", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cmd_set(options):\n\n    def per_file():\n        set_tags(f, **options)\n        print_file_tags(f, **options)", "buggy_source_code": "def cmd_set(options):\n\n    def per_file(f):\n        set_tags(f, **options)\n        print_file_tags(f, **options)\n    apply_to_files(per_file, options)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cmd_set_all(options):\n\n    def per_file():\n        set_all_tags(f, **options)\n        print_file_tags(f, **options)\n    apply_to_files(per_file, options)", "buggy_source_code": "def cmd_set_all(options):\n\n    def per_file(f):\n        set_all_tags(f, **options)\n        print_file_tags(f, **options)\n    apply_to_files(per_file, options)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def itransform(p1, p2, points, switch=False, radians=False):\n    return Transformer.from_proj(p1, p2).itransform(points, switch, radians)", "buggy_source_code": "def itransform(p1, p2, points, switch=False, radians=False, errcheck=False):\n    return Transformer.from_proj(p1, p2).itransform(points, switch, radians, errcheck=errcheck)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@typing.overload\ndef disallow_positional_args(wrapped: None, allowed: Optional[List[str]]) -> Callable[[Fn], Fn]:\n    ...", "buggy_source_code": "@typing.overload\ndef disallow_positional_args(wrapped: None=..., allowed: Optional[List[str]]=...) -> Callable[[Fn], Fn]:\n    ...", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, address):\n    if '/' in str(address):\n        raise AddressValueError(address)", "buggy_source_code": "def __init__(self, address):\n    if not isinstance(address, bytes) and '/' in str(address):\n        raise AddressValueError(address)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def from_iterable(iterable: Iterable) -> Observable:\n    from .core.observable.fromiterable import from_iterable as from_iterable_\n    return from_iterable_(iterable)", "buggy_source_code": "def from_iterable(iterable: Iterable, scheduler: typing.Scheduler=None) -> Observable:\n    from .core.observable.fromiterable import from_iterable as from_iterable_\n    return from_iterable_(iterable, scheduler)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_datapath(filename):\n    return os.path.join(os.path.dirname(__file__), 'fixtures', filename)", "buggy_source_code": "def get_datapath(filename):\n    return os.path.join(os.path.dirname(__file__), '..', 'tests', 'fixtures', filename)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _compose_err_msg(code, status, m_str=''):\n    fmsg = status + str(m_str)\n    return tornado.web.HTTPError(code, fmsg)", "buggy_source_code": "def _compose_err_msg(code, status, m_str=''):\n    fmsg = str(status) + str(m_str)\n    return tornado.web.HTTPError(status_code=code, reason=fmsg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def check_linear(time_data):\n    last = time_data[0]\n    for val in time_data[1:]:\n        if not val >= last:\n            return False\n    return True", "buggy_source_code": "def check_linear(time_data):\n    last = time_data[0]\n    for val in time_data[1:]:\n        if not val >= last:\n            return False\n        last = val\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setup_sentry_logging():\n    if _SENTRY_CLIENT:\n        setup_logging(SentryHandler(_SENTRY_CLIENT))", "buggy_source_code": "def setup_sentry_logging():\n    if _SENTRY_CLIENT:\n        handler = SentryHandler(_SENTRY_CLIENT)\n        handler.setLevel(logging.ERROR)\n        setup_logging(handler)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@api.onchange('deferred_revenue_category_id')\ndef onchange_deferred_revenue(self):\n    if self.deferred_revenue_category_id:\n        self.property_account_income_id = self.deferred_revenue_category_id.account_asset_id", "buggy_source_code": "@api.onchange('deferred_revenue_category_id')\ndef onchange_deferred_revenue(self):\n    if self.deferred_revenue_category_id:\n        self.property_account_income_id = self.deferred_revenue_category_id.account_asset_id\n        self.company_id = self.deferred_revenue_category_id.company_id", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def subject_identifier(self):\n    return self.get_subject_identifier()", "buggy_source_code": "@property\ndef subject_identifier(self):\n    return self.get_subject_identifier()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_base_packing_price_gross(self, request):\n    pc = self.get_price_calculator(request)\n    return pc.get_base_packing_price_gross(request)", "buggy_source_code": "def get_base_packing_price_gross(self, request, with_properties=True):\n    pc = self.get_price_calculator(request)\n    return pc.get_base_packing_price_gross(with_properties)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_base_packing_price(self, request):\n    pc = self.get_price_calculator(request)\n    return pc.get_base_packing_price(request)", "buggy_source_code": "def get_base_packing_price(self, request, with_properties=True):\n    pc = self.get_price_calculator(request)\n    return pc.get_base_packing_price(with_properties)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def init_logger(args):\n    logging.basicConfig(logging.INFO + args.quiet * 10 - args.verbose * 10)", "buggy_source_code": "def init_logger(args):\n    logging.basicConfig(level=logging.INFO + args.quiet * 10 - args.verbose * 10)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def database_popup():\n    window = Toplevel()\n    database_gui.DatabaseFrame(database_config.get_record_db(), window)", "buggy_source_code": "def database_popup():\n    window = Toplevel()\n    db = database_config.get_record_db()\n    database_gui.DatabaseFrame(db, window)\n    db.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name: str) -> None:\n    self.time = datetime.datetime.now()\n    self.name = name", "buggy_source_code": "def __init__(self, name: str) -> None:\n    self.time = datetime.datetime.now()\n    self.name = name\n    self.error_status = constants.ErrorLevels.UNKNOWN", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def bandwidth_event(self, event):\n    self.eventTick()", "buggy_source_code": "def bandwidth_event(self, event):\n    if not self.isPauseBuffer:\n        self.eventTick()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def snapshot_name_from_cinder_snapshot(self, snapshot):\n    sn_name = self.is_clean_volume_name(snapshot['id'])\n    return sn_name", "buggy_source_code": "def snapshot_name_from_cinder_snapshot(self, snapshot):\n    sn_name = self.is_clean_volume_name(snapshot['id'], DM_SN_PREFIX)\n    return sn_name", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def init_middle(bounds):\n    return np.mean(bounds, axis=1)", "buggy_source_code": "def init_middle(bounds):\n    return np.mean(bounds, axis=1)[None, :]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dummy_imports():\n    import service\n    import uuid_map\n    import mail_services\n    import dispatcher", "buggy_source_code": "def dummy_imports():\n    import service\n    import dispatcher\n    try:\n        import uuid_map\n        import mail_services\n    except ImportError:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node"]}
{"fixed_source_code": "def parse(self, source):\n    lexer = lex.lex()\n    parser = yacc.yacc()\n    return parser.parse(source)", "buggy_source_code": "def parse(self, source):\n    lexer = lex.lex()\n    parser = yacc.yacc(debug=False, write_tables=False)\n    return parser.parse(source)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def decrease_stats():\n    while True:\n        time.sleep(15)\n        decrease_hunger()\n        if pet_variables.pet_hunger <= 0:\n            decrease_health()\n            decrease_happiness()", "buggy_source_code": "def decrease_stats():\n    while pet_variables.beginning_finished:\n        time.sleep(15)\n        decrease_hunger()\n        if pet_variables.pet_hunger <= 0:\n            decrease_health()\n            decrease_happiness()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_artifact(self, artifact, only_newer=True):\n    return self.store.get_artifact(artifact, only_newer)", "buggy_source_code": "def get_artifact(self, artifact, only_newer=True):\n    return self.store.get_artifact(artifact, only_newer=only_newer)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def metadata(self):\n    return {}", "buggy_source_code": "def metadata(self):\n    return {'exposed': self._time_last}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def expose(self, source=0.0, time=0.0):\n    self._det += (source + self.dark) * time", "buggy_source_code": "def expose(self, source=0.0, time=0.0):\n    self._time_last = time\n    self._det += (source + self.dark) * time", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _result_output(envvar: str, value: str):\n    print('%s=%s' % (envvar, value), file=out_target)", "buggy_source_code": "def _result_output(envvar: str, value: str) -> None:\n    print('%s=%s' % (envvar, value), file=out_target)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def update(self):\n    if not self.is_current():\n        self.parse()\n        self.write()", "buggy_source_code": "def update(self):\n    if not self.is_current():\n        self.download_files()\n        self.parse()\n        self.write()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_start(self):\n    self.emit_value(60)", "buggy_source_code": "def on_start(self):\n    super(ShutterLightController.luminosity_limit, self).on_start()\n    self.emit_value(60)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_start(self):\n    self.emit_value(20)", "buggy_source_code": "def on_start(self):\n    super(ShutterLightController.night_detection_limit, self).on_start()\n    self.emit_value(20)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(FileHandlingFailure, self).__init__(args, kwargs)\n    self._errorCode = 1999\n    self._message = 'Failed during file handling.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(FileHandlingFailure, self).__init__(args, kwargs)\n    self._errorCode = 1999\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(MessageFailure, self).__init__(args, kwargs)\n    self._errorCode = 1112\n    self._message = 'Failed to handle message from payload.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(MessageFailure, self).__init__(args, kwargs)\n    self._errorCode = 1112\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(RunPayloadFailure, self).__init__(args, kwargs)\n    self._errorCode = 1111\n    self._message = 'Failed to execute payload.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(RunPayloadFailure, self).__init__(args, kwargs)\n    self._errorCode = 1111\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(SetupFailure, self).__init__(args, kwargs)\n    self._errorCode = 1110\n    self._message = 'Failed to setup environment.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(SetupFailure, self).__init__(args, kwargs)\n    self._errorCode = 1110\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(StageOutFailure, self).__init__(args, kwargs)\n    self._errorCode = 1137\n    self._message = 'Failed to stage-out file.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(StageOutFailure, self).__init__(args, kwargs)\n    self._errorCode = 1137\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(ConversionFailure, self).__init__(args, kwargs)\n    self._errorCode = 1998\n    self._message = 'Failed to convert object data.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(ConversionFailure, self).__init__(args, kwargs)\n    self._errorCode = 1998\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(StageInFailure, self).__init__(args, kwargs)\n    self._errorCode = 1099\n    self._message = 'Failed to stage-in file.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(StageInFailure, self).__init__(args, kwargs)\n    self._errorCode = 1099\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(MKDirFailure, self).__init__(args, kwargs)\n    self._errorCode = 1997\n    self._message = 'Failed to create local directory.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(MKDirFailure, self).__init__(args, kwargs)\n    self._errorCode = 1997\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(NoLocalSpace, self).__init__(args, kwargs)\n    self._errorCode = 1098\n    self._message = 'Not enough local space.'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(NoLocalSpace, self).__init__(args, kwargs)\n    self._errorCode = 1098\n    self._message = errors.get_error_message(self._errorCode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def clear(self):\n    self.shared_buffer.fill(np.nan)", "buggy_source_code": "def clear(self):\n    with self.shared_buffer.get_lock():\n        self.shared_buffer.fill(np.nan)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@AbstractPolicy.with_path_cache\ndef path_cmp_key(self, path: Path) -> int:\n    return -self._acc_bw(path)", "buggy_source_code": "@AbstractPolicy.with_path_cache\ndef path_cmp_key(self, path: Path):\n    return -self._acc_bw(path) * 0.99 ** len(path.links)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_login_bytes(user, password, database, lcid):\n    app_name = 'minitds'", "buggy_source_code": "def get_login_bytes(user, password, database, lcid):\n    app_name = 'minitds'\n    pos = 94", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def connect(host, user, password, database, port=14333, lcid=1033, timeout=None):\n    return Connection(user, password, database, host, port, lcid, timeout)", "buggy_source_code": "def connect(host, user, password, database='', port=14333, lcid=1033, timeout=None):\n    return Connection(user, password, database, host, port, lcid, timeout)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def setup(self):\n    self._login()\n    self.refresh_extxt()\n    self._setup = True", "buggy_source_code": "def setup(self):\n    self._login()\n    self.refresh_extxt()\n    refresh_ignore_list()\n    self._setup = True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef roi(self):\n    return SheetOverlay(self.roi_bounds, [el.roi for el in self.data], style=self.style, metadata=self.metadata)", "buggy_source_code": "@property\ndef roi(self):\n    return SheetOverlay([el.roi for el in self.data], bounds=self.roi_bounds, style=self.style, metadata=self.metadata)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def all(self):\n    return self.context.aq_parent.absolute_url()", "buggy_source_code": "def all(self):\n    return self.context.aq_parent.aq_parent.absolute_url()", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def send(self, sendMessage):\n    self.sock.send(sendMessage.destinationType + ' ' + str(sendMessage.destinationID) + ' ' + quote(sendMessage.content))\n    return 0", "buggy_source_code": "def send(self, sendMessage):\n    self.sock.send(sendMessage.destinationType + ' ' + str(sendMessage.destinationID) + ' ' + quote(sendMessage.content.encode('utf-8')))\n    return 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cmd_insert(self, args):\n    pass", "buggy_source_code": "def cmd_insert(self, args):\n    raise NotImplemented('INSERT not implemented')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cmd_maintainer(self, args):\n    pass", "buggy_source_code": "def cmd_maintainer(self, name):\n    self.need_commit = True\n    self.maintainer = name", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _update_highlight_args(self):\n    style = self.settings.get('mark_style')\n    self._highlight_args = self._create_highlight_args(style)", "buggy_source_code": "def _update_highlight_args(self):\n    self.region_scope = self.settings.get('error_scope')\n    style = self.settings.get('mark_style')\n    self._highlight_args = self._create_highlight_args(style)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def json_from_file(json_file):\n    with open(json_file, 'r') as tool_file:\n        json_tool = json.load(tool_file)\n    tool_file.close()\n    return json_tool", "buggy_source_code": "def json_from_file(json_file):\n    logger.debug('Loading tool entry from local file: ' + json_file)\n    with open(json_file, 'r') as tool_file:\n        json_tool = json.load(tool_file)\n    tool_file.close()\n    return json_tool", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *perms):\n    self._perms = perms", "buggy_source_code": "def __init__(self, *perms):\n    self._perms = list(perms)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def invenio_authenticated(self, f):\n    return login_required(f)", "buggy_source_code": "def invenio_authenticated(self, f):\n    f._force_https = True\n    return login_required(f)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def enable_rotation(self, **kwargs):\n    if self.debug:\n        self.log.debug('Enabling rotation')\n    self.rotation_enabled = True", "buggy_source_code": "def enable_rotation(self, **kwargs):\n    del kwargs\n    if self.debug:\n        self.log.debug('Enabling rotation')\n    self.rotation_enabled = True", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def disable_rotation(self, **kwargs):\n    if self.debug:\n        self.log.debug('Disabling rotation')\n    self.rotation_enabled = False", "buggy_source_code": "def disable_rotation(self, **kwargs):\n    del kwargs\n    if self.debug:\n        self.log.debug('Disabling rotation')\n    self.rotation_enabled = False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def rotate_left(self, steps=1, mode=None, **kwargs):\n    self.rotate(direction='left', steps=steps, mode=mode)", "buggy_source_code": "def rotate_left(self, steps=1, mode=None, **kwargs):\n    del kwargs\n    self.rotate(direction='left', steps=steps, mode=mode)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def rotate_right(self, mode=None, steps=1, **kwargs):\n    self.rotate(direction='right', steps=steps, mode=mode)", "buggy_source_code": "def rotate_right(self, mode=None, steps=1, **kwargs):\n    del kwargs\n    self.rotate(direction='right', steps=steps, mode=mode)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def register_on_event_source_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_event_source_changed)", "buggy_source_code": "def register_on_event_source_changed(self, callback):\n    event_type = library.VBoxEventType.on_event_source_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_clipboard_mode_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_clipboard_mode_changed)", "buggy_source_code": "def register_on_clipboard_mode_changed(self, callback):\n    event_type = library.VBoxEventType.on_clipboard_mode_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_serial_port_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_serial_port_changed)", "buggy_source_code": "def register_on_serial_port_changed(self, callback):\n    event_type = library.VBoxEventType.on_serial_port_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_can_show_window(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_can_show_window)", "buggy_source_code": "def register_on_can_show_window(self, callback):\n    event_type = library.VBoxEventType.on_can_show_window\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_show_window(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_show_window)", "buggy_source_code": "def register_on_show_window(self, callback):\n    event_type = library.VBoxEventType.on_show_window\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_network_adapter_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_network_adapter_changed)", "buggy_source_code": "def register_on_network_adapter_changed(self, callback):\n    event_type = library.VBoxEventType.on_network_adapter_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_drag_and_drop_mode_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_drag_and_drop_mode_changed)", "buggy_source_code": "def register_on_drag_and_drop_mode_changed(self, callback):\n    event_type = library.VBoxEventType.on_drag_and_drop_mode_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_additions_state_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_additions_state_change)", "buggy_source_code": "def register_on_additions_state_changed(self, callback):\n    event_type = library.VBoxEventType.on_additions_state_change\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_vrde_server_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_vrde_server_changed)", "buggy_source_code": "def register_on_vrde_server_changed(self, callback):\n    event_type = library.VBoxEventType.on_vrde_server_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_medium_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_medium_changed)", "buggy_source_code": "def register_on_medium_changed(self, callback):\n    event_type = library.VBoxEventType.on_medium_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_shared_folder_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_shared_folder_changed)", "buggy_source_code": "def register_on_shared_folder_changed(self, callback):\n    event_type = library.VBoxEventType.on_shared_folder_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_state_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_state_changed)", "buggy_source_code": "def register_on_state_changed(self, callback):\n    event_type = library.VBoxEventType.on_state_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def register_on_parallel_port_changed(self, callback):\n    return self.event_source.register_callback(callback, library.VBoxEventType.on_parallel_port_changed)", "buggy_source_code": "def register_on_parallel_port_changed(self, callback):\n    event_type = library.VBoxEventType.on_parallel_port_changed\n    return self.event_source.register_callback(callback, event_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def getText(self):\n    return open(self.path, 'utf-8').read()", "buggy_source_code": "def getText(self):\n    return open(self.path, mode='r', encoding='utf-8').read()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def prepare_objects_in_field(self, obj):\n    return obj.solution.objects_in_field", "buggy_source_code": "def prepare_objects_in_field(self, obj):\n    return obj.solution.objects_in_field if obj.solution else None", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def profile(request):\n    try:\n        return {'profile': request.user.get_profile()}\n    except:\n        pass", "buggy_source_code": "def profile(request):\n    try:\n        return {'profile': request.user.get_profile()}\n    except:\n        return {}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, json_str, sql_str):\n    self.data = json_loader.loads(json_str)\n    self.query_engine = DataQueryEngine(self.data, sql_str)", "buggy_source_code": "def __init__(self, json_str, sql_str):\n    self.data = json.loads(json_str, encoding='latin1')\n    self.query_engine = DataQueryEngine(self.data, sql_str)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\n@memoized\ndef use_datespans_in_retrospective(self):\n    return abs(self.startdate_shift) + abs(self.enddate_shift) + abs(self.fixed_datespan_days) > 0", "buggy_source_code": "@property\n@memoized\ndef use_datespans_in_retrospective(self):\n    return abs(self.startdate_shift) + abs(self.enddate_shift) + abs(self.fixed_datespan_days) + abs(self.fixed_datespan_months) > 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def after_signup(self, user):\n    signals.user_signed_up.send(sender=SignupForm, user=user)", "buggy_source_code": "def after_signup(self, user, form):\n    signals.user_signed_up.send(sender=SignupForm, user=user)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dropConnection(self, connection_id):\n    self.page.site.connectionLog(self.page, 'close')\n    self.connFolderRemove(connection_id)", "buggy_source_code": "def dropConnection(self, connection_id):\n    page = self.page\n    site = page.site\n    site.connectionLog(page, 'close')\n    self.connFolderRemove(connection_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_locale(self):\n    return self.cookie.value.get('locale')", "buggy_source_code": "def _get_locale(self):\n    if self.cookie:\n        return self.cookie.value.get('locale')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __getitem__(self, key):\n    return one(self._index[key]).data", "buggy_source_code": "def __getitem__(self, key):\n    v = one(self._index[key])\n    if v is None:\n        raise KeyError()\n    return v.data", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.full = False", "buggy_source_code": "def __init__(self, full=False):\n    self.full = full", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def install_all(self):\n    self.clone_repo()\n    self.install_federation_webapp()\n    self.install_api_webapp()\n    self.install_webapp()", "buggy_source_code": "def install_all(self):\n    self.clone_repo()\n    self.install_federation_webapp()\n    self.install_api_webapp()\n    self.install_sms_webapp()\n    self.install_webapp()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def plot(self):\n    plt.plot(self.x, self.y, 'k')", "buggy_source_code": "def plot(self, layer=None):\n    if layer is None or layer in self.layers:\n        plt.plot(self.x, self.y, 'k')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _validateName(self):\n    if self._name == None:\n        self._name = self.__class__", "buggy_source_code": "def _validateName(self):\n    if self._name == None:\n        self._name = self.__class__.__name__", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get(self, request_header, default=None):\n    return getattr(self.environ, 'http_%s' % request_header.lower(), default)", "buggy_source_code": "def get(self, request_header, default=None):\n    return getattr(self.environ, 'http_%s' % request_header.lower().replace('-', '_'), default)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, debug=False):\n    self._name_to_method_info = {}\n    self._register_describe()\n    self.debug = debug\n    self.tracebacks = {}", "buggy_source_code": "def __init__(self, debug=False):\n    self._name_to_method_info = {}\n    self._register_describe()\n    self.debug = debug\n    self._logger = _get_default_logger()\n    self.tracebacks = {}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def OnGetItemAttr(self, item):\n    return None", "buggy_source_code": "def OnGetItemAttr(self, item):\n    if item % 2 == 0:\n        return self.attrEven\n    else:\n        return self.attrOdd", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def refreshAll(self):\n    for i in range(len(self.sq)):\n        self.RefreshItem(i)", "buggy_source_code": "def refreshAll(self):\n    self.SetItemCount(len(self.sq))\n    for i in range(len(self.sq)):\n        self.RefreshItem(i)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def resource_url_fix(resource_url):\n    url_path = urlparse(resource_url).path\n    return config.get('ckan.site_url') + url_path", "buggy_source_code": "def resource_url_fix(resource_url, same_domain):\n    if same_domain == True:\n        url_path = urlparse(resource_url).path\n        return config.get('ckan.site_url') + url_path\n    else:\n        return resource_url", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def func(self, Q, x, c):\n    y = Q * np.exp(-1 * c * x)\n    return y", "buggy_source_code": "@staticmethod\ndef func(Q, x, c):\n    y = Q * np.exp(-1 * c * x)\n    return y", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef email_address(self):\n    return self.original().email_address", "buggy_source_code": "@property\ndef email_address(self):\n    orig = self.original()\n    if not orig:\n        return None\n    return orig.email_address", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef attachments(self):\n    return self.original().attachments", "buggy_source_code": "@property\ndef attachments(self):\n    orig = self.original()\n    if not orig:\n        return None\n    return orig.attachments", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def url(self):\n    return self.original().url() + '?version=%d' % self.version", "buggy_source_code": "def url(self):\n    orig = self.original()\n    if not orig:\n        return None\n    return orig.url() + '?version=%d' % self.version", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def shorthand_id(self):\n    return '%s#%s' % (self.original().shorthand_id(), self.version)", "buggy_source_code": "def shorthand_id(self):\n    orig = self.original()\n    if not orig:\n        return None\n    return '%s#%s' % (orig.shorthand_id(), self.version)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/')\ndef i_dont_even_know():\n    return '\\nHELLO\\n'", "buggy_source_code": "@app.route('/')\ndef i_dont_even_know():\n    return render_template('index.html', stuff=[1, 'poo', False])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, *rspec_tups, shuffle=True, batch_size=None, batch_axis=0, rng=None, repeat=False, permissive=None, **batch_kwargs):\n    pass", "buggy_source_code": "def __init__(self, shuffle=True, batch_size=None, batch_axis=0, rng=None, repeat=False, permissive=None, add_axis_len=None, *rspec_tups, **batch_kwargs):\n    pass", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ncomb(n, m):\n    return math.factorial(n) / math.factorial(m)", "buggy_source_code": "def ncomb(n, m):\n    d = max(n - m, 1)\n    return math.factorial(n) / math.factorial(m) / math.factorial(d)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def indefLenValueDecoder(self, fullSubstrate, substrate, asn1Spec, tagSet, length, state, decodeFun):\n    raise error.PyAsn1Error('Indefinite length mode decoder not implemented for %s' % tagSet)", "buggy_source_code": "def indefLenValueDecoder(self, fullSubstrate, substrate, asn1Spec, tagSet, length, state, decodeFun):\n    raise error.PyAsn1Error('Indefinite length mode decoder not implemented for %s' % (tagSet,))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def valueDecoder(self, fullSubstrate, substrate, asn1Spec, tagSet, length, state, decodeFun):\n    raise error.PyAsn1Error('Decoder not implemented for %s' % tagSet)", "buggy_source_code": "def valueDecoder(self, fullSubstrate, substrate, asn1Spec, tagSet, length, state, decodeFun):\n    raise error.PyAsn1Error('Decoder not implemented for %s' % (tagSet,))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def initialize_options(self):\n    pass", "buggy_source_code": "def initialize_options(self):\n    self.inplace = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def gl_apply(self):\n    glMultMatrixf(self.get_matrix().transpose())", "buggy_source_code": "def gl_apply(self):\n    from OpenGL.GL import glMultMatrixf\n    glMultMatrixf(self.get_matrix().transpose())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def gl_apply_inverse(self):\n    glMultMatrixf(self.get_inverse_matrix().transpose())", "buggy_source_code": "def gl_apply_inverse(self):\n    from OpenGL.GL import glMultMatrixf\n    glMultMatrixf(self.get_inverse_matrix().transpose())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.templates = {}\n    self.recent_phrases = []\n    self.max_recent_phrases = 3", "buggy_source_code": "def __init__(self):\n    self.templates = {}\n    self.recent_phrases = []\n    self.max_recent_phrases = 3\n    self.loop_prevention_offset = 2", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_error_message(self, error_message):\n    pass", "buggy_source_code": "def add_error_message(self, error_message):\n    self.set_status_error()\n    self.error_messages.append(error_message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def detect_auteur_depot_from_url(url):\n    if '/propositions/' in url:\n        return 'Députés'\n    elif '/leg/ppl' in url:\n        return 'Sénateurs'\n    return 'Gouvernement'", "buggy_source_code": "def detect_auteur_depot_from_url(url):\n    if '/propositions/' in url or '/PIONAN' in url:\n        return 'Députés'\n    elif '/leg/ppl' in url:\n        return 'Sénateurs'\n    return 'Gouvernement'", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _split_command_if_str(command):\n    if isinstance(command, str):\n        return shlex.split(command)\n    else:\n        return command", "buggy_source_code": "def _split_command_if_str(command):\n    if isinstance(command, str):\n        return shlex.split(command, posix=os.name == 'posix')\n    else:\n        return command", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture\ndef stub_server(request):\n    yield from _serve(request, http.server.SimpleHTTPRequestHandler)", "buggy_source_code": "@pytest.fixture(scope='session')\ndef stub_server(request):\n    yield from _serve(request, http.server.SimpleHTTPRequestHandler)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture\ndef stub_auth_server(request):\n    yield from _serve(request, AuthHandler)", "buggy_source_code": "@pytest.fixture(scope='session')\ndef stub_auth_server(request):\n    yield from _serve(request, AuthHandler)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@follows(calculateIdentityByDescent)\n@transform(calculateIdentityByDescent, regex('QC.dir/(.+).genome.gz'), 'plots.dir/IBD-hist.png')\ndef plotIbdHistogram(infile, outfile):\n    statement = '\\n    python %(scriptsdir)s/qcs2qc.py\\n    --task=flag_relations\\n    --relationship-file=%(infile)s\\n    --ibs-cutoff=%(relationship_cutoff)s\\n    --plotting-path=plots.dir\\n    --log=%(outfile)s.log\\n    '\n    P.run()", "buggy_source_code": "@follows(calculateIdentityByDescent)\n@transform(calculateIdentityByDescent, regex('QC.dir/(.+).genome.gz'), 'plots.dir/IBD-hist.png')\ndef plotIbdHistogram(infile, outfile):\n    job_memory = '300G'\n    statement = '\\n    python %(scriptsdir)s/qcs2qc.py\\n    --task=flag_relations\\n    --relationship-file=%(infile)s\\n    --ibs-cutoff=%(relationship_cutoff)s\\n    --plotting-path=plots.dir\\n    --log=%(outfile)s.log\\n    '\n    P.run()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "async def interested_list(self):\n    data = self._data\n    data.select('interested_list')\n    intlist = await data.get_value()\n    return intlist", "buggy_source_code": "async def interested_list(self):\n    data = self._data\n    data.select('interested_list')\n    intlist = await data.get_value()\n    if not intlist:\n        return []\n    return intlist", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def post(self):\n    data = tornado.escape.json_decode(self.request.body)\n    bot_handler(data=data)", "buggy_source_code": "def post(self):\n    data = tornado.escape.json_decode(self.request.body)\n    self.set_status(200)\n    return bot_handler(data=data)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def items(self):\n    cursor = self.db.execute('SELECT key, value FROM cache ORDER BY ts')\n    try:\n        yield from cursor\n    finally:\n        cursor.close()", "buggy_source_code": "def items(self):\n    cursor = self.db.execute(self.sql_select_kv)\n    try:\n        yield from cursor\n    finally:\n        cursor.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def check(conf=DEFAULTCONF):\n    return conf['ENABLED']", "buggy_source_code": "def check(conf=DEFAULTCONF):\n    if not conf['ENABLED']:\n        return False\n    if not pyclamd:\n        return False\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def run(self):\n    check_call(['make', '-C', 'spreadsplug/web/client', 'production'])\n    SdistCommand.run(self)", "buggy_source_code": "def run(self):\n    check_call(['make', '-C', 'spreadsplug/web/client', 'production', 'development'])\n    SdistCommand.run(self)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, paths, basedir=None):\n    self.output.output(self.partition(paths, basedir=None))", "buggy_source_code": "def run(self, paths, basedir=None):\n    self.output.output(self.partition(paths, basedir=None))\n    logging.info('Done.')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def format_for_error(self):\n    return '{} {} (from {})'.format(self.name, self.version, self.link.file_path)", "buggy_source_code": "def format_for_error(self):\n    return '{} {} (from {})'.format(self.name, self.version, self.link.file_path if self.link.is_file else self.link)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def put_packet(self, message: SerialMessage, key: bytes):\n    out = message.framed(key)\n    self.transport.write(out)", "buggy_source_code": "def put_packet(self, message: SerialMessage, key: bytes):\n    out = message.framed(key)\n    logger.debug('write data: %s', to_hex(out))\n    self.transport.write(out)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, def_path, data_path):\n    self.def_path = def_path\n    self.data_path = data_path\n    self.load()", "buggy_source_code": "def __init__(self, def_path, data_path):\n    self.def_path = def_path\n    self.data_path = data_path\n    self.did_use_pb = False\n    self.load()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef volume_level(self):\n    if 'mixer volume' in self._status:\n        return int(self._status['mixer volume']) / 100.0", "buggy_source_code": "@property\ndef volume_level(self):\n    if 'mixer volume' in self._status:\n        return int(float(self._status['mixer volume'])) / 100.0", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "@try_open\ndef raw_read(self, maxsize=None, timeout=None):\n    size_to_read = maxsize or 1\n    return self._raw_handler.ibrd(size_to_read)", "buggy_source_code": "@try_open\ndef raw_read(self, maxsize=None, timeout=None):\n    size_to_read = maxsize or self.READ_BLOCK_SIZE\n    return self._raw_handler.ibrd(size_to_read)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "async def wait_and_quit(loop):\n    from pylp.lib.tasks import running\n    await asyncio.wait(map(lambda runner: runner.future, running))", "buggy_source_code": "async def wait_and_quit(loop):\n    from pylp.lib.tasks import running\n    if running:\n        await asyncio.wait(map(lambda runner: runner.future, running))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@app.route('/')\ndef main():\n    return redirect(url_for('blog.blog_main'))", "buggy_source_code": "@app.route('/')\ndef main():\n    if current_user.is_authenticated():\n        return redirect(url_for('home.main'))\n    return redirect(url_for('blog.blog_main'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, address):\n    self.name = name\n    self.address = IPv4Address(address)", "buggy_source_code": "def __init__(self, name, address):\n    self.name = name\n    self.address = IPv4Address(u(str(address)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "@receiver(signals.p2p_address_ready)\ndef p2p_address_ready_handler(sender, ip, port):\n    peer_manager.set_local_address(ip, port)", "buggy_source_code": "@receiver(signals.p2p_address_ready)\ndef p2p_address_ready_handler(sender, ip, port, **kwargs):\n    peer_manager.set_local_address(ip, port)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, greq, operation):\n    self.operation = operation\n    self.greq = greq", "buggy_source_code": "def __init__(self, greq, operation, method, path):\n    self.operation = operation\n    self.greq = greq\n    self.method = method\n    self.path = path", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stepPhysics(self, steps=1):\n    self.step()", "buggy_source_code": "def stepPhysics(self, steps=1):\n    print('Attempting step call.')\n    self.step()\n    print('Step Called.')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getAnnotations(self):\n    return [child.getAnnotations() for child in self.children()]", "buggy_source_code": "def getAnnotations(self):\n    return [child.getAnnotations() for child in self.children() if hasattr(child, 'getAnnotations')]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send_html_mail(recipient_list, subject, body, from_address=None):\n    send_mail(recipient_list, subject, body, html=True, from_address=None)", "buggy_source_code": "def send_html_mail(recipient_list, subject, body, from_address=None):\n    send_mail(recipient_list, subject, body, html=True, from_address=from_address)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def send_text_mail(recipient_list, subject, body, from_address=None):\n    send_mail(recipient_list, subject, body, html=False, from_address=None)", "buggy_source_code": "def send_text_mail(recipient_list, subject, body, from_address=None):\n    send_mail(recipient_list, subject, body, html=False, from_address=from_address)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "@main.command(help='Search and update plugin information.')\n@click.pass_context\ndef refresh(ctx):\n    check_plugins_initpy(enumerate_plugins())", "buggy_source_code": "@main.command(help='Search and update plugin information.')\n@click.pass_context\ndef refresh(ctx):\n    verbosity = ctx.obj['verbosity']\n    set_log_verbosity(verbosity)\n    check_plugins_initpy(enumerate_plugins())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_longitude(self, override=None):\n    return self._generic_multi_getter('map', 'longitude', override)", "buggy_source_code": "def get_longitude(self, override=None):\n    try:\n        return self._generic_multi_getter('map', 'longitude', override)\n    except ConfigError:\n        return None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_latitude(self, override=None):\n    return self._generic_multi_getter('map', 'latitude', override)", "buggy_source_code": "def get_latitude(self, override=None):\n    try:\n        return self._generic_multi_getter('map', 'latitude', override)\n    except ConfigError:\n        return None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def clear(self, s):\n    self.unerase(s.str_storage)[:] = []", "buggy_source_code": "def clear(self, s):\n    storage = self.unerase(s.str_storage)\n    storage[0:len(storage)] = []", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def hydrate(text):\n    evaluated = ast.literal_eval(text)\n    HTML = evaluated[3]['ARGS']['HTML']\n    return HTML", "buggy_source_code": "def hydrate(text):\n    evaluated = ast.literal_eval(text)\n    HTML = evaluated[3]['ARGS']['HTML']\n    HTML = '<html><body><table>%s</table></body></html>' % HTML.replace('\\\\/', '/')\n    return HTML", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.errorhandler(404)\ndef page_not_found(e):\n    return (render_template('404.html'), 404)", "buggy_source_code": "@app.errorhandler(404)\ndef page_not_found(e):\n    return (render_template('404.html', error=e), 404)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.errorhandler(500)\ndef server_error(e):\n    return (render_template('500.html'), 500)", "buggy_source_code": "@app.errorhandler(500)\ndef server_error(e):\n    return (render_template('500.html', error=e), 500)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sw_onRampBypass_active(self, sw):\n    self.game.modes.remove(self)", "buggy_source_code": "def sw_onRampBypass_active(self, sw):\n    self.game.modes.remove(self)\n    return procgame.game.SwitchContinue", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sw_onRamp50k_active(self, sw):\n    self.game.modes.remove(self)", "buggy_source_code": "def sw_onRamp50k_active(self, sw):\n    self.game.modes.remove(self)\n    return procgame.game.SwitchContinue", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sw_onRamp25k_active(self, sw):\n    self.game.modes.remove(self)", "buggy_source_code": "def sw_onRamp25k_active(self, sw):\n    self.game.modes.remove(self)\n    return procgame.game.SwitchContinue", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sw_onRamp100k_active(self, sw):\n    self.game.modes.remove(self)", "buggy_source_code": "def sw_onRamp100k_active(self, sw):\n    self.game.modes.remove(self)\n    return procgame.game.SwitchContinue", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sw_centerRampMiddle_active(self):\n    pass", "buggy_source_code": "def sw_centerRampMiddle_active(self, sw):\n    self.game.coils.outholeKicker_CaptiveFlashers.pulse(5)\n    return procgame.game.SwitchContinue", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def param_defaults(self):\n    params_dict = IGFBaseProcess.param_defaults()\n    return params_dict", "buggy_source_code": "def param_defaults(self):\n    params_dict = super(IGFBaseProcess, self).param_defaults()\n    return params_dict", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def clone(self, task):\n    return self.__class__(self.action, task)", "buggy_source_code": "def clone(self, task):\n    return self.__class__(self._action, task, save_out=self.save_out)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _focus_in_event_cb(self, window, event):\n    self._list_view.set_is_visible(True)", "buggy_source_code": "def _focus_in_event_cb(self, window, event):\n    if not self._main_view_active:\n        return\n    self._list_view.set_is_visible(True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super(AutoRankmirrorsThread, self).__init__()\n    self.rankmirrors_pid = None\n    self.script = '/usr/share/cnchi/scripts/update-mirrors.sh'", "buggy_source_code": "def __init__(self):\n    super(AutoRankmirrorsThread, self).__init__()\n    self.rankmirrors_pid = None\n    self.script = '/usr/share/cnchi/scripts/update-mirrors.sh'\n    self.mirrorlist = '/etc/pacman.d/antergos-mirrorlist'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _checkLists(self, l1, l2):\n    self.assertEqual(set(l1), set(l2))", "buggy_source_code": "def _checkLists(self, l1, l2, msg=None):\n    self.assertEqual(set(l1), set(l2), msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def contextMenuEvent(self, event):\n    if not self.taurusMenu is None:\n        self.taurusMenu.exec_(event.globalPos())", "buggy_source_code": "def contextMenuEvent(self, event):\n    if not self.taurusMenu is None:\n        self.taurusMenu.exec_(event.globalPos())\n    else:\n        event.ignore()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture\ndef file_library(file_config):\n    return library.FileLibraryProvider(backend=None, config=file_config)", "buggy_source_code": "@pytest.fixture\ndef file_library(file_config):\n    from mopidy.file import library\n    return library.FileLibraryProvider(backend=None, config=file_config)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def open(self):\n    print('WebSocket opened')", "buggy_source_code": "def open(self):\n    handlers.append(self)\n    print('WebSocket opened')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def has_errors(self):\n    self.__read_errors()\n    for err in self.__errors:\n        if err != '':\n            return True\n    return False", "buggy_source_code": "def has_errors(self):\n    self.__read_errors()\n    for err in self.__errors:\n        if 'WARNING' not in err and err != '':\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def index(self, req):\n    redirect_to_url(req, '%s/yourloans/display?%s' % (CFG_SITE_URL, req.args))", "buggy_source_code": "def index(self, req, form):\n    redirect_to_url(req, '%s/yourloans/display?%s' % (CFG_SITE_URL, req.args))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def index(self, req):\n    redirect_to_url(req, '%s/ill/display?%s' % (CFG_SITE_URL, req.args))", "buggy_source_code": "def index(self, req, form):\n    redirect_to_url(req, '%s/ill/display?%s' % (CFG_SITE_URL, req.args))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def vent(self):\n    return self.setValue('DOOR_COMMAND', 4)", "buggy_source_code": "def vent(self):\n    return self.setValue('DOOR_COMMAND', 4, channel=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def move_up(self):\n    return self.setValue('DOOR_COMMAND', 1)", "buggy_source_code": "def move_up(self):\n    return (self.setValue('DOOR_COMMAND', 1, channel=1),)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop(self):\n    return self.setValue('DOOR_COMMAND', 2)", "buggy_source_code": "def stop(self):\n    return self.setValue('DOOR_COMMAND', 2, channel=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def move_down(self):\n    return self.setValue('DOOR_COMMAND', 3)", "buggy_source_code": "def move_down(self):\n    return self.setValue('DOOR_COMMAND', 3, channel=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _compute_distance(self, dists, coeffs):\n    return coeffs['b3'] * np.log10(np.sqrt(dists.rjb ** 2.0 + coeffs['b4'] ** 2.0))", "buggy_source_code": "@classmethod\ndef _compute_distance(cls, dists, coeffs):\n    return coeffs['b3'] * np.log10(np.sqrt(dists.rjb ** 2.0 + coeffs['b4'] ** 2.0))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_price(self, cartitem, currency, **kwargs):\n    price = get_cartitem_unit_price(cartitem, currency=currency)\n    if price.has_value():\n        return price", "buggy_source_code": "def get_price(self, cartitem, currency, **kwargs):\n    price = get_cartitem_unit_price(cartitem, currency=currency, **kwargs)\n    if price.has_value():\n        return price", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_price(self, cartitem, currency, **kwargs):\n    price = get_cartitem_unit_price(cartitem, currency=currency)\n    if price.has_value():\n        return price * cartitem.quantity", "buggy_source_code": "def get_price(self, cartitem, currency, **kwargs):\n    price = get_cartitem_unit_price(cartitem, currency=currency, **kwargs)\n    if price.has_value():\n        return price * cartitem.quantity", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reply_iupac_convert_error(self, error, s_id):\n    print('[BOT] IUPAC conversion error')\n    return self.tweet_error_message('すまない。私の化学目録に「{0}」という文字は無かった。'.format(error), s_id)", "buggy_source_code": "def reply_iupac_convert_error(self, error, s_id, screen_name):\n    print('[BOT] IUPAC conversion error')\n    tweet = '@{0} '.format(screen_name)\n    return self.tweet_error_message(tweet + 'すまない。私の化学目録に「{0}」という文字は無かった。'.format(error), s_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def roll_compass(self):\n\n    def roll_compass_task(task):\n        self.click_somewhere()\n        yield 4.0\n    return self.do_task(roll_compass_task)", "buggy_source_code": "def roll_compass(self):\n\n    def roll_compass_task(task):\n        yield 4.0\n        self.click_somewhere()\n        yield 4.0\n    return self.do_task(roll_compass_task)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init(self, context):\n    self.outputs.new('GetTextureSocketType', 'Output')", "buggy_source_code": "def init(self, context):\n    self.outputs.new('GetTextureSocketType', 'Output')\n    super().init(context)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_no_remote_bind_address_raises_exception(self):\n    with self.assertRaises(ValueError):\n        SSHTunnelForwarder((self.saddr, self.sport), ssh_username=SSH_USERNAME)", "buggy_source_code": "def test_no_remote_bind_address_raises_exception(self):\n    with self.assertRaises(ValueError):\n        SSHTunnelForwarder((self.saddr, self.sport), ssh_username=SSH_USERNAME, ssh_config_file=None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _open_for_write(self):\n    self.handle = open_excel(self.fname)", "buggy_source_code": "def _open_for_write(self):\n    overwrite_file = not os.path.isfile(self.fname)\n    self.handle = open_excel(self.fname, overwrite_file=overwrite_file)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def openHelp(self):\n    algHelp = self.alg.helpUrl()\n    if algHelp is not None:\n        webbrowser.open(algHelp)", "buggy_source_code": "def openHelp(self):\n    algHelp = self.alg.helpUrl()\n    if algHelp not in [None, '']:\n        webbrowser.open(algHelp)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.client = APIClient()\n    self.resource_types = {'GenericResource', 'RasterResource', 'RefTimeSeriesResource', 'TimeSeriesResource', 'NetcdfResource', 'ModelProgramResource', 'ModelInstanceResource', 'ToolResource', 'SWATModelInstanceResource', 'GeographicFeatureResource', 'ScriptResource'}", "buggy_source_code": "def setUp(self):\n    self.client = APIClient()\n    self.resource_types = {'GenericResource', 'RasterResource', 'RefTimeSeriesResource', 'TimeSeriesResource', 'NetcdfResource', 'ModelProgramResource', 'ModelInstanceResource', 'ToolResource', 'SWATModelInstanceResource', 'GeographicFeatureResource', 'ScriptResource', 'CollectionResource'}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def process_item(self, item, spider):\n    line = json.dumps(dict(item)) + '\\n'\n    self.file.write(line)\n    return item", "buggy_source_code": "def process_item(self, item, spider):\n    line = json.dumps(dict(item)) + '\\n'\n    self.file.write(bytes(line, 'utf-8'))\n    return item", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def downloadH264(self, folder, options, grabber):\n    Utils.downloadH264(self.grabber, folder, self.getH264(), options, self.pid, self.filename, self.title)", "buggy_source_code": "def downloadH264(self, folder, options, grabber):\n    Utils.downloadH264(self.grabber, grabber, folder, self.getH264(), options, self.pid, self.filename, self.title)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __exit__(self, *args):\n    self._fd.write(json.dumps(self._array, indent=3, ensure_ascii=False))", "buggy_source_code": "def __exit__(self, *args):\n    self._fd.write(json.dumps(self._array, indent=3, ensure_ascii=False))\n    self._fd.write('\\n')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __lt__(self, other: 'OrderingItem[T]') -> bool:\n    return self.ordering.compare(self.item, other.item)", "buggy_source_code": "def __lt__(self, other: object) -> bool:\n    if not isinstance(other, OrderingItem):\n        return NotImplemented\n    return self.ordering.compare(self.item, other.item)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.dumpname = 'dmp://./test/dumps/minidump/cmd.dmp'\n    config.remove_cache_folder(self.dumpname)", "buggy_source_code": "def setUp(self):\n    self.dumpname = 'dmp://./test/dumps/minidump/cmd.dmp'\n    self.cache_dumpname = self.dumpname[8:] + '.d'\n    config.remove_cache_folder(self.cache_dumpname)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, options):\n    super().__init__(options)", "buggy_source_code": "def __init__(self, options, args, platform):\n    super().__init__(options, args, platform)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    return self.k8s.list_third_party_resource()", "buggy_source_code": "def run(self):\n    return self.k8s[1].list_third_party_resource()", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def service_is_active(cluster, service_id):\n    service = get_service(cluster, service_id)\n    return service if service['status'] != 'Inactive' else None", "buggy_source_code": "def service_is_active(cluster, service_id):\n    service = get_service(cluster, service_id)\n    return service if service and service.get('status') != 'Inactive' else None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef closing(self):\n    return copy_future(self.__closing)", "buggy_source_code": "@property\ndef closing(self):\n    if self.__closing is None:\n        self.__closing = self._futures.create_future()\n    return copy_future(self.__closing)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def scale(self, scale):\n    self.transformationChanged.emit(self)\n    pass", "buggy_source_code": "def scale(self, scale):\n    self._transformation.scaleByFactor(scale)\n    self.transformationChanged.emit(self)\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@dev_or_authorized\ndef throw_error(request):\n    raise IntentionalException('Error raised for testing purposes.')", "buggy_source_code": "@dev_or_authorized\n@csrf_exempt\ndef throw_error(request):\n    raise IntentionalException('Error raised for testing purposes.')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def remote_event_Mute(arg):\n    lookup_local_action('Audo Mute on All').call(arg)", "buggy_source_code": "def remote_event_Mute(arg):\n    lookup_local_action('AudioMuteOnAll').call('Unmute') if arg == 'Off' else lookup_local_action('AudioMuteOnAll').call('Mute')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def avg(self):\n    return sum(self.values) / float(len(self.values))", "buggy_source_code": "def avg(self):\n    if len(self.values) > 0:\n        return sum(self.values) / float(len(self.values))\n    else:\n        return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, after, get_tracks_function=None):\n    MenuItem.__init__(self, 'loved', None, after)\n    self.get_tracks_function = get_tracks_function", "buggy_source_code": "def __init__(self, last_fm_lover, after, get_tracks_function=None):\n    MenuItem.__init__(self, 'loved', None, after)\n    LoveColumn.last_fm_lover = self\n    self.__lastfmlover = last_fm_lover\n    self.get_tracks_function = get_tracks_function", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@apple_simulator_test('watch')\n@debugserver_test\ndef test_simulator_ostype_watchos(self):\n    self.check_simulator_ostype(sdk='watchsimulator', platform='watchos', arch='i386')", "buggy_source_code": "@apple_simulator_test('watch')\n@debugserver_test\n@skipIfDarwinEmbedded\ndef test_simulator_ostype_watchos(self):\n    self.check_simulator_ostype(sdk='watchsimulator', platform='watchos', arch='i386')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@apple_simulator_test('appletv')\n@debugserver_test\ndef test_simulator_ostype_tvos(self):\n    self.check_simulator_ostype(sdk='appletvsimulator', platform='tvos')", "buggy_source_code": "@apple_simulator_test('appletv')\n@debugserver_test\n@skipIfDarwinEmbedded\ndef test_simulator_ostype_tvos(self):\n    self.check_simulator_ostype(sdk='appletvsimulator', platform='tvos')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@apple_simulator_test('iphone')\n@debugserver_test\ndef test_simulator_ostype_ios(self):\n    self.check_simulator_ostype(sdk='iphonesimulator', platform='ios')", "buggy_source_code": "@apple_simulator_test('iphone')\n@debugserver_test\n@skipIfDarwinEmbedded\ndef test_simulator_ostype_ios(self):\n    self.check_simulator_ostype(sdk='iphonesimulator', platform='ios')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse_output(self, hostname, output):\n    return str(output.split()[-1])", "buggy_source_code": "def parse_output(self, hostname, output):\n    if isinstance(output, bytes):\n        output = output.decode('utf-8')\n    return output.split()[-1]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def starlight_effect(self, rgb1=None, rgb2=None, speed=1, splotch=None):\n    return self._set_multi_mode_effect(Effect.STARLIGHT, rgb1, rgb2, speed, splotch)", "buggy_source_code": "def starlight_effect(self, rgb1=None, rgb2=None, speed=1, splotch=None):\n    return self._set_multi_mode_effect(Effect.STARLIGHT, rgb1, rgb2, speed=speed, splotch=splotch)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, user='ubuntu', queue='celery'):\n    tmux_session = 'celery-' + queue\n    self._kill_cmd = \"tmux kill-session -t '%s'\" % tmux_session", "buggy_source_code": "def __init__(self, user='ubuntu', queue='celery'):\n    tmux_session = 'celery-' + queue\n    self._user = user\n    self._kill_cmd = \"tmux kill-session -t '%s'\" % tmux_session", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def changed_shipping_country(request):\n    form = OnePageCheckoutForm(request.POST)\n    result = simplejson.dumps({'shipping_address': address_inline(request, SHIPPING_PREFIX, form)})\n    return HttpResponse(result)", "buggy_source_code": "def changed_shipping_country(request):\n    form = OnePageCheckoutForm(initial=request.POST)\n    result = simplejson.dumps({'shipping_address': address_inline(request, SHIPPING_PREFIX, form)})\n    return HttpResponse(result)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def changed_invoice_country(request):\n    form = OnePageCheckoutForm(request.POST)\n    result = simplejson.dumps({'invoice_address': address_inline(request, INVOICE_PREFIX, form)})\n    return HttpResponse(result)", "buggy_source_code": "def changed_invoice_country(request):\n    form = OnePageCheckoutForm(initial=request.POST)\n    result = simplejson.dumps({'invoice_address': address_inline(request, INVOICE_PREFIX, form)})\n    return HttpResponse(result)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def is_configchannel(self, name):\n    if not name:\n        return\n    return name in self.do_configchannel_list(name, True)", "buggy_source_code": "def is_configchannel(self, name):\n    if not name:\n        return None\n    return name in self.do_configchannel_list(name, True)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def off(x=''):\n    print('no light ' + str(x))\n    red.stop()\n    green.stop()\n    blue.stop()", "buggy_source_code": "def off(x=''):\n    print('no light ' + str(x))\n    red.stop()\n    green.stop()\n    blue.stop()\n    time.sleep(0.1)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def msg(input_msg, notify):\n    if notify:\n        disown(['notify-send', input_msg])\n    print(input_msg)", "buggy_source_code": "def msg(input_msg, notify):\n    if notify and shutil.which('notify'):\n        disown(['notify-send', input_msg])\n    print(input_msg)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, master=None):\n    NounFrame.__init__(master)\n    self.voc_s.grid_forget()\n    self.voc_p.grid_forget()\n    self.voc_l.grid_forget()", "buggy_source_code": "def __init__(self, master=None):\n    NounFrame.__init__(self, master)\n    self.voc_s.grid_forget()\n    self.voc_p.grid_forget()\n    self.voc_l.grid_forget()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def is_real(self):\n    return not self.is_complex()", "buggy_source_code": "@property\ndef is_real(self):\n    return not self.is_complex", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_complex(self):\n    if self.tin in [3, 4]:\n        return True\n    return False", "buggy_source_code": "@property\ndef is_complex(self):\n    if self.tin in [3, 4]:\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def Copy(self, i):\n    return SignalTuple(self, self)", "buggy_source_code": "def Copy(self):\n    return SignalTuple(tuple((x.copy() for x in self)), self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def from_indra_statements_json(stmts_json, **kwargs):\n    from indra.statements import stmts_from_json\n    statements = stmts_from_json(stmts_json)\n    return from_indra_statements(statements, **kwargs)", "buggy_source_code": "def from_indra_statements_json(stmts_json: List[Mapping[str, Any]], **kwargs):\n    from indra.statements import stmts_from_json\n    statements = stmts_from_json(stmts_json)\n    return from_indra_statements(statements, **kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def process(parsed_feed):\n    score = score_feed(parsed_feed) if len(parsed_feed.entries) > 0 else []\n    return feed2XML(embedUI(parsed_feed, score))", "buggy_source_code": "def process(parsed_feed, training_db, classifier_db):\n    score = score_feed(parsed_feed, classifier_db) if len(parsed_feed.entries) > 0 else []\n    return feed2XML(embedUI(parsed_feed, score))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_sinedata(self):\n    sinewave(sinedata(800))", "buggy_source_code": "@unittest.skip('Verification of test data')\ndef test_sinedata(self):\n    sinewave(sinedata(800))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, game):\n    color = (50, 75, 50)\n    super().__init__(game, color=color, coords=None, size=20)\n    self.teleport()", "buggy_source_code": "def __init__(self, game):\n    color = (50, 75, 50)\n    super().__init__(game, color=color, coords=None, size=SQUARESIZE)\n    self.teleport()", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __exit__(self, exception_type, exception_value, traceback):\n    self.show()", "buggy_source_code": "def __exit__(self, exception_type, exception_value, traceback):\n    if exception_type is None:\n        self.show()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, response=None):\n    return super().__init__(f'pdns response code: {response.status_code}, pdns response body: {response.text}')", "buggy_source_code": "def __init__(self, response=None):\n    self.response = response\n    return super().__init__(f'pdns response code: {response.status_code}, pdns response body: {response.text}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def obj_type(self):\n    return self.page.TYPES.get(Field('label')(self).split()[0], Account.TYPE_UNKNOWN)", "buggy_source_code": "def obj_type(self):\n    return self.page.TYPES.get(Field('label')(self).split()[0].upper(), Account.TYPE_UNKNOWN)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_key(self, key):\n    return self._prefix + key if self._prefix else key", "buggy_source_code": "def _get_key(self, key, omit_prefix=False):\n    return self._prefix + key if self._prefix and (not omit_prefix) else key", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def subscribe_plugin(self, plugin):\n    self.aggregator_plugin.add_result_listener(plugin)\n    self.monitoring_plugin.add_listener(plugin)", "buggy_source_code": "def subscribe_plugin(self, plugin):\n    self.aggregator_plugin.add_result_listener(plugin)\n    self.monitoring_plugin.monitoring.add_listener(plugin)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def finished(self):\n    return self.roundsFinished >= self.ruleset.minRounds", "buggy_source_code": "def finished(self):\n    if self.ruleset:\n        return self.roundsFinished >= self.ruleset.minRounds", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _basename(self):\n    nsides = self.nsides\n    if nsides < 11:\n        bn = POLYGONS[nsides]\n    else:\n        bn = '{}gon'.format(nsides)\n    return bn", "buggy_source_code": "def _basename(self):\n    nsides = self.nsides\n    if nsides < 11:\n        bn = POLYGONS[nsides - 3]\n    else:\n        bn = '{}gon'.format(nsides)\n    return bn", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_cancel(self):\n    self.unlink_loan_security_pledge()", "buggy_source_code": "def on_cancel(self):\n    self.unlink_loan_security_pledge()\n    self.ignore_linked_doctypes = ['GL Entry']", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _update_p(self):\n    self._p[:] = self._p0 + self.__array__()", "buggy_source_code": "def _update_p(self):\n    self._p[:] = self._p0[:] + self.__array__()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def LegendAndSave(Fig, SaveName, loc='upper right', frameon=True):\n    legend(loc=loc, frameon=frameon)\n    savefig(Fig, SaveName, close=False)", "buggy_source_code": "def LegendAndSave(Fig, SaveName, loc='upper right', frameon=True, close=False):\n    legend(loc=loc, frameon=frameon)\n    savefig(Fig, SaveName, close=close)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getWorkingPath():\n    return self.__workingPath", "buggy_source_code": "def getWorkingPath(self):\n    return self.__workingPath", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def binary_crossentropy(y_true, y_pred):\n    return T.nnet.binary_crossentropy(y_pred, y_true).mean()", "buggy_source_code": "def binary_crossentropy(y_true, y_pred):\n    y_pred = T.clip(y_pred, epsilon, 1.0 - epsilon)\n    return T.nnet.binary_crossentropy(y_pred, y_true).mean()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def categorical_crossentropy(y_true, y_pred):\n    return T.nnet.categorical_crossentropy(y_pred, y_true).mean()", "buggy_source_code": "def categorical_crossentropy(y_true, y_pred):\n    y_pred = T.clip(y_pred, epsilon, 1.0 - epsilon)\n    return T.nnet.categorical_crossentropy(y_pred, y_true).mean()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_error(self):\n    from ensime import Error\n    error = Error('message', 1, 2, 4)\n    assert error.includes([1, 3])", "buggy_source_code": "def test_error(self):\n    from ensime import Error\n    error = Error('/tmp', 'message', 1, 2, 4)\n    assert error.includes('/tmp', [1, 3])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef plot_roc_curve(self, X, y, **kwargs):\n    return self._final_estimator.plot_roc_curve(self._pre_transform(X), y, **kwargs)", "buggy_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef plot_roc_curve(self, X, y, **kwargs):\n    X = self._pre_transform(X)\n    return self._final_estimator.plot_roc_curve(X, y, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _restart_server(self, server_id):\n    self._do_rcon(server_id, '_restart')", "buggy_source_code": "def _restart_server(self, server_id):\n    try:\n        self._do_rcon(server_id, '_restart')\n    except RCONCommunicationError:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _set_initial_state(self):\n    self._vocab = None\n    self._class_contexts = None", "buggy_source_code": "def _set_initial_state(self):\n    self._documentation = self._annotator.get_documentation()\n    self._vocab = None\n    self._class_contexts = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __enter__(self):\n    self.__config.begin()\n    return self.__app", "buggy_source_code": "def __enter__(self):\n    self.__config.begin()\n    if not self.__config_file_name is None:\n        self.__config.load_zcml(self.__config_file_name)\n    return self.__app", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restart_webservers():\n    call_backend_task('webservers', 'restart_webserver')", "buggy_source_code": "def restart_webservers():\n    call_backend_task('webservers', 'restart_webserver')\n    restart_varnish()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_named_element_name(self, event):\n    if self.subject:\n        self._name.text = self.subject.name\n        self.request_update()", "buggy_source_code": "def on_named_element_name(self, event):\n    if event is None or self.subject is event.element:\n        self._name.text = self.subject.name\n        self.request_update()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'DbUser [user=' + self.email + ']'", "buggy_source_code": "def __repr__(self):\n    return 'DbUser [user=' + self.email + ', nick=' + self.nickname + ']'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def readDword(self, addr):\n    return unpack(self._ENDIANITY + 'L', self.readMemory(addr, 4))", "buggy_source_code": "def readDword(self, addr):\n    return unpack(self._ENDIANITY + 'L', self.readMemory(addr, 4))[0]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def readWord(self, addr):\n    return unpack(self._ENDIANITY + 'H', self.readMemory(addr, 2))", "buggy_source_code": "def readWord(self, addr):\n    return unpack(self._ENDIANITY + 'H', self.readMemory(addr, 2))[0]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def readQword(self, addr):\n    return unpack(self._ENDIANITY + 'Q', self.readMemory(addr, 8))", "buggy_source_code": "def readQword(self, addr):\n    return unpack(self._ENDIANITY + 'Q', self.readMemory(addr, 8))[0]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def is_valid(self):\n    return not self.get_error_messages() or not self.get_enabled()", "buggy_source_code": "def is_valid(self):\n    return (not self.get_error_messages() or not self.get_enabled()) or self.get_bypassed()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _make_api_request(self, url_end, var):\n    return make_request(url_api + url_end, var, self.connection.header)", "buggy_source_code": "def _make_api_request(self, url_end, var, use_get=True):\n    return make_request(url_api + url_end, var, self.connection.header, use_get)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@api.route('/cost/')\n@login_required\ndef get_user_cost():\n    user_id = current_user.id\n    return user_money(user_id)", "buggy_source_code": "@api.route('/cost/')\n@login_required\ndef get_user_cost():\n    user_id = current_user.id\n    return calculate_trip_cost(*get_operands(*user_money(user_id)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _make_gql_str(self, st):\n    return \"'%s'\" % st.replace(\"'\", \"''\")", "buggy_source_code": "def _make_gql_str(self, st, tilde=False):\n    return \"'%s%s'\" % (st.replace(\"'\", \"''\"), tilde and '~' or '')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _abbreviation(self):\n    self._consume(TokenTypes.QUOTE)\n    datum = self._datum()\n    return Pair(Symbol('quote'), Pair(datum, None))", "buggy_source_code": "def _abbreviation(self):\n    self._consume(TokenTypes.QUOTE)\n    datum = self._datum()\n    return Pair(Symbol('quote'), Pair(datum, Nil()))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def output(self):\n    song = self.client.currentsong()\n    return {'full_text': ' {artist} - {title}'.format(**song), 'icon': 'mmbar/icons/note.xbm'}", "buggy_source_code": "def output(self):\n    song = self.client.currentsong()\n    if song:\n        return {'full_text': ' {artist} - {title}'.format(**song), 'icon': 'mmbar/icons/note.xbm'}\n    else:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, headers=None):\n    self.headers = headers or {}", "buggy_source_code": "def __init__(self, headers=None):\n    self.headers = headers or {}\n    self.requests_session = requests.Session()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def inject_special(names):\n    for name in names:\n        setattr(Array, '__%s__' % name, binding(getattr(bmath, name)))", "buggy_source_code": "def inject_special(names):\n    for name in names:\n        from .bkernel import bmath\n        setattr(Array, '__%s__' % name, binding(getattr(bmath, name)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def closeEvent(self, event):\n    self.camera.StopCapture()", "buggy_source_code": "def closeEvent(self, event):\n    self.camera.StopCapture()\n    import cv2\n    cv2.destroyAllWindows()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _extract_classmethod(m):\n    return m.__get__(True)", "buggy_source_code": "def _extract_classmethod(m):\n    return m.__get__(True).im_func", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def SQLiteConnection(*args, **kw):\n    _warn('SQLiteConnection is deprecated; use connectionForURI(\"sqlite://...\") or \"from sqlobject.sqlite import builder; SQLiteConnection = builder()\"')\n    _sqlite.builder()(*args, **kw)", "buggy_source_code": "def SQLiteConnection(*args, **kw):\n    _warn('SQLiteConnection is deprecated; use connectionForURI(\"sqlite://...\") or \"from sqlobject.sqlite import builder; SQLiteConnection = builder()\"')\n    return _sqlite.builder()(*args, **kw)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    XendError.__init__(self, 'VLAN tag invalid')", "buggy_source_code": "def __init__(self, vlan):\n    XendAPIError.__init__(self)\n    self.vlan = vlan", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_bot_defaults():\n    return {POST_TIMELIMIT: 86400, DATAFILE: ':memory:'}", "buggy_source_code": "def get_bot_defaults():\n    return {POST_TIMELIMIT: 86400, REDIS_BACKEND: 'rlite', REDIS_URL: ':memory:', REDIS_PORT: 6379, REDIS_PASSWORD: None}", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    shutil.rmtree(self.app.config['WHOOSHEE_DIR'])\n    Whooshee.whoosheers = []\n    self.db.drop_all()", "buggy_source_code": "def tearDown(self):\n    shutil.rmtree(self.app.config['WHOOSHEE_DIR'], ignore_errors=True)\n    Whooshee.whoosheers = []\n    self.db.drop_all()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(dsc, job, firehose):\n    return jshint(dsc, firehose)", "buggy_source_code": "def run(dsc, package, job, firehose):\n    return jshint(dsc, firehose)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def signature(self):\n    signature = self.tagger.version() + '-IPA'\n    return signature", "buggy_source_code": "def signature(self):\n    self.load()\n    signature = self.tagger.version() + '-IPA'\n    return signature", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def feature(self, feature_name: str, **options: Dict) -> Callable:\n    return self.lsp.fm.feature(feature_name, **options)", "buggy_source_code": "def feature(self, feature_name: str, **options: Dict) -> Callable[[F], F]:\n    return self.lsp.fm.feature(feature_name, **options)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def thread(self) -> Callable:\n    return self.lsp.thread()", "buggy_source_code": "def thread(self) -> Callable[[F], F]:\n    return self.lsp.thread()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def command(self, command_name: str) -> Callable:\n    return self.lsp.fm.command(command_name)", "buggy_source_code": "def command(self, command_name: str) -> Callable[[F], F]:\n    return self.lsp.fm.command(command_name)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_make_pinmat():\n    model = DataModel('tests/data/cnviewer_data_example_00.zip')\n    assert model is not None\n    model.make_linkage()\n    model.make_dendrogram()\n    model.make_pinmat()", "buggy_source_code": "def test_make_pinmat():\n    model = DataModel('tests/data/cnviewer_data_example_00.zip')\n    assert model is not None\n    model.make_linkage()\n    ordering = model.make_dendrogram()\n    model.make_pinmat(ordering=ordering)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _postcondition_callback(self):\n    print('DEBUG: reached postconditions; stopping')\n    self._wait_postcondition = False\n    self._abort_parser()", "buggy_source_code": "def _postcondition_callback(self):\n    if self._debug:\n        print('DEBUG: reached postconditions; stopping')\n    self._wait_postcondition = False\n    self._abort_parser()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_libraries(self):\n    return sorted(list(self.libraries))", "buggy_source_code": "def get_libraries(self, platform):\n    all_libs = self.get_object_libraries(platform) + list(self.libraries)\n    return sorted(list(all_libs))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('nº %(numero)s de %(data)s') % {'numero': self.numero, 'data': defaultfilters.date(self.data, 'd \\\\d\\\\e F \\\\d\\\\e Y')}", "buggy_source_code": "def __str__(self):\n    return _('%(tipo)s nº %(numero)s de %(data)s') % {'tipo': self.tipo, 'numero': self.numero, 'data': defaultfilters.date(self.data, 'd \\\\d\\\\e F \\\\d\\\\e Y')}", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def charge_standard(self):\n    self.charge_state.charge_to_max_range = False\n    return self.status", "buggy_source_code": "def charge_standard(self):\n    self.charge_state['charge_to_max_range'] = False\n    return self.status", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.cigar = None\n    self.cigar_obj = None", "buggy_source_code": "def __init__(self):\n    self.cigar = None\n    self.cigar_obj = None\n    self.left_clip = self.right_clip = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def button_handler(pin):\n    global status\n    if status == 'recording':\n        stop_recording()\n    elif status == 'idle':\n        start_recording()\n    else:\n        pass", "buggy_source_code": "def button_handler(pin):\n    global status\n    if status == 'recording':\n        stop_recording()\n        return\n    elif status == 'idle':\n        start_recording()\n        return\n    else:\n        return", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def on_quit(self, serv, ev):\n    self._refresh_all_chans()", "buggy_source_code": "def on_quit(self, serv, ev):\n    self._refresh_all_chans()\n    self._user_unregister(ev.source)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_part(self, serv, ev):\n    self._refresh_chaninfos(ev.target)", "buggy_source_code": "def on_part(self, serv, ev):\n    self._refresh_chaninfos(ev.target)\n    self._user_unregister(ev.source)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_descripions_as_dict():\n    descriptions = descript.ion.Description()\n    descriptions[tmp_filename] = description\n    assert descriptions[tmp_filename] == description", "buggy_source_code": "@pytest.mark.parametrize('description', test_descriptions)\ndef test_descripions_as_dict(tmp_filename, description):\n    descriptions = descript.ion.Description()\n    descriptions[tmp_filename] = description\n    assert descriptions[tmp_filename] == description", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/update_stats', methods=['POST'])\ndef update_stats():\n    recordJson = request.get_jsom()\n    smartDB.updateCurrentStats(recordJson)\n    return ('Success', 200)", "buggy_source_code": "@app.route('/update_stats', methods=['POST'])\ndef update_stats():\n    recordJson = request.get_json()\n    print(recordJson)\n    smartDB.updateCurrentStats(recordJson)\n    return ('Success', 200)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    return self.get_summary()", "buggy_source_code": "def __str__(self):\n    return str(self.get_summary())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def dump(data, file_path):\n    with open(file_path, 'w') as file_handle:\n        return yaml.dump(data, file_handle, Dumper=Dumper, default_flow_style=False)", "buggy_source_code": "def dump(data, file_path):\n    with open(file_path, 'w') as file_handle:\n        return yaml.dump(data, file_handle, Dumper=Dumper, default_flow_style=False, allow_unicode=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def decode_url(string):\n    return urllib.unquote_plus(string)", "buggy_source_code": "def decode_url(string):\n    return u(urllib.unquote_plus(bytestring(string)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _ExpandScopes(scopes):\n    return [s if s.startswith('https://') else _SCOPE_PREFIX + s for s in scopes]", "buggy_source_code": "def _ExpandScopes(scopes):\n    return [s if s.startswith('https://') or s in _PREFIXLESS_SCOPES else _SCOPE_PREFIX + s for s in scopes]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_value(self, sampler):\n    return sampler.state['ekin'].value / sampler.ff.system.natom / 3.0", "buggy_source_code": "def get_value(self, sampler):\n    return sampler.state['ekin'].value / sampler.ff.system.natom * 2 / boltzmann", "edit_actions": ["insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def may_subscribe_topic(self, user, topic):\n    return not defaults.PYBB_DISABLE_SUBSCRIPTIONS", "buggy_source_code": "def may_subscribe_topic(self, user, topic):\n    return not defaults.PYBB_DISABLE_SUBSCRIPTIONS and user.is_authenticated()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def handle_before_flush(session, flush_context, instances):\n    logger.debug('handle_before_flush handler')\n    handle_new_or_deleted_budget_transaction(session)\n    verify_budget_transaction_sums(session)\n    logger.debug('handle_before_flush done')", "buggy_source_code": "def handle_before_flush(session, flush_context, instances):\n    logger.debug('handle_before_flush handler')\n    handle_new_or_deleted_budget_transaction(session)\n    verify_budget_transaction_sums(session)\n    issue_105_helper(session)\n    logger.debug('handle_before_flush done')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_time():\n    response = requests.get('http://localhouse:3001/time')\n    return response.json().get('datetime')", "buggy_source_code": "def get_time():\n    try:\n        response = requests.get('http://localhouse:3001/time')\n    except requests.exceptions.ConnectionError:\n        return 'Unavailable'\n    return response.json().get('datetime')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load_loop_simulations(self, interface):\n    for loop in self.loops:\n        interface.load_results(loop)", "buggy_source_code": "def load_loop_simulations(self, interface, **kwargs):\n    self.time = interface.global_time.copy()\n    for loop in self.loops:\n        interface.load_results(loop, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def schema_access(self, datasource: 'BaseDatasource') -> bool:\n    return self.all_datasource_access() or self.database_access(datasource.database) or self.can_access('schema_access', datasource.schema_perm)", "buggy_source_code": "def schema_access(self, datasource: 'BaseDatasource') -> bool:\n    schema_perm = datasource.schema_perm or ''\n    return self.all_datasource_access() or self.database_access(datasource.database) or self.can_access('schema_access', schema_perm)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def datasource_access(self, datasource: 'BaseDatasource') -> bool:\n    return self.schema_access(datasource) or self.can_access('datasource_access', datasource.perm)", "buggy_source_code": "def datasource_access(self, datasource: 'BaseDatasource') -> bool:\n    perm = datasource.perm or ''\n    return self.schema_access(datasource) or self.can_access('datasource_access', perm)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@given(characters(min_codepoint=0, max_codepoint=65264))\n@example('')\ndef test_unicode_involution(s):\n    assert str(encode(s)) == s", "buggy_source_code": "@given(characters(min_codepoint=0, max_codepoint=65264, blacklist_categories=('Cs',)))\n@example('')\ndef test_unicode_involution(s):\n    assert str(encode(s)) == s", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop_sys_pipes():\n    global _mighty_wurlitzer\n    if _mighty_wurlitzer is not None:\n        _mighty_wurlitzer.__exit__(None, None, None)\n        _mighty_wurlitzer = None", "buggy_source_code": "def stop_sys_pipes():\n    global _mighty_wurlitzer\n    global _lock\n    with _lock:\n        if _mighty_wurlitzer is not None:\n            _mighty_wurlitzer.__exit__(None, None, None)\n            _mighty_wurlitzer = None", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def sys_pipes_forever(encoding=_default_encoding):\n    global _mighty_wurlitzer\n    if _mighty_wurlitzer is None:\n        _mighty_wurlitzer = sys_pipes(encoding)\n        _mighty_wurlitzer.__enter__()", "buggy_source_code": "def sys_pipes_forever(encoding=_default_encoding):\n    global _mighty_wurlitzer\n    global _lock\n    with _lock:\n        if _mighty_wurlitzer is None:\n            _mighty_wurlitzer = sys_pipes(encoding)\n            _mighty_wurlitzer.__enter__()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def remove_connection(self, connection):\n    if not self._closing:\n        self.connections.remove(connection)", "buggy_source_code": "def remove_connection(self, connection):\n    if not self._closing:\n        self.connections.remove(connection)\n        logger.debug('removed connection')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, key):\n    self.key = hashlib.sha256(key).digest()", "buggy_source_code": "def __init__(self, key):\n    if isinstance(key, str):\n        key = key.encode()\n    self.key = hashlib.sha256(key).digest()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def customize():\n    pass", "buggy_source_code": "def customize():\n    wrap_process.call('fix_ubuntu.sh', [path('bin/fix_ubuntu.sh')])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def playerHTMLrepr(self, playerName):\n    p = self._players[playerName]\n    return p.HTMLrepr() if p else playerName", "buggy_source_code": "def playerHTMLrepr(self, playerName):\n    p = self._players.get(playerName)\n    return p.HTMLrepr() if p else playerName", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __call__(self):\n    raise ArgvError(self.message)", "buggy_source_code": "def __call__(self):\n    self.stream.write(self.message + '\\n')\n    raise ArgvError(self.message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef function(out):\n    out.fill(0.0)", "buggy_source_code": "@staticmethod\ndef function(out):\n    out.fill(0.0)\n    return 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __call__(self, value):\n    value = force_text(value)\n    addresses = getaddresses([value])\n    [validate_email(email) for (name, email) in addresses]", "buggy_source_code": "def __call__(self, value):\n    value = force_text(value)\n    addresses = getaddresses([value])\n    [validate_email(email) for (name, email) in addresses if email]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    return test.test_print()", "buggy_source_code": "@app.route('/')\n@app.route('/index')\ndef index():\n    return render_template('index.html')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_main():\n    prob = 'outer_solar_system'\n    show_results(prob)", "buggy_source_code": "def test_main():\n    prob = 'outer_solar_system'\n    show_results(prob, cwd='pySDC/projects/Hamiltonian/')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def decrypt(v, key=None):\n    cipher = get_cipher(key)\n    return cipher.decrypt(v)", "buggy_source_code": "def decrypt(v, key=None):\n    cipher = functions.get_cipher(key)\n    return cipher.decrypt(v)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def member_of(self, team):\n    for member in team.get_members():\n        if member == self.username:\n            return True\n    return False", "buggy_source_code": "def member_of(self, team):\n    for member in team.get_members():\n        if member['username'] == self.username:\n            return True\n    return False", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def all(self, filt=None):\n    return filter(filt, self.state[self.state_name])", "buggy_source_code": "def all(self, filt=None):\n    return list(filter(filt, self.state[self.state_name]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def render(self, data, media_type=None, renderer_context=None):\n    return data.encode(self.charset)", "buggy_source_code": "def render(self, data, media_type=None, renderer_context=None):\n    if isinstance(data, six.text_type):\n        return data.encode(self.charset)\n    return ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def lxml(self):\n    import lxml\n    return lxml.etree.fromstring((e_views.XML_HEADER + self.xml()).encode('utf-8'))", "buggy_source_code": "def lxml(self):\n    import lxml.etree\n    return lxml.etree.fromstring((e_views.XML_HEADER + self.xml()).encode('utf-8'))", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return cor.wrap(\"'\", self)", "buggy_source_code": "def __repr__(self):\n    return cor.wrap(\"'\", str(self))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __del__(self):\n    self.__client.close()", "buggy_source_code": "def __del__(self):\n    if self.__client is not None:\n        self.__client.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def main(*argv):\n    instanceClip = Clip(*argv)\n    instanceClip.handle_io()", "buggy_source_code": "def main(*argv):\n    instanceClip = Clip(*argv)\n    if instanceClip.inputformat == 'fasta':\n        instanceClip.handle_io_fasta()\n    else:\n        instanceClip.handle_io_fastq()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def find_parser_by_type(forced_type, cps_by_type=_PARSERS_BY_TYPE):\n    return anyconfig.inputs.find_by_type(forced_type, cps_by_type)", "buggy_source_code": "def find_parser_by_type(forced_type, cps_by_ext=_PARSERS_BY_EXT, cps_by_type=_PARSERS_BY_TYPE):\n    return anyconfig.inputs.find_parser(None, cps_by_ext=cps_by_ext, cps_by_type=cps_by_type, forced_type=forced_type)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def display_details(self):\n    self.notebook.set_current_page(self.PAGE_APP_DETAILS)\n    self.searchentry.hide()\n    return", "buggy_source_code": "def display_details(self):\n    self.notebook.set_current_page(self.PAGE_APP_DETAILS)\n    self.searchentry.hide()\n    self.action_bar.clear()\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def display_category(self):\n    self._clear_search()\n    self._show_category_overview()\n    return", "buggy_source_code": "def display_category(self):\n    self._clear_search()\n    self._show_category_overview()\n    self.action_bar.clear()\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def addMacro(self, name, numParams):\n    self.__addSymbol(name, numParams, Symbol.TYPE_MACRO)", "buggy_source_code": "def addMacro(self, name, numParams):\n    if name in self.symbols:\n        raise CompilerError(\"Macro '{}' already defined\".format(name))\n    self.__addSymbol(name, numParams, Symbol.TYPE_MACRO)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef get_model_key(cls):\n    return cls.get_model()._meta.get_field('id').db_column", "buggy_source_code": "@classmethod\ndef get_model_key(cls):\n    (_, db_column) = cls.get_model()._meta.get_field('id').get_attname_column()\n    return db_column", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    Log.setverbosity(3)\n    Globals.change_source_perms = 1\n    SetConnections.UpdateGlobal('checkpoint_interval', 3)", "buggy_source_code": "def setUp(self):\n    Log.setverbosity(3)\n    Globals.change_source_perms = 1\n    SetConnections.UpdateGlobal('checkpoint_interval', 3)\n    user_group.init_user_mapping()\n    user_group.init_group_mapping()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def on_closing():\n    os.remove('./temp_software_list.json')\n    print('Closed!')\n    root.destroy()", "buggy_source_code": "def on_closing():\n    if os.path.exists('./temp_software_list.json'):\n        os.remove('./temp_software_list.json')\n    print('Closed!')\n    root.destroy()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.page_title = None", "buggy_source_code": "def __init__(self):\n    self.page_title = None\n    self._profile = None\n    self.people_url = ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_offset_markers(metadata):\n    return {marker: metadata[marker] for marker in [OFFSET_CREDITS, OFFSET_WATCHED_TO_END] if metadata[marker] is not None}", "buggy_source_code": "def _get_offset_markers(metadata):\n    return {marker: metadata[marker] for marker in [OFFSET_CREDITS, OFFSET_WATCHED_TO_END] if metadata.get(marker) is not None}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def clear_errors(self) -> None:\n    pass", "buggy_source_code": "def clear_errors(self) -> None:\n    self.qas_0_result_reset(1)\n    self.qas_0_monitor_reset(1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_cpu_jit(self):\n    self.skipTest('Fails')", "buggy_source_code": "def test_cpu_jit(self):\n    self._test_cpu('emulated', 'emulated', 'full')", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "@staticmethod\ndef _create_entity_component_years(learning_components, requirement_entity_container):\n    for component_year in learning_components:\n        EntityComponentYear.objects.update_or_create(entity_container_year=requirement_entity_container, learning_component_year=component_year)", "buggy_source_code": "@staticmethod\ndef _create_entity_component_years(learning_components, requirement_entity_container):\n    for component_year in learning_components:\n        EntityComponentYear.objects.update_or_create(entity_container_year=requirement_entity_container, learning_component_year=component_year, repartition_volume=component_year.hourly_volume_total_annual)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dilate(self):\n    raise NotImplementedError\n    return self._boss.dilate()", "buggy_source_code": "def dilate(self):\n    if not self._enable_dilate:\n        raise NotImplementedError\n    return self._boss.dilate()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_source_filename_returns_wrong(self):\n    self.make_file('bad_plugin.py', '            import coverage.plugin\\n            class Plugin(coverage.plugin.CoveragePlugin):\\n                def file_tracer(self, filename):\\n                    return BadFileTracer()\\n\\n            class BadFileTracer(coverage.plugin.FileTracer):\\n                def source_filename(self):\\n                    return 17.3\\n\\n            def coverage_init(reg, options):\\n                reg.add_file_tracer(Plugin())\\n            ')\n    self.run_bad_plugin('bad_plugin', 'Plugin', our_error=False, excmsgs=['expected str, bytes or os.PathLike object, not float', \"'float' object has no attribute\"])", "buggy_source_code": "def test_source_filename_returns_wrong(self):\n    self.make_file('bad_plugin.py', '            import coverage.plugin\\n            class Plugin(coverage.plugin.CoveragePlugin):\\n                def file_tracer(self, filename):\\n                    return BadFileTracer()\\n\\n            class BadFileTracer(coverage.plugin.FileTracer):\\n                def source_filename(self):\\n                    return 17.3\\n\\n            def coverage_init(reg, options):\\n                reg.add_file_tracer(Plugin())\\n            ')\n    self.run_bad_plugin('bad_plugin', 'Plugin', our_error=False, excmsgs=['expected str, bytes or os.PathLike object, not float', \"'float' object has no attribute\", \"object of type 'float' has no len()\"])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def start_one(self, motion):\n    self.axis_proxy.position = motion.target_pos", "buggy_source_code": "def start_one(self, motion):\n    self.axis_proxy.position = float(motion.target_pos / abs(self._spu))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read_velocity(self, axis):\n    return self.axis_proxy.velocity", "buggy_source_code": "def read_velocity(self, axis):\n    _vel = self.axis_proxy.velocity * abs(axis.steps_per_unit)\n    return _vel", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def set_velocity(self, axis, new_velocity):\n    self.axis_proxy.velocity = new_velocity\n    return new_velocity", "buggy_source_code": "def set_velocity(self, axis, new_velocity):\n    self.axis_proxy.velocity = new_velocity / abs(axis.steps_per_unit)\n    return new_velocity", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load(self, filename):\n    with open(filename) as f:\n        self.json_data = json.load(f)", "buggy_source_code": "def load(self, filename):\n    with open(filename) as f:\n        self.json_data = json.load(f)\n        pprint.pprint(self.json_data)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def process_im_created(self, data):\n    self.fast_queue.append(UpdateIMList())", "buggy_source_code": "def process_im_created(self, data):\n    logging.info('IM created for user {}'.format(data.get('user')))\n    self.fast_queue.append(UpdateIMList())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def uiStateChanged(self):\n    pass", "buggy_source_code": "def uiStateChanged(self, stateObject):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, event_loop):\n    self._event_loop = event_loop\n    self._packer = Packer(unicode_errors=unicode_errors_default)\n    self._unpacker = Unpacker()\n    self._message_cb = None", "buggy_source_code": "def __init__(self, event_loop):\n    self._event_loop = event_loop\n    self._packer = Packer(encoding='utf-8', unicode_errors=unicode_errors_default)\n    self._unpacker = Unpacker()\n    self._message_cb = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def Get(self):\n    return self.q.get()", "buggy_source_code": "def Get(self):\n    (imgs, labels) = self.q.get()\n    return (imgs.cuda(), labels.cuda())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def version():\n    return moduleinfo", "buggy_source_code": "def version():\n    moduleinfo['config'] = moduleconfig\n    return moduleinfo", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, value, original_message=''):\n    self.value = value\n    self.original_message = original_message", "buggy_source_code": "def __init__(self, value, original_message=''):\n    RuntimeError.__init__(self, value)\n    self.value = value\n    self.original_message = original_message", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _resource_get(snapname):\n    res_path = hookenv.resource_get(snapname)\n    return res_path and os.stat(res_path).st_size != 0", "buggy_source_code": "def _resource_get(snapname):\n    res_path = hookenv.resource_get(snapname)\n    if res_path and os.stat(res_path).st_size != 0:\n        return res_path\n    return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@register.filter\ndef get_dataset_name(ds_id):\n    return Dataset.objects.get(pk=ds_id).name", "buggy_source_code": "@register.filter\ndef get_dataset_name(ds_id):\n    try:\n        return Dataset.objects.get(pk=ds_id).name\n    except ValueError:\n        return 'Error, please update role.'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@app.route('/no_content_length')\ndef no_content_length():\n    r = send_file(StringIO('This response does not have content-length in the header'))\n    return r", "buggy_source_code": "@app.route('/no_content_length')\ndef no_content_length():\n    r = send_file(StringIO('This response does not have content-length in the header'), add_etags=False)\n    return r", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_period(s):\n    if is_terminated.match(s) is None:\n        return s + '.'", "buggy_source_code": "def add_period(s):\n    if is_terminated.match(s.split()[-1]) is None:\n        return s + '.'\n    else:\n        return s", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, elements):\n    self.elements = elements", "buggy_source_code": "def __init__(self, elements):\n    self.elements = elements\n    super(Chain, self).__init__()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_table(self, table_name, field_defs):\n    for (_, f) in field_defs:\n        self._fix_field_definition(f)\n    generic.DatabaseOperations.create_table(self, table_name, field_defs)", "buggy_source_code": "@invalidate_table_constraints\ndef create_table(self, table_name, field_defs):\n    for (_, f) in field_defs:\n        self._fix_field_definition(f)\n    generic.DatabaseOperations.create_table(self, table_name, field_defs)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_connected(self):\n    return self.connection.is_connected() and self.is_active()", "buggy_source_code": "def is_connected(self):\n    return self.connection is not None and self.connection.is_connected() and self.is_active()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_test_individual():\n    pass", "buggy_source_code": "def test_test_individual():\n    from facial_recognition import test_individual, train_recognizer\n    train_recognizer(img_path='training', save_file='test_brain.yml')\n    x = test_individual('test_training/member-1-testing')\n    assert x[0] == 0.0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def v2_playbook_on_task_start(self, task, is_conditional):\n    self.playbook_on_task_start(task, is_conditional)", "buggy_source_code": "def v2_playbook_on_task_start(self, task, is_conditional):\n    self.playbook_on_task_start(task.name, is_conditional)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_filter_type(self, t):\n    self._filter_type = t\n    self._logger.message('Filter type is set %s' % t)", "buggy_source_code": "def set_filter_type(self, t):\n    self._filter_type = t\n    self._logger.set_log_level('DEBUG')\n    self._logger.message('Filter type is set %s' % t)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@patch('pnc_cli.environments._environment_exists', return_value=True)\ndef test_get_environment_id_id(mock):\n    result = environments.get_environment_id(1, None)\n    mock.assert_called_once_with(1)\n    assert result == 1", "buggy_source_code": "@patch('pnc_cli.environments.envs_api.get_all', return_value=MagicMock(content=1))\ndef test_get_environment_id_id(mock):\n    result = environments.get_environment_id(1, None)\n    mock.assert_called_once_with(q='id==1')\n    assert result == 1", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@patch('pnc_cli.environments._environment_exists', return_value=False)\ndef test_get_environment_id_notexist(mock):\n    result = environments.get_environment_id(1, None)\n    mock.assert_called_once_with(1)\n    assert not result", "buggy_source_code": "@patch('pnc_cli.environments.envs_api.get_all', return_value=False)\ndef test_get_environment_id_notexist(mock):\n    result = environments.get_environment_id(1, None)\n    mock.assert_called_once_with(q='id==1')\n    assert not result", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_running_latest_image(self, container, image):\n    if image['Id'] == container['Image']:\n        return True\n    else:\n        return False", "buggy_source_code": "def is_running_latest_image(self, container, image):\n    if not image:\n        return False\n    if image['Id'] == container['Image']:\n        return True\n    else:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, plugin, shell, album_manager):\n    self.plugin = plugin\n    self.shell = shell\n    self.album_manager = album_manager", "buggy_source_code": "def __init__(self, plugin, shell, album_manager):\n    self.plugin = plugin\n    self.shell = shell\n    self.album_manager = album_manager\n    self._gstreamer_has_initialised = False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_invalid_config():\n    with pytest.raises(InvalidConfiguration):\n        config.get_config('tests/test-config/invalid-config.yaml')", "buggy_source_code": "def test_invalid_config():\n    with pytest.raises(InvalidConfiguration) as excinfo:\n        config.get_config('tests/test-config/invalid-config.yaml')\n    expected_error_msg = 'tests/test-config/invalid-config.yaml is not a valid YAML file: line 1: mapping values are not allowed here'\n    assert str(excinfo.value) == expected_error_msg", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture(scope='function')\ndef mocked_redis_client(app, mocker):\n    app.config['REDIS_ENABLED'] = True\n    return build_redis_client(app, mocker)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef mocked_redis_client(app, mocked_redis_pipeline, mocker):\n    app.config['REDIS_ENABLED'] = True\n    return build_redis_client(app, mocked_redis_pipeline, mocker)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@freeze_time('2001-01-01 12:00:00.000000')\ndef test_should_allow_request_if_not_over_limit(mocked_redis_client):\n    my_redis_mock.execute.return_value = [True, True, 100, True]\n    assert not mocked_redis_client.exceeded_rate_limit('key', 101, 100)", "buggy_source_code": "@freeze_time('2001-01-01 12:00:00.000000')\ndef test_should_allow_request_if_not_over_limit(mocked_redis_client, mocked_redis_pipeline):\n    mocked_redis_pipeline.execute.return_value = [True, True, 100, True]\n    assert not mocked_redis_client.exceeded_rate_limit('key', 101, 100)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def check_tim(self, hashtime, mintime):\n    if hashtime >= mintime:\n        return True\n    else:\n        return False", "buggy_source_code": "def check_tim(self, hashtime, mintime):\n    if int(hashtime) >= int(mintime):\n        return True\n    else:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def test_import_mv_grid_districts(oedb_session):\n    with pytest.raises(TypeError):\n        NetworkDing0.import_mv_grid_districts(oedb_session, mv_grid_districts_no=['5'])", "buggy_source_code": "def test_import_mv_grid_districts(self, oedb_session):\n    with pytest.raises(TypeError):\n        NetworkDing0.import_mv_grid_districts(oedb_session, mv_grid_districts_no=['5'])", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_empty_mv_grid_districts(emptyNetworkDing0):\n    mv_grid_districts = list(emptyNetworkDing0.mv_grid_districts())\n    empty_list = []\n    assert mv_grid_districts == empty_list", "buggy_source_code": "def test_empty_mv_grid_districts(self, emptyNetworkDing0):\n    mv_grid_districts = list(emptyNetworkDing0.mv_grid_districts())\n    empty_list = []\n    assert mv_grid_districts == empty_list", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update(dt):\n    cylinder.rotation.x += 100 * dt", "buggy_source_code": "def update(dt):\n    cylinder.rotation.x += 100 * dt\n    cyl2.rotation.y += 100 * dt\n    cyl3.rotation.z += 100 * dt", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def telegram_hook(request):\n    return HttpResponse('hook')", "buggy_source_code": "def telegram_hook(request):\n    return HttpResponse('hook' + str(request.POST))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def default_value(self):\n    return None", "buggy_source_code": "def default_value(self):\n    return [Choice(SHOW_ALL_CHOICE, '')]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def mocked_query_get_total_cost_graph_org(method, data, endpoint, parameters):\n    return mocked_query_get_total_cost_graph_response(('123', 'Waldur Chatbot', 'Meh'))", "buggy_source_code": "def mocked_query_get_total_cost_graph_org(method, data, endpoint, parameters):\n    return mocked_query_get_total_cost_graph_response(('123', 'Waldur Chatbot', 1, 1996, 1000000, 'Meh'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def takedown_notification(self):\n    self.window.removeControl('RUA_image')\n    self.window.setProperty('RUA_notification', 'false')", "buggy_source_code": "def takedown_notification(self):\n    self.window.removeControl(self.RUA_image)\n    self.window.setProperty('RUA_notification', 'false')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def server_error(e):\n    return (render_template('error.html'), 500)", "buggy_source_code": "def server_error(e):\n    return (render_template('500.html', no_nav='true'), 500)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_GET(self):\n    if _is_uptime_check(self):\n        return 'success'\n    params = get_params(self)\n    self.handle_params(params)", "buggy_source_code": "def do_GET(self):\n    if _is_uptime_check(self):\n        self.respond(200, 'success')\n    params = get_params(self)\n    self.handle_params(params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def do_GET(self):\n    if _is_uptime_check(self):\n        return 'success'\n    params = get_params(self)\n    self.handle_params(params)", "buggy_source_code": "def do_GET(self):\n    if _is_uptime_check(self):\n        self.respond(200, 'success')\n    params = get_params(self)\n    self.handle_params(params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def getImageID(imageTag):\n    imageInfo = inspectImage(imageTag)\n    if imageInfo:\n        return imageInfo['Id']\n    else:\n        return None", "buggy_source_code": "def getImageID(imageTag):\n    imageInfo = inspectImage(imageTag)\n    if imageInfo:\n        return imageInfo['Id'] if 'Id' in imageInfo else imageInfo['id']\n    else:\n        return None", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def matches(self, value):\n    if not value:\n        return False\n    return self.content in value", "buggy_source_code": "def matches(self, value):\n    if not value:\n        return False\n    try:\n        return self.content in value\n    except TypeError:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def update_scores(self, value):\n    player_scores[name_of_players[value]] += 1", "buggy_source_code": "def update_scores(self, value):\n    player_scores[name_of_players[value]] += 1\n    game.print_scores(len(name_of_players))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _thin_helper(args):\n    thinned = _smcpp.thin_data(*args)\n    return compress_repeated_obs(thinned)", "buggy_source_code": "def _thin_helper(args):\n    try:\n        thinned = _smcpp.thin_data(*args)\n    except Exception as e:\n        logger.error(args)\n        raise\n    return compress_repeated_obs(thinned)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testPipe(self):\n    ayrton.main('ls () | grep (\"setup\")')\n    self.assertEqual(self.r.read(), b'setup.py\\n')", "buggy_source_code": "def testPipe(self):\n    ayrton.main('ls () | grep (\"setup\")')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'setup.py\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def xbmc(self, method, params=None):\n    xbmc(self.rpi_ip, method, params)", "buggy_source_code": "def xbmc(self, method, params=None):\n    return xbmc(self.rpi_ip, method, params)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "@staticmethod\ndef add(error):\n    ErrorViewer.errors.append(error)", "buggy_source_code": "@staticmethod\ndef add(error):\n    ErrorViewer.errors = [e for e in ErrorViewer.errors if e.message != error.message]\n    ErrorViewer.errors.append(error)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef add(error):\n    WarningViewer.errors.append(error)", "buggy_source_code": "@staticmethod\ndef add(error):\n    WarningViewer.errors = [e for e in WarningViewer.errors if e.message != error.message]\n    WarningViewer.errors.append(error)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run_installsdk(self):\n    self._install_sdk_to_prefix(self.args.sdkname[0])", "buggy_source_code": "def run_installsdk(self):\n    if not self._install_sdk_to_prefix(self.args.sdkname[0]):\n        return -1", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_init_no_pool_targets(self):\n    with patch.object(objects.Pool, 'from_config', return_value=MagicMock()):\n        self.assertRaises(exceptions.NoPoolTargetsConfigured, Service)", "buggy_source_code": "@unittest.skip('fails occasionally')\ndef test_init_no_pool_targets(self):\n    with patch.object(objects.Pool, 'from_config', return_value=MagicMock()):\n        self.assertRaises(exceptions.NoPoolTargetsConfigured, Service)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def closeEvent(self, event):\n    self.rawinputreader.stopReading()\n    logger.error('Need to restart input reading!!')", "buggy_source_code": "def closeEvent(self, event):\n    self.rawinputreader.stopReading()\n    logger.error('Need to restart input reading!!')\n    QMessageBox.about(self, 'Need to restart application', 'Application needs to be restarted for any input device to work!')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_sheets_all(self, context: object) -> list:\n    iresource = get_iresource(context)\n    sheets = self.sheets_all[iresource]\n    self._add_context(sheets, context)\n    return sheets", "buggy_source_code": "def get_sheets_all(self, context: object) -> list:\n    iresource = get_iresource(context)\n    sheets = self.sheets_all[iresource].copy()\n    self._add_context(sheets, context)\n    return sheets", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_feed_content(self):\n    content = self.tagline\n    return content", "buggy_source_code": "def get_feed_content(self):\n    content = '<p><em>' + self.tagline + '</em></p>'\n    content = content + self.description\n    return content", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def call_next(self, call, *args, **kwargs):\n    call(*args, **kwargs)", "buggy_source_code": "def call_next(self, call, *args, **kwargs):\n    time.call_later(0, fiber.maybe_fiber, call, *args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def execute(self, context):\n    getInputFilenamepsa(self, self.filepath, context)\n    return {'FINISHED'}", "buggy_source_code": "def execute(self, context):\n    getInputFilenamepsa(self, self.filepath, context, self.bFilenameAsPrefix, self.bActionsToTrack)\n    return {'FINISHED'}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unregister():\n    bpy.utils.unregister_module(__name__)\n    bpy.types.INFO_MT_file_import.remove(menu_func)", "buggy_source_code": "def unregister():\n    bpy.utils.unregister_module(__name__)\n    bpy.types.INFO_MT_file_import.remove(menu_func)\n    del bpy.types.Scene.psk_import", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def register():\n    bpy.utils.register_module(__name__)\n    bpy.types.INFO_MT_file_import.append(menu_func)", "buggy_source_code": "def register():\n    bpy.utils.register_module(__name__)\n    bpy.types.INFO_MT_file_import.append(menu_func)\n    bpy.types.Scene.psk_import = PointerProperty(type=PskImportOptions)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dict_filt_from_mg_filt(mg_filt):\n    return Query(mg_filt).match", "buggy_source_code": "def dict_filt_from_mg_filt(mg_filt):\n    from mongoquery import Query\n    return Query(mg_filt).match", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def webhook_create(context, data_dict):\n    log.info(data_dict)\n    (data, errors) = df.validate(data_dict, schema, context)", "buggy_source_code": "def webhook_create(context, data_dict):\n    log.info(data_dict)\n    (data, errors) = df.validate(data_dict, schema, context)\n    if errors:\n        raise ValidationError(errors)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tree_cb(self, tree):\n    self.latest_message = tree\n    self._refresh_tf_graph()", "buggy_source_code": "def tree_cb(self, tree):\n    self.latest_message = tree\n    if not self._viewing_bag:\n        self._refresh_view.emit()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def test_fix_rule_001(self):\n    oRule = generate.rule_001()\n    oRule.fix(oFile)\n    oRule.analyze(oFile)\n    self.assertEqual(oRule.violations, [])", "buggy_source_code": "def test_fix_rule_001(self):\n    oRule = generate.rule_001()\n    oRule.fix(self.oFile)\n    oRule.analyze(self.oFile)\n    self.assertEqual(oRule.violations, [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_fix_rule_003(self):\n    oRule = generate.rule_003()\n    oRule.fix(oFile)\n    oRule.analyze(oFile)\n    self.assertEqual(oRule.violations, [])", "buggy_source_code": "def test_fix_rule_003(self):\n    oRule = generate.rule_003()\n    oRule.fix(self.oFile)\n    oRule.analyze(self.oFile)\n    self.assertEqual(oRule.violations, [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_fix_rule_004(self):\n    oRule = generate.rule_004()\n    oRule.fix(oFile)\n    oRule.analyze(oFile)\n    self.assertEqual(oRule.violations, [])", "buggy_source_code": "def test_fix_rule_004(self):\n    oRule = generate.rule_004()\n    oRule.fix(self.oFile)\n    oRule.analyze(self.oFile)\n    self.assertEqual(oRule.violations, [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_fix_rule_002(self):\n    oRule = generate.rule_002()\n    oRule.fix(oFile)\n    oRule.analyze(oFile)\n    self.assertEqual(oRule.violations, [])", "buggy_source_code": "def test_fix_rule_002(self):\n    oRule = generate.rule_002()\n    oRule.fix(self.oFile)\n    oRule.analyze(self.oFile)\n    self.assertEqual(oRule.violations, [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree"]}
{"fixed_source_code": "def __del__(self):\n    self._interface.nvvmDestroyProgram(self._program)", "buggy_source_code": "def __del__(self):\n    if hasattr(self, '_interface'):\n        self._interface.nvvmDestroyProgram(self._program)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    for filename in self.filenames:\n        subprocess.check_call(['rm', filename])", "buggy_source_code": "def tearDown(self):\n    self.handle1.close()\n    self.handle2.close()\n    for filename in self.filenames:\n        subprocess.check_call(['rm', filename])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_cycle_indirect(self):\n    self.do_test_cycle('graph_test:indirect_cycle')", "buggy_source_code": "def test_cycle_indirect(self):\n    self.do_test_cycle('graph_test:indirect_cycle', 'graph_test:one')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_test_cycle(self, address_str):\n    scheduler = self.create_json()\n    parsed_address = Address.parse(address_str)\n    self.do_test_trace_message(scheduler, parsed_address, 'Dep graph contained a cycle.')", "buggy_source_code": "def do_test_cycle(self, address_str, cyclic_address_str):\n    scheduler = self.create_json()\n    parsed_address = Address.parse(address_str)\n    self.do_test_trace_message(scheduler, parsed_address, f'(?ms)Dep graph contained a cycle:.*{cyclic_address_str}.* <-.*{cyclic_address_str}.* <-')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def process(self, population):\n    for i in xrange(self.final_size - len(population)):\n        population.append(Board())", "buggy_source_code": "def process(self, population):\n    for i in xrange(self.final_size - len(population)):\n        population.append(BoardGenotype(Board()))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def yaml(self, name):\n    return yamllib.safe_load(self.string(name))", "buggy_source_code": "def yaml(self, name):\n    return yamllib.load(self.string(name), Loader=yaml_loader)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def reload(self):\n    self._reload_event.clear()\n    ret = self.command(IPRCMD_RELOAD)\n    assert self._reload_event.wait(3)\n    return ret", "buggy_source_code": "def reload(self):\n    self._reload_event.clear()\n    ret = self.command(IPRCMD_RELOAD)\n    self._reload_event.wait(3)\n    assert self._reload_event.is_set()\n    return ret", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def has_content_in(page, language):\n    return Content.objects.filter(page=page, language=language).count() > 0", "buggy_source_code": "def has_content_in(page, language):\n    if page is None:\n        return False\n    return Content.objects.filter(page=page, language=language).count() > 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clean_content_disposition(self, content_disposition):\n    return re.compile('[\\r\\n]').sub('', content_disposition)", "buggy_source_code": "def clean_content_disposition(self, content_disposition):\n    if isinstance(content_disposition, basestring):\n        return re.compile('[\\r\\n]').sub('', content_disposition)\n    return content_disposition", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def equals_ignore_case(self, s):\n    if isinstance(s, KQMLToken):\n        return self.data.lower() == s.lower()", "buggy_source_code": "def equals_ignore_case(self, s):\n    if isinstance(s, KQMLToken) or isinstance(s, basestring):\n        return self.data.lower() == s.lower()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_product(self, product_id):\n    del self.products[product_id]\n    return True", "buggy_source_code": "def delete_product(self, product_id):\n    if product_id in self.products:\n        del self.products[product_id]\n        return True\n    else:\n        raise KeyError('No product with product id %d' % product_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def end(self):\n    pass", "buggy_source_code": "def end(self):\n    if self.plotted:\n        self._update()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def end(self):\n    pass", "buggy_source_code": "def end(self):\n    if self.plotted:\n        self._update()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, obj_prop, **args):\n    self.field_id = False\n    function.__init__(self, self._fnct_read, False, self._fnct_write, (obj_prop,), **args)", "buggy_source_code": "def __init__(self, obj_prop, **args):\n    self.field_id = {}\n    function.__init__(self, self._fnct_read, False, self._fnct_write, (obj_prop,), **args)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_com_tld_parse(self, sample_com_tld):\n    zone = [l for l in zone_iterator(sample_com_tld)]\n    assert REFERENCE_COM_ZONE == zone", "buggy_source_code": "@pytest.mark.usefixtures('sample_com_tld')\ndef test_com_tld_parse(self, sample_com_tld):\n    zone = [l for l in zone_iterator(sample_com_tld)]\n    assert REFERENCE_COM_ZONE == zone", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_image_settings(self):\n    settings = SettingsImage()\n    info_image = settings.get_image_settings()\n    return info_image", "buggy_source_code": "def get_image_settings(self):\n    settings = SettingsImage()\n    info_image = settings.get_image_settings()\n    print(info_image)\n    return info_image", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def fetch_usages(prefixes, starttime, endtime):\n    return [fetch_usage(prefix, starttime, endtime) for prefix in prefixes]", "buggy_source_code": "def fetch_usages(prefixes, starttime, endtime):\n    if prefixes is None:\n        prefixes = []\n    return [fetch_usage(prefix, starttime, endtime) for prefix in prefixes]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_appointment(self):\n    self.backend.add_appointment(Schedule(datetime=self.selected_time, duration=self.selected_duration, children=self.selected_children))", "buggy_source_code": "def add_appointment(self):\n    self.backend.add_appointment(Schedule(datetime=self.selected_time.dt, duration=self.selected_duration, children=self.selected_children))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def set_duration(self):\n    self.selected_duration = self.spinBox.value()\n    print('New duration : {}'.format(self.selected_duration))", "buggy_source_code": "def set_duration(self):\n    self.selected_duration = self.spinBox.value()\n    self.logger.debug('New duration : {}'.format(self.selected_duration))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def value_to_string(self, value):\n    return self.get_prep_value(value)", "buggy_source_code": "def value_to_string(self, value):\n    return self.get_prep_value(self._get_val_from_obj(value))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_prep_value(self, template):\n    return template.origin.source", "buggy_source_code": "def get_prep_value(self, value):\n    if value is None:\n        if not self.null and self.blank:\n            return ''\n        return None\n    return value.origin.source", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def index(request):\n    return render(request, 'review_api/index.html')", "buggy_source_code": "def index(request):\n    return render_to_response('review_api/index.html', RequestContext(request, {}))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, config):\n    apply_prefetch_policy(config)\n    self._input_source = config.data\n    super(SyncMultiGPUTrainerReplicated, self).__init__(config)", "buggy_source_code": "def __init__(self, config):\n    apply_prefetch_policy(config)\n    self._input_source = config.data\n    logger.warn(\"Note that SyncMultiGPUTrainerReplicated doesn't support inference.\")\n    super(SyncMultiGPUTrainerReplicated, self).__init__(config)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unlink_ob_from_all_scenes(ob):\n    for scene in bpy.data.scenes:\n        scene.objects.unlink(ob)", "buggy_source_code": "def unlink_ob_from_all_scenes(ob):\n    for scene in bpy.data.scenes:\n        if ob.name in scene.objects:\n            scene.objects.unlink(ob)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def top(self):\n    return self.data['top']", "buggy_source_code": "@property\ndef top(self):\n    return self.data['top']", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/GeometrA/Screen')\ndef getScreenshotPath():\n    return capture()", "buggy_source_code": "@app.route('/GeometrA/Screen')\ndef getScreenshotPath():\n    path = capture()\n    return path", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def clear_test_data(self):\n    self.evaluated_validators = []\n    self.http_client_session.init_meta_data()", "buggy_source_code": "def clear_test_data(self):\n    if not isinstance(self.http_client_session, HttpSession):\n        return\n    self.evaluated_validators = []\n    self.http_client_session.init_meta_data()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def displayText(self, value, locale):\n    return '{:07.3f}'.format(value)", "buggy_source_code": "def displayText(self, value, locale):\n    return '{:07.3f}'.format(float(value))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    self.cc = command.AggregatorConfig()", "buggy_source_code": "def setUp(self):\n    create_comics()\n    self.cc = command.AggregatorConfig()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_ok(self):\n    self.student = None\n    self.update_gui()", "buggy_source_code": "def do_ok(self):\n    self.log('ok', self.student)\n    self.student = None\n    self.update_gui()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_callout(self):\n    if self.student != None:\n        return\n    self.student = self.callout()\n    self.update_gui()", "buggy_source_code": "def do_callout(self):\n    if self.student != None:\n        return\n    self.student = self.callout()\n    self.log('called', self.student)\n    self.update_gui()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, promote_after=None):\n    self.promote_after = promote_after", "buggy_source_code": "def __init__(self, promote_after=None, demote_until=None):\n    self.promote_after = promote_after\n    self.demote_until = demote_until", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __del__(self):\n    self.motionPath.unlink(True)", "buggy_source_code": "def __del__(self):\n    if self.motionPath:\n        self.motionPath.unlink(True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_userlist(usernames):\n    return dumps({'service': 3, 'data': {'users': usernames}})", "buggy_source_code": "def create_userlist(usernames):\n    return dumps({'service': 3, 'data': {'users': usernames.strip()}})", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_connect(username):\n    return dumps({'service': 5, 'data': {'username': username}})", "buggy_source_code": "def create_connect(username):\n    return dumps({'service': 5, 'data': {'username': username.strip()}})", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_error(error_code, error_message):\n    return dumps({'errors': [{'message': error_message, 'code': error_code}]})", "buggy_source_code": "def create_error(error_code, error_message):\n    error_message = error_message.replace('\\n', '')\n    return dumps({'errors': [{'message': error_message, 'code': error_code}]})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_disconnect(username):\n    return dumps({'service': 6, 'data': {'username': username}})", "buggy_source_code": "def create_disconnect(username):\n    return dumps({'service': 6, 'data': {'username': username.strip()}})", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_roomlist(rooms):\n    return dumps({'service': 4, 'data': {'rooms': [room.name for room in rooms]}})", "buggy_source_code": "def create_roomlist(rooms):\n    return dumps({'service': 4, 'data': {'rooms': [room.name.strip() for room in rooms]}})", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def GetBrowserStartupArgs(self):\n    args = super(AndroidBrowserBackend, self).GetBrowserStartupArgs()\n    args.append('--disable-fre')\n    return args", "buggy_source_code": "def GetBrowserStartupArgs(self):\n    args = super(AndroidBrowserBackend, self).GetBrowserStartupArgs()\n    args.append('--enable-remote-debugging')\n    args.append('--disable-fre')\n    return args", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_param(mooltipass, args):\n    value = mooltipass.get_param(mooltipass.valid_params[args.param])\n    print('Current value of {}: {}'.format(args.param, value))", "buggy_source_code": "def get_param(mooltipass, args):\n    value = mooltipass.get_param(mooltipass.valid_params[args.param].param)\n    print('Current value of {}: {}'.format(args.param, value))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, display=None):\n    setup_log()\n    self.log = logging.getLogger(__name__)\n    self.node = None", "buggy_source_code": "def __init__(self, display=None):\n    setup_log()\n    self.log = logging.getLogger(__name__)\n    self.node = None\n    self.opts = {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_fetch_sources(self):\n    dialog = MockedDialog()\n    fetched = utils.fetch_sources(TESTED_SOURCES, dialog, True)\n    self.assertEqual(True, False)", "buggy_source_code": "def test_fetch_sources(self):\n    dialog = MockedDialog()\n    fetched = utils.fetch_sources(TESTED_SOURCES, dialog, True)\n    self.assertGreaterEqual(len(fetched), len(TESTED_SOURCES) / 2)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def askForData():\n    (data, ok) = QtGui.QInputDialog.getText(None, 'Data', 'Enter the data:')\n    return data", "buggy_source_code": "def askForData():\n    (data, ok) = QtGui.QInputDialog.getText(None, 'Data', 'Enter the data:')\n    return (data, ok)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def askForKey():\n    (key, ok) = QtGui.QInputDialog.getText(None, 'Key name', 'Enter the key name:')\n    return key", "buggy_source_code": "def askForKey():\n    (key, ok) = QtGui.QInputDialog.getText(None, 'Key name', 'Enter the key name:')\n    return (key, ok)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __restart(self):\n    self.connectedNick = None\n    self.postConnectToServer()", "buggy_source_code": "def __restart(self):\n    self.__drawUI()\n    self.connectedNick = None\n    self.inRecveiveLoop = False\n    self.clientConnectError = False\n    self.errorRaised.clear()\n    self.postConnectToServer()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def main(demoapp=None):\n    app = PrintingApp()\n    GLib.idle_add(app.run)\n    Gtk.main()", "buggy_source_code": "def main(demoapp=None):\n    app = PrintingApp()\n    GLib.idle_add(app.run, demoapp)\n    Gtk.main()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_library_dirs():\n    return [str(_TP_INSTALL_DIR / 'lib')]", "buggy_source_code": "def _get_library_dirs():\n    return [str(_TP_INSTALL_DIR / 'lib'), str(_TP_INSTALL_DIR / 'lib64')]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_html(html: str) -> str:\n    return bleach.clean(html, tags=allowed_tags, attributes=allowed_attributes, styles=allowed_styles)", "buggy_source_code": "def validate_html(html: str) -> str:\n    html = html.replace('\\t', '')\n    return bleach.clean(html, tags=allowed_tags, attributes=allowed_attributes, styles=allowed_styles)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_counter_logfile_last_line(self):\n    with open(self.logfile, 'r') as log:\n        self.assertEqual(log.readlines()[6].split()[4], '4')", "buggy_source_code": "def test_counter_logfile_last_line(self):\n    log = open(self.logfile, 'r')\n    self.assertEqual(log.readlines()[6].split()[4], '4')\n    log.close()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_counter_logfile_length(self):\n    with open(self.logfile, 'r') as log:\n        self.assertEqual(len(log.readlines()), 7)", "buggy_source_code": "def test_counter_logfile_length(self):\n    log = open(self.logfile, 'r')\n    self.assertEqual(len(log.readlines()), 7)\n    log.close()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def columns(self):\n    return ['id', 'summary', 'type', 'bugbug_type', 'confidence']", "buggy_source_code": "def columns(self):\n    return ['id', 'summary', 'type', 'bugbug_type', 'confidence', 'autofixed']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super().__init__()\n    self.model = DefectEnhancementTaskModel.load(self.retrieve_model())", "buggy_source_code": "def __init__(self):\n    super().__init__()\n    self.model = DefectEnhancementTaskModel.load(self.retrieve_model())\n    self.autofix_type = {}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def execute(command):\n    print(command)\n    run(command, 'D:\\\\temp')\n    print('Finished')\n    print()", "buggy_source_code": "def execute(command):\n    print(command)\n    run(command, os.getcwd())\n    print('Finished')\n    print()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def rows(self, range=None):\n    n = self._group.rows\n    if range is None:\n        return n\n    return n[range.asslice()]", "buggy_source_code": "def rows(self, range=None):\n    n = np.array(self._group.rows)\n    if range is None:\n        return n\n    return n[range.asslice()]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def cols(self, range=None):\n    n = self._group.cols\n    if range is None:\n        return n\n    return n[range.asslice()]", "buggy_source_code": "def cols(self, range=None):\n    n = np.array(self._group.cols)\n    if range is None:\n        return n\n    return n[range.asslice()]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def preload_image(self, image_url):\n    self.log('preloading image: %s' % repr(image_url))\n    self.preload_control.setImage(image_url)", "buggy_source_code": "def preload_image(self, image_url):\n    self.log('preloading image: %s' % repr(image_url))\n    self.preload_control.setImage(image_url)\n    self.log('preloading done')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stack_cycle_controls(self):\n    self.xbmc_window.addControls(self.image_controls)", "buggy_source_code": "def stack_cycle_controls(self):\n    self.log('stack_cycle_controls start')\n    self.xbmc_window.addControls(self.image_controls)\n    self.log('stack_cycle_controls end')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def container_unset(self, container, properties):\n    headers = self._unset_properties(properties, 'X-Remove-Container-Meta-%s')\n    if headers:\n        self.create(container, headers=headers)", "buggy_source_code": "def container_unset(self, container, properties):\n    headers = self._unset_properties(properties, 'X-Remove-Container-Meta-%s')\n    if headers:\n        self.create(urllib.parse.quote(container), headers=headers)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def container_delete(self, container=None):\n    if container:\n        self.delete(container)", "buggy_source_code": "def container_delete(self, container=None):\n    if container:\n        self.delete(urllib.parse.quote(container))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def container_set(self, container, properties):\n    headers = self._set_properties(properties, 'X-Container-Meta-%s')\n    if headers:\n        self.create(container, headers=headers)", "buggy_source_code": "def container_set(self, container, properties):\n    headers = self._set_properties(properties, 'X-Container-Meta-%s')\n    if headers:\n        self.create(urllib.parse.quote(container), headers=headers)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def is_importable_path(path):\n    try:\n        return _find_module(path) is not None\n    except (ImportError, AttributeError):\n        return False", "buggy_source_code": "def is_importable_path(path):\n    try:\n        with NoImportSideEffectsContext():\n            return _find_module(path) is not None\n    except (ImportError, AttributeError):\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def serialization_error_loads(header, frames):\n    msg = '\\n'.join([frame.decode('utf8') for frame in frames])\n    raise TypeError(msg)", "buggy_source_code": "def serialization_error_loads(header, frames):\n    msg = '\\n'.join([ensure_bytes(frame).decode('utf8') for frame in frames])\n    raise TypeError(msg)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def tearDown(self):\n    shutil.rmtree(self.expected_output_dir)", "buggy_source_code": "def tearDown(self):\n    if os.path.exists(self.expected_output_dir):\n        shutil.rmtree(self.expected_output_dir)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef is_displayed(self):\n    return self.entities.title == 'Time Profile Information'", "buggy_source_code": "@property\ndef is_displayed(self):\n    return self.entities.title.text == 'Time Profile Information'", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def wait_for_main(self):\n    self.wait = True\n    while self.wait:\n        sleep(0.001)", "buggy_source_code": "def wait_for_main(self):\n    self.wait = True\n    while self.wait and (not self.exit):\n        sleep(0.001)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def wait_for_child(self):\n    self.wait = False\n    while not self.wait:\n        sleep(0.001)", "buggy_source_code": "def wait_for_child(self):\n    self.wait = False\n    while not self.wait and (not self.exit):\n        sleep(0.001)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    if self.thread.is_alive():\n        self.thread.join(0)", "buggy_source_code": "def tearDown(self):\n    if self.thread.is_alive():\n        self.thread.exit = True\n        self.thread.join()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def init():\n    assert 'Not used anymore'", "buggy_source_code": "def init():\n    global outSocket\n    outSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def isInstallable():\n    if Variables.isWindows:\n        return True\n    return False", "buggy_source_code": "def isInstallable():\n    if Variables.isWindows:\n        if platform.release() == '7':\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_auth_headers(self):\n    return {'Authorization': 'Basic %s' % base64.b64encode(b('%s:%s' % (self.user_id, self.key))).decode('utf-8'), 'Content-Length': 0, 'Accept': 'application/*+xml'}", "buggy_source_code": "def _get_auth_headers(self):\n    return {'Authorization': 'Basic %s' % base64.b64encode(b('%s:%s' % (self.user_id, self.key))).decode('utf-8'), 'Content-Length': '0', 'Accept': 'application/*+xml'}", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def paintGL(self):\n    GL.Clear(240, 240, 240)\n    GL.RenderTriangles(context['vao'], 3)", "buggy_source_code": "def paintGL(self):\n    GL.Clear(240, 240, 240)\n    if 'vao' in context:\n        GL.RenderTriangles(context['vao'], 3)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_loading_properties_from_file(self):\n    file_path = 'config/config.ini'\n    properties = _configuration._load_properties(file_path)\n    assert_that(properties).is_equal_to({'a': 'b', 'c': 'd'})", "buggy_source_code": "def test_loading_properties_from_file(self):\n    file_path = self._find_config_absolute_path()\n    properties = _configuration._load_properties(file_path)\n    assert_that(properties).is_equal_to({'a': 'b', 'c': 'd'})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def make_alternative(self, literal, **kwargs):\n    return Alternative([Literal(equivalent_text) for equivalent_text in self.substitute(literal)], **kwargs)", "buggy_source_code": "def make_alternative(self, literal, **kwargs):\n    return dragonfly.Alternative([dragonfly.Literal(equivalent_text) for equivalent_text in self.substitute(literal)], **kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def readdatafromsocket(self):\n    buf = self.recv(1024)\n    self.msg('recv %r' % buf)\n    return buf", "buggy_source_code": "def readdatafromsocket(self):\n    try:\n        buf = self.recv(1024)\n        self.msg('recv %r' % buf)\n        return buf\n    except:\n        return None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, rotate_backbone=0.5 * pi, rotate_base=0.0, ntorsionmoves=1):\n    self.rotate_backbone = rotate_backbone\n    self.rotate_base = rotate_base\n    self.ntorsionmoves = 1", "buggy_source_code": "def __init__(self, rotate_backbone=0.5 * pi, rotate_base=0.0, ntorsionmoves=1):\n    self.rotate_backbone = rotate_backbone\n    self.rotate_base = rotate_base\n    self.ntorsionmoves = ntorsionmoves", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@app.route('/api/user/shell', methods=['GET'])\n@api_wrapper\ndef get_shell_account_hook():\n    return WebSuccess(api.team.get_shell_account())", "buggy_source_code": "@app.route('/api/user/shell', methods=['GET'])\n@api_wrapper\ndef get_shell_account_hook():\n    return WebSuccess(data=api.team.get_shell_account())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def show_nav(self):\n    if self.is_run_clicked:\n        self.create_buttons()\n        self.place_buttons()", "buggy_source_code": "def show_nav(self):\n    if self.is_run_clicked:\n        self.create_buttons()\n        self.place_buttons()\n        self.create_display_toggle_buttons()\n        self.place_display_toggle_buttons()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse_requirements():\n    with open('requirements.txt') as req:\n        return req.readlines()", "buggy_source_code": "def parse_requirements():\n    with open('{0}/requirements/requirements.txt'.format(PY_METAPATH)) as req:\n        return req.readlines()", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_total_angle(self, angle, pos):\n    return FractalTree.get_total_angle(self, angle, pos) * gauss(1, self.angle_sigma)", "buggy_source_code": "def get_total_angle(self, angle, pos):\n    return FractalTree.get_total_angle(self, angle, pos) * (1 + gauss(0, self.angle_sigma))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def getPriority(self):\n    p = self._getSubText('priority')\n    if not p:\n        p = 0\n    return int(p)", "buggy_source_code": "def getPriority(self):\n    p = self._getSubText('priority')\n    if not p:\n        p = 0\n    try:\n        return int(p)\n    except ValueError:\n        return 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, ticker):\n    self.ticker = ticker\n    self._history = None\n    self._base_url = 'https://query1.finance.yahoo.com'", "buggy_source_code": "def __init__(self, ticker):\n    self.ticker = ticker.upper()\n    self._history = None\n    self._base_url = 'https://query1.finance.yahoo.com'", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def currentFrame(self):\n    return self.currentThread().GetSelectedFrame()", "buggy_source_code": "def currentFrame(self):\n    thread = self.currentThread()\n    return None if thread is None else thread.GetSelectedFrame()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def currentThread(self):\n    return self.process.GetSelectedThread()", "buggy_source_code": "def currentThread(self):\n    return None if self.process is None else self.process.GetSelectedThread()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, f):\n    Operator.__init__(self, (f,))", "buggy_source_code": "def __init__(self, f):\n    ufl_assert(isinstance(f, FormArgument), 'Can only take reference value of form arguments.')\n    Operator.__init__(self, (f,))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __exit__(self):\n    if self.lazy:\n        self.dstore.__exit__()", "buggy_source_code": "def __exit__(self, *args):\n    if self.lazy:\n        self.dstore.__exit__(*args)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def pre_conditional(self, expr, cond, annotation):\n    return self", "buggy_source_code": "def pre_conditional(self, expr, cond, annotation):\n    return (self, self)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def save_poll_data(self, dataframe):\n    dataframe.to_csv(self.file_path + self.file_name, index=False)", "buggy_source_code": "def save_poll_data(self, dataframe):\n    logger.info('Saving polls to disk')\n    dataframe.to_csv(self.file_path + self.file_name, index=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load_saved_poll_data(self):\n    df = pd.read_csv(self.file_path + self.file_name)\n    return df", "buggy_source_code": "def load_saved_poll_data(self):\n    logging.info('Loading saved polls from disk')\n    df = pd.read_csv(self.file_path + self.file_name)\n    return df", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS", "buggy_source_code": "def allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testFolderFunctionReprWithFiles(self):\n    folder = create_folder1()\n    self.assertEquals(repr(folder), \"<Folder name='folder1' path='/somewhere'>\\n<File name='00-Artist-Album.m3u' extension='.m3u' path='' />\\n<File name='00-Artist-Album.nfo' extension='.nfo' path='' />\\n<File name='01-title1.mp3' extension='.mp3' path='' />\\n<File name='02-title2.mp3' extension='.mp3' path='' />\\n<File name='03-title3.mp3' extension='.mp3' path='' />\\n<File name='04-title4.mp3' extension='.mp3' path='' />\\n</Folder>\")", "buggy_source_code": "def testFolderFunctionReprWithFiles(self):\n    folder = create_folder1()\n    file_list_repr = '\\n'.join(map(repr, folder.file_list))\n    self.assertEquals(repr(folder), \"<Folder name='folder1' path='/somewhere'>\\n%s\\n</Folder>\" % file_list_repr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef extra_options():\n    extra_vars = [('runtest', [True, 'Run unit tests.', CUSTOM])]\n    return ExtensionEasyBlock.extra_options(extra_vars)", "buggy_source_code": "@staticmethod\ndef extra_options():\n    extra_vars = [('runtest', ['test', 'Run unit tests.', CUSTOM])]\n    return ExtensionEasyBlock.extra_options(extra_vars)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def test_push_none(self):\n    try:\n        assert not self.action.push_action()\n    finally:\n        sys.stdout = sys.__stdout__", "buggy_source_code": "def test_push_none(self):\n    try:\n        assert not self.action.push_action(due_date='', due_reason='')\n    finally:\n        sys.stdout = sys.__stdout__", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __need_to_keep__(name):\n    return name in ['StaticInput', 'SubsequenceInput', 'GeneratedInput', 'LayerType', 'layer_support']", "buggy_source_code": "def __need_to_keep__(name):\n    return name in ['StaticInput', 'SubsequenceInput', 'GeneratedInput', 'LayerType', 'layer_support', 'BaseGeneratedInput']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __need_to_wrap__(name):\n    return name not in ['AggregateLevel', 'ExpandLevel']", "buggy_source_code": "def __need_to_wrap__(name):\n    return name not in ['AggregateLevel', 'ExpandLevel', 'BaseGeneratedInput']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, base_action):\n    assert isinstance(base_action, LieAction)\n    LieAction.__init__(self, base_action.lie_group, base_action.domain)", "buggy_source_code": "def __init__(self, base_action):\n    assert isinstance(base_action, LieAction)\n    self.base_action = base_action\n    LieAction.__init__(self, base_action.lie_group, base_action.domain)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restart(self, ns=None):\n    self.ns = ns or dict()", "buggy_source_code": "def restart(self, ns=None):\n    self.ns = ns or dict()\n    self.exec_count = 0\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def analyse_text(text):\n    return re.match('^\\\\s*\\\\parameters\\\\s*\\\\{', text)", "buggy_source_code": "def analyse_text(text):\n    if re.search('^\\\\s*parameters\\\\s*\\\\{', text, re.M):\n        return 1.0\n    else:\n        return 0.0", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef ControlTypeName(self):\n    return ControlTypeNameDict[self.ControlType]", "buggy_source_code": "@property\ndef ControlTypeName(self):\n    return ControlTypeNameDict.get(self.ControlType, 'UnknownControl')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _result(self, cmd):\n    return check_output(cmd).decode(self.sys_encoding)", "buggy_source_code": "def _result(self, cmd):\n    output = check_output(cmd)\n    if six.PY3:\n        return output\n    return output.decode(self.sys_encoding)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def save(self, *args, **kwargs):\n    self.slug = slugify(self.name)\n    super(FederatedDataverseInfo, self).save(*args, **kwargs)", "buggy_source_code": "def save(self, *args, **kwargs):\n    self.slug = slugify(self.name)[:50]\n    super(FederatedDataverseInfo, self).save(*args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDownModule():\n    global mol, r\n    del mol, r", "buggy_source_code": "def tearDownModule():\n    global mol, mol1, r, r1\n    del mol, mol1, r, r1", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@hook.enable\ndef on_enable():\n    info('RedstonerUtils enabled!')", "buggy_source_code": "@hook.enable\ndef on_enable():\n    shared['modules']['vanishfix'].enabled()\n    info('RedstonerUtils enabled!')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _do_password_authentication(self, passwd):\n    self.authenticate(passwd).addCallback(self._bootstrap).addErrback(self._auth_failed)", "buggy_source_code": "def _do_password_authentication(self, passwd):\n    if not passwd:\n        raise RuntimeError('No password available.')\n    self.authenticate(passwd).addCallback(self._bootstrap).addErrback(self._auth_failed)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_available_addresses(self):\n    return self.get_available_pages()", "buggy_source_code": "def get_available_addresses(self):\n    for (phys_addr, _, length) in self.runs:\n        yield (phys_addr, length)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create(self, validated_data):\n    raise_errors_on_nested_writes('create', self, validated_data)\n    return self.Meta.model(**validated_data)", "buggy_source_code": "def create(self, validated_data):\n    validated_data = self.make_embedded_validated_data(validated_data)\n    raise_errors_on_nested_writes('create', self, validated_data)\n    return self.Meta.model(**validated_data)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_document_from_sfe(self, sfe, abspath):\n    doc_uri = 'file://' + os.path.normpath(abspath)\n    return self._create_document(doc_uri, sfe)", "buggy_source_code": "def create_document_from_sfe(self, sfe, abspath):\n    doc_uri = lsp.path_to_uri(os.path.normpath(abspath))\n    return self._create_document(doc_uri, sfe)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clear(self):\n    self._decorations[:] = []\n    self.editor.setExtraSelections(self._decorations)", "buggy_source_code": "def clear(self):\n    self._decorations[:] = []\n    try:\n        self.editor.setExtraSelections(self._decorations)\n    except RuntimeError:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _VAR_STRING_to_python(self, value, dsc=None):\n    return pycompat.decodeutf8(value)", "buggy_source_code": "def _VAR_STRING_to_python(self, value, dsc=None):\n    if isinstance(value, bytearray):\n        value = bytes(value)\n    return pycompat.decodeutf8(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _STRING_to_python(self, value, dsc=None):\n    return pycompat.decodeutf8(value)", "buggy_source_code": "def _STRING_to_python(self, value, dsc=None):\n    if isinstance(value, bytearray):\n        value = bytes(value)\n    return pycompat.decodeutf8(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _BLOB_to_python(self, value, dsc=None):\n    return pycompat.decodeutf8(value)", "buggy_source_code": "def _BLOB_to_python(self, value, dsc=None):\n    if isinstance(value, bytearray):\n        value = bytes(value)\n    return pycompat.decodeutf8(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@emoji.command()\nasync def sunglasses(self, ctx):\n    await ctx.message.edit('(▀̿Ĺ̯▀̿ ̿)')", "buggy_source_code": "@emoji.command()\nasync def sunglasses(self, ctx):\n    await ctx.message.edit(content='(▀̿Ĺ̯▀̿ ̿)')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command(aliases=['cuteface'])\nasync def cute(self, ctx):\n    await ctx.message.edit('(｡◕‿◕｡)')", "buggy_source_code": "@emoji.command(aliases=['cuteface'])\nasync def cute(self, ctx):\n    await ctx.message.edit(content='(｡◕‿◕｡)')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def face(self, ctx):\n    await ctx.message.edit('( ͡° ͜ʖ ͡°)')", "buggy_source_code": "@emoji.command()\nasync def face(self, ctx):\n    await ctx.message.edit(content='( ͡° ͜ʖ ͡°)')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def ameno(self, ctx):\n    await ctx.message.edit('༼ つ ◕_◕ ༽つ')", "buggy_source_code": "@emoji.command()\nasync def ameno(self, ctx):\n    await ctx.message.edit(content='༼ つ ◕_◕ ༽つ')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command(aliases=['0.o', '0.0', 'o.o'])\nasync def weirdeyes(self, ctx):\n    await ctx.message.edit('◉_◉')", "buggy_source_code": "@emoji.command(aliases=['0.o', '0.0', 'o.o'])\nasync def weirdeyes(self, ctx):\n    await ctx.message.edit(content='◉_◉')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def tableflip2(self, ctx):\n    await ctx.message.edit('┻━┻ ︵ヽ(`Д´)ﾉ︵ ┻━┻')", "buggy_source_code": "@emoji.command()\nasync def tableflip2(self, ctx):\n    await ctx.message.edit(content='┻━┻ ︵ヽ(`Д´)ﾉ︵ ┻━┻')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command(aliases=['5dollars', '5dollar', 'money'])\nasync def fivedollar(self, ctx):\n    await ctx.message.edit('[̲̅$̲̅(̲̅5̲̅)̲̅$̲̅]')", "buggy_source_code": "@emoji.command(aliases=['5dollars', '5dollar', 'money'])\nasync def fivedollar(self, ctx):\n    await ctx.message.edit(content='[̲̅$̲̅(̲̅5̲̅)̲̅$̲̅]')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def badman(self, ctx):\n    await ctx.message.edit(\"̿̿ ̿̿ ̿̿ ̿'̿'\\\\̵͇̿̿\\\\з= ( ▀ ͜͞ʖ▀) =ε/̵͇̿̿/’̿’̿ ̿ ̿̿ ̿̿ ̿̿\")", "buggy_source_code": "@emoji.command()\nasync def badman(self, ctx):\n    await ctx.message.edit(content=\"̿̿ ̿̿ ̿̿ ̿'̿'\\\\̵͇̿̿\\\\з= ( ▀ ͜͞ʖ▀) =ε/̵͇̿̿/’̿’̿ ̿ ̿̿ ̿̿ ̿̿\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command(aliases=['guns'])\nasync def gun(self, ctx):\n    await ctx.message.edit('▄︻̷̿┻̿═━一')", "buggy_source_code": "@emoji.command(aliases=['guns'])\nasync def gun(self, ctx):\n    await ctx.message.edit(content='▄︻̷̿┻̿═━一')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def hiding(self, ctx):\n    await ctx.message.edit('┬┴┬┴┤ ͜ʖ ͡°) ├┬┴┬┴')", "buggy_source_code": "@emoji.command()\nasync def hiding(self, ctx):\n    await ctx.message.edit(content='┬┴┬┴┤ ͜ʖ ͡°) ├┬┴┬┴')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def boxing(self, ctx):\n    await ctx.message.edit(\"(ง'̀-'́)ง\")", "buggy_source_code": "@emoji.command()\nasync def boxing(self, ctx):\n    await ctx.message.edit(content=\"(ง'̀-'́)ง\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def randcplx():\n    return randrat() + I * randrat()", "buggy_source_code": "def randcplx(offset=-1):\n    return randrat() + I * randrat() + I * (1 + offset)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.mark.parametrize('value', [{GIRDER_ROUTE_ID: '/'}])\ndef testRouteTableValidationSuccess(value):\n    Setting().validate({'key': SettingKey.ROUTE_TABLE, 'value': value})", "buggy_source_code": "@pytest.mark.parametrize('value', [{GIRDER_ROUTE_ID: '/'}])\ndef testRouteTableValidationSuccess(value, db):\n    Setting().validate({'key': SettingKey.ROUTE_TABLE, 'value': value})", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    kwarg_repr = ', '.join((f'{key!s}={value!r}' for (key, value) in self._get_kwargs().items()))\n    return f'{type(self).__name__}({self.data!r}, {kwarg_repr}'", "buggy_source_code": "def __repr__(self):\n    kwarg_repr = ', '.join((f'{key!s}={value!r}' for (key, value) in self._get_kwargs().items()))\n    return f'{type(self).__name__}({self.data!r}, {kwarg_repr})'", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, fileName, windowName):\n    orca_gtkbuilder.GtkBuilderWrapper.__init__(self, fileName, windowName)\n    self.searchString = None", "buggy_source_code": "def __init__(self, fileName, windowName):\n    orca_gtkbuilder.GtkBuilderWrapper.__init__(self, fileName, windowName)\n    self.searchString = None\n    self.profileString = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def default_config():\n    base = load_yaml(default_config_path)\n    mod = load_yaml(default_mod_config_path)\n    deep_update(mod, base)\n    return base", "buggy_source_code": "def default_config():\n    base = load_yaml(default_config_path)\n    base['base']['source_code'] = None\n    mod = load_yaml(default_mod_config_path)\n    deep_update(mod, base)\n    return base", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@lu.transformation\ndef move_output_axis_transform(src, dst, *args):\n    ans = (yield args)\n    yield moveaxis(1, dst(), src(), ans)", "buggy_source_code": "@lu.transformation\ndef move_output_axis_transform(chunksize, src, dst, *args):\n    ans = (yield args)\n    yield moveaxis(chunksize, dst(), src(), ans)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_legal_move(self):\n    if self.col == new_cell.col or new_cell.row == self.row:\n        return True\n    return False", "buggy_source_code": "def is_legal_move(self, new_cell):\n    if self.col == new_cell.col or new_cell.row == self.row:\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_legal_move(self):\n    if abs(self.col - new_cell.col) == abs(new_cell.row - self.row):\n        return True\n    return False", "buggy_source_code": "def is_legal_move(self, new_cell):\n    if abs(self.col - new_cell.col) == abs(new_cell.row - self.row):\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_legal_move(self):\n    if abs(self.col - new_cell.col) <= 1 and abs(new_cell.row - self.row) <= 1:\n        return True\n    return False", "buggy_source_code": "def is_legal_move(self, new_cell):\n    if abs(self.col - new_cell.col) <= 1 and abs(new_cell.row - self.row) <= 1:\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_instantiate_with_non_algorithm(self):\n    algorithm = object()\n    with pytest.raises(TypeError):\n        Cipher(algorithm, mode=None)", "buggy_source_code": "def test_instantiate_with_non_algorithm(self, backend):\n    algorithm = object()\n    with pytest.raises(TypeError):\n        Cipher(algorithm, mode=None, backend=backend)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def save(self):\n    self.view.run_command('save')", "buggy_source_code": "def save(self):\n    self.view.run_command('save')\n    sublime.status_message('Sucessfully beautified ' + self.view.file_name())", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, window_size=50.0, real_time=False, sample_rate=1000, power_spectrum=True):\n    self.window_size = window_size\n    self.samples_per_window = sample_rate / 1000.0 * self.window_size", "buggy_source_code": "def __init__(self, window_size=50.0, real_time=False, sample_rate=1000, power_spectrum=True):\n    self.window_size = window_size\n    self.samples_per_window = sample_rate / 1000.0 * self.window_size\n    self.power_spectrum = power_spectrum", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@run_only_on('sat')\n@tier2\ndef test_positive_create_with_architecture(self):\n    arch = 'x86_64'\n    hostgroup = make_hostgroup({'architecture': arch})\n    self.assertEqual(arch, hostgroup['architecture'])", "buggy_source_code": "@run_only_on('sat')\n@tier2\ndef test_positive_create_with_architecture(self):\n    arch = 'x86_64'\n    hostgroup = make_hostgroup({'architecture': arch})\n    self.assertEqual(arch, hostgroup['operating-system']['architecture'])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, line):\n    line = line.split()\n    self.times = line[:5]\n    self.job = line[5]", "buggy_source_code": "def __init__(self, line):\n    line = line.split(maxsplit=5)\n    self.times = line[:5]\n    self.job = line[5]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_value(self, key):\n    return self.settings.value('values/%s' % key).toBool()", "buggy_source_code": "def get_value(self, key):\n    return self.get_with_default('values/%s' % key, self.default_options[key]).toBool()", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def read(self) -> str:\n    result = self.getvalue()\n    self.clear()\n    return result", "buggy_source_code": "def read(self, encoding: str='utf-8') -> str:\n    result = self.getvalue(encoding)\n    self.clear()\n    return result", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getvalue(self) -> str:\n    return self.buffer.byte_buf.decode()", "buggy_source_code": "def getvalue(self, encoding: str='utf-8') -> str:\n    return self.buffer.byte_buf.decode(encoding=encoding, errors='replace')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, host, **kwargs):\n    super(ServerException, self).__init__(**kwargs)", "buggy_source_code": "def __init__(self, hostname, message, **kwargs):\n    new_msg = '[%s] %s' % (hostname, message)\n    super(ServerException, self).__init__(new_msg, **kwargs)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _e(self, phiSolution, srcList):\n    return -self.cellGrad * phiSolution", "buggy_source_code": "def _e(self, phiSolution, srcList):\n    return self.prob.MfI * self.prob.MfRhoI * self._j(phiSolution, srcList)", "edit_actions": ["insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def delete_string(self, _id):\n    for lang in self.strings:\n        del self.strings[lang][_id]", "buggy_source_code": "def delete_string(self, _id):\n    for lang in self.strings:\n        if _id in self.strings[lang]:\n            del self.strings[lang][_id]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def format_indel_values(self):\n    self.brkpts.set_indel_brkpts(self.blatResults[0])\n    self.resultValues.format_indel_values(self)", "buggy_source_code": "def format_indel_values(self):\n    self.brkpts.set_indel_brkpts(self.blatResults[0][1])\n    self.resultValues.format_indel_values(self)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def generate_event(event_name):\n    if event_name in event_templates:\n        event_templates[event_name]()\n    else:\n        raise RuntimeError('Unknown event template.')", "buggy_source_code": "def generate_event(event_name):\n    if event_name in event_templates:\n        event_templates[event_name]()\n    else:\n        raise RuntimeError(\"Unknown event template '{}'.\".format(event_name))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onAfterOpenScene(self, clientData=None):\n    if self.autoLoad:\n        self.load()", "buggy_source_code": "def onAfterOpenScene(self, clientData=None):\n    if self.autoLoad:\n        self.load(suppressWarnings=True)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_check_all_substituted(self):\n    check_all_substituted('nothing to see here')\n    self.assertRaises(Exception, check_all_substituted, 'Not subsituted: ${FOOBAR}')", "buggy_source_code": "def test_check_all_substituted(self):\n    samba.check_all_substituted('nothing to see here')\n    self.assertRaises(Exception, samba.check_all_substituted, 'Not subsituted: ${FOOBAR}')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef tearDownClass(cls):\n    pass\n    cls.mdz.terminate()", "buggy_source_code": "@classmethod\ndef tearDownClass(cls):\n    pass\n    if cls.mdz is not None:\n        cls.mdz.send_signal(signal.SIGTERM)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _onToolOperationStarted(self, tool):\n    self._tool_active = True\n    self.disableTimer()", "buggy_source_code": "def _onToolOperationStarted(self, tool):\n    self._tool_active = True\n    self.disableTimer()\n    if not self._engine_is_fresh:\n        self._terminate()\n        self._createSocket()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_arguments(self, parser):\n    parser.add_argument('projects', nargs=1)", "buggy_source_code": "def add_arguments(self, parser):\n    parser.add_argument('--versions')\n    parser.add_argument('projects', nargs=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __getitem__(self, key):\n    if key == 'title':\n        return self.meta['login']\n    return super(UserMixIn, self).__getitem__(key)", "buggy_source_code": "def __getitem__(self, key):\n    if key == 'title':\n        return self.meta.get('login', 'Anonymous')\n    return super(UserMixIn, self).__getitem__(key)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def calendar(self, title='Choose a date', format_str='%Y-%m-%d', date='today', **kwargs):\n    return self._run_kdialog(title, ['--calendar'], kwargs)", "buggy_source_code": "def calendar(self, title='Choose a date', format_str='%Y-%m-%d', date='today', **kwargs):\n    return self._run_kdialog(title, ['--calendar', title], kwargs)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_language_name(language_id):\n    return LANGUAGES[int(language_id or DEFAULT_LANGUAGE) - 1][1]", "buggy_source_code": "def get_language_name(language_id):\n    return LANGUAGES[int(language_id or thread_locals.DEFAULT_LANGUAGE) - 1][1]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_language_code(language_id):\n    return LANGUAGES[int(language_id or DEFAULT_LANGUAGE) - 1][0]", "buggy_source_code": "def get_language_code(language_id):\n    return LANGUAGES[int(language_id or thread_locals.DEFAULT_LANGUAGE) - 1][0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _failure(self, error):\n    if __debug__:\n        dprint('Directory move failed', error)\n    raise RetryLater", "buggy_source_code": "def _failure(self, error):\n    if __debug__:\n        dprint('Directory move failed', error.value.content.read())\n    raise RetryLater", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=18)\ndef test_graphql_syntax_short05(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=2, col=18)\ndef test_graphql_syntax_short05(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=49)\ndef test_graphql_syntax_scope01(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"undefined variable '\\\\$var'\", line=3, col=49)\ndef test_graphql_syntax_scope01(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=1, col=1)\ndef test_graphql_syntax_empty08(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=1, col=1)\ndef test_graphql_syntax_empty08(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=10)\ndef test_graphql_syntax_fragment06(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'undefined fragment', line=2, col=10)\ndef test_graphql_syntax_fragment06(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=9)\ndef test_graphql_syntax_query10(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'unnamed operation is not allowed here', line=2, col=9)\ndef test_graphql_syntax_query10(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLUniquenessError, line=2, col=32)\ndef test_graphql_syntax_names16(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLUniquenessError, 'variabledefinition', line=2, col=32)\ndef test_graphql_syntax_names16(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=9)\ndef test_graphql_syntax_short04(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'short form is not allowed here', line=3, col=9)\ndef test_graphql_syntax_short04(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=10, col=53)\ndef test_graphql_syntax_scope04(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"undefined variable '\\\\$bad'\", line=10, col=53)\ndef test_graphql_syntax_scope04(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=1)\ndef test_graphql_syntax_empty05(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=2, col=1)\ndef test_graphql_syntax_empty05(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=49)\ndef test_graphql_syntax_values20(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=3, col=49)\ndef test_graphql_syntax_values20(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=18)\ndef test_graphql_syntax_names13(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=2, col=18)\ndef test_graphql_syntax_names13(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=21)\ndef test_graphql_syntax_names12(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=2, col=21)\ndef test_graphql_syntax_names12(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=23)\ndef test_graphql_syntax_query05(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=2, col=23)\ndef test_graphql_syntax_query05(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=28)\ndef test_graphql_syntax_fragment05(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=3, col=28)\ndef test_graphql_syntax_fragment05(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=9)\ndef test_graphql_syntax_fragment10(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'cycle in fragment definitions', line=2, col=9)\ndef test_graphql_syntax_fragment10(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=18)\ndef test_graphql_syntax_names14(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=2, col=18)\ndef test_graphql_syntax_names14(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=1, col=1)\ndef test_graphql_syntax_empty02(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=1, col=1)\ndef test_graphql_syntax_empty02(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=49)\ndef test_graphql_syntax_values18(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"'null' not allowed as value\", line=3, col=49)\ndef test_graphql_syntax_values18(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=32)\ndef test_graphql_syntax_query06(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=2, col=32)\ndef test_graphql_syntax_query06(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=9)\ndef test_graphql_syntax_query08(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unexpected token', line=2, col=9)\ndef test_graphql_syntax_query08(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=1, col=1)\ndef test_graphql_syntax_empty03(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=1, col=1)\ndef test_graphql_syntax_empty03(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLUniquenessError, line=2, col=32)\ndef test_graphql_syntax_names15(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLUniquenessError, 'variabledefinition', line=2, col=32)\ndef test_graphql_syntax_names15(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=9)\ndef test_graphql_syntax_fragment07(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'unused fragment', line=2, col=9)\ndef test_graphql_syntax_fragment07(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=49)\ndef test_graphql_syntax_values19(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=3, col=49)\ndef test_graphql_syntax_values19(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=34)\ndef test_graphql_syntax_string08(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=2, col=34)\ndef test_graphql_syntax_string08(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLUniquenessError, line=3, col=9)\ndef test_graphql_syntax_subscription02(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLUniquenessError, 'operation', line=3, col=9)\ndef test_graphql_syntax_subscription02(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=1, col=1)\ndef test_graphql_syntax_empty04(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=1, col=1)\ndef test_graphql_syntax_empty04(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=45)\ndef test_graphql_syntax_values17(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"undefined variable '\\\\$var'\", line=2, col=45)\ndef test_graphql_syntax_values17(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=9)\ndef test_graphql_syntax_fragment09(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'cycle in fragment definitions', line=2, col=9)\ndef test_graphql_syntax_fragment09(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=5, col=28)\ndef test_graphql_syntax_values14(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"'null' not allowed as value\", line=5, col=28)\ndef test_graphql_syntax_values14(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=46)\ndef test_graphql_syntax_scope03(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"undefined variable '\\\\$bad'\", line=3, col=46)\ndef test_graphql_syntax_scope03(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLUniquenessError, line=3, col=9)\ndef test_graphql_syntax_mutation04(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLUniquenessError, 'operation', line=3, col=9)\ndef test_graphql_syntax_mutation04(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=9)\ndef test_graphql_syntax_fragment08(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'cycle in fragment definitions', line=2, col=9)\ndef test_graphql_syntax_fragment08(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLUniquenessError, line=3, col=9)\ndef test_graphql_syntax_query09(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLUniquenessError, 'operation with name \\\\S+ already exists', line=3, col=9)\ndef test_graphql_syntax_query09(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=49)\ndef test_graphql_syntax_values21(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=3, col=49)\ndef test_graphql_syntax_values21(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=3, col=21)\ndef test_graphql_syntax_values13(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"'null' not allowed as value\", line=3, col=21)\ndef test_graphql_syntax_values13(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def technical_500_response(request, exc_type, exc_value, tb):\n    html = get_traceback_html(request, exc_type, exc_value, tb)\n    return HttpResponseServerError(html, mimetype='text/html')", "buggy_source_code": "def technical_500_response(request, exc_type, exc_value, tb):\n    reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n    html = reporter.get_traceback_html()\n    return HttpResponseServerError(html, mimetype='text/html')", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getDownload():\n    urllib.urlretrieve(urlToGetFile, fileNameToSave)", "buggy_source_code": "def getDownload(urlToGetFile, fileNameToSave):\n    urllib.urlretrieve(urlToGetFile, fileNameToSave)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def lookup_pid(self, identifier):\n    ele = self._storage[identifier]\n    if not ele:\n        return None\n    return ele.build_do_instance(self, identifier)", "buggy_source_code": "def lookup_pid(self, identifier):\n    ele = self._storage.get(identifier)\n    if not ele:\n        return None\n    return ele.build_do_instance(self, identifier)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def complement_vgrids(job, vgrids):\n    allowed_vgrids = set(user_allowed_vgrids(configuration, job['USER_CERT']))\n    return list(allowed_vgrids.difference(vgrids))", "buggy_source_code": "def complement_vgrids(configuration, job, vgrids):\n    allowed_vgrids = set(user_allowed_vgrids(configuration, job['USER_CERT']))\n    return list(allowed_vgrids.difference(vgrids))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_disk(job, resource, errors):\n    return validate_int_case(job, resource, errors, 'DISK', True)", "buggy_source_code": "def validate_disk(configuration, job, resource, errors):\n    return validate_int_case(configuration, job, resource, errors, 'DISK', True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_memory(job, resource, errors):\n    return validate_int_case(job, resource, errors, 'MEMORY')", "buggy_source_code": "def validate_memory(configuration, job, resource, errors):\n    return validate_int_case(configuration, job, resource, errors, 'MEMORY')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_resource_configuration(resource_id):\n    return get_resource_map(configuration)[resource_id][CONF]", "buggy_source_code": "def get_resource_configuration(configuration, resource_id):\n    return get_resource_map(configuration)[resource_id][CONF]", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_executables(job, errors):\n    if skip_validation(job, 'EXECUTABLES'):\n        return True\n    return validate_files(job, errors, 'EXECUTABLES')", "buggy_source_code": "def validate_executables(configuration, job, errors):\n    if skip_validation(configuration, job, 'EXECUTABLES'):\n        return True\n    return validate_files(configuration, job, errors, 'EXECUTABLES')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_verifyfiles(job, errors):\n    if skip_validation(job, 'VERIFYFILES'):\n        return True\n    return validate_files(job, errors, 'VERIFYFILES', True)", "buggy_source_code": "def validate_verifyfiles(configuration, job, errors):\n    if skip_validation(configuration, job, 'VERIFYFILES'):\n        return True\n    return validate_files(configuration, job, errors, 'VERIFYFILES', True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_maxprice(job, resource, errors):\n    if skip_validation(job, 'MAXPRICE'):\n        return True\n    return True", "buggy_source_code": "def validate_maxprice(configuration, job, resource, errors):\n    if skip_validation(configuration, job, 'MAXPRICE'):\n        return True\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_inputfiles(job, errors):\n    if skip_validation(job, 'INPUTFILES'):\n        return True\n    return validate_files(job, errors, 'INPUTFILES')", "buggy_source_code": "def validate_inputfiles(configuration, job, errors):\n    if skip_validation(configuration, job, 'INPUTFILES'):\n        return True\n    return validate_files(configuration, job, errors, 'INPUTFILES')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_cputime(job, resource, errors):\n    return validate_int_case(job, resource, errors, 'CPUTIME')", "buggy_source_code": "def validate_cputime(configuration, job, resource, errors):\n    return validate_int_case(configuration, job, resource, errors, 'CPUTIME')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_architecture(job, resource, errors):\n    return validate_str_case(job, resource, errors, 'ARCHITECTURE', True)", "buggy_source_code": "def validate_architecture(configuration, job, resource, errors):\n    return validate_str_case(configuration, job, resource, errors, 'ARCHITECTURE', True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def in_skip_list(mrsl_attribute):\n    return mrsl_attribute in configuration.skip_validation", "buggy_source_code": "def in_skip_list(configuration, mrsl_attribute):\n    return mrsl_attribute in configuration.skip_validation", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_nodecount(job, resource, errors):\n    return validate_int_case(job, resource, errors, 'NODECOUNT')", "buggy_source_code": "def validate_nodecount(configuration, job, resource, errors):\n    return validate_int_case(configuration, job, resource, errors, 'NODECOUNT')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_platform(job, resource, errors):\n    return validate_str_case(job, resource, errors, 'PLATFORM', True)", "buggy_source_code": "def validate_platform(configuration, job, resource, errors):\n    return validate_str_case(configuration, job, resource, errors, 'PLATFORM', True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_cpucount(job, resource, errors):\n    return validate_int_case(job, resource, errors, 'CPUCOUNT')", "buggy_source_code": "def validate_cpucount(configuration, job, resource, errors):\n    return validate_int_case(configuration, job, resource, errors, 'CPUCOUNT')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tor_bridges_use_custom_radio_toggled(self, checked):\n    if checked:\n        self.tor_bridges_use_obfs4_radio.setEnabled(False)\n        self.tor_bridges_use_custom_textbox_options.show()", "buggy_source_code": "def tor_bridges_use_custom_radio_toggled(self, checked):\n    if checked:\n        self.tor_bridges_use_obfs4_radio.setEnabled(False)\n        self.tor_bridges_use_custom_textbox_options.show()\n        self.tor_bridges_use_custom_textbox_options.adjustSize()\n        self.adjustSize()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read(self, title=None):\n    base = Blogpost.objects\n    if title:\n        return base.get(title=title)\n    else:\n        return base.all()", "buggy_source_code": "def read(self, request, title=None):\n    base = Blogpost.objects\n    if title:\n        return base.get(title=title)\n    else:\n        return base.all()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load_details(self, refresh=False):\n    view = navigate_to(self, 'Details')\n    if refresh:\n        view.toolbar.reload()\n    return view", "buggy_source_code": "def load_details(self, refresh=False):\n    view = navigate_to(self, 'Details')\n    if refresh:\n        view.toolbar.reload.click()\n    return view", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def include_dependent_definition_headers(self, file_generator: FileGenerator, file_cache: FileCache):\n    pass", "buggy_source_code": "def include_dependent_definition_headers(self, file_generator: FileGenerator, file_cache: FileCache):\n    self.include_dependent_declaration_headers(file_generator, file_cache)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def inputs(str):\n    return raw_input(str)", "buggy_source_code": "def inputs(str=''):\n    sys.stdout.write(str)\n    tempx = raw_input()\n    return tempx", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _send_simple_dav_error(environ, start_response, statuscode, error):\n    status = Status(request_uri(environ), statuscode, error)\n    return _send_dav_responses(start_response, status, DEFAULT_ENCODING)", "buggy_source_code": "def _send_simple_dav_error(environ, start_response, statuscode, error, description):\n    status = Status(request_uri(environ), statuscode, error=error, responsedescription=description)\n    return _send_dav_responses(start_response, status, DEFAULT_ENCODING)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_server(server_address, parallel=True, thread_factory=None):\n    return QuickServer(server_address, parallel, thread_factory)", "buggy_source_code": "def create_server(server_address, parallel=True, thread_factory=None, token_constructor=None, worker_constructor=None, soft_worker_death=False):\n    return QuickServer(server_address, parallel, thread_factory, token_constructor, worker_constructor, soft_worker_death)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def build(self):\n    return FunctionList(['(+ 4 5)', '(- 3 5)', '(define x TRUE)', '(if x 5)', '(* 3 7)', '(move 4)', '(turn 3)', '(/ 9 4)', '(if x 5)', '(* 3 7)', '(move 4)', '(turn 3)', '(/ 9 4)'])", "buggy_source_code": "def build(self):\n    return FunctionList(['(+ 4 5)', '(- 3 5)', '(define x TRUE)', '(if x 5)', '(* 3 7)', '(move 4)', '(turn 3)', '(/ 9 4)', '(if x 5)', '(* 3 7)', '(move 4)', '(turn 3)', '(/ 9 4)'], None, None)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def row(proposal):\n    return render_tile('/proposal/tiles.html', 'row', ProposalTile(proposal), proposal=proposal, cached=False)", "buggy_source_code": "def row(proposal):\n    global_admin = authorization.has('global.admin')\n    return render_tile('/proposal/tiles.html', 'row', ProposalTile(proposal), proposal=proposal, cached=True, global_admin=global_admin)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def teardown_class(cls):\n    shutil.rmtree(cls.tmp_dir)\n    os.path.expanduser = old_expanduser", "buggy_source_code": "def teardown_class(cls):\n    shutil.rmtree(cls.tmp_dir)\n    os.path.expanduser = old_expanduser\n    reload(umpa)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse(self, config_input):\n    self.parse_dict(safe_load(config_input))", "buggy_source_code": "def parse(self, config_input):\n    try:\n        d = safe_load(config_input)\n    except Exception as e:\n        raise TravisYmlInvalid('Invalid YAML data\\n' + str(e))\n    self.parse_dict(d)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cprint(txt):\n    print(txt)\n    sys.stdout.flush()", "buggy_source_code": "def cprint(txt):\n    try:\n        print(txt)\n    except UnicodeEncodeError:\n        print(txt.encode('utf8'))\n    sys.stdout.flush()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@register.filter(name='value')\ndef value(d, key_name):\n    if key_name in d:\n        return d[key_name]\n    return ''", "buggy_source_code": "@register.filter(name='value')\ndef value(d, key_name):\n    if d is not None:\n        if key_name in d:\n            return d[key_name]\n    return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef http_adapter_kwargs():\n    return dict(max_retries=3)", "buggy_source_code": "@staticmethod\ndef http_adapter_kwargs():\n    return dict(max_retries=Retry(total=3, status_forcelist=[r for r in Retry.RETRY_AFTER_STATUS_CODES if r != 429], respect_retry_after_header=False))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _clear_wake_fd(self):\n    while True:\n        try:\n            self._wake_r.recv(1024)\n        except:\n            break", "buggy_source_code": "def _clear_wake_fd(self):\n    while True:\n        try:\n            self._wake_r.recv(1024)\n        except socket.error:\n            break", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.sources = None\n    self.current_source = None", "buggy_source_code": "def __init__(self, text):\n    self.sources = (LiteralHandlingIter(self, chunk) for chunk in text)\n    self.current_source = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def from_db_value(self, value, expression, connection):\n    try:\n        return int(value)\n    except ValueError:\n        return 0", "buggy_source_code": "def from_db_value(self, value, expression, connection):\n    try:\n        return int(value)\n    except ValueError:\n        logger.exception(f'Integer in VARCHAR is not an integer, but {type(value)}: {value}')\n        return 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testPreviousYear(self):\n    self.assertEqual(self.chart.previousYear, self.chart.year - 1)", "buggy_source_code": "def testPreviousYear(self):\n    previous_year = str(int(self.chart.year) - 1)\n    self.assertEqual(self.chart.previousYear, previous_year)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef show_type(cls, result):\n    return ' :: '.join([result.expr, result.type])", "buggy_source_code": "@classmethod\ndef show_type(cls, result):\n    if result.ok:\n        return ' :: '.join([result.expr, result.type])\n    return result.value", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def insertColumn(self, colIndex, defaultValue=self.defaultValue):\n    pass", "buggy_source_code": "def insertColumn(self, colIndex, defaultValue=None):\n    if defaultValue is None:\n        defaultValue = self.defaultValue\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def delete_network(self, network_view, cidr):\n    network = obj.Network.search(self.connector, network_view=network_view, cidr=cidr)\n    network.delete()", "buggy_source_code": "def delete_network(self, network_view, cidr):\n    network = obj.Network.search(self.connector, network_view=network_view, cidr=cidr)\n    if network:\n        network.delete()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def delete_dns_view(self, dns_view):\n    dns_view = obj.DNSView.search(self.connector, name=dns_view)\n    dns_view.delete()", "buggy_source_code": "def delete_dns_view(self, dns_view):\n    dns_view = obj.DNSView.search(self.connector, name=dns_view)\n    if dns_view:\n        dns_view.delete()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def delete_dns_zone(self, dns_view, dns_zone_fqdn):\n    dns_zone = obj.DNSZone.search(self.connector, fqdn=dns_zone_fqdn, view=dns_view)\n    dns_zone.delete()", "buggy_source_code": "def delete_dns_zone(self, dns_view, dns_zone_fqdn):\n    dns_zone = obj.DNSZone.search(self.connector, fqdn=dns_zone_fqdn, view=dns_view)\n    if dns_zone:\n        dns_zone.delete()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def delete_host_record(self, dns_view, ip_address):\n    host_record = obj.HostRecord.search(self.connector, view=dns_view, ip=ip_address)\n    host_record.delete()", "buggy_source_code": "def delete_host_record(self, dns_view, ip_address):\n    host_record = obj.HostRecord.search(self.connector, view=dns_view, ip=ip_address)\n    if host_record:\n        host_record.delete()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def is_signature(sig):\n    return isinstance(sig, (str, tuple))", "buggy_source_code": "def is_signature(sig):\n    return isinstance(sig, (str, tuple, typing.Signature))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _convertBit(self, start, range):\n    tmp = self._byteDataToString(start=start, range=range)\n    value = int(tmp, 2) / 10\n    return value", "buggy_source_code": "def _convertBit(self, start, range):\n    print(' debug fonction _convertBit')\n    tmp = self._byteDataToString(start=start, range=range)\n    value = int(tmp, 2) / 10\n    return value", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _byteDataToString(self, start, range=7):\n    for i in start(start, start + range):\n        tmp = tmp + self.data[i]\n    return tmp", "buggy_source_code": "def _byteDataToString(self, start, range=7):\n    print(' debug fonction _byteDataToString')\n    for i in start(start, start + range):\n        tmp = tmp + self.data[i]\n    return tmp", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    iface = self.iface_window\n    iface.Close()", "buggy_source_code": "def close(self):\n    try:\n        iface = self.iface_window\n        iface.Close()\n    except uia_defs.NoPatternInterfaceError:\n        self.type_keys('{ESC}')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dbcursor_init(dsn):\n    if this.cursor is None:\n        this.cursor = pscheduler.pg_cursor(dsn)", "buggy_source_code": "def dbcursor_init(dsn):\n    if this.cursor is None:\n        this.cursor = pscheduler.pg_cursor(dsn)\n        this.dsn = dsn", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dbcursor():\n    return this.cursor", "buggy_source_code": "def dbcursor():\n    if this.cursor.closed:\n        log.warning('Database cursor is closed; reconnecting')\n        this.cursor = None\n        dbcursor_init(this.dsn)\n    return this.cursor", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def main(path):\n    packageName = 'synapseclient-1.7.1'\n    linkPrefix = 'https://pypi.python.org/packages/56/da/e489aad73886e6572737ccfe679b3a2bc9e68b05636d4ac30302d0dcf261/'\n    installPackage(packageName, linkPrefix, path)", "buggy_source_code": "def main(path):\n    print('At the entry point of installPythonclient.main()')\n    packageName = 'synapseclient-1.7.1'\n    linkPrefix = 'https://pypi.python.org/packages/56/da/e489aad73886e6572737ccfe679b3a2bc9e68b05636d4ac30302d0dcf261/'\n    installPackage(packageName, linkPrefix, path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def build(self):\n    import os\n    self.system(f'./autogen.sh')\n    self.system(f'''CC=\"{os.getenv('CC')}\" CXX=\"{os.getenv('CXX')}\" LDFLAGS=\"-lgnustl_shared -lsupc++ -latomic -L{self.env['ANDROID_NDK']}/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a\" ./configure --host=arm-linux-androideabi --target=arm-linux-androideabi --prefix={self.destdir()}''')\n    self.system(f'make install')", "buggy_source_code": "def build(self):\n    import os\n    self.system(f'./autogen.sh')\n    self.system(f'''CC=\"{os.getenv('CC')}\" CXX=\"{os.getenv('CXX')}\" LDFLAGS=\"-lgnustl_shared -lsupc++ -latomic -L{self.env['ANDROID_NDK']}/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a\" ./configure --host=arm-linux-androideabi --target=arm-linux-androideabi --prefix={self.destdir()}''')\n    self.system(f'make install')\n    self.system(f'if [ -e {self.destdir()}/lib/libzmq.so ] ; then mv {self.destdir()}/lib/libzmq.so {self.destdir()}/lib/libzmq.so.old; fi')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<DapVarSubset %s[%s]>' % (self.variable.name, self.subset)", "buggy_source_code": "def __repr__(self):\n    return '<DapVarSubset %s%s>' % (self.variable.name, _repr_silce(self.subset))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def disconnect(self):\n    try:\n        self._sock.write(b'\\xe0\\x00')\n    except OSError:\n        pass\n    self.close()", "buggy_source_code": "def disconnect(self):\n    try:\n        self._sock.write(b'\\xe0\\x00')\n    except OSError:\n        pass\n    self._has_connected = False\n    self.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_datatypes(self):\n    unsupported = set()\n    known = set(Property.types) | unsupported\n    self._check_param_superset(self.repo, 'wbformatvalue', 'datatype', known)", "buggy_source_code": "def test_datatypes(self):\n    unsupported = {'wikibase-form', 'wikibase-lexeme'}\n    known = set(Property.types) | unsupported\n    self._check_param_superset(self.repo, 'wbformatvalue', 'datatype', known)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@exercise_diet.route('/portal')\ndef portal():\n    return render_template('exercise_diet/exercise-diet_portal.html')", "buggy_source_code": "@exercise_diet.route('/portal')\ndef portal():\n    return render_template('exercise_diet/exercise-diet_portal.html', user=current_user())", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def corpus_property_namespace(corpusID):\n    return Namespace(SCHEMA[corpusID.lower() + '/'])", "buggy_source_code": "def corpus_property_namespace(corpusID):\n    global NAMESPACES\n    ns = Namespace(SCHEMA[corpusID.lower() + '/'])\n    NAMESPACES[corpusID.lower()] = ns\n    return ns", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_parties(self):\n    return [DalParty(self, p.short_name, self.missing) for p in self.get_party_qs()]", "buggy_source_code": "def get_parties(self):\n    return [DalParty(self, p.short_name, missing=self.missing) for p in self.get_party_qs()]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def validate(self):\n    self.validate_finance_books()", "buggy_source_code": "def validate(self):\n    self.validate_finance_books()\n    self.validate_accounts()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.hdp = hgvs.dataproviders.uta.connect(pooling=True, mode='run', cache=CACHE)", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.hdp = hgvs.dataproviders.uta.connect(pooling=True, mode=os.environ.get('HGVS_CACHE_MODE', 'run'), cache=CACHE)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef subtask(cls, *args, **kwargs):\n    return sets.subtask(cls, *args, **kwargs)", "buggy_source_code": "@classmethod\ndef subtask(cls, *args, **kwargs):\n    from celery.task.sets import subtask\n    return subtask(cls, *args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def _close_pyaudio(self):\n    self._stop_pyaudio()\n    self.handle.terminate()\n    self._do_play = self._play\n    self.stop = self._stop", "buggy_source_code": "def _close_pyaudio(self):\n    print('close')\n    self._stop_pyaudio()\n    self.handle.terminate()\n    self._do_play = self._play\n    self.stop = self._stop", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.instance = None\n    self.onVisibilityChange = []\n    self.__visible = False\n    self.visible = True\n    self.skinAttributes = None\n    self.deprecationInfo = None", "buggy_source_code": "def __init__(self):\n    self.instance = None\n    self.onVisibilityChange = []\n    self.__visible = False\n    self.visible = True\n    self.skinAttributes = []\n    self.deprecationInfo = None", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def init_match(self):\n    for attribute in self.attributes:\n        self.init_match_attribute(attribute)\n    self.init_match_headers()\n    self.init_match_parameters()", "buggy_source_code": "def init_match(self):\n    for attribute in self.attributes:\n        self.init_match_attribute(attribute)\n    self.init_match_headers()\n    self.init_match_parameters()\n    self.init_match_content_url_encoded()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def node_script(self, attrs):\n    attrs = self._limit_attr(attrs, {'type': ['math/tex', 'math/tex; mode=display']})\n    return attrs", "buggy_source_code": "def node_script(self, attrs):\n    attrs = self._set_attr_default(attrs, 'type', 'math/tex')\n    attrs = self._limit_attr(attrs, {'type': ['math/tex', 'math/tex; mode=display']})\n    return attrs", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def storage_id(self, blockid):\n    return str(uuid.uuid5(uuid.NAMESPACE_URL, blockid + ' ' + str(socket.gethostname()) + str(time.time())))", "buggy_source_code": "@staticmethod\ndef storage_id(blockid):\n    return str(uuid.uuid5(uuid.NAMESPACE_URL, blockid + ' ' + str(socket.gethostname()) + str(time.time())))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, dbfile):\n    self.db_file = dbfile", "buggy_source_code": "def __init__(self, dbfile):\n    self.db_file = dbfile\n    self.conn = self.db_to_ram()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def normalize(self, category):\n    norm_cache.qcd_ztautau_norm(ztautau=self.ztautau, qcd=self.qcd, category=category, param='TRACK')", "buggy_source_code": "def normalize(self, category):\n    norm_cache.qcd_ztautau_norm(ztautau=self.ztautau, qcd=self.qcd, category=category, param=self.norm_field)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@expose('close-output-port', [values.W_OutputPort])\ndef close_output_port(port):\n    port.close()\n    return values.w_void", "buggy_source_code": "@expose('close-output-port', [values.W_Object], simple=False)\ndef close_output_port(port, env, cont):\n    cont = close_port_cont(env, cont)\n    return get_output_port(port, env, cont)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def get_icon_url(pokedex_number):\n    url = icon_list.get(str(pokedex_number))\n    if url:\n        return url\n    return None", "buggy_source_code": "def get_icon_url(pokedex_number):\n    url = icon_list.get(str(pokedex_number))\n    if url:\n        return url\n    else:\n        return 'http://floatzel.net/pokemon/black-white/sprites/images/{pokedex}.png'.format(pokedex=pokedex_number)\n    return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_falco_rules_filename(self):\n    return self.args.falco_rules_file.name", "buggy_source_code": "def get_falco_rules_filename(self):\n    if self.args.falco_rules_file is None:\n        return None\n    else:\n        return self.args.falco_rules_file.name", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _delete_activity(self, cur, _id):\n    cur.execute('delete from activity\\n                where id=?', (_id,))", "buggy_source_code": "def _delete_activity(self, cur, _id):\n    cur.execute('delete from activity\\n                where id=?', (_id,))\n    cur.execute('update tomato set activity_id=null\\n                where activity_id=?', (_id,))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef valid_content_types():\n    return ['application/json']", "buggy_source_code": "@staticmethod\ndef valid_content_types():\n    return ['application/json', 'application/json-rpc', 'application/jsonrequest']", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef from_netcdf(cls, filename):\n    with Dataset(filename, 'r') as root:\n        array_group = cls._get_group_from_netcdf_group(root)\n        return array_group", "buggy_source_code": "@classmethod\ndef from_netcdf(cls, filename, fields=None):\n    with netCDF4.Dataset(filename, 'r') as root:\n        array_group = cls._get_group_from_netcdf_group(root, fields)\n        return array_group", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_actions(self, request):\n    actions = super(FolderAdmin, self).get_actions(request)\n    del actions['delete_selected']\n    return actions", "buggy_source_code": "def get_actions(self, request):\n    actions = super(FolderAdmin, self).get_actions(request)\n    if 'delete_selected' in actions:\n        del actions['delete_selected']\n    return actions", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def login_allowed(user):\n    return True", "buggy_source_code": "def login_allowed(user):\n    if user is None or user.get_username() is None:\n        return False\n    return hasattr(user, 'backend_user')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_as_shell():\n    assert any([task.get('shell') == distro_vars['package_update_command'] for task in role_tasks])", "buggy_source_code": "def test_run_as_shell():\n    assert any([task.get('shell') == distro_vars['template']['package_update_command'] for task in role_tasks])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_add_from_file():\n    assert any([task.get('copy') == {'src': distro_vars['httpd_conf_src'], 'dest': distro_vars['httpd_conf_dest']} for task in role_tasks])", "buggy_source_code": "def test_add_from_file():\n    assert any([task.get('copy') == {'src': distro_vars['template']['httpd_conf_src'], 'dest': distro_vars['template']['httpd_conf_dest']} for task in role_tasks])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_user():\n    assert role_meta['user'] == distro_vars['httpd_user']", "buggy_source_code": "def test_user():\n    assert role_meta['user'] == distro_vars['template']['httpd_user']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_with_newline():\n    assert any([task.get('shell') == distro_vars['httpd_install_command'] for task in role_tasks])", "buggy_source_code": "def test_run_with_newline():\n    assert any([task.get('shell') == distro_vars['template']['httpd_install_command'] for task in role_tasks])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_command():\n    assert role_meta['command'] == [distro_vars['httpd_bin'], '-DFOREGROUND']", "buggy_source_code": "def test_command():\n    assert role_meta['command'] == [distro_vars['template']['httpd_bin'], '-DFOREGROUND']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_add_from_tarball():\n    assert any([task.get('unarchive') == {'src': 'html.tar.gz', 'dest': distro_vars['httpd_pageroot']} for task in role_tasks])", "buggy_source_code": "def test_add_from_tarball():\n    assert any([task.get('unarchive') == {'src': 'html.tar.gz', 'dest': distro_vars['template']['httpd_pageroot']} for task in role_tasks])", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def test_list_instruments(self):\n    inst = set(Eso.list_instruments())\n    assert inst == instrument_list", "buggy_source_code": "def test_list_instruments(self):\n    inst = set(Eso.list_instruments())\n    assert set(inst) == set(instrument_list)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def create_container_snapshot(self, container, name, **kwargs):\n    return self.create_container_image(container, self.CONTAINER_SNAPSHOT_NAME_PREFIX + 'name')", "buggy_source_code": "def create_container_snapshot(self, container, name, **kwargs):\n    return self.create_container_image(container, self.CONTAINER_SNAPSHOT_NAME_PREFIX + name)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def get_diffuse_broadband_irradiance():\n    return get_diffuse_irradiance_by_band('high-frequency') + get_diffuse_irradiance_by_band('low-frequency')", "buggy_source_code": "def get_diffuse_broadband_irradiance(air_mass=1.66, turbidity_alpha=1.3, turbidity_beta=0.6):\n    return get_diffuse_irradiance_by_band('high-frequency', air_mass, turbidity_alpha, turbidity_beta) + get_diffuse_irradiance_by_band('low-frequency', air_mass, turbidity_alpha, turbidity_beta)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def NextDialogState():\n    if not ContinueWindow:\n        return\n    ContinueWindow.SetVisible(False)", "buggy_source_code": "def NextDialogState():\n    if not ContinueWindow:\n        return\n    ContinueWindow.GetControl(0).SetVisible(False)\n    ContinueWindow.GetControl(0).SetDisabled(True)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create(model, x, y, z, h):\n    veh = Vehicle(API.CreateVehicle(model, x, y, z, h))\n    return veh", "buggy_source_code": "def create(model, x, y, z, h):\n    veh = Vehicle(API.CreateVehicle(model, x, y, z, h))\n    __pool[veh.id] = veh\n    return veh", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def forwards(self, orm):\n    db.delete_unique('sentry_groupedmessage', ['logger', 'view', 'checksum'])", "buggy_source_code": "def forwards(self, orm):\n    try:\n        db.delete_unique('sentry_groupedmessage', ['logger', 'view', 'checksum'])\n    except Exception:\n        db.rollback_transaction()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def find_near_objid(table, objid, within_arcsec=3.0):\n    return find_near_coord(table, find_objid(table, objid)['coord'], within_arcsec)", "buggy_source_code": "def find_near_objid(table, objid, within_arcsec=3.0):\n    table = add_skycoord(table)\n    return find_near_coord(table, find_objid(table, objid)['coord'], within_arcsec)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef budget_path(cls, billing_account, budget):\n    return google.api_core.path_template.expand('billingAccounts/{billing_account}/budgets/{budget}', billing_account=billing_account, budget=budget)", "buggy_source_code": "@classmethod\ndef budget_path(cls, billing_account, budget):\n    warnings.warn('Resource name helper functions are deprecated.', PendingDeprecationWarning, stacklevel=1)\n    return google.api_core.path_template.expand('billingAccounts/{billing_account}/budgets/{budget}', billing_account=billing_account, budget=budget)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef billing_account_path(cls, billing_account):\n    return google.api_core.path_template.expand('billingAccounts/{billing_account}', billing_account=billing_account)", "buggy_source_code": "@classmethod\ndef billing_account_path(cls, billing_account):\n    warnings.warn('Resource name helper functions are deprecated.', PendingDeprecationWarning, stacklevel=1)\n    return google.api_core.path_template.expand('billingAccounts/{billing_account}', billing_account=billing_account)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_script_timeout(self, time_to_wait):\n    self.execute(Command.SET_SCRIPT_TIMEOUT, {'ms': time_to_wait * 1000})", "buggy_source_code": "def set_script_timeout(self, time_to_wait):\n    self.execute(Command.SET_SCRIPT_TIMEOUT, {'ms': int(time_to_wait) * 1000})", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __eq__(self, other):\n    return FrozenMolecule.are_isomorphic(self, other)", "buggy_source_code": "def __eq__(self, other):\n    return FrozenMolecule.are_isomorphic(self, other, return_atom_map=False)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def remove_all_items(self):\n    for item in set(self.items):\n        self.remove_item(item)", "buggy_source_code": "def remove_all_items(self):\n    for item in set(self.items):\n        if self.has_item(item):\n            self.remove_item(item)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def select_rom(self, rom):\n    self.reset()\n    self.writebyte(MATCH_ROM)\n    self.write(rom)", "buggy_source_code": "def select_rom(self, rom):\n    self.reset()\n    self.writebyte(self.MATCH_ROM)\n    self.write(rom)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def close(self):\n    self.file.close()", "buggy_source_code": "def close(self):\n    if self.file != None:\n        self.file.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def open_folder(path):\n    os.startfile(path)", "buggy_source_code": "def open_folder(path):\n    try:\n        os.startfile(path)\n    except (OSError, FileNotFoundError, WindowsError):\n        return False\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setActiveStatus(markAlive):\n    self._markAlive = markAlive", "buggy_source_code": "def setActiveStatus(self, markAlive):\n    self._markAlive = markAlive", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_import(self, args):\n    return tts.save.importPak(self.filesystem, args.file)", "buggy_source_code": "def do_import(self, args):\n    if tts.save.importPak(self.filesystem, args.file):\n        return (0, f'Successfully imported {args.file} into {{TODO}}')\n    else:\n        return (1, f'Error importing {args.file}')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef current_proposals(cls):\n    return cls.objects.filter(semester__in=Semester.current_semesters())", "buggy_source_code": "@classmethod\ndef current_proposals(cls):\n    return cls.objects.filter(semester__in=Semester.current_semesters(future=True))", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def draw_next_time_interval(bot):\n    return random.randrange(bot.min_countdown * 60, bot.max_countdown * 60)", "buggy_source_code": "def draw_next_time_interval(bot):\n    if bot.min_countdown == bot.max_countdown:\n        return bot.min_countdown * 60\n    return random.randrange(bot.min_countdown * 60, bot.max_countdown * 60)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_to_journal(self, graphuri):\n    repository_hash = uuid.uuid1().hex\n    self.journal.add(repository_hash, [graphuri])\n    self.update_websocket_clients()", "buggy_source_code": "def add_to_journal(self, graphuri):\n    logging.debug('Journal updating on graph: ' + graphuri)\n    repository_hash = uuid.uuid1().hex\n    self.journal.add(repository_hash, [graphuri])\n    self.update_websocket_clients()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_2(self):\n    self.appTest(15)\n    self.assert_equal(1, 1, 'This test always works')", "buggy_source_code": "def test_2(self):\n    self.progTest(self.model.cfg.mapping.SysCtrl0.installDir + '/test/testLog', 20)\n    self.assert_equal(1, 1, 'This test always works')", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def initiateSim(self):\n    self.state = State()\n    self.proposals = 0", "buggy_source_code": "def initiateSim(self):\n    global timestamp\n    timestamp = getTimeStampString()\n    self.state = State()\n    self.proposals = 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_dim_simplify_pow():\n    assert dim_simplify(Pow(L, 2)) == L.pow(2)", "buggy_source_code": "def test_dim_simplify_pow():\n    assert dim_simplify(Pow(L, 2)) == L.pow(2)\n    assert dim_simplify(L ** 2) == L.pow(2)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_dim_simplify_mul():\n    assert dim_simplify(Mul(L, T)) == L.mul(T)", "buggy_source_code": "def test_dim_simplify_mul():\n    assert dim_simplify(Mul(L, T)) == L.mul(T)\n    assert dim_simplify(L * T) == L.mul(T)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_dim_simplify_add():\n    assert dim_simplify(Add(L, L)) == L", "buggy_source_code": "def test_dim_simplify_add():\n    assert dim_simplify(Add(L, L)) == L\n    assert dim_simplify(L + L) == L", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop():\n    self.updateSpeed(0, 0)\n    self.updateSpeed(1, 0)", "buggy_source_code": "def stop(self):\n    self.updateSpeed(0, 0)\n    self.updateSpeed(1, 0)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef create_agent_configurations():\n    config = super().create_agent_configurations()\n    config.add_header_name('atba').add_value('flip_turning', bool, default=False, description='if true bot will turn opposite way')\n    return config", "buggy_source_code": "@staticmethod\ndef create_agent_configurations():\n    config = super(Agent, Agent).create_agent_configurations()\n    config.add_header_name('atba').add_value('flip_turning', bool, default=False, description='if true bot will turn opposite way')\n    return config", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _on_display_description(self, event):\n    self._on_display_description_helper()", "buggy_source_code": "def _on_display_description(self, event):\n    self._on_display_description_helper()\n    self.SetScrollbars(20, 20, 200, 100)\n    self.Refresh()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read(fname):\n    with open(os.path.join(os.path.dirname(__file__), fname)) as f:\n        return f.read()", "buggy_source_code": "def read(fname):\n    with open(os.path.join(os.path.dirname(__file__), fname), encoding='utf-8') as f:\n        return f.read()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.buf = ''\n    pass", "buggy_source_code": "def __init__(self):\n    self.buf = ''\n    self.isTraceback = False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef match_with_extension(cls, element, pattern):\n    regex = '([^.]*|^())\\\\%s$' % pattern\n    return cls.__match_regex(regex, element)", "buggy_source_code": "@classmethod\ndef match_with_extension(cls, element, pattern):\n    pattern = pattern.replace('\\\\', '\\\\\\\\')\n    regex = '([^.]*|^())\\\\%s$' % pattern\n    return cls.__match_regex(regex, element)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef match_with_folder(cls, element, pattern):\n    regex = '^%s/(.*)$' % pattern\n    return cls.__match_regex(regex, element)", "buggy_source_code": "@classmethod\ndef match_with_folder(cls, element, pattern):\n    regex = '^%s%s(.*)$' % (pattern, cls.os_separator())\n    return cls.__match_regex(regex.replace('\\\\', '\\\\\\\\'), element)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef match_with_filename(cls, element, pattern):\n    regex = '([^.]*|^())%s$' % pattern\n    return cls.__match_regex(regex, element)", "buggy_source_code": "@classmethod\ndef match_with_filename(cls, element, pattern):\n    pattern = pattern.replace('\\\\', '\\\\\\\\')\n    regex = '([^.]*|^())%s$' % pattern\n    return cls.__match_regex(regex, element)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def base_url(org):\n    if settings.MULTI_ORG:\n        return 'https://{}/{}'.format(settings.HOST, org.slug)\n    return settings.HOST", "buggy_source_code": "def base_url(org):\n    if settings.MULTI_ORG:\n        return 'https://{}/{}'.format(settings.HOST, org.slug)\n    return 'http://{}'.format(settings.HOST)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@pytest.fixture(scope='function')\ndef waeup_proxy(request, waeup_server):\n    proxy = xmlrpcclient.ServerProxy('http://mgr:mgrpw@localhost:61614')\n    return proxy", "buggy_source_code": "@pytest.fixture(scope='function')\ndef waeup_proxy(request, waeup_server):\n    proxy = xmlrpcclient.ServerProxy('http://mgr:mgrpw@localhost:61614')\n    proxy.reset_student_db()\n    request.addfinalizer(proxy.reset_student_db)\n    return proxy", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_params(self, deep=True):\n    return {'lamL': self.lamL, 'lamT': self.lamT, 'learning_rate': self.learning_rate}", "buggy_source_code": "def get_params(self, deep=True):\n    return {'lamL': self.lamL, 'lamT': self.lamT, 'learning_rate': self.learning_rate, 'n_iter': self.n_iter}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def remove(self):\n    raise RuntimeException('Tree root cannot be removed using root.remove(). Use bundle.remove_tree(zone) instead')", "buggy_source_code": "def remove(self):\n    self.bundle.trees = [root for root in self.bundle.trees if root == self]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def feasible_set(self):\n    for y in itertools.product(*[range(k) for k in self.K]):\n        yield y", "buggy_source_code": "def feasible_set(self):\n    for y in itertools.product(*[range(1, k + 1) for k in self.K]):\n        yield np.array(y)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, feature_slot):\n    self._feature_slot = feature_slot\n    self._placeholder_slices = {}", "buggy_source_code": "def __init__(self, feature_slot):\n    self.name = 'slot_%d' % feature_slot.slot_id\n    self._feature_slot = feature_slot\n    self._placeholder_slices = {}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.pool = memory.MemoryAsyncPool()", "buggy_source_code": "def setUp(self):\n    self.pool = memory.MemoryAsyncPool()\n    cupy.get_default_memory_pool().free_all_blocks()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_hbase_inserts(self, vector):\n    self.run_test_case('QueryTest/hbase-inserts', vector)", "buggy_source_code": "def test_hbase_inserts(self, vector):\n    try:\n        self.run_test_case('QueryTest/hbase-inserts', vector)\n    except AssertionError:\n        msg = 'IMPALA-579 - Insert into a binary encoded hbase table produces incorrect results'\n        pytest.xfail(msg)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def dc(self, fr, to, expr):\n    expr = re.sub('-([0-9])', '_\\\\1', expr)\n    self.dc1(fr, to, expr + ' p')", "buggy_source_code": "def dc(self, fr, to, expr, m):\n    expr = re.sub('-([0-9])', '_\\\\1', expr)\n    self.dc1(fr, to, expr + ' p')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getMetaTime(self, releaseId):\n    self.curs.execute('select metatime from releases where id = ?', (releaseId,))\n    return self.curs.fetchone()[0]", "buggy_source_code": "def getMetaTime(self, releaseId):\n    self.curs.execute('select metatime from releases where id = ?', (releaseId,))\n    r = self.curs.fetchone()\n    return r[0] if r else 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def merge_one(self, label, property_key=None, property_value=None):\n    for node in self.merge(label, property_key, property_value):\n        return node", "buggy_source_code": "def merge_one(self, label, property_key=None, property_value=None):\n    for node in self.merge(label, property_key, property_value, limit=1):\n        return node", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, app=None, cache=None, debug=False):\n    if app is not None and cache is not None:\n        self.init(app, cache, debug)", "buggy_source_code": "def __init__(self, app=None, cache=None, debug=None):\n    if app is not None and cache is not None:\n        self.init(app, cache, debug)", "edit_actions": []}
{"fixed_source_code": "def allocateLabel(self):\n    return '.LC%.d' % self.magicNum", "buggy_source_code": "def allocateLabel(self):\n    self.magicNum += 1\n    return '.LC%.d' % self.magicNum", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def post_render(self):\n    return self.cycles.filter_glossy", "buggy_source_code": "def post_render(self):\n    return self.scene.cycles.blur_glossy", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def post_render(self):\n    return self.cycles.caustics_refractive", "buggy_source_code": "def post_render(self):\n    return self.scene.cycles.caustics_refractive", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def post_render(self):\n    return self.cycles.use_transparent_shadows", "buggy_source_code": "def post_render(self):\n    return self.scene.cycles.use_transparent_shadows", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def create_ignore_tree(path):\n    ig = Ignore(path)\n    ig.ignores['/DEFAULT/'] = BLACKLIST\n    ig.recurse(ig)\n    return ig", "buggy_source_code": "def create_ignore_tree(path):\n    create_flooignore(path)\n    ig = Ignore(path)\n    ig.ignores['/DEFAULT/'] = BLACKLIST\n    ig.recurse(ig)\n    return ig", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def pressure_dirichlet_values(self):\n    return [1, 0]", "buggy_source_code": "def pressure_dirichlet_values(self):\n    self.p = Expression(self.p_anal)\n    self.p.t = 0.0\n    return [self.p]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def velocity_dirichlet_values(self):\n    return [(0, 0)]", "buggy_source_code": "def velocity_dirichlet_values(self):\n    self.u = Expression(self.u_anal)\n    self.u.t = 0.0\n    return [self.u]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def pressure_initial_condition(self):\n    return '1 - x[0]'", "buggy_source_code": "def pressure_initial_condition(self):\n    exact_p = Expression(self.p_anal)\n    exact_p.t = 0.0\n    return exact_p", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@app.route('/logout')\ndef logout():\n    session['is_authenticated'] = False\n    return index()", "buggy_source_code": "@app.route('/logout')\ndef logout():\n    session['is_authenticated'] = False\n    session['username'] = None\n    return index()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_random_number(floor, ceil):\n    wrappers.get_random_number(floor, ceil)", "buggy_source_code": "def get_random_number(floor, ceil):\n    return wrappers.get_random_number(floor, ceil)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _query_multi_armed_bandit_probs(client):\n    return client.query(query=BANDIT_PROBABILITY_QUERY)", "buggy_source_code": "def _query_multi_armed_bandit_probs(client):\n    return client.query(query=BANDIT_PROBABILITY_QUERY).rows", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def proxyConnectionFailed(self, reason):\n    self.deferred.errback(reason)", "buggy_source_code": "def proxyConnectionFailed(self, reason):\n    if not self.canceled:\n        self.deferred.errback(reason)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, side):\n    self.side = side\n    self.board = [[0] * side] * side", "buggy_source_code": "def __init__(self, side):\n    assert side >= 5, 'No victory conditions!'\n    self.side = side\n    self.board = [[0 for _ in range(side)] for _ in range(side)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_basic(self):\n    import bq_helper\n    import cleverhans", "buggy_source_code": "def test_basic(self):\n    import bq_helper\n    import cleverhans\n    from rl.agents.dqn import DQNAgent", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def post_save(self, instance, **kwargs):\n    self.invalidate(instance)", "buggy_source_code": "def post_save(self, instance, created, **kwargs):\n    if created:\n        cache.clear()\n    else:\n        self.invalidate(instance)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    tensor_str = str(self.to_numpy()).replace(']', ' ').replace('[', ' ') + '\\n'", "buggy_source_code": "def __str__(self):\n    tensor_str = str(self.to_numpy()).replace(']', ' ').replace('[', ' ') + '\\n'\n    return tensor_str", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def test_getsourcefile(self):\n    self.assertEqual(inspect.getsourcefile(mod.spam), modfile)\n    self.assertEqual(inspect.getsourcefile(git.abuse), modfile)", "buggy_source_code": "def test_getsourcefile(self):\n    self.assertEqual(normcase(inspect.getsourcefile(mod.spam)), modfile)\n    self.assertEqual(normcase(inspect.getsourcefile(git.abuse)), modfile)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    super(AttrTreeTest, self).setUp()", "buggy_source_code": "def setUp(self):\n    self.fixed_error = \"No attribute 'Test' in this AttrTree, and none can be added because fixed=True\"\n    super(AttrTreeTest, self).setUp()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def domain(self):\n    return self._domain", "buggy_source_code": "@property\ndef domain(self):\n    return self._domain", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@register.filter(name='serialized_user')\ndef serialized_user(user):\n    return UserSerializer(user).data", "buggy_source_code": "@register.filter(name='serialized_user')\ndef serialized_user(user):\n    if user.is_anonymous():\n        return {'id': None}\n    return UserSerializer(user).data", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setup(self):\n    self.req.canContinue = self.multiDL = True if self.account else False", "buggy_source_code": "def setup(self):\n    self.resumeDownload = self.multiDL = True if self.account else False\n    self.pyfile.url = re.sub('\\\\.com(/.*?)?/files', '.com/de/files', self.pyfile.url)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_running(self):\n    return self._load_variant_thread.isRunning() or self._load_count_thread.isRunning()", "buggy_source_code": "def is_running(self):\n    if self._load_variant_thread and self._load_count_thread:\n        return self._load_variant_thread.isRunning() or self._load_count_thread.isRunning()\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def tag_length(self):\n    return self._length or 2 + self.string_length() * 2", "buggy_source_code": "def tag_length(self):\n    if self._length is None:\n        return 2 + self.string_length() * 2\n    return self._length", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def tag_length(self):\n    return self._length or 4 + self.size()", "buggy_source_code": "def tag_length(self):\n    if self._length is None:\n        return 4 + self.size()\n    return self._length", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def cb_destroy_debugwindow(self, event):\n    self.DEBUGWINDOW_OPEN = False", "buggy_source_code": "def cb_destroy_debugwindow(self, event):\n    self.DEBUGWINDOW_OPEN = False\n    GLib.idle_add(self.debug_window.destroy)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    self._c_polynomial = _mps.mps_chebyshev_poly_new(ctx._c_ctx, degree, 5)", "buggy_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    self._c_polynomial = ctypes.c_void_p(_mps.mps_chebyshev_poly_new(ctx._c_ctx, degree, 5))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    self._c_polynomial = _mps.mps_monomial_poly_new(ctx._c_ctx, degree)", "buggy_source_code": "def __init__(self, ctx, degree):\n    Polynomial.__init__(self, ctx, degree)\n    self._c_polynomial = ctypes.c_void_p(_mps.mps_monomial_poly_new(ctx._c_ctx, degree))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self._c_ctx = _mps.mps_context_new()", "buggy_source_code": "def __init__(self):\n    self._c_ctx = ctypes.c_void_p(_mps.mps_context_new())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_has_dns_ip():\n    dns = Domain('user_domain', '0:0:0:0:0', 'device_name', 'device_title', 'update_token')\n    assert not dns.has_dns_ip()", "buggy_source_code": "def test_has_dns_ip():\n    dns = Domain('user_domain', '0:0:0:0:0', 'device_name', 'device_title', 'update_token')\n    dns.ip = None\n    dns.local_ip = None\n    dns.ipv6 = None\n    assert not dns.has_dns_ip()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init_print_colors():\n    from IPython.utils import coloransi, io\n    androconf.default_colors(coloransi.TermColors)\n    CONF['PRINT_FCT'] = io.stdout.write", "buggy_source_code": "def init_print_colors():\n    from IPython.utils import coloransi, io\n    androconf.default_colors(coloransi.TermColors)\n    androconf.CONF['PRINT_FCT'] = io.stdout.write", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def copy(self) -> 'TgtIdxConstraint':\n    res = TgtIdxConstraint()\n    res.dict = self.dict.copy()\n    return res", "buggy_source_code": "def copy(self) -> 'TgtIdxConstraint':\n    res = TgtIdxConstraint()\n    res.dict = self.dict.copy()\n    res.placeholders_list = self.placeholders_list\n    return res", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef check_for_dano_labels(miller_array):\n    return any(['DANO' in i.upper() for i in miller_array.info().labels])", "buggy_source_code": "@staticmethod\ndef check_for_dano_labels(miller_array):\n    return any(['DANO' in i.upper() or 'DP' == i.upper() for i in miller_array.info().labels])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load(*args, **kwargs):\n    pass", "buggy_source_code": "def load(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_software_root(*args, **kwargs):\n    return 'tmp'", "buggy_source_code": "def get_software_root(self, *args, **kwargs):\n    return 'tmp'", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onDemoteParticipantsFailed(self, node, originalIqEntity):\n    logger.error('Group demote participants failed')", "buggy_source_code": "def onDemoteParticipantsFailed(self, node, originalIqEntity):\n    logger.error('Group demote participants failed')\n    self.toUpper(ErrorIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onSetSubjectSuccess(self, node, originalIqEntity):\n    logger.info('Group subject change success')", "buggy_source_code": "def onSetSubjectSuccess(self, node, originalIqEntity):\n    logger.info('Group subject change success')\n    self.toUpper(ResultIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onPromoteParticipantsSuccess(self, node, originalIqEntity):\n    logger.info('Group promote participants success')", "buggy_source_code": "def onPromoteParticipantsSuccess(self, node, originalIqEntity):\n    logger.info('Group promote participants success')\n    self.toUpper(ResultIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onDemoteParticipantsSuccess(self, node, originalIqEntity):\n    logger.info('Group demote participants success')", "buggy_source_code": "def onDemoteParticipantsSuccess(self, node, originalIqEntity):\n    logger.info('Group demote participants success')\n    self.toUpper(ResultIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onInfoGroupFailed(self, node, originalIqEntity):\n    logger.error('Group info failed')", "buggy_source_code": "def onInfoGroupFailed(self, node, originalIqEntity):\n    logger.error('Group info failed')\n    self.toUpper(ErrorIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onRemoveParticipantsFailed(self, node, originalIqEntity):\n    logger.error('Group remove participants failed')", "buggy_source_code": "def onRemoveParticipantsFailed(self, node, originalIqEntity):\n    logger.error('Group remove participants failed')\n    self.toUpper(ErrorIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onSetSubjectFailed(self, node, originalIqEntity):\n    logger.error('Group subject change failed')", "buggy_source_code": "def onSetSubjectFailed(self, node, originalIqEntity):\n    logger.error('Group subject change failed')\n    self.toUpper(ErrorIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onLeaveGroupFailed(self, node, originalIqEntity):\n    logger.error('Group leave failed')", "buggy_source_code": "def onLeaveGroupFailed(self, node, originalIqEntity):\n    logger.error('Group leave failed')\n    self.toUpper(ErrorIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onPromoteParticipantsFailed(self, node, originalIqEntity):\n    logger.error('Group promote participants failed')", "buggy_source_code": "def onPromoteParticipantsFailed(self, node, originalIqEntity):\n    logger.error('Group promote participants failed')\n    self.toUpper(ErrorIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def onCreateGroupFailed(self, node, originalIqEntity):\n    logger.error('Group create failed')", "buggy_source_code": "def onCreateGroupFailed(self, node, originalIqEntity):\n    logger.error('Group create failed')\n    self.toUpper(ErrorIqProtocolEntity.fromProtocolTreeNode(node))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def main():\n    app.add_task(mqtt_loop)\n    app.run(host='0.0.0.0', port=8000, debug=True)", "buggy_source_code": "def main():\n    app.add_task(mqtt_loop)\n    app.run(host='0.0.0.0', port=8000, debug=DEBUG)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def after_rename(self, old_name, new_name, merge=False):\n    if merge:\n        self.recalculate_bin_qty(new_name)", "buggy_source_code": "def after_rename(self, old_name, new_name, merge=False):\n    new_warehouse_name = self.get_new_warehouse_name_without_abbr(new_name)\n    self.db_set('warehouse_name', new_warehouse_name)\n    if merge:\n        self.recalculate_bin_qty(new_name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def log_error_and_respond(message, status_code):\n    app.logger.error(message)\n    return (jsonify(status='error', message=message), status_code)", "buggy_source_code": "def log_error_and_respond(bucket, message, status_code):\n    app.logger.error('%s: %s' % (bucket, message))\n    return (jsonify(status='error', message=message), status_code)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def token_pairs():\n    pairs_map = {'chars': ['chars', 'endchars'], 'enter_scene_multiple': ['enter_scene_multiple', 'end_enter_scene_multiple'], 'exit_scene_multiple': ['exit_scene_multiple', 'end_exit_scene_multiple']}\n    return pairs_map", "buggy_source_code": "def token_pairs():\n    pairs_map = {'chars': ['chars', 'endchars'], 'enter_scene_multiple': ['enter_scene_multiple', 'end_enter_scene_multiple'], 'exit_scene_multiple': ['exit_scene_multiple', 'end_exit_scene_multiple'], 'assign': ['assign', 'end_assign']}\n    return pairs_map", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def utilization(self, widget):\n    return self.__format.format(self.__packages)", "buggy_source_code": "def utilization(self, widget):\n    return self.__format.format(self.__packages if self.__packages >= 0 else 'n/a')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_scan(self, args):\n    url = '%s/scan' % self.baseurl\n    disk_info = api_call(url, data=None, calltype='post')\n    print_disk_info(disk_info)", "buggy_source_code": "@api_error\ndef do_scan(self, args):\n    url = '%s/scan' % self.baseurl\n    disk_info = api_call(url, data=None, calltype='post')\n    print_disk_info(disk_info)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, original_func):\n    self.original_func = original_func", "buggy_source_code": "def __init__(self, original_func, args, kwargs):\n    self.original_func = original_func\n    self.args = args\n    self.kwargs = kwargs", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, original_func):\n    self.original_func = original_func", "buggy_source_code": "def __init__(self, original_func, args, kwargs):\n    self.original_func = original_func\n    self.args = args\n    self.kwargs = kwargs", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_queryset(self):\n    return Poll.objects.order_by('-pub_date')[:5]", "buggy_source_code": "def get_queryset(self):\n    return Poll.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@db.transact\ndef default_console(self):\n    return self._default_console", "buggy_source_code": "@db.transact\ndef default_console(self):\n    return self._default_console()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def get_queryset(self, *args, **kwargs):\n    return models.MemberStatusChange.objects.filter(profile=user_profile).order_by('-changed_on')", "buggy_source_code": "def get_queryset(self, *args, **kwargs):\n    return models.MemberStatusChange.objects.filter(profile=self.user_profile).order_by('-changed_on')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef start(self):\n    return min(self.intervals, key=lambda x: x.start)", "buggy_source_code": "@property\ndef start(self):\n    return min(self.intervals, key=lambda x: x.start).start", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef end(self):\n    return max(self.intervals, key=lambda x: x.end)", "buggy_source_code": "@property\ndef end(self):\n    return max(self.intervals, key=lambda x: x.end).end", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def first(things):\n    try:\n        return things[0]\n    except TypeError:\n        return None", "buggy_source_code": "def first(things):\n    try:\n        return things[0]\n    except (IndexError, TypeError):\n        return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __del__(self):\n    if self._device is not None:\n        usb.util.dispose_resources(self._device)", "buggy_source_code": "def __del__(self):\n    if self._device is not None:\n        try:\n            usb.util.dispose_resources(self._device)\n        except:\n            pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@TaskGen.taskgen_method\n@TaskGen.feature('command')\ndef init_command(self):\n    Utils.def_attrs(self, variables=None)", "buggy_source_code": "@TaskGen.taskgen_method\n@TaskGen.feature('command')\ndef init_command(self):\n    Utils.def_attrs(self, variables=None, rule='')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self, *args, **kwargs):\n    self.sitesrc = './site_src'\n    self.a = appie.Appie(self.sitesrc)", "buggy_source_code": "def setUp(self, *args, **kwargs):\n    self.maxDiff = None\n    self.sitesrc = './tests/site_src'\n    self.a = appie.Appie(src=self.sitesrc)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def tearDown(self):\n    shutil.rmtree('./build')", "buggy_source_code": "def tearDown(self):\n    try:\n        shutil.rmtree('./build')\n    except FileNotFoundError:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, slack_client=None, plugin_config=None):\n    super(PluginWordRespond, self).__init__(slack_client, plugin_config)\n    self.words = self.load_word_list('words.txt')", "buggy_source_code": "def __init__(self, slack_client=None, plugin_config=None):\n    super(PluginWordRespond, self).__init__(slack_client=slack_client, plugin_config=plugin_config)\n    self.words = self.load_word_list('words.txt')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def finalize(self, solver):\n    self.export.simulation_end()", "buggy_source_code": "def finalize(self, solver):\n    self.export.simulation_end()\n    if self.debug_file_object:\n        self.debug_file_object.close()\n        self.debug_file_object = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def value(n):\n    return Action.names.index(n)", "buggy_source_code": "@staticmethod\ndef value(n):\n    return Action.names.index(n)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def name(i):\n    return Action.names[i]", "buggy_source_code": "@staticmethod\ndef name(i):\n    return Action.names[i]", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_server_memory(self, server_name):\n    server = self.get_server(server_name)\n    memorys = server['memoryModules']\n    total_memory = sum([memory['capacity'] for memory in memorys])\n    return total_memory", "buggy_source_code": "def get_server_memory(self, server_name):\n    server = self.get_server(server_name)\n    memorys = server['memoryModules']\n    total_memory = sum([memory['capacity'] for memory in memorys])\n    return 1024 * total_memory", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def short_uuid4(instance, filename):\n    filename = get_valid_filename(filename)\n    return os.path.join(uuid.uuid4()[:8], filename)", "buggy_source_code": "def short_uuid4(instance, filename):\n    filename = get_valid_filename(filename)\n    return os.path.join(str(uuid.uuid4())[:8], filename)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def GetResult(self, child):\n    pass", "buggy_source_code": "def GetResult(self, child):\n    pass\n    self.results = np.append(self.results, result)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def end_start_dates_validation(self):\n    if self._dates_are_set() and (not is_in_chronological_order(self.start_date, self.end_date)):\n        raise AttributeError(_('end_start_date_error'))", "buggy_source_code": "def end_start_dates_validation(self):\n    if self._dates_are_set() and (not is_in_chronological_order(self.start_date, self.end_date)):\n        raise ValidationError({'end_date': _('end_start_date_error')})", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def close(self):\n    for f in self._open_files.keys():\n        f.close()\n    self._unlink(self.auth_file.name)", "buggy_source_code": "def close(self):\n    for f in self._open_files.keys():\n        f.close()\n    if not self._kerberos:\n        self._unlink(self.auth_file.name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def next(self):\n    try:\n        self.current += 1\n        return self.parsed_data[self.current]\n    except IndexError:\n        raise StopIteration", "buggy_source_code": "def next(self):\n    try:\n        self.current += 1\n        return self.parsed_data[self.current - 1]\n    except IndexError:\n        raise StopIteration", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, tformat='%Y-%m-%dT%H:%M:%S', **kwargs):\n    super(ConfigDateTime, self).__init__(**kwargs)", "buggy_source_code": "def __init__(self, tformat='%Y-%m-%dT%H:%M:%S', **kwargs):\n    self._tformat = tformat\n    super(ConfigDateTime, self).__init__(**kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def splitPrefix(self, name):\n    if name is not None and ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "buggy_source_code": "def splitPrefix(self, name):\n    if name is not None and ':' in name:\n        return tuple(name.split(':', 1))\n    else:\n        return (None, name)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def displayed_double(self):\n    return self.is_double_page and (not self.is_virtual_double_page) and (self.imagehandler.get_current_page() != self.imagehandler.get_number_of_pages())", "buggy_source_code": "def displayed_double(self):\n    return self.imagehandler.get_current_page() and self.is_double_page and (not self.is_virtual_double_page) and (self.imagehandler.get_current_page() != self.imagehandler.get_number_of_pages())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, faultCode, faultString, *params):\n    self.faultCode = faultCode\n    self.faultString = faultString\n    self.args = params", "buggy_source_code": "def __init__(self, faultCode, faultString, *params):\n    Exception.__init__(self)\n    self.faultCode = faultCode\n    self.faultString = faultString\n    self.args = params", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef new_biginteger(value):\n    return BigInteger(value)", "buggy_source_code": "@staticmethod\ndef new_biginteger(value):\n    assert isinstance(value, rbigint)\n    return BigInteger(value)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.c = {}\n    self.columns = []\n    self.indexes = []", "buggy_source_code": "def __init__(self, name):\n    self.name = name\n    self.c = {}\n    self.columns = []\n    self.indexes = []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def print_state_change(state_change):\n    click.echo(click.style(f'> {state_change.__class__.__name__}', fg='red', bold=True))\n    print_attributes(state_change.__dict__)", "buggy_source_code": "def print_state_change(state_change, translator=None):\n    click.echo(click.style(f'> {state_change.__class__.__name__}', fg='red', bold=True))\n    print_attributes(state_change.__dict__, translator=translator)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _expandAlongPath(self, item):\n    while item is not None:\n        self.treeWidget.expandItem(item)\n        item = item.parent()", "buggy_source_code": "def _expandAlongPath(self, item):\n    item = item.parent()\n    while item is not None:\n        self.treeWidget.expandItem(item)\n        item = item.parent()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _is_type(key, *types):\n    return new_service_content.get_question(key)['type'] in types", "buggy_source_code": "def _is_type(key, *types):\n    return new_service_content.get_question(key).get('type') in types", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def functionSignatureSuffix(self, kernel):\n    s = ''\n    if self.language == 'HIP':\n        s += '#pragma clang diagnostic pop' + self.endLine\n    return s", "buggy_source_code": "def functionSignatureSuffix(self, kernel):\n    s = ''\n    if self.language == 'HIP':\n        s += self.endLine\n        s += '#pragma clang diagnostic pop' + self.endLine\n    return s", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def opt(self, subparsers):\n    return subparsers.add_parser('help', help='Displays help for a command')", "buggy_source_code": "def opt(self, subparsers):\n    return subparsers.add_parser(self.ORATOR_CMD, help='Displays help for a command')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def setup(app):\n    app.connect('builder-inited', run_apidoc)\n    app.add_directive('faucet-prom-metrics-table', FaucetPromMetricsTable)\n    app.add_directive('gauge-prom-metrics-table', GaugePromMetricsTable)", "buggy_source_code": "def setup(app):\n    app.add_css_file('css/responsive-tables.css')\n    app.connect('builder-inited', run_apidoc)\n    app.add_directive('faucet-prom-metrics-table', FaucetPromMetricsTable)\n    app.add_directive('gauge-prom-metrics-table', GaugePromMetricsTable)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self, node, ctx):\n    n = super(Transformation, self).run(node, ctx)\n    ast.fix_missing_locations(n)\n    return n", "buggy_source_code": "def run(self, node, ctx):\n    n = super(Transformation, self).run(node, ctx)\n    if self.update:\n        ast.fix_missing_locations(n)\n    return n", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_transformers(labels):\n    try:\n        return TRANSFORMERS[generate_key(labels)]\n    except KeyError:\n        raise exceptions.ImproperlyConfigured()", "buggy_source_code": "def get_transformers(labels):\n    try:\n        return TRANSFORMERS[generate_key(labels)]\n    except KeyError:\n        raise exceptions.ImproperlyConfigured('There are no transformers that match the header labels of this file')", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def get_part_id(self, suffix):\n    id_part = self.data.get('placement_listing_widget')\n    return '%s-%s' % (id_part, suffix)", "buggy_source_code": "def get_part_id(self, suffix):\n    id_part = self.data.get('placement_listing_widget')\n    if not suffix:\n        return id_part\n    return '%s-%s' % (id_part, suffix)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef getSearchFormFields(cls):\n    return ['name', 'label', 'sample_type', 'description', 'region', 'flight', 'collector', 'creator']", "buggy_source_code": "@classmethod\ndef getSearchFormFields(cls):\n    return ['name', 'label', 'sample_type', 'description', 'region', 'flight__vehicle', 'flight', 'collector', 'creator']", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def adjoint(self):\n    raise NotImplementedError()", "buggy_source_code": "def adjoint(self):\n    raise NotImplementedError('adjoint not implemented for %s' % self.__class__.__name__)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def conjugate(self):\n    raise NotImplementedError()", "buggy_source_code": "def conjugate(self):\n    raise NotImplementedError('conjugate not implemented for %s' % self.__class__.__name__)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_constant(self, constant):\n    self.constant = constant\n    self.parameters = self.get_init_parameters()", "buggy_source_code": "def add_constant(self, constant):\n    self.constant = constant\n    self.parameters = self.get_init_parameters(initial=False)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_transform(self, transform):\n    if isclass(transform):\n        transform = transform(self)\n    self.transform = transform\n    self.parameters = self.get_init_parameters()", "buggy_source_code": "def add_transform(self, transform):\n    if isclass(transform):\n        transform = transform(self)\n    self.transform = transform\n    self.parameters = self.get_init_parameters(initial=False)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_noisemodel(self, noisemodel):\n    self.noisemodel = noisemodel\n    self.parameters = self.get_init_parameters()", "buggy_source_code": "def add_noisemodel(self, noisemodel):\n    self.noisemodel = noisemodel\n    self.parameters = self.get_init_parameters(initial=False)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def draw_buttons(self, b_context, b_layout):\n    row = b_layout.row()\n    row.prop(self, 'roughness')", "buggy_source_code": "def draw_buttons(self, b_context, b_layout):\n    b_layout.prop(self, 'roughness')\n    b_layout.prop(self, 'f0')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    if self.filter_menu is not None:\n        self.filter_menu.remove()", "buggy_source_code": "def tearDown(self):\n    from selenium_wrapper import SE\n    SE.refresh()\n    if self.filter_menu is not None:\n        self.filter_menu.remove()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def render_json(self, d):\n    json_txt = json.dumps(d)\n    self.response.headers['Content-Type'] = 'application/json; charset=UTF-8'\n    self.response.out.write(json_txt)", "buggy_source_code": "def render_json(self, d):\n    json_txt = json.dumps(d, default=BaseHandler.json_serializer)\n    self.response.headers['Content-Type'] = 'application/json; charset=UTF-8'\n    self.response.out.write(json_txt)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __setitem__(self, key, value):\n    self.validate()\n    super().__setitem__(key, value)", "buggy_source_code": "def __setitem__(self, key, value):\n    self.validate(value)\n    super().__setitem__(key, value)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "@classmethod\ndef fromSBMLString(cls, sbml_str):\n    reader = SBMLReader()\n    doc = reader.readSBMLFromString(sbml_str)\n    return antimonySBOConverter(doc)", "buggy_source_code": "@classmethod\ndef fromSBMLString(cls, sbml_str):\n    reader = libsbml.SBMLReader()\n    doc = reader.readSBMLFromString(sbml_str)\n    return antimonySBOConverter(doc)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef fromSBMLFile(cls, sbml_file):\n    reader = SBMLReader()\n    doc = reader.readSBMLFromFile(sbml_file)\n    return antimonySBOConverter(doc)", "buggy_source_code": "@classmethod\ndef fromSBMLFile(cls, sbml_file):\n    reader = libsbml.SBMLReader()\n    doc = reader.readSBMLFromFile(sbml_file)\n    return antimonySBOConverter(doc)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, capabilities):\n    self.capabilities = capabilities", "buggy_source_code": "def __init__(self, capabilities):\n    self.capabilities = [symbol(c) for c in capabilities]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _global_fit_changed(self):\n    fs = self._get_fits()\n    for fi in fs:\n        fi.fit = self.global_fit", "buggy_source_code": "def _global_fit_changed(self):\n    if self.global_fit in FIT_TYPES:\n        fs = self._get_fits()\n        for fi in fs:\n            fi.fit = self.global_fit", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _global_error_type_changed(self):\n    fs = self._get_fits()\n    for fi in fs:\n        fi.error_type = self.global_error_type", "buggy_source_code": "def _global_error_type_changed(self):\n    if self.global_error_type in FIT_ERROR_TYPES:\n        fs = self._get_fits()\n        for fi in fs:\n            fi.error_type = self.global_error_type", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read(self, size):\n    return self._key.read(size)", "buggy_source_code": "def read(self, size=sys.maxint):\n    return self._key.read(size)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@abc.abstractmethod\ndef read(self, size):\n    pass", "buggy_source_code": "@abc.abstractmethod\ndef read(self, size=sys.maxint):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef _error_message(key, current, expected, format_str, name):\n    return format_str.format(key=key, current=current, expected=expected, name=name)", "buggy_source_code": "@staticmethod\ndef _error_message(key, current, expected, format_str, name, pg_host):\n    return format_str.format(key=key, current=current, expected=expected, name=name, pg_host=pg_host)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_heading(self, text):\n    self.tr()\n    self.td(mklabel(text), colspan=2)", "buggy_source_code": "def add_heading(self, text):\n    self.tr()\n    self.td(mklabel(text, width=constants.TOOLBAR_WIDTH, align=0), colspan=2)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_Struct360(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'float, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 3.14\\nprint(foo.bar)\\n', '3.14')", "buggy_source_code": "def test_Struct360(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be greater or equal zero, not -1')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -1\\n', stderr=test_stderr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_Struct410(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uchar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 0\\nprint(foo.bar)\\n', '0')", "buggy_source_code": "def test_Struct410(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be greater or equal -9223372036854775808, not -9223372036854775809')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -9223372036854775809\\n', stderr=test_stderr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_Struct470(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'schar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 127\\nprint(foo.bar)\\n', '127')", "buggy_source_code": "def test_Struct470(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Float, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'float, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _setVolumeForVoiceType(self, voiceType, value):\n    voiceACSS = self._getACSSForVoiceType(voiceType)\n    voiceACSS[acss.ACSS.GAIN] = value", "buggy_source_code": "def _setVolumeForVoiceType(self, voiceType, value):\n    voiceACSS = self._getACSSForVoiceType(voiceType)\n    voiceACSS[acss.ACSS.GAIN] = value\n    voiceACSS['established'] = True", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _setPitchForVoiceType(self, voiceType, value):\n    voiceACSS = self._getACSSForVoiceType(voiceType)\n    voiceACSS[acss.ACSS.AVERAGE_PITCH] = value", "buggy_source_code": "def _setPitchForVoiceType(self, voiceType, value):\n    voiceACSS = self._getACSSForVoiceType(voiceType)\n    voiceACSS[acss.ACSS.AVERAGE_PITCH] = value\n    voiceACSS['established'] = True", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _setRateForVoiceType(self, voiceType, value):\n    voiceACSS = self._getACSSForVoiceType(voiceType)\n    voiceACSS[acss.ACSS.RATE] = value", "buggy_source_code": "def _setRateForVoiceType(self, voiceType, value):\n    voiceACSS = self._getACSSForVoiceType(voiceType)\n    voiceACSS[acss.ACSS.RATE] = value\n    voiceACSS['established'] = True", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.mark.integration\ndef test_task_widget_lists_tasks(qtbot):\n    pass", "buggy_source_code": "@pytest.mark.integration\ndef test_task_widget_lists_tasks(qtbot, task_window):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def addError(e, parser):\n    return mapError(lambda es: functions.cons(e, es), parser)", "buggy_source_code": "def addError(e, parser):\n    checkParser('addError', parser)\n    return mapError(lambda es: functions.cons(e, es), parser)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sepBy0(parser, separator):\n    return optional(sepBy1(parser, separator))", "buggy_source_code": "def sepBy0(parser, separator):\n    checkParser('sepBy0', parser)\n    checkParser('sepBy0', separator)\n    return optional(sepBy1(parser, separator))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def app(f, *args):\n    return appP(pure(f), *args)", "buggy_source_code": "def app(f, *args):\n    checkFunction('app', f)\n    return appP(pure(f), *args)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sepBy1(parser, separator):\n    return app(functions.pairs, parser, many0(app(functions.pair, separator, parser)))", "buggy_source_code": "def sepBy1(parser, separator):\n    checkParser('sepBy1', parser)\n    checkParser('sepBy1', separator)\n    return app(functions.pairs, parser, many0(app(functions.pair, separator, parser)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _clone_type(self, options, type_):\n    return (not options['include'] or type_ in options['include']) and 'feature_flags' not in options['exclude']", "buggy_source_code": "def _clone_type(self, options, type_):\n    return (not options['include'] or type_ in options['include']) and type_ not in (options['exclude'] or [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef _calculate_execution_cash_flow(txn):\n    if txn.asset is Future:\n        return 0.0\n    return -1 * txn.price * txn.amount", "buggy_source_code": "@staticmethod\ndef _calculate_execution_cash_flow(txn):\n    if isinstance(txn.asset, Future):\n        return 0.0\n    return -1 * txn.price * txn.amount", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Name(' + self.fullname + ')'", "buggy_source_code": "def __repr__(self):\n    return 'Name(' + self.fullname.encode('utf-8') + ')'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_stat_updates(self):\n    return _chain.from_iterable((m.get_stat_updates() for m in self.modules))", "buggy_source_code": "def get_stat_updates(self):\n    return list(_chain.from_iterable((m.get_stat_updates() for m in self.modules)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def forget(self, request):\n    return self._get_cookies(request, None)", "buggy_source_code": "def forget(self, request):\n    request._jwt_cookie_reissue_revoked = True\n    return self._get_cookies(request, None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def handle_selection_changed(self, name, state):\n    self.model[name][model_selected] = state", "buggy_source_code": "def handle_selection_changed(self, name, state):\n    self.model[name][model_selected] = state\n    self.update_view_from_model()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_elem_by_name(self, part_id):\n    for e in self:\n        if e.part_id.lower() == part_id.lower():\n            return e\n    raise ValueError('Element %s not found')", "buggy_source_code": "def get_elem_by_name(self, part_id):\n    for e in self:\n        if e.part_id.lower() == part_id.lower():\n            return e\n    raise ValueError('Element %s not found' % part_id)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_profiler_args(self, parser):\n    if osprofiler_profiler:\n        parser.add_argument('--os-profile', metavar='HMAC_KEY', default=utils.env('OS_PROFILE'), help=_('HMAC key to use for encrypting context data for performance profiling of operation. This key should be the value of HMAC key configured in senlin configuration (/etc/senlin/senlin.conf). Without the key, profiling will not be triggered even if osprofiler is enabled on server side.'))", "buggy_source_code": "def add_profiler_args(self, parser):\n    if isinstance(osprofiler_profiler, int):\n        parser.add_argument('--os-profile', metavar='HMAC_KEY', default=utils.env('OS_PROFILE'), help=_('HMAC key to use for encrypting context data for performance profiling of operation. This key should be the value of HMAC key configured in senlin configuration (/etc/senlin/senlin.conf). Without the key, profiling will not be triggered even if osprofiler is enabled on server side.'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def options(o):\n    o.add_option('--check', action='store_true', default=False, help='Exec unit tests')", "buggy_source_code": "def options(o):\n    o.add_option('--check', action='store_true', default=False, help='Exec unit tests')\n    o.add_option('--buildtest', action='store_true', default=False, help='Build unit tests (but not exec)')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _refresh_sp(self):\n    self.sp = self.register_interface.read(2)", "buggy_source_code": "def _refresh_sp(self):\n    self.sp = self.register_interface.read(2)\n    if self.debug > 5:\n        print('SP: {}'.format(bin(self.sp)))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def by_id(self, id):\n    path = partial(_path, self.adapter)\n    path = path(id)\n    return self._get(path, id=id)", "buggy_source_code": "@declassify('user')\ndef by_id(self, id):\n    path = partial(_path, self.adapter)\n    path = path(id)\n    return self._get(path, id=id)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def today(self):\n    path = _path(self.adapter)\n    return self._get(path)", "buggy_source_code": "@declassify('time_entry')\ndef today(self):\n    path = _path(self.adapter)\n    return self._get(path)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef account(self):\n    return self._get('account')", "buggy_source_code": "@property\n@declassify('account')\ndef account(self):\n    return self._get('account')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def by_id(self, id):\n    path = partial(_path, self.adapter)\n    path = path(id)\n    return self._get(path, id=id)", "buggy_source_code": "@declassify('time_entry')\ndef by_id(self, id):\n    path = partial(_path, self.adapter)\n    path = path(id)\n    return self._get(path, id=id)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef myself(self):\n    return self._get('myself')", "buggy_source_code": "@property\n@declassify('user')\ndef myself(self):\n    return self._get('myself')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@numba.njit('f4(i8[:])')\ndef tau_rand(state):\n    integer = tau_rand_int(state)\n    return float(integer) / 2147483647", "buggy_source_code": "@numba.njit('f4(i8[:])')\ndef tau_rand(state):\n    integer = tau_rand_int(state)\n    return abs(float(integer) / 2147483647)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def right_align(a):\n    print(' ' * 80 - len(a))", "buggy_source_code": "def right_align(a):\n    b = str(a)\n    print(' ' * 80 - len(b))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tag(self, *args):\n    return tag(self.path, *args)", "buggy_source_code": "def tag(self, location, *args):\n    return tag(self.path, location, *args)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def begin_train(self):\n    self.dl = self._wrap_dl(self.dl)", "buggy_source_code": "def begin_train(self):\n    self.learn.dl = self._wrap_dl(self.learn.dl)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def begin_validate(self):\n    self.dl = self._wrap_dl(self.dl)", "buggy_source_code": "def begin_validate(self):\n    self.learn.dl = self._wrap_dl(self.learn.dl)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_children(self):\n    children = list(self.children.values())\n    for c in children:\n        children += c.get_children()\n    return children", "buggy_source_code": "def get_children(self):\n    children = list(self.children.values())\n    for c in self.children.values():\n        children += c.get_children()\n    return children", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def plot(self):\n    raise NotImplementedError('plot(self)')", "buggy_source_code": "def plot(self):\n    (fig, ax) = plt.subplots(1, 1, squeeze=True)\n    ax.matshow(self._data)\n    return (fig, ax)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _subplot(self):\n    raise NotImplementedError('_subplot(self)')", "buggy_source_code": "def _subplot(self, params):\n    (fig, ax) = self.plot()\n    guess = self.gen_model(self.data, params)\n    ax.contour(guess, color='r')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def notify(title='[Hackerbell]Hacker News Top 10', body='N/A'):\n    util.send_email(title, body, HACKERBELL_RECEIVER)", "buggy_source_code": "def notify(title='[Hackerbell]Hacker News Top 10', body='N/A', to=HACKERBELL_RECEIVER):\n    util.send_email(title, body, to)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def row_ukey(row):\n    return {'user_name': row['user_name'], 'created_at': row['created_at'], 'expert': nan2value(row['expert'], 0)}", "buggy_source_code": "def row_ukey(row):\n    expert_val = 0 if str(row['expert']) == 'NaN' else 1\n    return {'user_name': row['user_name'], 'created_at': row['created_at'], 'expert': expert_val}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/get_started/<int:hunt_id>', methods=['GET'])\ndef get_started(hunt_id):\n    return render_template('get_started.html', form=ParticipantForm(), hunt_id=hunt_id)", "buggy_source_code": "@app.route('/get_started/hunts/<int:hunt_id>/items/<int:item_id>', methods=['GET'])\ndef get_started(hunt_id, item_id):\n    return render_template('get_started.html', form=ParticipantForm(), hunt_id=hunt_id, item_id=item_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_fiels_update_this(self, cr, iud, ids, context=None):\n    return ids", "buggy_source_code": "def _get_fiels_update_this(self, cr, iud, ids, context=None):\n    _logger.warning('Update %s date event' % len(ids))\n    return ids", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.connection = Connection(client=BlankClient(), host='example.com', nick='unused', real_name='Charlie Denton')\n    self.connection.writer = mock.MagicMock()", "buggy_source_code": "def setUp(self):\n    self.connection = Connection(client=BlankClient(), host='example.com', nick='unused', real_name='Charlie Denton')\n    self.connection.writer = mock.MagicMock(spec=StreamWriter)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_result():\n    result = sh('echo more stuff').run(stdout=PIPE)\n    assert b'more stuff\\n' == result.stdout", "buggy_source_code": "def test_result():\n    result = sh('echo more stuff').run(stdout=PIPE, decode=True)\n    assert 'more stuff\\n' == result.stdout", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def enqueue_delete_from_releasefile(self, instance, **kwargs):\n    return self.enqueue('delete', instance.release.package)", "buggy_source_code": "def enqueue_delete_from_releasefile(self, instance, **kwargs):\n    try:\n        return self.enqueue('update', instance.release.package)\n    except Release.DoesNotExist:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def enqueue_delete_from_release(self, instance, **kwargs):\n    return self.enqueue('delete', instance.package)", "buggy_source_code": "def enqueue_delete_from_release(self, instance, **kwargs):\n    try:\n        return self.enqueue('update', instance.package)\n    except Package.DoesNotExist:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_slice_mask(self, mask2d):\n    mask3d = np.repeat([mask2d], self.xarr.size, axis=0)\n    return mask3d", "buggy_source_code": "def get_slice_mask(self, mask2d, notxarr=None):\n    zlen = notxarr if notxarr else self.xarr.size\n    mask3d = np.repeat([mask2d], zlen, axis=0)\n    return mask3d", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, args):\n    self.args = args[1:]", "buggy_source_code": "def __init__(self, args):\n    self.args = args[1:]\n    self._prepend_venv_path()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.route('/last_page')\ndef display_lastpage():\n    return render_template('lastpage.html')", "buggy_source_code": "@app.route('/last_page')\ndef display_lastpage():\n    login_form = LoginForm()\n    return render_template('lastpage.html', login_form=login_form)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def main():\n    init()\n    enemy()\n    draw()\n    shoot()", "buggy_source_code": "def main():\n    if debug_mode == 1:\n        enemy()\n        draw()\n        shoot()\n    else:\n        enemy()\n        draw()\n        place()\n        shoot()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def pre_put_permission_filter(resource, request, lookup):\n    return", "buggy_source_code": "def pre_put_permission_filter(resource, request, lookup):\n    pre_delete_permission_filter(resource, request, lookup)\n    pre_post_permission_filter(resource, request)\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, bot):\n    self.bot = bot", "buggy_source_code": "def __init__(self, bot):\n    self.bot = bot\n    self.bot.loop.create_task(self.add_listeners())", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, world):\n    self.world = world\n    self.locking_state = defaultdict(bool)\n    self.run_action_srv = FakeService('run_action', 'run_action_done')", "buggy_source_code": "def __init__(self, world):\n    self.world = world\n    self.locking_state = defaultdict(bool)\n    self.run_action_srv = FakeService('run_action', 'run_action_done', Int32, Bool)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_q(self, time=None):\n    return self.get_q_srv(self.name)", "buggy_source_code": "def get_q(self, time=None):\n    print('get_q {}'.format(self.index))\n    q = int(self.get_q_srv(self.index).data)\n    print(q)\n    return q", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def fixture(self, path):\n    return open(path).read()", "buggy_source_code": "def fixture(self, path):\n    return open(self.fixture_path(path)).read()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def master_to_slave(self, x):\n    return x", "buggy_source_code": "def master_to_slave(self, x):\n    return x.replace(b'\\n', b'\\r\\n')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def register(app):\n    return {'mesh_writer': UFPWriter.UFPWriter()}", "buggy_source_code": "def register(app):\n    if 'UFPWriter.UFPWriter' not in sys.modules:\n        return {}\n    return {'mesh_writer': UFPWriter.UFPWriter()}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __contains__(self, op):\n    return op in self._blocks", "buggy_source_code": "def __contains__(self, op):\n    flat_blocks = list(itertools.chain(*self.blocks))\n    return op in flat_blocks", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update_state(self, state, brightness=0):\n    self._state = state\n    self._brightness = brightness\n    self.schedule_update_ha_state()", "buggy_source_code": "def update_state(self, state, brightness=0):\n    self._state = state\n    self._brightness = brightness\n    if self.added_to_hass:\n        self.schedule_update_ha_state()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def clear(self):\n    try:\n        super().clear()\n    except RedisError:\n        _logger.exception('clear() failed')", "buggy_source_code": "def clear(self):\n    try:\n        super().clear()\n    except RedisError:\n        if config.DEBUG:\n            raise\n        _logger.exception('clear() failed')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def search(self, q, limit=SEARCH_LIMIT):\n    rv = self._get('/search', params={'q': q})\n    return rv['data']", "buggy_source_code": "def search(self, q, limit=SEARCH_LIMIT):\n    rv = self._get('/search', params={'q': q, 'limit': limit})\n    return rv['data']", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def distrib_branch_root(self, msg):\n    log.add_msg_contents(msg)\n    self.queue.append(slskmessages.BranchRoot(msg.user))", "buggy_source_code": "def distrib_branch_root(self, msg):\n    log.add_msg_contents(msg)\n    self.queue.append(slskmessages.BranchRoot(msg.user))\n    log.add_conn('Our branch root is user %s', msg.user)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def overwrite_contents(self, filename):\n    if self.contents:\n        with codecs.open(filename, 'w', encoding='utf8') as f:\n            f.write(self.contents)", "buggy_source_code": "def overwrite_contents(self, filename, log):\n    if self.contents:\n        with codecs.open(filename, 'w', encoding='utf8') as f:\n            f.write(self.contents)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, context=None):\n    super(RecordReader, self).__init__()", "buggy_source_code": "def __init__(self, context=None):\n    super(RecordReader, self).__init__(context)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def overrideCursor(self, cursor):\n    self.restoreCursor()\n    self._cursor = cursor\n    QApplication.setOverrideCursor(cursor)", "buggy_source_code": "def overrideCursor(self, cursor):\n    self._cursor = cursor\n    if self.currentCursor() is None:\n        QApplication.setOverrideCursor(cursor)\n    else:\n        QApplication.changeOverrideCursor(cursor)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_customer_kwargs(self):\n    return {'description': self.customer.get_full_name(), 'email': self.customer.email, 'id': self.instance.stripe_id or None}", "buggy_source_code": "def get_customer_kwargs(self):\n    return {'description': self.customer.get_full_name() or self.customer.username, 'email': self.customer.email, 'id': self.instance.stripe_id or None}", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def validator(self):\n    from flexget import validator\n    return validator.factory('text')", "buggy_source_code": "def validator(self):\n    from flexget import validator\n    root = validator.factory()\n    root.accept('text')\n    bundle = root.accept('list')\n    bundle.accept('text')\n    return root", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def i2c_read_block(self, address, register, count):\n    return self.smbus.read_i2c_block_data(address, register, count)", "buggy_source_code": "@asyncio.coroutine\ndef i2c_read_block(self, address, register, count):\n    return self.smbus.read_i2c_block_data(int(address), int(register), int(count))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def i2c_write8(self, address, register, value):\n    return self.smbus.write_byte_data(address, register, value)", "buggy_source_code": "def i2c_write8(self, address, register, value):\n    return self.smbus.write_byte_data(int(address), int(register), int(value))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def list_situations(self, listitems, allow_view_overwrite=True):\n    list_albums(listitems, allow_view_overwrite)", "buggy_source_code": "def list_situations(self, listitems, allow_view_overwrite=True):\n    self.list_albums(listitems, allow_view_overwrite)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def unit_test():\n    _unit_test_dV_dq()\n    _unit_test_q()\n    _unit_test_k_i()\n    _unit_test_p()", "buggy_source_code": "def unit_test():\n    _unit_test_utilities()\n    exit(1)\n    _unit_test_dV_dq()\n    _unit_test_q()\n    _unit_test_k_i()\n    _unit_test_p()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clear_breakpoints(self):\n    for id in self.breakpoints:\n        self.remove_breakpoint_by_id(id)\n    self.breakpoints = {}", "buggy_source_code": "def clear_breakpoints(self):\n    for id in list(self.breakpoints.keys()):\n        self.remove_breakpoint_by_id(id)\n    self.breakpoints = {}", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, symbol, price, size):\n    self.symbol = ''\n    self.price = 0.0\n    self.size = 0", "buggy_source_code": "def __init__(self, symbol='', price=0.0, size=0):\n    self.symbol = symbol\n    self.price = price\n    self.size = size", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cmd_line(self, pixel_tests, per_test_args):\n    return self._adb_command + ['shell']", "buggy_source_code": "def cmd_line(self, pixel_tests, per_test_args):\n    return self._adb_command() + ['shell']", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def close(self):\n    if not self.headers_sent:\n        self.send_headers()\n    if self.chunked:\n        write_chunk(self.socket, '')", "buggy_source_code": "def close(self):\n    if not self.headers_sent:\n        self.send_headers()\n    if self.chunked:\n        write_chunk(self.req.socket, '')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def _visible_changed(self, trait_name, old, new):\n    self.action.visible = True\n    return", "buggy_source_code": "def _visible_changed(self, trait_name, old, new):\n    self.action.visible = new\n    return", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def finish(self):\n    pass", "buggy_source_code": "def finish(self):\n    try:\n        self.input_file.close()\n    except:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def start(self):\n    pass", "buggy_source_code": "def start(self):\n    self.input_files = self._copy.copy(self.original_input_files)\n    self._next_file()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def next(self, extra_data=None):\n    pass", "buggy_source_code": "def next(self, extra_data=None):\n    data = self.input_csv.next()\n    if extra_data and data:\n        data.update(extra_data)\n    return data", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def max_fitness(self):\n    return self.fitness_list[0]", "buggy_source_code": "def max_fitness(self):\n    return self.fitness_list[0][0]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def min_fitness(self):\n    return self.fitness_list[-1]", "buggy_source_code": "def min_fitness(self):\n    return self.fitness_list[-1][0]", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, items):\n    self._items = items", "buggy_source_code": "def __init__(self, items):\n    self._items = set(items)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def is_possible(pod):\n    max_pod_capacity = max_capacity_for_selectors(pod.selectors)\n    return (max_pod_capacity - pod.resources).possible", "buggy_source_code": "def is_possible(pod):\n    max_pod_capacity = max_capacity_for_selectors(pod.selectors)\n    if not max_pod_capacity:\n        return False\n    return (max_pod_capacity - pod.resources).possible", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def before_parsing(self):\n    self.firststdorient = True\n    self.section = None\n    self.symlabels = ['Ag']", "buggy_source_code": "def before_parsing(self):\n    self.firststdorient = True\n    self.section = None\n    self.symlabels = ['Ag']\n    self.basislibrary = True", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run_migrations():\n    require('site_root', provided_by=('staging', 'production'))\n    with cd(env.site_root):\n        run('venv/bin/python manage.py migrate --noinput --settings=toolkit.import_settings')", "buggy_source_code": "def run_migrations():\n    require('site_root', provided_by=('staging', 'production'))\n    with cd(env.site_root):\n        utils.puts('Running database migrations')\n        run('venv/bin/python manage.py migrate --noinput --settings=toolkit.import_settings')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __iter__(self):\n    return self", "buggy_source_code": "def __iter__(self):\n    return self.__file", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_currency(self, ccy):\n    self.ccy = ccy\n    self.config.set_key('currency', ccy, True)\n    self.trigger_update()\n    self.on_quotes()", "buggy_source_code": "def set_currency(self, ccy: str):\n    self.ccy = ccy\n    self.config.set_key('currency', ccy, True)\n    self.trigger_update()\n    self.on_quotes()", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    os.chdir(self.originalPath)\n    c = ['rm -rf /tmp/__bazaarTests']\n    self.runCommands(c)", "buggy_source_code": "def tearDown(self):\n    os.chdir(self.originalPath)\n    c = ['rm -rf /tmp/__%s_bazaarTests' % str(self.pid)]\n    self.runCommands(c)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@context.Object(lazy_init=True)\ndef gridcursor(self):\n    bci = self.inline()\n    return UnlockControllerFactory.create_gridcursor(self.window, bci.receiver)", "buggy_source_code": "@context.Object(lazy_init=True)\ndef gridcursor(self):\n    bci = self.inline()\n    assert self.window\n    return UnlockControllerFactory.create_gridcursor(self.window, bci.receiver)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load(self):\n    self._populate()\n    self.restore_state()", "buggy_source_code": "def load(self):\n    self._remove_all()\n    self._populate()\n    self.restore_state()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def midi_CC(num, output):\n    return lambda x: output.write_short(176, num, x)", "buggy_source_code": "def midi_CC(num, output, value=None):\n    return lambda x=value: output.write_short(176, num, x)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@register.simple_tag()\ndef load_debug_scripts():\n    return _load_debug_scripts() + load_rest_all()", "buggy_source_code": "@register.simple_tag(takes_context=True)\ndef load_debug_scripts():\n    return _load_debug_scripts() + load_rest_all(context)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testSingleLineJavaScript(self):\n    codeStr = 'Math.sqrt(6 + 3)'\n    expectedValue = '3'\n    self.assertCode(codeStr, expectedValue, 'JavaScript')", "buggy_source_code": "def testSingleLineJavaScript(self):\n    codeStr = 'Math.sqrt(6 + 3)'\n    expectedValue = '3'\n    time.sleep(1000)\n    self.assertCode(codeStr, expectedValue, 'JavaScript')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testSingleLinePython(self):\n    codeStr = \"len('testPython')\"\n    expectedValue = '10'\n    self.assertCode(codeStr, expectedValue, 'Python')", "buggy_source_code": "def testSingleLinePython(self):\n    codeStr = \"len('testPython')\"\n    expectedValue = '10'\n    time.sleep(1000)\n    self.assertCode(codeStr, expectedValue, 'Python')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get(self):\n    self.render('index.html', top_part=HEADER, catalog=self.application.CATALOG, article_url=self.__article_url)", "buggy_source_code": "def get(self):\n    catalog = self.application.CATALOG\n    self.render('index.html', top_part=HEADER, catalog=catalog, article_url=self.__article_url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def selected(self, option, value, schema_type):\n    if option[0] == value:\n        return ' selected=\"selected\"'\n    else:\n        return ''", "buggy_source_code": "def selected(self, option, value, schema_type):\n    if value and option[0] == self.convert(schema_type, [value]):\n        return ' selected=\"selected\"'\n    else:\n        return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_value_from_object(self, obj):\n    return None", "buggy_source_code": "def get_value_from_object(self, obj):\n    return self.formula", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def shutdown(self):\n    pass", "buggy_source_code": "def shutdown(self):\n    log.debug('Shutting down...')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def send_mirror_item(self, method, doc):\n    seq_no = self.add_item_to_mirror_queue(self.mirror_seq, method, doc)\n    frappe.enqueue('corrugation.corrugation.doctype.cm_doc_mirror.cm_doc_mirror.mirror_doc_updates')\n    return seq_no", "buggy_source_code": "def send_mirror_item(self, method, doc):\n    seq_no = self.add_item_to_mirror_queue(self.mirror_seq, method, doc)\n    if self.auto_update:\n        frappe.enqueue('corrugation.corrugation.doctype.cm_doc_mirror.cm_doc_mirror.mirror_doc_updates')\n    return seq_no", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __delitem__(self, row):\n    del self.data[row]", "buggy_source_code": "def __delitem__(self, row):\n    del self.data[row]\n    self.data.append(Row(self))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *args):\n    Aggregate.__init__(self, args)\n    Receive.__init__(self)", "buggy_source_code": "def __init__(self, *args):\n    Aggregate.__init__(self, *args)\n    Receive.__init__(self)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    self.orig_environ = os.environ\n    self.tmpdir = tempfile.mkdtemp()", "buggy_source_code": "def setUp(self):\n    self.orig_environ = os.environ\n    self.tmpdir = tempfile.mkdtemp()\n    os.environ['HOME'] = self.tmpdir", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def deci_to_octal(number):\n    return int(oct(number))", "buggy_source_code": "def deci_to_octal(number):\n    return int(oct(number).replace('o', ''))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __get(self, url, headers=[]):\n    return self.__c.get(self.__registry + '/v2/' + url, headers)", "buggy_source_code": "def __get(self, url, headers=[], save_headers=False):\n    return self.__c.get(self.__registry + '/v2/' + url, headers, save_headers)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self._metadata_path = None", "buggy_source_code": "def __init__(self):\n    super(ConfigDriveService, self).__init__()\n    self._metadata_path = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_otherexception(self):\n    params = {'plateifu': '84.85-1901'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: Unknown exception'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_otherexception(self):\n    params = {'plateifu': '84.85-1901', 'mode': 'local'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: Unknown exception'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_noresultsfound(self):\n    params = {'plateifu': '8485-0923'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: No Results Found'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_noresultsfound(self):\n    params = {'plateifu': '8485-0923', 'mode': 'local'}\n    errMsg = 'Could not retrieve cube for plate-ifu {0}: No Results Found'.format(params['plateifu'])\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodrpver(self):\n    config.drpver = None\n    params = {'mangaid': self.mangaid}\n    errMsg = 'drpver not set in config'\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodrpver(self):\n    config.drpver = None\n    params = {'mangaid': self.mangaid, 'mode': 'local'}\n    errMsg = 'drpver not set in config'\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodbconnected(self):\n    config.db = None\n    params = {'mangaid': self.mangaid}\n    errMsg = 'No db connected'\n    self._load_from_db_fail(params, errMsg)", "buggy_source_code": "@skipIfNoDB\ndef test_cube_load_from_local_database_nodbconnected(self):\n    config.db = None\n    params = {'mangaid': self.mangaid, 'mode': 'local'}\n    errMsg = 'No db connected'\n    self._load_from_db_fail(params, errMsg)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def mode(self):\n    return self.mean", "buggy_source_code": "def mode(self):\n    low = self.bounds[0]\n    high = self.bounds[1]\n    return tf.minimum(tf.maximum(self.mean, low), high)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_document_extension(self, document_url):\n    url_object = urlparse(document_url)\n    return os.path.splitext(url_object.path)[1].split('.')[1]", "buggy_source_code": "def _get_document_extension(self, document_url):\n    url_object = urlparse(document_url.replace(';', '%3B'))\n    return os.path.splitext(url_object.path)[1].split('.')[1]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_blobs_to_send(self, blobs_to_send):\n    for blob in blobs_to_send:\n        if blob not in self.blob_hashes_to_send:\n            self.blob_hashes_to_send.append(blob)", "buggy_source_code": "def set_blobs_to_send(self, blobs_to_send):\n    for blob in blobs_to_send:\n        if blob.blob_hash not in self.blob_hashes_to_send:\n            self.blob_hashes_to_send.append(blob.blob_hash)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def resource_to_pyobject(self, resource):\n    return self.module_cache.get_pymodule(resource)", "buggy_source_code": "def resource_to_pyobject(self, resource, force_errors=False):\n    return self.module_cache.get_pymodule(resource, force_errors)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@abc.abstractmethod\ndef create_net_assoc(self, bgpvpn_id, network_association):\n    pass", "buggy_source_code": "@abc.abstractmethod\ndef create_net_assoc(self, context, bgpvpn_id, network_association):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def notify_bundle_ready(self, bundle_id):\n    pass", "buggy_source_code": "def notify_bundle_ready(self, notif_data, bundle_id):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(PatternCommand, self).__init__()\n    self.add_setting('length', 10 * 1024, 'Initial length of a cyclic buffer to generate')\n    return", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(PatternCommand, self).__init__(prefix=True)\n    self.add_setting('length', 10 * 1024, 'Initial length of a cyclic buffer to generate')\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super(PatchCommand, self).__init__(complete=gdb.COMPLETE_LOCATION)\n    return", "buggy_source_code": "def __init__(self):\n    super(PatchCommand, self).__init__(complete=gdb.COMPLETE_LOCATION, prefix=True)\n    return", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@memoize_method\ndef unread_pm_count(self):\n    return MessageBox.objects.filter(user=self, box='inbox', read=False).count()", "buggy_source_code": "@memoize_method\ndef unread_pm_count(self):\n    return MessageBox.objects.filter(user=self.user, box='inbox', read=False).count()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def import_admin(request):\n    response = import_checkin_data(request)\n    return HttpResponse(response)", "buggy_source_code": "def import_admin(request):\n    results = import_data()\n    response_data = {}\n    response_data['time'] = results\n    return HttpResponse(simplejson.dumps(response_data))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "@cached_property\ndef domain(self):\n    return ''", "buggy_source_code": "@cached_property\ndef domain(self):\n    try:\n        return self.fqdn.split('.', 1)[1]\n    except IndexError:\n        return ''", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __call__(self, signum, frame):\n    self.__spider.stop()\n    self.__waiter.wait()", "buggy_source_code": "def __call__(self, signum, frame):\n    logging.info('CTRL-C captured. Save result...')\n    self.__spider.stop()\n    self.__waiter.wait()\n    logging.info('Result saved. Exit.')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *builds):\n    self.__intermittent__ = {}\n    BaseComparison.__init__(self, *builds)", "buggy_source_code": "def __init__(self, *builds):\n    self.__intermittent__ = {}\n    self.tests_with_issues = {}\n    BaseComparison.__init__(self, *builds)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Tahoe-LAFS', base_url='http://tahoe-lafs.org/trac/tahoe-lafs/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Tahoe-LAFS', base_url='http://tahoe-lafs.org/trac/tahoe-lafs/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='GHC', base_url='http://hackage.haskell.org/trac/ghc/', bitesized_keyword='Easy (less than 1 hour)')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='GHC', base_url='http://hackage.haskell.org/trac/ghc/', bitesized_keyword='Easy (less than 1 hour)', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Sugar Labs', base_url='http://bugs.sugarlabs.org/', bitesized_keyword='sugar-love')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Sugar Labs', base_url='http://bugs.sugarlabs.org/', bitesized_keyword='sugar-love', bug_project_name_format='{component}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='OLPC', base_url='http://dev.laptop.org/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='OLPC', base_url='http://dev.laptop.org/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='I2P', base_url='http://trac.i2p2.de/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='I2P', base_url='http://trac.i2p2.de/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Twisted', base_url='http://twistedmatrix.com/trac/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Twisted', base_url='http://twistedmatrix.com/trac/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, base_url, project_name, bitesized_keyword):\n    self.base_url = base_url\n    self.project_name = project_name\n    self.bitesized_keyword = bitesized_keyword", "buggy_source_code": "def __init__(self, base_url, project_name, bitesized_keyword, bug_project_name_format):\n    self.base_url = base_url\n    self.project_name = project_name\n    self.bitesized_keyword = bitesized_keyword\n    self.bug_project_name_format = bug_project_name_format", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='HelenOS', base_url='http://trac.helenos.org/trac.fcgi/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='HelenOS', base_url='http://trac.helenos.org/trac.fcgi/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Trac', base_url='http://trac.edgewall.org/', bitesized_keyword='bitesized')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Trac', base_url='http://trac.edgewall.org/', bitesized_keyword='bitesized', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='WarFoundry', base_url='http://dev.ibboard.co.uk/projects/warfoundry/', bitesized_keyword='papercut')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='WarFoundry', base_url='http://dev.ibboard.co.uk/projects/warfoundry/', bitesized_keyword='papercut', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='StatusNet', base_url='http://status.net/trac/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='StatusNet', base_url='http://status.net/trac/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='SSSD', base_url='https://fedorahosted.org/sssd/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='SSSD', base_url='https://fedorahosted.org/sssd/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Angband', base_url='http://trac.rephial.org/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Angband', base_url='http://trac.rephial.org/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Xiph', base_url='http://trac.xiph.org/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Xiph', base_url='http://trac.xiph.org/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Fedora Python Modules', base_url='https://fedorahosted.org/python-fedora/', bitesized_keyword='')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Fedora Python Modules', base_url='https://fedorahosted.org/python-fedora/', bitesized_keyword='', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='', base_url='', bitesized_keyword='')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='', base_url='', bitesized_keyword='', bug_project_name_format='')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Django', base_url='http://code.djangoproject.com/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Django', base_url='http://code.djangoproject.com/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Bcfg2', base_url='https://trac.mcs.anl.gov/projects/bcfg2/', bitesized_keyword='easy')", "buggy_source_code": "def __init__(self):\n    TracBugTracker.__init__(self, project_name='Bcfg2', base_url='https://trac.mcs.anl.gov/projects/bcfg2/', bitesized_keyword='easy', bug_project_name_format='{project}')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@owner.command()\n@commands.check(utils.is_owner)\nasync def logout(self):\n    await self.bot.logout()\n    await self.redis.quit()", "buggy_source_code": "@owner.command()\n@commands.check(utils.is_owner)\nasync def logout(self, ctx):\n    await self.bot.logout()\n    await self.redis.quit()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_text(self):\n    texts = Text.objects.count()\n    self.text = Text.objects.all()[randint(0, texts - 1)]", "buggy_source_code": "def add_text(self):\n    texts = Text.objects.count()\n    if texts > 0:\n        self.text = Text.objects.all()[randint(0, texts - 1)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@pytest.fixture(scope='global')\ndef essential_metabolites(model):\n    return model.essential_metabolites()", "buggy_source_code": "@pytest.fixture(scope='function')\ndef essential_metabolites(model):\n    metabolites = ESSENTIAL_METABOLITES[model.id]\n    return [model.metabolites.get_by_id(m.id) for m in metabolites]", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def emit(self, record):\n    newrelic.agent.record_exception(*sys.exc_info())", "buggy_source_code": "def emit(self, record):\n    if record.level >= logging.ERROR:\n        newrelic.agent.record_exception(*sys.exc_info())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def transpose_method(x, *args):\n    return Transpose(args).forward(x)", "buggy_source_code": "def transpose_method(x, *args):\n    if args == ():\n        args = None\n    return Transpose(args).forward(x)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, memory_type, address_spec):\n    super(MemoryAddressField, self).__init__(memory_type, address_spec, 4)", "buggy_source_code": "def __init__(self, memory_type, address_spec, length=4):\n    super(MemoryAddressField, self).__init__(memory_type, address_spec, length)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def rewrite_dep(self, objfile, depname, old_dep, new_dep):\n    subprocess.check_call([self.patchelf, '--replace-needed', depname, new_dep, objfile])", "buggy_source_code": "def rewrite_dep(self, objfile, depname, old_dep, new_dep, final_lib_dir):\n    subprocess.check_call([self.patchelf, '--replace-needed', depname, new_dep, objfile])", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def rewrite_dep(self, objfile, depname, old_dep, new_dep):\n    pass", "buggy_source_code": "def rewrite_dep(self, objfile, depname, old_dep, new_dep, final_lib_dir):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def rewrite_dep(self, objfile, depname, old_dep, new_dep):\n    raise RuntimeError('rewrite_dep not implemented')", "buggy_source_code": "def rewrite_dep(self, objfile, depname, old_dep, new_dep, final_lib_dir):\n    raise RuntimeError('rewrite_dep not implemented')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<%s imts=%s, weight=%d>' % (self.__class__.__name__, self.imts, self.weight)", "buggy_source_code": "def __repr__(self):\n    return '<%s imts=%s, weight=%d>' % (self.__class__.__name__, self.hazard_getter.imts, self.weight)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def makeEnemyBoard():\n    board = []\n    for x in range(BOARD_SIZE):\n        board.append('~' * BOARD_SIZE)\n    return board", "buggy_source_code": "def makeEnemyBoard():\n    board = []\n    for x in range(BOARD_SIZE):\n        board.append(['~'] * BOARD_SIZE)\n    return board", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def run(self):\n    self.issues = Counter(self.get_issues)\n    for issue in self.issues:\n        self.handle(issue)", "buggy_source_code": "def run(self):\n    self.issues = Counter(self.get_issues())\n    for issue in self.issues:\n        self.handle(issue)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def json(func):\n\n    @wraps(func)\n    def decorated_function(*args, **kwargs):\n        return jsonify(func())\n    return decorated_function", "buggy_source_code": "def json(func):\n\n    @wraps(func)\n    def decorated_function(*args, **kwargs):\n        return jsonify(func(*args, **kwargs))\n    return decorated_function", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restore(self, embs):\n    self._embeddings = embs\n    self._logger = LOGGER", "buggy_source_code": "def restore(self, embs):\n    self._embeddings = embs\n    self._logger = LOGGER\n    self._init_wemb_funcs()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _best_path_lost(self):\n    NonVrfPathProcessingMixin._best_path_lost(self)\n    self._core_service._signal_bus.best_path_changed(self)", "buggy_source_code": "def _best_path_lost(self):\n    old_best_path = self._best_path\n    NonVrfPathProcessingMixin._best_path_lost(self)\n    self._core_service._signal_bus.best_path_changed(old_best_path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@app.before_first_request\ndef init_global_mongoclient():\n    global MONGOCLIENT\n    mongo_address = config['mongo_db']['hostname'] + ':' + config['mongo_db']['port']\n    MONGOCLIENT = MongoClient(mongo_address)", "buggy_source_code": "@app.before_first_request\ndef init_global_mongoclient():\n    global MONGOCLIENT\n    mongo_address = config['mongo_db']['hostname'] + ':' + str(config['mongo_db']['port'])\n    MONGOCLIENT = MongoClient(mongo_address)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@pytest.fixture\ndef event_loop():\n    loop = asyncio.get_event_loop()\n    return loop", "buggy_source_code": "@pytest.fixture\ndef event_loop():\n    asyncio.set_event_loop(_test_event_loop)\n    return asyncio.get_event_loop()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef recruiter(self):\n    from dallinger import recruiters\n    return recruiters.by_name(self.recruiter_id or 'hotair')", "buggy_source_code": "@property\ndef recruiter(self):\n    from dallinger import recruiters\n    recruiter_name = self.recruiter_id or 'hotair'\n    if recruiter_name.startswith('bots:'):\n        recruiter_name = 'bots'\n    return recruiters.by_name(recruiter_name)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_db():\n    return Database(settings.COUCH_DATABASE)", "buggy_source_code": "def get_db(postfix=None):\n    db_url = settings.COUCH_DATABASE\n    if postfix:\n        db_url = '%s__%s' % (db_url, postfix)\n    return Database(db_url)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return get_name()", "buggy_source_code": "def __unicode__(self):\n    return self.get_name()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    image = flask.url_for('static', filename='img/placeholder-clouds-fog-haze-5086.jpeg')\n    return flask.render_template('index.html', image=image)", "buggy_source_code": "@app.route('/')\ndef index():\n    placeholder = 'img/placeholder-clouds-fog-haze-5086.jpeg'\n    image = flask.url_for('static', filename=placeholder)\n    return flask.render_template('index.html', image=image)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, path):\n    self.make_relative_error_plot()", "buggy_source_code": "def __init__(self, path):\n    self.load(path)\n    self.analytic = self.compute_analytic_solution()\n    self.compute_relative_error()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def delibird(girafarig):\n    return '{:02x}'.format(int(girafarig))", "buggy_source_code": "def delibird(girafarig):\n    return '{:02x}'.format(max(0, min(255, int(girafarig))))", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def read_bam_st(bam_fname):\n    for read in pysam.AlignmentFile(bam_fname).fetch(until_eof=True):\n        yield (read,)", "buggy_source_code": "def read_bam_st(bam_fname):\n    for read in pysam.AlignmentFile(bam_fname).fetch(until_eof=True):\n        if read.flag & 2304:\n            continue\n        yield (read,)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def cleanup_url(url):\n    return url.split('#'.encode('utf-8'))[0]", "buggy_source_code": "def cleanup_url(url):\n    return url.split('#'.encode('utf-8'))[0].encode('utf-8')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef time(self):\n    date = datetime.utcfromtimestamp(self._timestamp)\n    return date.strftime('%Y-%m-%d %H:%M:%S')", "buggy_source_code": "@property\ndef time(self):\n    date = datetime(2000, 1, 1, tzinfo=timezone.utc) + timedelta(seconds=self._timestamp)\n    return date.strftime('%Y-%m-%d %H:%M:%S')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.driver.quit()\n    self.assertEqual([], self.verificationErrors)", "buggy_source_code": "def tearDown(self):\n    self.driver.quit()\n    self.display.stop()\n    self.assertEqual([], self.verificationErrors)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def not_equals(self, value):\n    return self._add_condition('!=', value)", "buggy_source_code": "def not_equals(self, value):\n    return self._add_condition('!=', value, types=[int, str])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def less_than(self, value):\n    return self._add_condition('<', value)", "buggy_source_code": "def less_than(self, value):\n    return self._add_condition('<', value, types=[int])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def equals(self, value):\n    return self._add_condition('=', value)", "buggy_source_code": "def equals(self, value):\n    return self._add_condition('=', value, types=[int, str])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def not_contains(self, value):\n    return self._add_condition('NOTLIKE', value)", "buggy_source_code": "def not_contains(self, value):\n    return self._add_condition('NOTLIKE', value, types=[int, str])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def contains(self, value):\n    return self._add_condition('LIKE', value)", "buggy_source_code": "def contains(self, value):\n    return self._add_condition('LIKE', value, types=[str])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ends_with(self, value):\n    return self._add_condition('ENDS_WITH', value)", "buggy_source_code": "def ends_with(self, value):\n    return self._add_condition('ENDSWITH', value, types=[str])", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def greater_than(self, value):\n    return self._add_condition('>', value)", "buggy_source_code": "def greater_than(self, value):\n    return self._add_condition('>', value, types=[int])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_empty(self):\n    return self._add_condition('ISEMPTY')", "buggy_source_code": "def is_empty(self):\n    return self._add_condition('ISEMPTY', operand='', types=[str, int])", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def starts_with(self, value):\n    return self._add_condition('STARTSWITH', value)", "buggy_source_code": "def starts_with(self, value):\n    return self._add_condition('STARTSWITH', value, types=[str])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _widgets_change(self):\n    self.slider_point.value = self.selected_index + 1\n    self._widgets_update_vars()\n    self._widgets_marker()\n    self._widgets_plot_change()", "buggy_source_code": "def _widgets_change(self):\n    self.slider_point.value = self.selected_index + 1\n    self._widgets_update_vars()\n    self._widgets_marker(redraw=False)\n    self._widgets_plot_change()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _widgets_plot_change(self):\n    self._widgets_update_vars()\n    self.plot_sweep_data()", "buggy_source_code": "def _widgets_plot_change(self):\n    self._widgets_update_vars()\n    self.plot_sweep_data()\n    if PYTHON_VERSION == 2:\n        plt.draw()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def purify(s):\n    return s.translate(_character_map)", "buggy_source_code": "def purify(s):\n    return s.strip().translate(_character_map)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef list_of(t):\n    return PType(Lst([t.t]))", "buggy_source_code": "@staticmethod\ndef list_of(t):\n    if t.t is None:\n        return None\n    else:\n        return PType(Lst([t.t]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_or_create_session_key(self):\n    if not self.session_key:\n        self.session_key = self._new_session_key()\n    return self.session_key", "buggy_source_code": "def _get_or_create_session_key(self):\n    if not self.session_key or not self.exists(self.session_key):\n        self.session_key = self._new_session_key()\n    return self.session_key", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, val_type):\n    self._val_type = val_type\n    self._bufsize = 512 / val_type.sizeof or 1", "buggy_source_code": "def __init__(self, val_type):\n    self._val_type = val_type\n    self._bufsize = int(512 / val_type.sizeof) or 1", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def format_display(self):\n    if not self.display:\n        return None\n    return self.display.tokenize(amount=self.health if self.health > 0 else '∞')", "buggy_source_code": "def format_display(self):\n    if not self.display:\n        return None\n    return self.display.tokenize(amount=int(self.health) if self.health > 0 else '∞')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def removeTaskFromQueue(self, taskId):\n    url = self.makeUrl('queue/{}', taskId)\n    self.delete(url)", "buggy_source_code": "def removeTaskFromQueue(self, taskId, reason=None):\n    url = self.makeUrl('queue/{}', taskId)\n    params = {}\n    params['reason'] = reason\n    self.delete(url, params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def unRegisterTaskDef(self, tdName):\n    url = self.makeUrl('taskdefs/{}', tdName)\n    self.delete(url)", "buggy_source_code": "def unRegisterTaskDef(self, tdName, reason=None):\n    url = self.makeUrl('taskdefs/{}', tdName)\n    params = {}\n    params['reason'] = reason\n    self.delete(url, params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def change_level_new(self):\n    global level\n    level = self.levelSelect.currentIndex()", "buggy_source_code": "def change_level_new(self):\n    global level\n    self.file_save(True)\n    level = self.levelSelect.currentIndex()\n    self.file_open(True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def export_to_tsv(query, path):\n    check_call(['psql', '-c', \"COPY ({}) TO STDOUT WITH NULL AS '' DELIMITER '\\t' CSV HEADER\".format(query), '-o', path])", "buggy_source_code": "def export_to_tsv(query, path):\n    check_call(['psql', '-c', \"COPY ({}) TO STDOUT WITH NULL AS '' DELIMITER '\\t' CSV HEADER\".format(query), '-o', path, settings.get('DB_USER'), settings.get('DB_NAME')])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _on_connection_error(self, connection_unused, error_message=None):\n    connection_unused.ioloop.stop()\n    LOG.error('Could not connect to message broker. Abort.')\n    LOG.debug(str(error_message))", "buggy_source_code": "def _on_connection_error(self, connection_unused, error_message=None):\n    connection_unused.ioloop.stop()\n    LOG.error('Could not connect to message broker. Abort.')\n    LOG.debug(str(error_message))\n    raise BaseException('Broker connection failed!')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def midi_event(self, midi):\n    if self._output:\n        self._output.midi_event(midi)", "buggy_source_code": "def midi_event(self, midi):\n    if self._output:\n        try:\n            self._output.midi_event(midi)\n        except BaseException as e:\n            self.exception_event(e)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def flatten_errorlists(errorlists):\n    errors = []\n    for el in errorlists.values():\n        errors += el\n    return errors", "buggy_source_code": "def flatten_errorlists(errorlists):\n    errors = []\n    for (field, errorlist) in errorlists.items():\n        errors += ['%s: %s' % (field, error) for error in errorlist]\n    return errors", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def memory_maps(self):\n    return cext.proc_memory_maps(self.pid)", "buggy_source_code": "@wrap_exceptions\ndef memory_maps(self):\n    return cext.proc_memory_maps(self.pid)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def initialize_azure():\n    import c7n_azure.policy\n    import c7n_azure.container_host.modes", "buggy_source_code": "def initialize_azure():\n    import c7n_azure.policy\n    import c7n_azure.container_host.modes\n    import c7n_azure.output", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_submissions(uid):\n    db = api.common.get_conn()\n    return db.submissions.find({'uid': uid})", "buggy_source_code": "def get_submissions(uid):\n    db = api.common.get_conn()\n    return list(db.submissions.find({'uid': uid}))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def add_parser(self, parser, code):\n    return self.add_node(ParserNode(parser, code, self))", "buggy_source_code": "def add_parser(self, parser, code):\n    return self.add_node(ParserNode(parser, code, self), True)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _istextfile(filename, blocksize=512):\n    warnings.warn('_istextfile() has moved to os_utils', PyemuWarning)\n    return pyemu.os_utils._istextfile()", "buggy_source_code": "def _istextfile(filename, blocksize=512):\n    warnings.warn('_istextfile() has moved to os_utils', PyemuWarning)\n    return pyemu.os_utils._istextfile(filename, blocksize=blocksize)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@require_GET\ndef overview(request):\n    return render(request, 'cygapp/overview.html')", "buggy_source_code": "@require_GET\n@login_required\ndef overview(request):\n    return render(request, 'cygapp/overview.html')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def measurements_for(gpu_handle):\n    mes_dict = {k: func(gpu_handle) for (k, func) in _MEASUREMENTS_FUNCS}\n    mes_dict['timestamp'] = str(datetime.now())\n    return mes_dict", "buggy_source_code": "def measurements_for(gpu_handle):\n    mes_dict = {k: func(gpu_handle) for (k, func) in _MEASUREMENTS_FUNCS.items()}\n    mes_dict['timestamp'] = str(datetime.now())\n    return mes_dict", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def close(self):\n    self.cancel_all()\n    self.events.close()\n    if self.supports(ROS):\n        rospy.signal_shutdown('executive controller closing')", "buggy_source_code": "def close(self):\n    self.cancel_all()\n    self.events.close()\n    if self.supports(ROS):\n        import rospy\n        rospy.signal_shutdown('executive controller closing')", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\ndef success(self):\n    return self.result.lower() == 'success'", "buggy_source_code": "@property\ndef success(self):\n    if self.result is None:\n        return False\n    return self.result.lower() == 'success'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_dbx_token(redis_client, account_id):\n    token = redis_client.hget(f'user:{account_id}', 'token')\n    return token", "buggy_source_code": "def get_dbx_token(redis_client, account_id):\n    token = redis_client.hget(f'user:{account_id}', 'token').decode()\n    return token", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _reset_outline_re():\n    global _outline_re\n    del _outline_re", "buggy_source_code": "def _reset_outline_re():\n    global _outline_re\n    _outline_re = None", "edit_actions": ["insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_past(self):\n    if date.today() > self.deadline:\n        return True\n    return False", "buggy_source_code": "def is_past(self):\n    if date.today() > self.deadline.date():\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef date_time_ad(cls):\n    return datetime.fromtimestamp(random.randint(-62135600400, int(time())))", "buggy_source_code": "@classmethod\ndef date_time_ad(cls):\n    ts = random.randint(-62135600400, int(time()))\n    return datetime.fromtimestamp(0) + timedelta(seconds=ts)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def start_listening(self):\n    self.zkb_listener = self.bot.loop.create_task(self.retrieve_kills())\n    self.zkb_listener.add_done_callback(self.recover)", "buggy_source_code": "def start_listening(self, delay=0):\n    self.zkb_listener = self.bot.loop.create_task(self.retrieve_kills(delay))\n    self.zkb_listener.add_done_callback(self.recover)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def resolve(self, args, variables):\n    self.check_arg_limits(args)\n    return (args, {})", "buggy_source_code": "def resolve(self, args, variables):\n    args = variables.replace_list(args)\n    self.check_arg_limits(args)\n    return (args, {})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _execCmd(self, cmd):\n    if self.opts.l:\n        self.__execLogged(cmd)\n    else:\n        self.__exec(cmd)", "buggy_source_code": "def _execCmd(self, cmd, check_returncode=True):\n    if self.opts.l:\n        self.__execLogged(cmd, check_returncode)\n    else:\n        self.__exec(cmd, check_returncode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def op_CoordinateSystem(self, op):\n    self.coords[op.operand] = self.contextStack[-1].transform", "buggy_source_code": "def op_CoordinateSystem(self, op):\n    self.coords[op.operand] = np.copy(self.contextStack[-1].transform)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def op_AttributeBegin(self, op):\n    self.contextStack.append(self.contextStack[-1])", "buggy_source_code": "def op_AttributeBegin(self, op):\n    self.contextStack.append(self.contextStack[-1].copy())", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def op_CoordinateSysTransform(self, op):\n    self.contextStack[-1].transform = self.coords[op.operand]", "buggy_source_code": "def op_CoordinateSysTransform(self, op):\n    self.contextStack[-1].transform = np.copy(self.coords[op.operand])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def set_info(self, acqpath):\n    raise NotImplementedError()", "buggy_source_code": "def set_info(self, acqpath, node_root):\n    raise NotImplementedError()", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, job, type_string='HIRSHFELD'):\n    Pop.__init__(self, job, type_string)\n    return", "buggy_source_code": "def __init__(self, job, type_string='HIRSHFELD'):\n    Pop.__init__(self, job, type_string)\n    if self.idx_section > -1:\n        pass\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, job, type_string='LOEWDIN'):\n    Pop.__init__(self, job, type_string)\n    self._get_chg_atomic()\n    return", "buggy_source_code": "def __init__(self, job, type_string='LOEWDIN'):\n    Pop.__init__(self, job, type_string)\n    if self.idx_section > -1:\n        self._get_chg_atomic()\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, job, type_string='MULLIKEN'):\n    Pop.__init__(self, job, type_string)\n    self._get_chg_atomic()\n    return", "buggy_source_code": "def __init__(self, job, type_string='MULLIKEN'):\n    Pop.__init__(self, job, type_string)\n    if self.idx_section > -1:\n        self._get_chg_atomic()\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def shutting_down():\n    v = globals().get('_shutting_down')\n    return v is True or v is None", "buggy_source_code": "def shutting_down(globals=globals):\n    v = globals().get('_shutting_down')\n    return v is True or v is None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stop(self):\n    self.controller.stop()\n    self.is_running = False", "buggy_source_code": "def stop(self):\n    self.controller.stop()\n    self.is_running = False\n    self.exit()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef from_config(cls, config, name, section_key='extractors'):\n    cls()", "buggy_source_code": "@classmethod\ndef from_config(cls, config, name, section_key='extractors'):\n    return cls()", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def local_scheme(version):\n    if version.distance > 0:\n        return '.post' + str(version.distance)\n    else:\n        return ''", "buggy_source_code": "def local_scheme(version):\n    if version.distance and version.distance > 0:\n        return '.post' + str(version.distance)\n    else:\n        return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in 'jpg'", "buggy_source_code": "def allowed_file(filename):\n    ret = '.' in filename and filename.rsplit('.', 1)[1] in 'jpg'\n    return ret", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def feature_match(self, features, segment):\n    return features <= self.seg_dict[segment]", "buggy_source_code": "def feature_match(self, features, segment):\n    features = set(features)\n    if segment in self.seg_dict:\n        return features <= self.seg_dict[segment]\n    else:\n        return None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    super(FuzzyPlugin, self).__init__(self)\n    self.config.add({'threshold': 0.7})", "buggy_source_code": "def __init__(self):\n    super(FuzzyPlugin, self).__init__(self)\n    self.config.add({'threshold': 0.7, 'prefix': '~'})", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def decode(self, encoded_table_row):\n    return json.loads(encoded_table_row)", "buggy_source_code": "def decode(self, encoded_table_row):\n    return json.loads(encoded_table_row.decode('utf-8'))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_url_filter(href, x):\n    if href not in all_url:\n        all_url[href] = x\n        return True\n    else:\n        return False", "buggy_source_code": "def update_url_filter(href, x):\n    global all_url\n    if href not in all_url:\n        all_url[href] = x\n        return True\n    else:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, dim, sparse=False):\n    self.dim = dim\n    self.sparse = sparse", "buggy_source_code": "def __init__(self, dim, sparse=False, **kwargs):\n    super(VectorSpace, self).__init__(**kwargs)\n    self.dim = dim\n    self.sparse = sparse", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def has_selection(self):\n    return self.start != self.end", "buggy_source_code": "def has_selection(self):\n    end = self.end\n    if end is None:\n        end = self._d.size()\n    return self.start != end", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@click.group()\ndef cli():\n    pass", "buggy_source_code": "@click.group()\n@click.option('--debug/--no-debug', default=False)\n@click.pass_context\ndef cli(ctx, debug):\n    ctx.obj = {'DEBUG': debug}", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _post_install(dir):\n    import nltk\n    nltk.download('punkt')\n    nltk.download('stopwords')", "buggy_source_code": "def _post_install(dir):\n    import site\n    reload(site)\n    import nltk\n    nltk.download('punkt')\n    nltk.download('stopwords')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def open_file(self, path):\n    path = self.dest_path(path)\n    return codecs.open(path, 'r', encoding='utf-8')", "buggy_source_code": "def open_file(self, path):\n    path = self.dest_path(path)\n    return codecs.open(path, 'r', encoding='utf-8', errors='ignore')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _process_ebo_inheritance_end(self, tail, end):\n    return", "buggy_source_code": "def _process_ebo_inheritance_end(self, tail, end):\n    self._add_back_padding()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _process_inheritance_end(self, tail, end):\n    return", "buggy_source_code": "def _process_inheritance_end(self, tail, end):\n    self._add_back_padding()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _process_ebo_inheritance_inheritance(self, tail, inheritance):\n    self._add_unaligned_member(inheritance)", "buggy_source_code": "def _process_ebo_inheritance_inheritance(self, tail, inheritance):\n    inheritance.set_this_offset(tail.get_end())\n    self.members.append(ebo_inheritance)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def stopRunning(self):\n    self.forceStopped = True\n    self.currentProcess.terminate()\n    logger.info('Force Stop')", "buggy_source_code": "def stopRunning(self, signum, frame):\n    self.forceStopped = True\n    self.currentProcess.terminate()\n    logger.info('Force Stop')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def see(theta: float, items: numpy.ndarray) -> float:\n    return math.sqrt(var(theta, items))", "buggy_source_code": "def see(theta: float, items: numpy.ndarray) -> float:\n    try:\n        return math.sqrt(var(theta, items))\n    except ValueError:\n        return float('inf')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_fresh(self):\n    return (datetime.now() - self.last_update).seconds <= 43200", "buggy_source_code": "def is_fresh(self):\n    delta = datetime.now() - self.last_update\n    return delta.days <= 0 and delta.seconds <= 43200", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef pattern_options(self):\n    return json.dumps({'field_name': self.name, 'tmp_field_id': self.get_tmp_field_id(), 'uid': IUUID(self.context)})", "buggy_source_code": "@property\ndef pattern_options(self):\n    return json.dumps({'field_name': self.name, 'tmp_field_id': self.get_tmp_field_id(), 'uid': IUUID(self.context, None)})", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def robotstxt(request):\n    return TemplateResponse(request, 'robots.txt', {})", "buggy_source_code": "def robotstxt(request):\n    context = {'settings': settings}\n    return TemplateResponse(request, 'robots.txt', context)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_visible(self, visible=True):\n    if visible:\n        self._map()\n    else:\n        self._unmap()", "buggy_source_code": "def set_visible(self, visible=True):\n    if visible:\n        self._map()\n    else:\n        self._unmap()\n    self._visible = visible", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def matchfn(self, f):\n    return self.m1(f) ^ self.m2(f)", "buggy_source_code": "def matchfn(self, f):\n    return bool(self.m1(f)) ^ bool(self.m2(f))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def tearDown(self):\n    db_init()", "buggy_source_code": "def tearDown(self):\n    for kl in KL:\n        self.csp_db.delete(kl['_id'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def getTargetType(self, old_unit_type):\n    unit_group = unit_type_dict[old_unit_type]\n    unit_type = self._getUnitTypeFromGroup(unit_group)\n    return unit_type", "buggy_source_code": "def getTargetType(self, old_unit_type):\n    if not old_unit_type:\n        return None\n    unit_group = unit_type_dict[old_unit_type]\n    unit_type = self._getUnitTypeFromGroup(unit_group)\n    return unit_type", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    if self.stdout:\n        self.unredirect()\n    bconfig.set_global_level(self.log_level)", "buggy_source_code": "def tearDown(self):\n    config.CFG_TMPDIR = self.original_tmpdir\n    if self.stdout:\n        self.unredirect()\n    bconfig.set_global_level(self.log_level)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __enter__(self):\n    self.__cursor = self.__conn.cursor(name=self.__name, cursor_factory=self.__factory)\n    return self.__cursor", "buggy_source_code": "def __enter__(self):\n    self.__cursor = self.__conn.cursor(name=self.__name, cursor_factory=self.__factory)\n    c = self.__cursor\n    return c\n    return self.__cursor", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __new__(cls, data):\n    if data == None:\n        return str.__new__(cls, '-')\n    return str(data)", "buggy_source_code": "def __new__(cls, data):\n    if data == None:\n        return str.__new__(cls, '-')\n    return str.__new__(cls, repr(data))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def __init__(self):\n    Float.__init__(self)\n    self.numbered = None\n    self.counter = 0", "buggy_source_code": "def __init__(self):\n    self.parser = InsetParser()\n    self.output = TaggedOutput().settag('div class=\"listing\"', True)\n    self.numbered = None\n    self.counter = 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef __read_load_avg():\n    (one, five, fifteen) = os.getloadavg()\n    return one", "buggy_source_code": "@staticmethod\ndef __read_load_avg():\n    (one, five, fifteen) = os.getloadavg()\n    cores = multiprocessing.cpu_count()\n    return one / cores * 100", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def print_exiting():\n    print('')\n    cprint('Exiting...', 'red')\n    print('')\n    sys.exit()", "buggy_source_code": "def print_exiting():\n    print('')\n    cprint('Exiting...', 'red')\n    print('')\n    sys.exit(1)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "@thread_pool(workers=2, callback=callback)\ndef job_pool(argument, keyword_argument=0):\n    return (argument + keyword_argument, current_thread())", "buggy_source_code": "@thread_pool(workers=2, callback=callback)\ndef job_pool(argument, keyword_argument=0):\n    time.sleep(0.01)\n    return (argument + keyword_argument, current_thread())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, version=None):\n    super(DatabaseService, self).__init__(service_type='rax:database', service_name='cloudDatabases', version=version)", "buggy_source_code": "def __init__(self, version=None):\n    if not version:\n        version = 'v1'\n    super(DatabaseService, self).__init__(service_type='rax:database', service_name='cloudDatabases', version=version)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_connection(self):\n    if not hasattr(self, '_connection'):\n        self._connection = cloudfiles.get_connection(self.username, self.api_key)\n    return self._connection", "buggy_source_code": "def _get_connection(self):\n    if not hasattr(self, '_connection'):\n        self._connection = cloudfiles.get_connection(self.username, self.api_key, **self.connection_kwargs)\n    return self._connection", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __getstate__(self):\n    return dict(username=self.username, api_key=self.api_key, container_name=self.container_name)", "buggy_source_code": "def __getstate__(self):\n    return dict(username=self.username, api_key=self.api_key, container_name=self.container_name, connection_kwargs=self.connection_kwargs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_stats_banner(self):\n    self.update_cash()\n    self.update_exp()\n    self.check_level()", "buggy_source_code": "def update_stats_banner(self):\n    self.update_cash()\n    self.update_exp()\n    self.check_level()\n    self.update_level()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def main():\n    root = Tk()\n    app = GUI(root)\n    root.mainloop()", "buggy_source_code": "def main():\n    db = authenticate.db()\n    root = Tk()\n    app = GUI(root)\n    root.mainloop()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, notify_queue, master):\n    threading.Thread.__init__(self)\n    self.notify_queue = notify_queue\n    self.master = master", "buggy_source_code": "def __init__(self, notify_queue, master):\n    threading.Thread.__init__(self)\n    self.setDaemon(True)\n    self.notify_queue = notify_queue\n    self.master = master", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    copy_loop(self.copy_to, self.finished[0])\n    self.close()\n    logger.debug('%s shutdown', self)", "buggy_source_code": "def run(self):\n    logger.debug('%s thread run' % self)\n    copy_loop(self.copy_to, self.finished[0])\n    self.close()\n    logger.debug('%s thread shutdown', self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def disable(self):\n    ENDC = ''\n    FAILURE = ''\n    SUCCESS = ''", "buggy_source_code": "@staticmethod\ndef disable():\n    TextColors.ENDC = ''\n    TextColors.FAILURE = ''\n    TextColors.SUCCESS = ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self._rm = recording_manager.instance\n    self._file_reader_cache = {}", "buggy_source_code": "def __init__(self):\n    self._rm = recording_manager.instance\n    self._file_reader_cache = {}\n    self._read_lock = Lock()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def launch_builtin_module(cmd, args):\n    launch_path = '%s/core/cmds/%s.py' % (utils.get_pydtf_dir(), cmd)\n    return __launch_python_module(launch_path, cmd, args)", "buggy_source_code": "def launch_builtin_module(cmd, args, chdir=True):\n    launch_path = '%s/core/cmds/%s.py' % (utils.get_pydtf_dir(), cmd)\n    return __launch_python_module(launch_path, cmd, args, chdir=chdir)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def do_activate(self):\n    self.win = TransmageddonUI(self)\n    self.win.show_all()", "buggy_source_code": "def do_activate(self):\n    self.win = TransmageddonUI(self)\n    self.win.set_title('Transmageddon')\n    self.win.show_all()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def used_channels():\n    configs = Config.default\n    l_chs = configs.get('QDac Channel Labels')\n    return sorted([int(key) for key in l_chs.keys()])", "buggy_source_code": "def used_channels():\n    configs = Config.default\n    configs.reload()\n    l_chs = configs.get('QDac Channel Labels')\n    return sorted([int(key) for key in l_chs.keys()])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_full_url(url):\n    if not url.startswith('http://'):\n        return 'http://localhost:8888%s' % url", "buggy_source_code": "def get_full_url(url):\n    if not url.startswith('http://'):\n        return 'http://localhost:8888%s' % url\n    else:\n        return url", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def g_prime(x):\n    return x * (1 - x)", "buggy_source_code": "def g_prime(x):\n    return g(x) * (1 - g(x))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def is_new_instance(self):\n    return self.datasource.get_instance_id() != self.previous_iid()", "buggy_source_code": "def is_new_instance(self):\n    previous = self.previous_iid()\n    ret = previous == NO_PREVIOUS_INSTANCE_ID or previous != self.datasource.get_instance_id()\n    return ret", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _builtin_attrs(name):\n    return name in ('__doc__', '__module__', '__qualname__', '__abstractmethods__', '__dict__', '__metaclass__', '__weakref__', '_abc_cache', '_abc_registry', '_abc_negative_cache_version', '_abc_negative_cache', '_pi', '_pi_unwrap_decorators')", "buggy_source_code": "def _builtin_attrs(name):\n    return name in ('__doc__', '__module__', '__qualname__', '__abstractmethods__', '__dict__', '__metaclass__', '__weakref__', '_abc_cache', '_abc_impl', '_abc_registry', '_abc_negative_cache_version', '_abc_negative_cache', '_pi', '_pi_unwrap_decorators')", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef add(error):\n    ErrorViewer.errors.append(error)", "buggy_source_code": "@staticmethod\ndef add(error):\n    ErrorViewer.errors = [e for e in ErrorViewer.errors if e.message != error.message]\n    ErrorViewer.errors.append(error)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef add(error):\n    WarningViewer.errors.append(error)", "buggy_source_code": "@staticmethod\ndef add(error):\n    WarningViewer.errors = [e for e in WarningViewer.errors if e.message != error.message]\n    WarningViewer.errors.append(error)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def r_callback():\n    read_callback('/low_weight', 'low_weight')\n    read_callback('/heavy_weight', 'heavy_weight')", "buggy_source_code": "def r_callback():\n    init()\n    read_callback('/low_weight', 'low_weight')\n    read_callback('/heavy_weight', 'heavy_weight')\n    destroy()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, storage):\n    self.name = name\n    self._storage = storage", "buggy_source_code": "def __init__(self, name, storage, mode='rb'):\n    self.name = name\n    self._storage = storage", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _open(self, name):\n    remote_file = DropBoxFile(name, self)\n    return remote_file", "buggy_source_code": "def _open(self, name, mode='rb'):\n    remote_file = DropBoxFile(name, self)\n    return remote_file", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, path):\n    self._f = open(path)", "buggy_source_code": "def __init__(self, path):\n    self._f = open(path)\n    self.bytes_read = 0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read_acceleration(self, axis):\n    return self.axis_proxy.acceleration", "buggy_source_code": "def read_acceleration(self, axis):\n    return self.axis_proxy.acceleration * abs(axis.steps_per_unit)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_acceleration(self, axis, new_acceleration):\n    self.axis_proxy.acceleration = new_acceleration\n    return new_acceleration", "buggy_source_code": "def set_acceleration(self, axis, new_acceleration):\n    self.axis_proxy.acceleration = new_acceleration / abs(axis.steps_per_unit)\n    return new_acceleration", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _is_db_connection_error(args):\n    conn_err_codes = ('2002', '2003', '2006')\n    for err_code in conn_err_codes:\n        if args.find(err_code) != -1:\n            return True\n    return False", "buggy_source_code": "def _is_db_connection_error(args):\n    conn_err_codes = ('2002', '2003', '2006', '-30081')\n    for err_code in conn_err_codes:\n        if args.find(err_code) != -1:\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self._handled_exceptions = []", "buggy_source_code": "def __init__(self):\n    self._handled_exceptions = []\n    self._handled_exceptions_types = []", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def ClearHandledExceptions(self):\n    del self._handled_exceptions[:]", "buggy_source_code": "def ClearHandledExceptions(self):\n    del self._handled_exceptions_types[:]\n    del self._handled_exceptions[:]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    return (self.get_columns(), self.get_data())", "buggy_source_code": "def run(self):\n    customer_naming_by = webnotes.conn.get_value('Selling Settings', None, 'cust_master_name')\n    return (self.get_columns(customer_naming_by), self.get_data(customer_naming_by))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def hasEmail(self, email):\n    return email.lower() in self.user.all_emails", "buggy_source_code": "def hasEmail(self, email):\n    user = self.user\n    return email.lower() in user.all_emails", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _load_python_path(self):\n    path = QFileDialog.getOpenFileName(translations.TR_PROJECT_SELECT_PYTHON_PATH)\n    self.txtPythonInterpreter.setText(path)", "buggy_source_code": "def _load_python_path(self):\n    path = QFileDialog.getOpenFileName(self, translations.TR_PROJECT_SELECT_PYTHON_PATH)\n    self.txtPythonInterpreter.setText(path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def start_one(self, motion):\n    self.axis_proxy.position = motion.target_pos", "buggy_source_code": "def start_one(self, motion):\n    self.axis_proxy.position = float(motion.target_pos / abs(self._spu))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def read_velocity(self, axis):\n    return self.axis_proxy.velocity", "buggy_source_code": "def read_velocity(self, axis):\n    _vel = self.axis_proxy.velocity * abs(axis.steps_per_unit)\n    return _vel", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def set_velocity(self, axis, new_velocity):\n    self.axis_proxy.velocity = new_velocity\n    return new_velocity", "buggy_source_code": "def set_velocity(self, axis, new_velocity):\n    self.axis_proxy.velocity = new_velocity / abs(axis.steps_per_unit)\n    return new_velocity", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def substitute_macros(self, string, additional):\n    return _MacroTemplate(string).safe_substitute(self._get_macros(), **additional)", "buggy_source_code": "def substitute_macros(self, string, additional=dict()):\n    return _MacroTemplate(string).safe_substitute(self._get_macros(), **additional)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    Project.__init__(self, 'gsettings-desktop-schemas', archive_url='http://ftp.acc.umu.se/pub/GNOME/sources/gsettings-desktop-schemas/3.24/gsettings-desktop-schemas-3.24.0.tar.xz', hash='f6573a3f661d22ff8a001cc2421d8647717f1c0e697e342d03c6102f29bbbb90', dependencies=['perl', 'glib'])", "buggy_source_code": "def __init__(self):\n    Project.__init__(self, 'gsettings-desktop-schemas', archive_url='http://ftp.acc.umu.se/pub/GNOME/sources/gsettings-desktop-schemas/3.24/gsettings-desktop-schemas-3.24.0.tar.xz', hash='f6573a3f661d22ff8a001cc2421d8647717f1c0e697e342d03c6102f29bbbb90', dependencies=['perl', 'glib'], patches=['0001-build-win32-replace.py-Fix-replacing-items-in-files-.patch'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_httppasswd(self):\n    m = Bunch()\n    aa = http_auth.HtpasswdAuthAction(None, None)\n    aa(None, m, tutils.test_data.path('data/htpasswd'), None)\n    assert m.authenticator", "buggy_source_code": "def test_httppasswd(self):\n    m = Bunch()\n    aa = http_auth.HtpasswdAuthAction(None, 'authenticator')\n    aa(None, m, tutils.test_data.path('data/htpasswd'), None)\n    assert m.authenticator", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def test_nonanonymous(self):\n    m = Bunch()\n    aa = http_auth.NonanonymousAuthAction(None, None)\n    aa(None, m, None, None)\n    assert m.authenticator", "buggy_source_code": "def test_nonanonymous(self):\n    m = Bunch()\n    aa = http_auth.NonanonymousAuthAction(None, 'authenticator')\n    aa(None, m, None, None)\n    assert m.authenticator", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def reset(self):\n    old_path = self.env.cwd.path\n    self.previews = {}\n    self.env.garbage_collect(-1)\n    self.enter_dir(old_path)", "buggy_source_code": "def reset(self):\n    old_path = self.env.cwd.path\n    self.previews = {}\n    self.env.garbage_collect(-1, self.tabs)\n    self.enter_dir(old_path)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_git_available():\n    return subprocess.call(['which git'])", "buggy_source_code": "def is_git_available():\n    return subprocess.call(['which', 'git'], stdout=open(os.devnull, 'wb')) is 0", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def change_title(new_title):\n    self.title = new_title", "buggy_source_code": "def change_title(self, new_title):\n    self.title = new_title\n    self.save()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@main.route('/')\ndef index():\n    return render_template('advanced.html')", "buggy_source_code": "@main.route('/')\n@main.route('/index')\ndef index():\n    return render_template('index.html')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def error(self, **kwargs):\n    return np.sqrt(self.intensity(**kwargs))", "buggy_source_code": "def error(self, **kwargs):\n    return np.sqrt(np.abs(self.intensity(**kwargs)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def AppendCols(self, *args, **kwargs):\n    pass", "buggy_source_code": "def AppendCols(self, *args, **kwargs):\n    wx.CallAfter(self.ResetView, self.wx_grid)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def InsertCols(self, *args, **kwargs):\n    pass", "buggy_source_code": "def InsertCols(self, *args, **kwargs):\n    wx.CallAfter(self.ResetView, self.wx_grid)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _set_torrent_label(self, result):\n    params = {'action': 'setprops', 'hash': result.hash, 's': 'label', 'v': sickbeard.TORRENT_LABEL}\n    return self._request(params=params)", "buggy_source_code": "def _set_torrent_label(self, result):\n    params = {'action': 'setprops', 'hash': result.hash.lower(), 's': 'label', 'v': sickbeard.TORRENT_LABEL}\n    return self._request(params=params)", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
