{"fixed_source_code": "def linear_rotate():\n    for i in range(2, 7):\n        do_zone(i)\n    command('flu')\n    time.sleep(0.01)", "buggy_source_code": "def linear_rotate():\n    for i in range(2, 7):\n        do_zone(i)\n    command('flu')\n    time.sleep(0.03)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_legal_not_tabu_aspiration(s_neighbor, tabu):\n    return status.objective(status.s_star, status.s_star_score, s_neighbor[1]) > status.s_star_score or is_legal_not_tabu(s_neighbor, tabu)", "buggy_source_code": "def is_legal_not_tabu_aspiration(s_neighbor, tabu):\n    return status.objective(status.s_, status.s_score, s_neighbor[1]) > status.s_star_score or is_legal_not_tabu(s_neighbor, tabu)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def install_cozy():\n    local('fab --fabfile=\"fabfile.py\" -H vagrant@192.168.33.10 install')", "buggy_source_code": "def install_cozy():\n    local('fab --fabfile=\"../fabfile.py\" -H vagrant@192.168.33.10 install')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_cython_max_chroma():\n    import _nphusl_cython\n    husl_chroma = husl.max_chroma_for_LH(0.25, 40.0)\n    cyth_chroma = _nphusl_cython._test_max_chroma(0.25, 40.0)\n    assert abs(husl_chroma - cyth_chroma) < 0.001", "buggy_source_code": "def test_cython_max_chroma():\n    from nphusl import _nphusl_cython\n    husl_chroma = husl.max_chroma_for_LH(0.25, 40.0)\n    cyth_chroma = _nphusl_cython._test_max_chroma(0.25, 40.0)\n    assert abs(husl_chroma - cyth_chroma) < 0.001", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def test_new_building(self, j, etree_building):\n    fixture_building = j.Building(etree_building)\n    fixture_building.save()\n    assert fixture_building.id is not None", "buggy_source_code": "def test_new_building(self, j, etree_building):\n    fixture_building = jss.Building(j, etree_building)\n    fixture_building.save()\n    assert fixture_building.id is not None", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __unicode__(self):\n    '%s %s' % (self.first_name, self.last_name)", "buggy_source_code": "def __unicode__(self):\n    return '%s %s' % (self.first_name, self.last_name)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def power_off(self, system_id, context):\n    power_change = 'off'\n    (ip, outlet, power_on_delay) = extract_apc_parameters(context)\n    power_control_apc(ip, outlet, power_change, power_on_delay)", "buggy_source_code": "def power_off(self, system_id, context):\n    self.run_process('snmpset ' + COMMON_ARGS % (context['power_address'], context['node_outlet']) + ' i 2')", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def detect_missing_packages(self):\n    (binary, package) = required_package()\n    if not shell.has_command_available(binary):\n        return [package]\n    return []", "buggy_source_code": "def detect_missing_packages(self):\n    (binary, package) = ['snmpset', 'snmp']\n    if not shell.has_command_available(binary):\n        return [package]\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_station_list(self):\n    response = self.client.get('/')\n    self.assertContains(response, '<a href=\"?sort=-name&amp;sort=name\">Name&nbsp;↓</a>', html=True)", "buggy_source_code": "def test_station_list(self):\n    response = self.client.get('/?q=t')\n    self.assertContains(response, 'Search results', html=True)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@override_settings(ENHYDRIS_STATIONS_PER_PAGE=100)\ndef test_one_page(self):\n    response = self.client.get('/')\n    self.assertNotContains(response, \"<a href='?page=2'>2</a>\", html=True)", "buggy_source_code": "@override_settings(ENHYDRIS_STATIONS_PER_PAGE=100)\ndef test_one_page(self):\n    response = self.client.get('/?q=t')\n    self.assertNotContains(response, \"<a href='?page=2'>2</a>\", html=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(TableStat, self).__init__(*args, **kwargs)\n    self.r = core.fetchInputs.table_stat('./sqlenergy/res/test_table_list.txt')", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(TableStat, self).__init__(*args, **kwargs)\n    self.r = fetchInputs.table_stat('./tests/res/test_table_list.txt')", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def readme():\n    with open('README.md') as f:\n        return f.read()", "buggy_source_code": "def readme():\n    with open('README') as f:\n        return f.read()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def child_groups(self):\n    query = sql.text('\\n        WITH RECURSIVE rel_tree AS (\\n          SELECT id,\\n                 parent_id,\\n                 1 AS level,\\n                 ARRAY[id] AS path_info,\\n                 false AS cyclic\\n          FROM groups\\n          WHERE parent_id = :group_id\\n          UNION ALL\\n          SELECT c.id,\\n                 c.parent_id,\\n                 p.level + 1,\\n                 p.path_info||c.id,\\n                 c.id = ANY(p.path_info) as cyclic\\n          FROM groups c\\n          JOIN rel_tree p ON c.parent_id = p.id AND NOT cyclic)\\n        SELECT array_agg(DISTINCT path)\\n        FROM rel_tree, unnest(path_info) path\\n        ')\n    return self.session.execute(query, dict(group_id=self.model.id)).scalar() or []", "buggy_source_code": "def child_groups(self):\n    query = sql.text('\\n        WITH RECURSIVE rel_tree AS (\\n          SELECT id,\\n                 parent_id,\\n                 1 AS level,\\n                 ARRAY[id] AS path_info,\\n                 false AS cyclic\\n          FROM groups\\n          WHERE parent_id = :group_id\\n          UNION ALL\\n          SELECT c.id,\\n                 c.parent_id,\\n                 p.level + 1,\\n                 p.path_info||c.id,\\n                 c.id = ANY(p.path_info) as cyclic\\n          FROM groups c\\n          JOIN rel_tree p ON c.parent_id = p.id AND NOT cyclic)\\n        SELECT array_agg(DISTINCT path)\\n        FROM rel_tree, unnest(rel_tree.path_info) path\\n        ')\n    return self.session.execute(query, dict(group_id=self.model.id)).scalar() or []", "edit_actions": ["update-node"]}
{"fixed_source_code": "def move(self, direction):\n    self.move_grid(direction=direction)\n    self.add_random_number()", "buggy_source_code": "def move(self, direction):\n    if self.move_grid(direction=direction):\n        self.add_random_number()", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def test_invalid_rules_file_should_yield_empty_ruleset(self):\n    self._set_rules('syntax_error.py')\n    self.assertEqual(0, len(self.rm.rules))", "buggy_source_code": "def test_invalid_rules_file_should_yield_empty_ruleset(self):\n    self._set_rules('syntax_error')\n    self.assertEqual(0, len(self.rm.rules))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_get_player_info(self):\n    player_details = Client.get_player_info(player_id=201566)\n    self.assertIsNotNone(player_details)\n    self.assertIsInstance(player_details, PlayerDetails)", "buggy_source_code": "def test_get_player_info(self):\n    player_details = Client.get_player_info(player_id=201566)\n    self.assertIsNotNone(player_details)\n    self.assertIsInstance(player_details, DetailedPlayer)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_create(self):\n    title = gen_value('TestSpreadsheet')\n    new_spreadsheet = self.gc.create(title)\n    self.assertTrue(isinstance(new_spreadsheet, gspread.models.Spreadsheet))", "buggy_source_code": "def test_create(self):\n    title = 'Test Spreadsheet'\n    new_spreadsheet = self.gc.create(title)\n    self.assertTrue(isinstance(new_spreadsheet, gspread.models.Spreadsheet))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_output_ports(self):\n    return [self.model]", "buggy_source_code": "def get_output_ports(self):\n    return self.output_ports.keySet()", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_output_ports(self):\n    return [self.tokens_port]", "buggy_source_code": "def get_output_ports(self):\n    return self.output_ports.keySet()", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_output_ports(self):\n    return [self.sents, self.labels]", "buggy_source_code": "def get_output_ports(self):\n    return self.output_ports.keySet()", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_output_ports(self):\n    return [self.acc]", "buggy_source_code": "def get_output_ports(self):\n    return self.output_ports.keySet()", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def run(self):\n    records = self.input_port.get()\n    records = [re.sub(RemoveUrls.URL_REGEX, 'URL', record) for record in records]\n    self.output_port.update(records)", "buggy_source_code": "def run(self):\n    records = self.input_port.get()\n    records = [re.sub(RemoveUrls.URL_REGEX, 'URL', record) for record in records]\n    self.training_set.update(records)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_export_pipeline_2():\n    tpot_obj = TPOTClassifier()\n    pipeline = creator.Individual.from_string('KNeighborsClassifier(input_matrix, 18, 33)', tpot_obj._pset)\n    expected_code = 'import numpy as np\\n\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.neighbors import KNeighborsClassifier\\n\\n# NOTE: Make sure that the class is labeled \\'class\\' in the data file\\ntpot_data = np.recfromcsv(\\'PATH/TO/DATA/FILE\\', delimiter=\\'COLUMN_SEPARATOR\\', dtype=np.float64)\\nfeatures = np.delete(tpot_data.view(np.float64).reshape(tpot_data.size, -1), tpot_data.dtype.names.index(\\'class\\'), axis=1)\\ntraining_features, testing_features, training_classes, testing_classes = \\\\\\n    train_test_split(features, tpot_data[\\'class\\'], random_state=42)\\n\\nexported_pipeline = KNeighborsClassifier(n_neighbors=5, weights=\"distance\")\\n\\nexported_pipeline.fit(training_features, training_classes)\\nresults = exported_pipeline.predict(testing_features)\\n'\n    assert expected_code == export_pipeline(pipeline)", "buggy_source_code": "def test_export_pipeline_2():\n    tpot_obj = TPOTClassifier()\n    pipeline = creator.Individual.from_string('GaussianNB(input_matrix)', tpot_obj._pset)\n    expected_code = \"import numpy as np\\n\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.naive_bayes import GaussianNB\\n\\n# NOTE: Make sure that the class is labeled 'class' in the data file\\ntpot_data = np.recfromcsv('PATH/TO/DATA/FILE', delimiter='COLUMN_SEPARATOR', dtype=np.float64)\\nfeatures = np.delete(tpot_data.view(np.float64).reshape(tpot_data.size, -1), tpot_data.dtype.names.index('class'), axis=1)\\ntraining_features, testing_features, training_classes, testing_classes = \\\\\\n    train_test_split(features, tpot_data['class'], random_state=42)\\n\\nexported_pipeline = GaussianNB()\\n\\nexported_pipeline.fit(training_features, training_classes)\\nresults = exported_pipeline.predict(testing_features)\\n\"\n    assert expected_code == export_pipeline(pipeline, tpot_obj.operators)", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_export_pipeline_3():\n    tpot_obj = TPOTClassifier()\n    pipeline = creator.Individual.from_string('DecisionTreeClassifier(SelectKBest(input_matrix, 5))', tpot_obj._pset)\n    expected_code = \"import numpy as np\\n\\nfrom sklearn.feature_selection import SelectKBest, f_classif\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.pipeline import make_pipeline\\nfrom sklearn.tree import DecisionTreeClassifier\\n\\n# NOTE: Make sure that the class is labeled 'class' in the data file\\ntpot_data = np.recfromcsv('PATH/TO/DATA/FILE', delimiter='COLUMN_SEPARATOR', dtype=np.float64)\\nfeatures = np.delete(tpot_data.view(np.float64).reshape(tpot_data.size, -1), tpot_data.dtype.names.index('class'), axis=1)\\ntraining_features, testing_features, training_classes, testing_classes = \\\\\\n    train_test_split(features, tpot_data['class'], random_state=42)\\n\\nexported_pipeline = make_pipeline(\\n    SelectKBest(k=5, score_func=f_classif),\\n    DecisionTreeClassifier()\\n)\\n\\nexported_pipeline.fit(training_features, training_classes)\\nresults = exported_pipeline.predict(testing_features)\\n\"\n    assert expected_code == export_pipeline(pipeline)", "buggy_source_code": "def test_export_pipeline_3():\n    tpot_obj = TPOTClassifier()\n    pipeline = creator.Individual.from_string('GaussianNB(MaxAbsScaler(input_matrix))', tpot_obj._pset)\n    expected_code = \"import numpy as np\\n\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.naive_bayes import GaussianNB\\nfrom sklearn.pipeline import make_pipeline\\nfrom sklearn.preprocessing import MaxAbsScaler\\n\\n# NOTE: Make sure that the class is labeled 'class' in the data file\\ntpot_data = np.recfromcsv('PATH/TO/DATA/FILE', delimiter='COLUMN_SEPARATOR', dtype=np.float64)\\nfeatures = np.delete(tpot_data.view(np.float64).reshape(tpot_data.size, -1), tpot_data.dtype.names.index('class'), axis=1)\\ntraining_features, testing_features, training_classes, testing_classes = \\\\\\n    train_test_split(features, tpot_data['class'], random_state=42)\\n\\nexported_pipeline = make_pipeline(\\n    MaxAbsScaler(),\\n    GaussianNB()\\n)\\n\\nexported_pipeline.fit(training_features, training_classes)\\nresults = exported_pipeline.predict(testing_features)\\n\"\n    assert expected_code == export_pipeline(pipeline, tpot_obj.operators)", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def load_real_data(debug=False):\n    dataframe = data_management.get_decisions_table(equal_split=True)\n    if debug == True:\n        dataframe.to_csv('before.csv')\n    return dataframe", "buggy_source_code": "def load_real_data(debug=False):\n    dataframe = data_utilities.get_decisions_table(equal_split=True)\n    if debug == True:\n        dataframe.to_csv('before.csv')\n    return dataframe", "edit_actions": ["update-node"]}
{"fixed_source_code": "def pack_data(data, encrypt_key=''):\n    if encrypt_key:\n        data = Crypto(encrypt_key).encrypt(data)\n    return TRANSFER_PACK_DATA.format(data).encode('utf8')", "buggy_source_code": "def pack_data(data, encrypt_key=''):\n    if encrypt_key:\n        data = DCrypto(encrypt_key).encrypt(data)\n    return TRANSFER_PACK_DATA.format(data).encode('utf8')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_avg_rune_efficiency(self):\n    return self.default_build.avg_efficiency", "buggy_source_code": "def get_avg_rune_efficiency(self):\n    return self.runeinstance_set.aggregate(Avg('efficiency'))['efficiency__avg'] or 0.0", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_left_join_with_and(self):\n    res1 = mldb.query('\\n        select * from x \\n        left join y on (x.x1 = y.y1) \\n        left join z on (x.x1 = z.z1 and x.x2 = z.z2)\\n        order by rowName()\\n        ')\n    pprint(res1)\n    res2 = mldb.query('\\n        select * from x \\n        left join y on (x.x1 = y.y1) \\n        left join z on (x.x1 + x.x2 = z.z1 + z.z2)\\n        order by rowName()\\n        ')\n    pprint(res2)\n    self.assertEquals(res1, res2)", "buggy_source_code": "def test_left_join_with_and(self):\n    res1 = mldb.query('\\n        select * from x\\n        left join y on (x.x1 = y.y1)\\n        left join z on (x.x1 = z.z1 and x.x2 = z.z2)\\n        order by rowName()\\n        ')\n    pprint(res1)\n    res2 = mldb.query('\\n        select * from x\\n        left join y on (x.x1 = y.y1)\\n        left join z on (x.x1 + x.x2 = z.z1 + z.z2)\\n        order by rowName()\\n        ')\n    pprint(res2)\n    self.assertEquals(res1, res2)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_row_naming_in_two_executors(self):\n    res1 = mldb.query('\\n        select * from x \\n        right join y on (x.x1 = y.y1) \\n        right join z on (x.x1 = z.z1 and x.x2 = z.z2)\\n        order by rowName()\\n        ')\n    pprint(res1)\n    res2 = mldb.query('\\n        select * from x \\n        right join y on (x.x1 = y.y1) \\n        right join z on (x.x1 + x.x2 = z.z1 + z.z2)\\n        order by rowName()\\n        ')\n    pprint(res2)\n    self.assertEquals(res1, res2)", "buggy_source_code": "def test_row_naming_in_two_executors(self):\n    res1 = mldb.query('\\n        select * from x\\n        right join y on (x.x1 = y.y1)\\n        right join z on (x.x1 = z.z1 and x.x2 = z.z2)\\n        order by rowName()\\n        ')\n    pprint(res1)\n    res2 = mldb.query('\\n        select * from x\\n        right join y on (x.x1 = y.y1)\\n        right join z on (x.x1 + x.x2 = z.z1 + z.z2)\\n        order by rowName()\\n        ')\n    pprint(res2)\n    self.assertEquals(res1, res2)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_current_user(self):\n    user = self.get_secure_cookie('current_user') or False\n    if not user:\n        return None\n    return tornado.escape.json_decode(user)", "buggy_source_code": "def get_current_user(self):\n    email = self.get_secure_cookie('current_user') or False\n    if not email:\n        return None\n    return self.application.db.users.find_one({'email': email})", "edit_actions": ["update-node", "update-node", "update-node", "insert-node", "insert-node", "update-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_taa_acceptance_pass_validation(config_req_handler, taa_aml_request):\n    config_req_handler.authorize = lambda req: 0\n    req = Request(**json.loads(taa_aml_request))\n    config_req_handler.doStaticValidation(req)\n    config_req_handler.validate(req)", "buggy_source_code": "def test_taa_acceptance_pass_validation(taa_aml_handler, write_manager, taa_aml_request):\n    taa_aml_handler.authorize = lambda req: 0\n    req = Request(**json.loads(taa_aml_request))\n    write_manager.static_validation(req)\n    write_manager.dynamic_validation(req)", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    if self.title is None:\n        return ''\n    else:\n        return self.title", "buggy_source_code": "def __str__(self):\n    if self.title is None:\n        return 'Ungrouped'\n    else:\n        return self.title", "edit_actions": ["update-node"]}
{"fixed_source_code": "def lambda_handler(event, context):\n    DDB = boto3.resource('dynamodb', region_name=REGION)\n    return DDB.Table('actions').scan()[ITEMS]", "buggy_source_code": "def lambda_handler(event, context):\n    DDB = boto3.resource('dynamodb', region_name=REGION)\n    return DDB.Table('triggers').scan()[ITEMS]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert_equal(self.sym, context.sym)", "buggy_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert self.sym == context.sym", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert_equal(self.sym, context.sym)", "buggy_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert self.sym == context.sym", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert_equal(self.sym, context.sym)", "buggy_source_code": "def test_init(self):\n    context = MUMPSContext(self.A, verbose=False)\n    assert self.sym == context.sym", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def extend(self, iter):\n    return super(UniqList, self).extend([i for i in iter if i not in self])", "buggy_source_code": "def extend(self, iter_):\n    return super(UniqList, self).extend([i for i in iter_ if i not in self])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __iadd__(self, iter):\n    return super(UniqList, self).__iadd__([i for i in iter if i not in self])", "buggy_source_code": "def __iadd__(self, iter_):\n    return super(UniqList, self).__iadd__([i for i in iter_ if i not in self])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def unread_msg_count(self):\n    return Message.query.filter(Message.to_user_id == self.id, Message.is_read == False).count()", "buggy_source_code": "def unread_msg_count(self):\n    return Message.query.filter(Message.to_user_id == self.id, Message.is_unread == 1).count()", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def attach_submenu(self, menu_node, submenu_list):\n    submenu = gtk.Menu()\n    menu_node.set_submenu(submenu)\n    [submenu.add(item) for item in submenu_list]", "buggy_source_code": "def attach_submenu(self, menu_node, submenu_list):\n    submenu = Gtk.Menu()\n    menu_node.set_submenu(submenu)\n    [submenu.add(item) for item in submenu_list]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def top_level_menu(self, items):\n    menu = gtk.Menu()\n    [menu.add(item) for item in items]\n    return menu", "buggy_source_code": "def top_level_menu(self, items):\n    menu = Gtk.Menu()\n    [menu.add(item) for item in items]\n    return menu", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_vector_add_scalar():\n    vector_sum = VECTOR_1 + 1\n    answer = Vector([2, 3, 4])\n    assert answer == vector_sum", "buggy_source_code": "def test_vector_add_scalar():\n    vector_sum = VECTOR_1 + 1\n    answer = Vector([2, 3, 4])\n    assert vector_sum == answer", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_vector_subtract():\n    vector_sub = VECTOR_1 - VECTOR_2\n    answer = Vector([-4, 5, -3])\n    assert answer == vector_sub", "buggy_source_code": "def test_vector_subtract():\n    vector_sub = VECTOR_1 - VECTOR_2\n    answer = Vector([-4, 5, -3])\n    assert vector_sub == answer", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_vector_multiply():\n    vector_mul = VECTOR_1 * VECTOR_2\n    answer = Vector([5, -6, 18])\n    assert answer == vector_mul", "buggy_source_code": "def test_vector_multiply():\n    vector_mul = VECTOR_1 * VECTOR_2\n    answer = Vector([5, -6, 18])\n    assert vector_mul == answer", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_vector_subtract_scalar():\n    vector_sub = VECTOR_1 - 1\n    answer = Vector([0, 1, 2])\n    assert answer == vector_sub", "buggy_source_code": "def test_vector_subtract_scalar():\n    vector_sub = VECTOR_1 - 1\n    answer = Vector([0, 1, 2])\n    assert vector_sub == answer", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_vector_normalize():\n    answer = Vector([0.6, 0.8])\n    assert answer.magnitude() == 1.0\n    assert answer == VECTOR_3.normalize()", "buggy_source_code": "def test_vector_normalize():\n    answer = Vector([0.6, 0.8])\n    assert answer.magnitude() == 1.0\n    assert VECTOR_3.normalize() == answer", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_vector_add():\n    vector_sum = VECTOR_1 + VECTOR_2\n    answer = Vector([6, -1, 9])\n    assert answer == vector_sum", "buggy_source_code": "def test_vector_add():\n    vector_sum = VECTOR_1 + VECTOR_2\n    answer = Vector([6, -1, 9])\n    assert vector_sum == answer", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_vector_multiply_scalar():\n    vector_mul = VECTOR_1 * 2\n    answer = Vector([2, 4, 6])\n    assert answer == vector_mul", "buggy_source_code": "def test_vector_multiply_scalar():\n    vector_mul = VECTOR_1 * 2\n    answer = Vector([2, 4, 6])\n    assert vector_mul == answer", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def setUp(self):\n    TestBase.setUp(self)\n    self.setup_form(allow_sms=False)", "buggy_source_code": "def setUp(self):\n    TestBaseSMS.setUp(self)\n    self.setup_form(allow_sms=False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    TestBase.setUp(self)\n    self.setup_form(allow_sms=True)", "buggy_source_code": "def setUp(self):\n    TestBaseSMS.setUp(self)\n    self.setup_form(allow_sms=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, name):\n    self.raw = None\n    self.loaded = False\n    self.filename = name\n    parse()", "buggy_source_code": "def __init__(self, name):\n    self.raw = None\n    self.loaded = False\n    self.filename = name\n    self.parse()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@app.before_request\ndef __start_timer():\n    global time_start\n    time_start = time.clock() * 1000000", "buggy_source_code": "@app.before_request\ndef __start_timer():\n    global time_start\n    time_start = start_timer()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def export(self, exporter, *args, **kwargs):\n    return export.export(exporter, self, *args, **kwargs)", "buggy_source_code": "def export(self, exporter, *args, **kwargs):\n    return exporters.export(exporter, self, *args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_achievements_section_contents(self):\n    self._assert_visible_only_to_me(self.achievement.achievement_name)\n    self._update_user(achievements_are_public=True)\n    self._assert_visible_to_all(self.achievement.achievement_name)", "buggy_source_code": "def test_achievements_section_contents(self):\n    self._assert_visible_only_to_me(achievements[AchievementDefinition.FINISH_TRAINING].name)\n    self._update_user(achievements_are_public=True)\n    self._assert_visible_to_all(achievements[AchievementDefinition.FINISH_TRAINING].name)", "edit_actions": ["update-node", "update-node", "insert-node", "update-node", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _check_growth_parameters_exist(self, raise_error=True):\n    return self._check_parameter_exists(parameters=['refractive_index'], raise_error=raise_error)", "buggy_source_code": "def _check_growth_parameters_exist(self, raise_error=True):\n    return self._check_parameter_exists(parameters=[], raise_error=raise_error)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@property\ndef DEPRECATEDoptical_properties(self):\n    if not self.__optical_properties:\n        self.__optical_properties = optical_properties.size_dist2optical_properties(self, aod=self.__sup_opt_aod, noOfAngles=100)\n    return self.__optical_properties", "buggy_source_code": "@property\ndef DEPRECATEDoptical_properties(self):\n    if not self._optical_properties:\n        self._optical_properties = optical_properties.size_dist2optical_properties(self, aod=self.__sup_opt_aod, noOfAngles=100)\n    return self._optical_properties", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@property\ndef optical_properties(self):\n    if not self.__optical_properties:\n        self.__optical_properties = optical_properties.OpticalProperties(self)\n    return self.__optical_properties", "buggy_source_code": "@property\ndef optical_properties(self):\n    if not self._optical_properties:\n        self._optical_properties = optical_properties.OpticalProperties(self)\n    return self._optical_properties", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _update(self):\n    self.__optical_properties = None\n    self._uptodate_particle_number_concentration = False\n    self._uptodate_particle_mass_concentration = False\n    self._uptodate_particle_surface_concentration = False\n    self._uptodate_particle_volume_concentration = False", "buggy_source_code": "def _update(self):\n    self._optical_properties = None\n    self._uptodate_particle_number_concentration = False\n    self._uptodate_particle_mass_concentration = False\n    self._uptodate_particle_surface_concentration = False\n    self._uptodate_particle_volume_concentration = False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_process_test_dir(self):\n    given_result = YAMLParser().read_dir(test_dir)\n    expected_result = '[{\"testFirstNameLower\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that lower cases the first name field of a users table record.\", \"result\": \"sarah\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}, \"testUserValidBirthday\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for valid birth dates.\", \"result\": {\"1\": \"01-01-1900\", \"2\": \"02-02-2000\"}, \"query\": {\"where\": \"user_id IN (1, 2)\", \"from\": \"users\", \"select\": \"birthday\"}}, \"testFirstNameUpper\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that upper cases the first name field of a users table record.\", \"result\": \"SARAH\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}}]'\n    self.assertCountEqual(json.dumps(tuple(given_result)), expected_result)", "buggy_source_code": "def test_process_test_dir(self):\n    given_result = YAMLParser().read_dir(test_dir)\n    expected_result = '[{\"testFirstNameLower\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that lower cases the first name field of a users table record.\", \"result\": \"sarah\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}, \"testUserValidBirthday\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for valid birth dates.\", \"result\": {\"1\": \"01-01-1900\", \"2\": \"02-02-2000\"}, \"query\": {\"where\": \"user_id IN (1, 2)\", \"from\": \"users\", \"select\": \"birthday\"}}, \"testFirstNameUpper\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that upper cases the first name field of a users table record.\", \"result\": \"SARAH\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}}]'\n    self.assertItemsEqual(json.dumps(tuple(given_result)), expected_result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_process_data_file(self):\n    given_result = YAMLParser().read_file(data_file)\n    expected_result = '[{\"1\": {\"first_name\": \"Bob\", \"last_name\": \"Richards\", \"birthday\": \"01-40-2000\", \"zipcode\": 55555}, \"2\": {\"first_name\": \"Sarah\", \"last_name\": \"Jenkins\", \"birthday\": \"02-02-2000\", \"zipcode\": 12345}}]'\n    self.assertCountEqual(json.dumps(tuple(given_result)), expected_result)", "buggy_source_code": "def test_process_data_file(self):\n    given_result = YAMLParser().read_file(data_file)\n    expected_result = '[{\"1\": {\"first_name\": \"Bob\", \"last_name\": \"Richards\", \"birthday\": \"01-40-2000\", \"zipcode\": 55555}, \"2\": {\"first_name\": \"Sarah\", \"last_name\": \"Jenkins\", \"birthday\": \"02-02-2000\", \"zipcode\": 12345}}]'\n    self.assertItemsEqual(json.dumps(tuple(given_result)), expected_result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_process_test_file(self):\n    given_result = YAMLParser().read_file(test_file)\n    expected_result = '[{\"testFirstNameLower\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that lower cases the first name field of a users table record.\", \"result\": \"sarah\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}, \"testUserValidBirthday\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for valid birth dates.\", \"result\": {\"1\": \"01-01-1900\", \"2\": \"02-02-2000\"}, \"query\": {\"where\": \"user_id IN (1, 2)\", \"from\": \"users\", \"select\": \"birthday\"}}, \"testFirstNameUpper\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that upper cases the first name field of a users table record.\", \"result\": \"SARAH\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}}]'\n    self.assertCountEqual(json.dumps(tuple(given_result)), expected_result)", "buggy_source_code": "def test_process_test_file(self):\n    given_result = YAMLParser().read_file(test_file)\n    expected_result = '[{\"testFirstNameLower\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that lower cases the first name field of a users table record.\", \"result\": \"sarah\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}, \"testUserValidBirthday\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for valid birth dates.\", \"result\": {\"1\": \"01-01-1900\", \"2\": \"02-02-2000\"}, \"query\": {\"where\": \"user_id IN (1, 2)\", \"from\": \"users\", \"select\": \"birthday\"}}, \"testFirstNameUpper\": {\"testSuites\": {\"suite\": \"userDim\"}, \"dataset\": {\"source\": \"etlUnitTest\"}, \"desc\": \"Test for process that upper cases the first name field of a users table record.\", \"result\": \"SARAH\", \"query\": {\"where\": \"user_id = 2\", \"from\": \"users\", \"select\": \"first_name\"}}}]'\n    self.assertItemsEqual(json.dumps(tuple(given_result)), expected_result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_process_data_dir(self):\n    given_result = YAMLParser().read_dir(data_dir)\n    expected_result = '[{\"1\": {\"first_name\": \"Bob\", \"last_name\": \"Richards\", \"birthday\": \"01-40-2000\", \"zipcode\": 55555}, \"2\": {\"first_name\": \"Sarah\", \"last_name\": \"Jenkins\", \"birthday\": \"02-02-2000\", \"zipcode\": 12345}}]'\n    self.assertCountEqual(json.dumps(tuple(given_result)), expected_result)", "buggy_source_code": "def test_process_data_dir(self):\n    given_result = YAMLParser().read_dir(data_dir)\n    expected_result = '[{\"1\": {\"first_name\": \"Bob\", \"last_name\": \"Richards\", \"birthday\": \"01-40-2000\", \"zipcode\": 55555}, \"2\": {\"first_name\": \"Sarah\", \"last_name\": \"Jenkins\", \"birthday\": \"02-02-2000\", \"zipcode\": 12345}}]'\n    self.assertItemsEqual(json.dumps(tuple(given_result)), expected_result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_initialize(self):\n    under_test = DataManager()\n    self.assertTrue('hosts' in under_test.database)\n    self.assertTrue('services' in under_test.database)", "buggy_source_code": "def test_initialize(self):\n    under_test = DataManager()\n    self.assertTrue('host' in under_test.database)\n    self.assertTrue('service' in under_test.database)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def version():\n    return '0.0.1'", "buggy_source_code": "def version():\n    return '0.0.2'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@register('twitter')\ndef twitterupdate(username, password, message):\n    twitter.Twitter(username, password).statuses.update(status=message)", "buggy_source_code": "@cache.add('twitter')\ndef twitterupdate(username, password, message):\n    twitter.Twitter(username, password).statuses.update(status=message)", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def append(self, p_object):\n    if not self.__iscorrect_type(p_object):\n        raise TypeError\n    super(DicePool, self).append(p_object)", "buggy_source_code": "def append(self, p_object):\n    if not self.__hasrequired_fields(p_object):\n        raise NoRequiredFields\n    super().append(p_object)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __check_sequence_objects_type(self, seq):\n    if any((not self.__iscorrect_type(x) for x in seq)):\n        raise TypeError", "buggy_source_code": "def __check_sequence_objects_type(self, seq):\n    if any((not self.__hasrequired_fields(x) for x in seq)):\n        raise NoRequiredFields", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pytest.fixture\ndef pool():\n    return dice_pool.DicePool()", "buggy_source_code": "@pytest.fixture\ndef pool(pool_class):\n    return pool_class()", "edit_actions": ["insert-node", "insert-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_ability_class_has_proper_fields(ability_class):\n    assert ability_class._fields == ('dice', 'modifier')", "buggy_source_code": "def test_ability_class_has_proper_fields(ability_class):\n    assert hasattr(ability_class, 'dice')\n    assert hasattr(ability_class, 'modifier')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_dice_pool_appends_only_ability_objects(pool, melee_ability):\n    with pytest.raises(TypeError):\n        pool.append('ability')\n    pool.append(melee_ability)\n    assert pool.count(melee_ability) == 1", "buggy_source_code": "def test_dice_pool_appends_only_ability_objects(pool, melee_ability):\n    with pytest.raises(dice_pool.NoRequiredFields):\n        pool.append('ability')\n    pool.append(melee_ability)\n    assert pool.count(melee_ability) == 1", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def test_dice_pool_can_contain_only_ability_objects(pool_class, melee_ability):\n    with pytest.raises(TypeError):\n        pool_class([1])\n    new_pool = pool_class([melee_ability])\n    assert melee_ability == new_pool.pop()", "buggy_source_code": "def test_dice_pool_can_contain_only_ability_objects(pool_class, melee_ability):\n    with pytest.raises(dice_pool.NoRequiredFields):\n        pool_class([1])\n    new_pool = pool_class([melee_ability])\n    assert melee_ability == new_pool.pop()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def throw(self, packet):\n    data = self.filter(packet)\n    self.send(data)", "buggy_source_code": "def throw(self, packet):\n    data = self.filter(packet)\n    if data:\n        self.send(data)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_request_ok(self):\n    self._middleware(self._environ, Mock())\n    request = self._environ.get('fantastico.request')\n    self.assertIsNotNone(request)", "buggy_source_code": "def test_request_ok(self):\n    self._middleware(self._environ, Mock())\n    self.assertIsNotNone(self._environ.get('fantastico.request'))", "edit_actions": ["insert-node", "update-node", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef installed_middleware(self):\n    return ['fantastico.middleware.request_middleware.RequestMiddleware', 'fantastico.middleware.routing_engine.RoutingEngineMiddleware']", "buggy_source_code": "@property\ndef installed_middleware(self):\n    return ['fantastico.middleware.request_middleware.RequestMiddleware', 'fantastico.middleware.routing_middleware.RoutingMiddleware']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '(%s %s)' % (isinstance(self.argument, ListRedirect) and self.argument.reduce() or self.argument, self.NAME)", "buggy_source_code": "def __repr__(self):\n    return '(%s %s)' % (self.NAME, isinstance(self.argument, ListRedirect) and self.argument.reduce() or self.argument)", "edit_actions": ["move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def django_is_lower_1_2():\n    if VERSION[0] == 1 and VERSION[1] < 2:\n        return True\n    elif VERSION[0] > 1:\n        return False\n    return True", "buggy_source_code": "def django_is_lower_1_2():\n    if VERSION[0] == 1 and VERSION[1] < 2:\n        return True\n    elif VERSION[0] >= 1:\n        return False\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "@roles('localhost')\n@task\ndef setup_postgres():\n    local(\"psql -c 'create user %(db_user)s;' -U postgres\" % env)\n    local(\"psql -c 'create database %(db_name)s OWNER=%(db_user)s;' -U postgres\" % env)", "buggy_source_code": "@roles('localhost')\n@task\ndef setup_postgres():\n    local(\"psql -c 'create role %(db_user)s CREATEDB LOGIN;' -U postgres\" % env)\n    local(\"psql -c 'create database %(db_name)s OWNER=%(db_user)s;' -U postgres\" % env)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def post_model_create(request):\n    form_a = PostModelForm()\n    template = 'web/create_view.html'\n    context = {'form ': form_a}\n    return render(request, template, context)", "buggy_source_code": "def post_model_create(request):\n    form = PostModelForm()\n    template = 'web/create_view.html'\n    context = {'form ': form}\n    return render(request, template, context)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def main():\n    verify_recombination_events()", "buggy_source_code": "def main():\n    verify_mutations()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main():\n    board = Board(1080, 800)\n    game = Game(board)\n    game.ui = gui.UserInterface(game)\n    game.ui.main_loop()", "buggy_source_code": "def main():\n    field = Field(1080, 800)\n    game = Game(field)\n    game.ui = gui.UserInterface(game)\n    game.ui.main_loop()", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, board):\n    self.board = board\n    self.state = State.running\n    self.speed = 1\n    self.level = 1", "buggy_source_code": "def __init__(self, field):\n    self.field = field\n    self.state = State.running\n    self.speed = 1\n    self.level = 1\n    self.ui = None", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def dimensions(self):\n    return (self.board.width, self.board.height)", "buggy_source_code": "def dimensions(self):\n    return (self.field.width, self.field.height)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def train_input_fn(training_dir, params):\n    directory = os.path.join(training_dir, 'train.tfrecord')\n    return _build_tfrecord_dataset(directory, params['train_total_video_clip'], params)", "buggy_source_code": "def train_input_fn(training_dir, params):\n    directory = os.path.join(training_dir, 'train.tfrecord')\n    return _build_tfrecord_dataset(directory, params['train_total_video_clip'], **params)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def eval_input_fn(evaluating_dir, params):\n    directory = os.path.join(evaluating_dir, 'eval.tfrecord')\n    return _build_tfrecord_dataset(directory, params['eval_total_video_clip'], params)", "buggy_source_code": "def eval_input_fn(evaluating_dir, params):\n    directory = os.path.join(evaluating_dir, 'eval.tfrecord')\n    return _build_tfrecord_dataset(directory, params['eval_total_video_clip'], **params)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@patch(git, 'sh')\ndef test_simple_pull(sh):\n    git.pull('repo_path', 'origin_remote', 'master_branch')\n    assert sh.called\n    assert sh.call_args[0][0] == 'cd repo_path; git pull origin_remote master_branch'", "buggy_source_code": "@patch('paver.git.sh')\ndef test_simple_pull(sh):\n    git.pull('repo_path', 'origin_remote', 'master_branch')\n    assert sh.called\n    assert sh.call_args[0][0] == 'cd repo_path; git pull origin_remote master_branch'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch(svn, 'sh')\ndef test_simple_export(sh):\n    svn.export('http://foo', 'bar')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn export http://foo bar'", "buggy_source_code": "@patch('paver.svn.sh')\ndef test_simple_export(sh):\n    svn.export('http://foo', 'bar')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn export http://foo bar'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch(svn, 'sh')\ndef test_simple_checkout(sh):\n    svn.checkout('http://foo', 'bar')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn co http://foo bar'", "buggy_source_code": "@patch('paver.svn.sh')\ndef test_simple_checkout(sh):\n    svn.checkout('http://foo', 'bar')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn co http://foo bar'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch(svn, 'sh')\ndef test_export_with_revision(sh):\n    svn.export('http://foo', 'bar', revision='1234')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn export -r 1234 http://foo bar'", "buggy_source_code": "@patch('paver.svn.sh')\ndef test_export_with_revision(sh):\n    svn.export('http://foo', 'bar', revision='1234')\n    assert sh.called\n    assert sh.call_args[0][0] == 'svn export -r 1234 http://foo bar'", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def stop():\n    global RUN\n    RUN = RUN + 1\n    timedDimmer.stopDim()", "buggy_source_code": "def stop():\n    global RUN\n    RUN = RUN + 1\n    corefunctions.stopFade()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def vinit(**kwargs):\n    return np.copy(zero)", "buggy_source_code": "def vinit(**kwargs):\n    return 20 * np.random.random(solarsys.shape) - 10", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_form_kwargs(self):\n    kwargs = super(PasswordResetFromKeyView, self).get_form_kwargs()\n    kwargs['user'] = self.reset_user\n    kwargs['temp_key'] = self.key\n    return kwargs", "buggy_source_code": "def get_form_kwargs(self):\n    kwargs = super(ResetPasswordKeyView, self).get_form_kwargs()\n    kwargs['user'] = self.reset_user\n    kwargs['temp_key'] = self.key\n    return kwargs", "edit_actions": ["update-node"]}
{"fixed_source_code": "def description(self):\n    return 'Bulkload files into the cluster'", "buggy_source_code": "def description(self):\n    return 'Bulkload files into the cluster by connecting to some live node (if any)'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def parse_definition(self, node):\n    definition = Definition.parse_node(node, module=self, lookup=self.lazy_lookup)\n    self.add_definition(definition)", "buggy_source_code": "def parse_definition(self, node):\n    definition = Definition.parse_node(node, module=self, lookup=self.lookup_lazy)\n    self.add_definition(definition)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, name, imported):\n    self.name = name\n    self.imported = imported\n    self.linked = False", "buggy_source_code": "def __init__(self, name, module):\n    self.name = name\n    self.module = module\n    self.linked = False", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def tearDown(self):\n    ServerUtils.stopServer(hosts=self.hostlist_servers)", "buggy_source_code": "def tearDown(self):\n    server_utils.stop_server(hosts=self.hostlist_servers)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def printHelp():\n    print('-h, --help\\tshow this help.\\n' + '-cf [flag1,flag2,...]\\tuse compiler flags\\n' + '-lf [flag1,flag2,...]\\tuse link flags\\n' + 'clean, --clean, -c\\t remove test files created by forunit\\n')\n    exit()", "buggy_source_code": "def printHelp():\n    print('-h, --help\\t\\tshow this help.\\n' + '-cf [flag1,flag2,...]\\tuse compiler flags\\n' + '-lf [flag1,flag2,...]\\tuse link flags\\n' + 'clean, --clean, -c\\tremove test files created by forunit\\n')\n    exit()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _options_form_default(self):\n    return SPAWNER_OPTIONS_FORM", "buggy_source_code": "def _options_form_default(self):\n    return '\\n          <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" style=\"width: 50%\">\\n            <input\\n              id=\"repository_input\"\\n              type=\"text\"\\n              autocapitalize=\"off\"\\n              autocorrect=\"off\"\\n              name=\"repository_url\"\\n              tabindex=\"1\"\\n              autofocus=\"autofocus\"\\n              class=\"mdl-textfield__input\"\\n            style=\"margin-bottom: 3px;\" />\\n            <label class=\"mdl-textfield__label\" for=\"repository_input\">Git repository</label>\\n          </div>\\n          <label for=\"need_remove\" class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\" >\\n            <input type=\"checkbox\"\\n                   name=\"need_remove\"\\n                   class=\"mdl-checkbox__input\"\\n                   id=\"need_remove\"\\n                   checked />\\n            <span class=\"mdl-checkbox__label\">Remove previous container if it exists</span>\\n          </label>\\n        '", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def cmdCanvas(self, stack):\n    self.canvasSig.emit(stack[1])", "buggy_source_code": "def cmdCanvas(self, line):\n    self.canvasSig.emit(line)", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/howto')\n@app.route('/help')\ndef help():\n    return \"Help you?! We can't even help ourselves!\"", "buggy_source_code": "@app.route('/howto')\n@app.route('/help')\ndef help():\n    return \"Help you?! We can't even help ourselves!\\n\\n See the <a href='contact'>contact page</a> if you need help urgently\"", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef pkey():\n    return path.join(KeyStore.base_dir, 'tests/test_data/prov_selfupdate/pkey.pem')", "buggy_source_code": "@staticmethod\ndef pkey():\n    return path.join(KeyStore.base_dir, 'tests/test_data/prov_testupdate/pkey.pem')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef ca():\n    return path.join(KeyStore.base_dir, 'tests/test_data/prov_selfupdate/ca.pem')", "buggy_source_code": "@staticmethod\ndef ca():\n    return path.join(KeyStore.base_dir, 'tests/test_data/prov_testupdate/ca.pem')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef cert():\n    return path.join(KeyStore.base_dir, 'tests/test_data/prov_selfupdate/client.pem')", "buggy_source_code": "@staticmethod\ndef cert():\n    return path.join(KeyStore.base_dir, 'tests/test_data/prov_testupdate/client.pem')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unsupported(bot, update):\n    bot.sendMessage(chat_id=update.message.chat_id, text=\"I don't support this command yet. Sorry!\")", "buggy_source_code": "def unsupported(bot, update):\n    bot.sendMessage(chat_id=update.message.chat_id, text=\"<I don't support this command yet. Sorry!>\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unknown_cmd(bot, update):\n    bot.sendMessage(chat_id=update.message.chat_id, text='I beg your pardon?')", "buggy_source_code": "def unknown_cmd(bot, update):\n    bot.sendMessage(chat_id=update.message.chat_id, text='<I beg your pardon?>')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cmd_quit(self, text='quit'):\n    self.interpreter = None\n    self.handle_message = self.cmd_start\n    self.reply_markup = telegram.ReplyKeyboardHide()\n    return 'Frotzbot is stopped. Use /start to start a new session'", "buggy_source_code": "def cmd_quit(self, text='quit'):\n    self.interpreter = None\n    self.handle_message = self.cmd_start\n    self.reply_markup = telegram.ReplyKeyboardHide()\n    return '<No active games. /start a new session?>'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_alphamap():\n    alpha_map = _datrie.AlphaMap()\n    alpha_map.add_range('a', 'z')\n    del alpha_map", "buggy_source_code": "def test_alphamap():\n    alpha_map = datrie.AlphaMap()\n    alpha_map.add_range('a', 'z')\n    del alpha_map", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_trie():\n    alpha_map = _datrie.AlphaMap()\n    alpha_map._add_range(20, 5000)\n    return _datrie.Trie.create(alpha_map)", "buggy_source_code": "def _get_trie():\n    alpha_map = datrie.AlphaMap()\n    alpha_map._add_range(20, 5000)\n    return datrie.create(alpha_map)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.q = TaskQueue(name='test').save()", "buggy_source_code": "def setUp(self):\n    self.q = TaskQueue(id='test').save()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    self.q = self.model(name='test').save()", "buggy_source_code": "def setUp(self):\n    self.q = self.model(id='test').save()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def conn_b(self):\n    print('connect button')\n    os.system('sudo bt-audio -c ' + headset_MAC)", "buggy_source_code": "def conn_b(self):\n    print('connect button')\n    subprocess.call('sudo bt-audio -c ' + headset_MAC, stdout=sys.stdout)", "edit_actions": ["update-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def testBinaryAssert(self):\n    stuff = self.Execute(\"assert '','\\\\xabAsserted\\\\xbb'\")\n    output = testbase.console(stuff)\n    assert 'Asserted' in output", "buggy_source_code": "def testBinaryAssert(self):\n    stuff = self.Execute(\"assert '','\\\\xabAsserted\\\\xbb'\")\n    output = testbase.exceptions(stuff)\n    assert 'Asserted' in output", "edit_actions": ["update-node"]}
{"fixed_source_code": "def start(argv):\n    if ap.workflow == 'brat_to_stanford':\n        import brat_to_stanford.compile as compile\n        compile.regenerate(argv)\n    if ap.workflow != 'brat_to_stanford':\n        print('Not implemented.')", "buggy_source_code": "def start(argv):\n    if argv.workflow == 'brat_to_stanford':\n        import brat_to_stanford.compile as compile\n        compile.regenerate(argv)\n    if argv.workflow != 'brat_to_stanford':\n        print('Not implemented.')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def start(argv):\n    if ap.workflow == 'brat_to_stanford':\n        import brat_to_stanford.train as train\n        train.regenerate(argv)\n    if ap.workflow != 'brat_to_stanford':\n        print('Not implemented.')", "buggy_source_code": "def start(argv):\n    if argv.workflow == 'brat_to_stanford':\n        import brat_to_stanford.train as train\n        train.regenerate(argv)\n    if argv.workflow != 'brat_to_stanford':\n        print('Not implemented.')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_version(self):\n    self.assertEqual(viennagrid.wrapper.version(), '0.1.0-rc.4')", "buggy_source_code": "def test_version(self):\n    self.assertEqual(viennagrid.wrapper.version(), '0.1.0-rc.5')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_xor(sel):\n    pass", "buggy_source_code": "def test_xor(self):\n    pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "def tap(url, n):\n    while True:\n        r = get(url + '/sensors/%d' % n).json\n        yield r['sensors']['2']['state']['buttonevent']", "buggy_source_code": "def tap(url, n):\n    while True:\n        r = get(url + 'sensors/%d' % n).json\n        yield r['state']['buttonevent']", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def index(request):\n    videos = Video.ready.all()\n    return render_to_response('index.html', {'videos': videos}, context_instance=RequestContext(request))", "buggy_source_code": "def index(request):\n    videos = Video.objects.all()\n    return render_to_response('index.html', {'videos': videos}, context_instance=RequestContext(request))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.yield_fixture\n@pytest.fixture(scope='session')\ndef server():\n    serve = ZMQStreamer(1234, maxlen=10)\n    yield serve\n    serve.stop()", "buggy_source_code": "@pytest.yield_fixture\n@pytest.fixture(scope='session')\ndef server():\n    serve = ZMQStreamer(1234, maxlen=10)\n    yield serve", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef func(x, c):\n    return 1 / np.exp(-1 * c * x)", "buggy_source_code": "def func(self, x, c):\n    return self.Qz * np.exp(-1 * c * x)", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fitit(self, x, y):\n    (popt, pcov) = curve_fit(recess.func, x, y, p0=0.1)\n    return (popt, pcov)", "buggy_source_code": "def fitit(self, x, y):\n    (popt, pcov) = curve_fit(self.func, x, y, p0=0.1)\n    return (popt, pcov)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_get_dbs_list(self):\n    db_path = self.db_path\n    obs = get_dbs_list(db_path)\n    exp = join(join('\"' + db_path, ref82) + '\"')\n    self.assertEqual(obs, exp)", "buggy_source_code": "def test_get_dbs_list(self):\n    db_path = self.db_path\n    obs = get_dbs_list(db_path)\n    exp = join(join('\"' + db_path, 'ref82') + '\"')\n    self.assertEqual(obs, exp)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def test_get_dbs(self):\n    db_path = self.db_path\n    obs = get_dbs(db_path)\n    exp = {'shogun': join(db_path, 'ref82')}\n    self.assertEqual(obs, exp)", "buggy_source_code": "def test_get_dbs(self):\n    db_path = self.db_path\n    obs = get_dbs(db_path)\n    exp = {'ref82': join(db_path, 'ref82')}\n    self.assertEqual(obs, exp)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __contains__(cls, item):\n    return item in self.__revData", "buggy_source_code": "def __contains__(cls, item):\n    return item in cls.__revData", "edit_actions": ["update-node"]}
{"fixed_source_code": "def require_auto_deps():\n    require_python_2_with_working_base64()\n    import pkg_resources\n    for requirement in install_requires:\n        try:\n            pkg_resources.require(requirement)\n        except pkg_resources.DistributionNotFound:\n            pass", "buggy_source_code": "def require_auto_deps():\n    require_python_version()\n    import pkg_resources\n    for requirement in install_requires:\n        try:\n            pkg_resources.require(requirement)\n        except pkg_resources.DistributionNotFound:\n            pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef daypage(day):\n    url_args = date.strftime('%Y-%m-%d')\n    url = 'https://dons.wikimedia.fr/journal/%s' % url_args\n    return urllib.urlopen(url).read()", "buggy_source_code": "@staticmethod\ndef daypage(day):\n    url_args = day.strftime('%Y-%m-%d')\n    url = 'https://dons.wikimedia.fr/journal/%s' % url_args\n    return urllib.urlopen(url).read()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    super(DonationsParser, self).__init__()\n    self.status = DailyParser.START_PARSER\n    self.donations = []", "buggy_source_code": "def __init__(self):\n    super(DailyParser, self).__init__()\n    self.status = DailyParser.START_PARSER\n    self.donations = []", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _set_base_ext(self):\n    (self._base, self._ext) = os.path.splitext(self._name)\n    self._ext = self._ext.lower()", "buggy_source_code": "def _set_base_ext(self):\n    (self._base, self._ext) = os.path.splitext(self.name)\n    self._ext = self._ext.lower()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, cache, artifact):\n    cliapp.AppException.__init__(self, 'Failed to get the artifact %s from the artifact cache %s' % (artifact, cache))", "buggy_source_code": "def __init__(self, cache, artifact):\n    cliapp.AppException.__init__(self, 'Failed to get the artifact %s with cache key %s from the artifact cache %s' % (artifact, artifact.cache_key, cache))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def escape(u):\n    if not isinstance(u, unicode_type):\n        raise ValueError('Only unicode objects are escapable. ' + 'Got %s of type %s.' % (u, type(u)))\n    return quote(u, safe=b'~')", "buggy_source_code": "def escape(u):\n    if not isinstance(u, unicode_type):\n        raise ValueError('Only unicode objects are escapable. ' + 'Got %r of type %s.' % (u, type(u)))\n    return quote(u, safe=b'~')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error403(request):\n    return render_to_response('error.html', {'id': 'SIGINT: unautharized_access', 'description': 'bad page \"%s\"' % request.path, 'code': 403}, context_instance=RequestContext(request))", "buggy_source_code": "def error403(request):\n    return render_to_response('error.html', {'id': 'unauthorized_access', 'description': 'no permission for \"%s\"' % request.path, 'code': 403}, context_instance=RequestContext(request))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def error500(request):\n    return render_to_response('error.html', {'id': 'SIGILL: invalid_state', 'description': 'bad page \"%s\"' % request.path, 'code': 500}, context_instance=RequestContext(request))", "buggy_source_code": "def error500(request):\n    return render_to_response('error.html', {'id': 'invalid_state', 'description': 'corrupt page \"%s\"' % request.path, 'code': 500}, context_instance=RequestContext(request))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def error404(request):\n    return render_to_response('error.html', {'id': 'SIGSEGV: page_out_of_bounds', 'description': 'bad page \"%s\"' % request.path, 'code': 404}, context_instance=RequestContext(request))", "buggy_source_code": "def error404(request):\n    return render_to_response('error.html', {'id': 'page_out_of_bounds', 'description': 'bad page \"%s\"' % request.path, 'code': 404}, context_instance=RequestContext(request))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_title(cipher_signature):\n    expected = 'PSY - GANGNAM STYLE(강남스타일) MV'\n    stream = cipher_signature.streams.first()\n    assert stream.title == expected", "buggy_source_code": "def test_title(cipher_signature):\n    expected = 'PSY - GANGNAM STYLE(강남스타일) M/V'\n    stream = cipher_signature.streams.first()\n    assert stream.title == expected", "edit_actions": ["update-node"]}
{"fixed_source_code": "def update():\n    print(\"- To update please run 'snap refresh'\")", "buggy_source_code": "def update():\n    print(\" *** To update please run 'snap refresh zeronet' *** \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def read_prox_ground(self):\n    return ProxGround(delta=self._prox_ground_delta, reflected=self._prox_ground_reflected, ambiant=self._prox_ground_ambiant)", "buggy_source_code": "def read_prox_ground(self):\n    return io.ProxGround(delta=self._prox_ground_delta, reflected=self._prox_ground_reflected, ambiant=self._prox_ground_ambiant)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_methods(self, service_title, default_method):\n    return self.get_relations(service_title, default_instrument, 'Method', 'portal_catalog', 'AnalysisService Methods', 'Method_title')", "buggy_source_code": "def get_methods(self, service_title, default_method):\n    return self.get_relations(service_title, default_method, 'Method', 'portal_catalog', 'AnalysisService Methods', 'Method_title')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_init(self):\n    logging.debug(u\"- registering audit to bot 'run'\")\n    self.bot.register('start', self.on_start)", "buggy_source_code": "def on_init(self):\n    logging.debug(u\"- registering audit to bot 'run'\")\n    self.bot.register('start', self)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    TestBase.__init__(self, 'malloc', '\\n# DURATION    TID     FUNCTION\\n            [16726] | main() {\\n   0.426 us [16726] |   malloc();\\n   0.397 us [16726] |   free();\\n   3.074 us [16726] | } /* main */\\n   0.562 us [16726] | free();\\n')", "buggy_source_code": "def __init__(self):\n    TestBase.__init__(self, 'malloc', '\\n# DURATION    TID     FUNCTION\\n            [16726] | main() {\\n   0.426 us [16726] |   malloc();\\n   0.397 us [16726] |   free();\\n   3.074 us [16726] | } /* main */\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<KafkaConsumer topics=(%s)>' % ', '.join(self.topics)", "buggy_source_code": "def __repr__(self):\n    return '<KafkaConsumer topics=(%s)>' % ', '.join(['%s-%d' % topic_partition for topic_partition in self._topics])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def cancel(self):\n    self.__done = True", "buggy_source_code": "def cancel(self):\n    self.__canceled = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_addinfiles_state():\n    addinfiles_state_dict = {}\n    for revit_version in _get_installed_revit_addin_folders().keys():\n        addinfiles_state_dict[revit_version] = _addin_def_exists(revit_version)\n    return addinfiles_state_dict", "buggy_source_code": "def get_addinfiles_state():\n    addinfiles_state_dict = {}\n    installed_revits_dict = _get_installed_revit_addin_folders()\n    for (revit_version, revit_addin_dir) in installed_revits_dict.items():\n        addinfiles_state_dict[revit_version] = _addin_def_exists(revit_addin_dir)\n    return addinfiles_state_dict", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def getTestWait(self, bus, size, *evts):\n    return Waiter(bus, size, *evts)", "buggy_source_code": "def getTestWait(self, bus, size, *evts):\n    return s_eventbus.Waiter(bus, size, *evts)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@gen.coroutine\ndef put(self):\n    raise HTTPError(http.client.METHOD_NOT_ALLOWED.value)", "buggy_source_code": "@gen.coroutine\ndef put(self):\n    raise HTTPError(int(http.client.METHOD_NOT_ALLOWED))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@gen.coroutine\ndef delete(self):\n    raise HTTPError(http.client.METHOD_NOT_ALLOWED.value)", "buggy_source_code": "@gen.coroutine\ndef delete(self):\n    raise HTTPError(int(http.client.METHOD_NOT_ALLOWED))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def mul(self, const):\n    self.dataset.y = self.dataset.y * const", "buggy_source_code": "def mul(self, const):\n    self.dataset.y = const * self.dataset.y", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(params=[key for key in tree_params().keys()])\ndef tree(tree_params, make_tree, request):\n    return make_tree(*tree_params[request.param])", "buggy_source_code": "@pytest.fixture(params=[key for key in TREE_PARAMS.keys()])\ndef tree(make_tree, request):\n    return make_tree(*TREE_PARAMS[request.param])", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(params=[key for key in branch_params().keys()])\ndef branch(branch_params, make_branch, request):\n    return make_branch(*branch_params[request.param])", "buggy_source_code": "@pytest.fixture(params=[key for key in BRANCH_PARAMS.keys()])\ndef branch(make_branch, request):\n    return make_branch(*BRANCH_PARAMS[request.param])", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture\ndef all_trees(tree_params, make_tree):\n    return {k: make_tree(*v) for (k, v) in tree_params.iteritems()}", "buggy_source_code": "@pytest.fixture\ndef all_trees(make_tree):\n    return {k: make_tree(*v) for (k, v) in TREE_PARAMS.iteritems()}", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_pic_async(self, done, text=None):\n    threading.Timer(20, self._doGetPicAsync, [done, text]).start()", "buggy_source_code": "def get_pic_async(self, done, text=None):\n    threading.Timer(3, self._doGetPicAsync, [done, text]).start()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef inc_gauss_count(self):\n    return int((config.max_gauss_count - config.initial_gauss_count) / config.max_iter_inc)", "buggy_source_code": "@property\ndef inc_gauss_count(self):\n    return int((self.max_gauss_count - self.initial_gauss_count) / self.max_iter_inc)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def sources_are_suffix(sources, suffix):\n    return len(sources) > 0 and sources[0].endswith('.' + suffix)", "buggy_source_code": "def sources_are_suffix(sources, suffix):\n    for source in sources:\n        if source.endswith('.' + suffix):\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def TemplateRefreshMaterializedView(self):\n    return Template('REFRESH MATERIALIZED VIEW #view_name#\\n--CONCURRENTLY\\n--WITH NO DATA\\n')", "buggy_source_code": "def TemplateRefreshMaterializedView(self):\n    return Template('REFRESH MATERIALIZED VIEW\\n--CONCURRENTLY\\n#view_name#\\n--WITH NO DATA\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_account_subscriptions_for_marketplace(self, account_id: str, marketplace: str) -> dict:\n    response = self._request(method='get', path=f'/v1/accounts/{account_id}/marketplace/{marketplace}/subscriptions')\n    return response.json()", "buggy_source_code": "def get_account_subscriptions_for_marketplace(self, account_id: str, marketplace: str) -> dict:\n    response = self._request(method='get', path=f'v1/accounts/{account_id}/marketplace/{marketplace}/subscriptions')\n    return response.json()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef num_input_frames(self):\n    return 4", "buggy_source_code": "@property\ndef num_input_frames(self):\n    return 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef num_target_frames(self):\n    return 1", "buggy_source_code": "@property\ndef num_target_frames(self):\n    return 3", "edit_actions": ["update-node"]}
{"fixed_source_code": "def UpdateMLPname(weight_precip, weight_shallow, r_str):\n    if weight_precip:\n        r_str = r_str + '_wpr'\n    if weight_shallow:\n        r_str = r_str + '_wsh'\n    r_str = r_str + '_v3'", "buggy_source_code": "def UpdateMLPname(weight_precip, weight_shallow, r_str):\n    if weight_precip:\n        r_str = r_str + '_wpr'\n    if weight_shallow:\n        r_str = r_str + '_wsh'\n    r_str = r_str + '_v3'\n    return r_str", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def mozFirefoxIsRunning():\n    cmd2exec = 'ps auxw | grep -i firefox | grep -v grep | wc -l'\n    cmdOutput = int(subprocess.check_output(cmd2exec, shell=True).decode('utf-8'))\n    return 1 if cmdOutput > 0 else 0", "buggy_source_code": "def mozFirefoxIsRunning():\n    cmd2exec = 'ps auxw | grep -v firefox-trunk | grep -i firefox | grep -v grep | wc -l'\n    cmdOutput = int(subprocess.check_output(cmd2exec, shell=True).decode('utf-8'))\n    return 1 if cmdOutput > 0 else 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef hs_color(self):\n    return color_util.color_RGB_to_hsv(*self._lamp.state()['rgb'])", "buggy_source_code": "@property\ndef hs_color(self):\n    return color_util.color_RGB_to_hs(*self._lamp.state()['rgb'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def GET(self):\n    web.header('Content-Type', 'text/css', unique=True)\n    return highlighting.get_stylesheet()", "buggy_source_code": "def GET(self):\n    web.header('Content-Type', 'text/css; charset=utf-8', unique=True)\n    return highlighting.get_stylesheet()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def byte_compile():\n    os.system(options['emacs'] + ' --batch' + ' --eval \"(byte-compile-file \\\\\"' + options['dest'] + '\\\\\")\\'')", "buggy_source_code": "def byte_compile():\n    os.system(options['emacs'] + ' --batch' + ' --eval \"(byte-compile-file \\\\\"' + options['dest'] + '\\\\\")\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _respawn_action(self, service_id):\n    LOG.error(_LE('Respawning %(service)s for uuid %(uuid)s'), {'service': service_id.service, 'uuid': service_id.uuid})\n    self._monitored_processes[service_id].enable()", "buggy_source_code": "def _respawn_action(self, service_id):\n    LOG.warning(_LW('Respawning %(service)s for uuid %(uuid)s'), {'service': service_id.service, 'uuid': service_id.uuid})\n    self._monitored_processes[service_id].enable()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def fix(self, report, params):\n    obj_name = report.node().name()\n    cmds.polyMoveVertex(obj_name, ch=1)\n    return True", "buggy_source_code": "def fix(self, report, params):\n    obj_name = report.node().name()\n    cmds.polyMoveVertex(obj_name, ch=0)\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef waveform(self):\n    r1 = self.reg_base + SweepGenerator._REG_CONFIG\n    return self._instr._accessor_get(r, from_reg_unsigned(0, 2))", "buggy_source_code": "@property\ndef waveform(self):\n    r = self.reg_base + SweepGenerator._REG_CONFIG\n    return self._instr._accessor_get(r, from_reg_unsigned(0, 2))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pg.production('_names : _names DOT NAME')\ndef _names(p):\n    return p[0] + [p[2].getstr()]", "buggy_source_code": "@pg.production('_names : _names DOT_NAME')\ndef _names(p):\n    return p[0] + [p[1].getstr()[1:]]", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pg.production('dot_expr : expr DOT NAME')\ndef dot_expr(p):\n    return [Symbol('getattr'), p[0], p[2].getstr()]", "buggy_source_code": "@pg.production('dot_expr : expr DOT_NAME')\ndef dot_expr(p):\n    return [Symbol('getattr'), p[0], p[1].getstr()[1:]]", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.yield_fixture\ndef store(self, db_name):\n    conn = pymongo.MongoClient()\n    yield MongoStore(conn[db_name], 'simplekv-tests')\n    conn.drop_database(self.db_name)", "buggy_source_code": "@pytest.yield_fixture\ndef store(self, db_name):\n    conn = pymongo.MongoClient()\n    yield MongoStore(conn[db_name], 'simplekv-tests')\n    conn.drop_database(db_name)", "edit_actions": ["move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def taken(self):\n    if self.datetaken:\n        return self.datetaken\n    return datetime.now()", "buggy_source_code": "def taken(self):\n    if self.datetaken:\n        return self.datetaken\n    return timezone.now()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@mock.patch('mantid.plots.plotfunctions.errorbar')\ndef test_plot_workspace_errors(self, error_bar):\n    self.view.plot_workspace_errors(self.plot_name, self.mock_workspace)\n    error_bar.assert_called_once()", "buggy_source_code": "@mock.patch('mantid.plots.plotfunctions.errorbar')\ndef test_plot_workspace_errors(self, error_bar):\n    self.view.plot_workspace_errors(self.plot_name, self.mock_workspace)\n    self.assertEquals(error_bar.call_count, 1)", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@mock.patch('mantid.plots.plotfunctions.plot')\ndef test_plot_workspace(self, plot):\n    self.view.plot_workspace(self.plot_name, self.mock_workspace)\n    plot.assert_called_once()", "buggy_source_code": "@mock.patch('mantid.plots.plotfunctions.plot')\ndef test_plot_workspace(self, plot):\n    self.view.plot_workspace(self.plot_name, self.mock_workspace)\n    self.assertEquals(plot.call_count, 1)", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def compile(self):\n    return 'console.log(%s)' % ', '.join((value for value in self.values))", "buggy_source_code": "def compile(self):\n    return 'console.log((%s).value)' % ', '.join((expr for expr in self.values))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef redis_paused_queues(cls):\n    return {str(q) for q in context.connections.redis.smembers(cls.redis_key_paused_queues())}", "buggy_source_code": "@classmethod\ndef redis_paused_queues(cls):\n    return {q.decode('utf-8') for q in context.connections.redis.smembers(cls.redis_key_paused_queues())}", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _get_order(self, cr, uid, ids, context=None):\n    return super(self, sale_order)._get_order(cr, uid, ids, context=context)", "buggy_source_code": "def _get_order(self, cr, uid, ids, context=None):\n    return super(sale_order, self)._get_order(cr, uid, ids, context=context)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def getTilt(self):\n    return self.sensors[0]", "buggy_source_code": "def getTilt(self):\n    return self.sensors[2]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __setitem__(self, key, value):\n    super().__setitem__(key, self._match_schema(key, value))", "buggy_source_code": "def __setitem__(self, key, value):\n    super().__setitem__(key, self._cast(key, value))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@flapp.route('/api/media/sources/search/<str>')\n@flask_login.login_required\ndef media_search(search_str):\n    return json.dumps(mc.mediaList(name_like=search_str))", "buggy_source_code": "@flapp.route('/api/media/sources/search/<search_str>')\n@flask_login.login_required\ndef media_search(search_str):\n    return json.dumps(mc.mediaList(name_like=search_str))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate_tearDownClass():\n    if at_exit_set:\n        raise RuntimeError(\"tearDownClass does not calls the super's tearDownClass in these classes: \" + str(at_exit_set) + '\\nIf you see the exception, with another exception please do not report this one!If you are changing tempest code, make sure you', \"are calling the super class's tearDownClass!\")", "buggy_source_code": "def validate_tearDownClass():\n    if at_exit_set:\n        raise RuntimeError(\"tearDownClass does not call the super's tearDownClass in these classes: \" + str(at_exit_set) + \"\\nIf you see the exception, with another exception please do not report this one! If you are changing tempest code, make sure you are calling the super class's tearDownClass!\")", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def liouvillian(self):\n    hamiltonian = self.hamiltonian\n    lindblad = self.lindblad()\n    hamiltonian_superoperator = -1j * spre(hamiltonian) + 1j * spost(hamiltonian)\n    liouv = lindblad + hamiltonian_superoperator\n    return liouv", "buggy_source_code": "def liouvillian(self):\n    hamiltonian = self.hamiltonian\n    lindblad = self.lindbladian()\n    hamiltonian_superoperator = -1j * spre(hamiltonian) + 1j * spost(hamiltonian)\n    liouv = lindblad + hamiltonian_superoperator\n    return liouv", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _define_decompositions(self):\n    raise NotImplementedError('No decomposition rules defined for ', self.name)", "buggy_source_code": "def _define_decompositions(self):\n    raise NotImplementedError('No decomposition rules defined for %s' % self.name)", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def restart():\n    with cd(env.gandalf_path):\n        run('tar -xzf dist.tar.gz')\n    run('circusctl restart gandalf-webserver')", "buggy_source_code": "def restart():\n    with cd(env.gandalf_path):\n        run('tar -xzf dist.tar.gz')\n    run('circusctl restart gandalf-web')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_cyclic_classes(self, return_values):\n    if not self.is_irreducible:\n        raise NotImplementedError('Not defined for a reducible Markov chain')\n    else:\n        return self.digraph.cyclic_components(return_labels=return_values)", "buggy_source_code": "def get_cyclic_classes(self, return_values):\n    if not self.is_irreducible:\n        raise NotImplementedError('Not defined for a reducible Markov chain')\n    else:\n        return self.digraph.get_cyclic_components(return_labels=return_values)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_recurrent_classes(self, return_values):\n    return self.digraph.sink_strongly_connected_components(return_labels=return_values)", "buggy_source_code": "def get_recurrent_classes(self, return_values):\n    return self.digraph.get_sink_strongly_connected_components(return_labels=return_values)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_avail_phymem(self):\n    x = psutil.avail_phymem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, long))\n    self.assertTrue(x > 0)", "buggy_source_code": "def test_avail_phymem(self):\n    x = psutil.avail_phymem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, int))\n    self.assertTrue(x > 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_used_virtmem(self):\n    x = psutil.used_virtmem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, long))\n    self.assertTrue(x >= 0)", "buggy_source_code": "def test_used_virtmem(self):\n    x = psutil.used_virtmem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, int))\n    self.assertTrue(x >= 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_TOTAL_PHYMEM(self):\n    x = psutil.TOTAL_PHYMEM\n    self.assertTrue(isinstance(x, int) or isinstance(x, long))\n    self.assertTrue(x > 0)", "buggy_source_code": "def test_TOTAL_PHYMEM(self):\n    x = psutil.TOTAL_PHYMEM\n    self.assertTrue(isinstance(x, int) or isinstance(x, int))\n    self.assertTrue(x > 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_total_virtmem(self):\n    x = psutil.total_virtmem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, long))\n    self.assertTrue(x >= 0)", "buggy_source_code": "def test_total_virtmem(self):\n    x = psutil.total_virtmem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, int))\n    self.assertTrue(x >= 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_cached_mem(self):\n    x = psutil.cached_mem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, long))\n    self.assertTrue(x >= 0)", "buggy_source_code": "def test_cached_mem(self):\n    x = psutil.cached_mem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, int))\n    self.assertTrue(x >= 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_used_phymem(self):\n    x = psutil.used_phymem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, long))\n    self.assertTrue(x > 0)", "buggy_source_code": "def test_used_phymem(self):\n    x = psutil.used_phymem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, int))\n    self.assertTrue(x > 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_avail_virtmem(self):\n    x = psutil.avail_virtmem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, long))\n    self.assertTrue(x >= 0)", "buggy_source_code": "def test_avail_virtmem(self):\n    x = psutil.avail_virtmem()\n    self.assertTrue(isinstance(x, int) or isinstance(x, int))\n    self.assertTrue(x >= 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_section():\n    assert massage_args(args(['--section', 'a']), students)['students'] == students['section-a']", "buggy_source_code": "def test_section():\n    assert get_students_from_args(**args(['--section', 'a']), _all_students=students) == students['section-a']", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_record():\n    assert massage_args(args(['--record', 'hw4']), students)['record'] == ['hw4']", "buggy_source_code": "def test_record():\n    assert get_assignments_from_args(**args(['--record', 'hw4'])) == ['hw4']", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def args(arglist):\n    return vars(get_args().parse_args(args=arglist))", "buggy_source_code": "def args(arglist):\n    return vars(build_argparser().parse_args(args=arglist))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_templates_dirs(self):\n    return filter(None, [self.env.get_templates_dir(), pkg_resources.resource_filename('trac', 'templates'), self.shared_templates_dir])", "buggy_source_code": "def get_templates_dirs(self):\n    return filter(None, [self.env.get_templates_dir(), self.shared_templates_dir, pkg_resources.resource_filename('trac', 'templates')])", "edit_actions": ["move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def set_matterhorn(self, enabled=False):\n    self.matterhorn = enabled\n    self.plugman.set_plugin_option(self.CATEGORY, self.get_config_name(), 'Matterhorn', str(self.matterhorn))", "buggy_source_code": "def set_matterhorn(self, state):\n    self.matterhorn = state\n    self.plugman.set_plugin_option(self.CATEGORY, self.get_config_name(), 'Matterhorn', str(self.matterhorn))", "edit_actions": ["update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def validate_retraction_state(value):\n    acceptable_states = [Retraction.PENDING, Retraction.RETRACTED, Retraction.CANCELLED]\n    if value not in acceptable_states:\n        raise ValidationValueError\n    return True", "buggy_source_code": "def validate_retraction_state(value):\n    acceptable_states = [Retraction.PENDING, Retraction.RETRACTED, Retraction.CANCELLED]\n    if value not in acceptable_states:\n        raise ValidationValueError('Invalid retraction state assignment.')\n    return True", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __command_search_paths():\n    paths = ['/usr/local/bin', '/usr/bin/', '/bin', '/sbin', '/usr/local/visit', '/Applications/VisIt.app/Contents/Resources/bin']\n    return paths", "buggy_source_code": "def __command_search_paths():\n    paths = ['/usr/local/bin', '/usr/bin/', '/bin', '/sbin', '/usr/local/visit/bin', '/Applications/VisIt.app/Contents/Resources/bin']\n    return paths", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test09_Leaflet_shp_pnt_simple(self):\n    project = QgsProject.instance()\n    project.read(QFileInfo('../test_data/shp_point_simple.qgs'))\n    self.dialog.leaflet.click()\n    self.dialog.buttonExport.click()", "buggy_source_code": "def test09_Leaflet_shp_pnt_simple(self):\n    project = QgsProject.instance()\n    project = open('../test_data/shp_point_simpleX.qgs')\n    self.dialog.leaflet.click()\n    self.dialog.buttonExport.click()", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_dependencies(self, name, version):\n    pkg_key = '%s-%s' % (name, version)\n    return Spec.from_line(self._contents[pkg_key])", "buggy_source_code": "def get_dependencies(self, name, version):\n    pkg_key = '%s-%s' % (name, version)\n    return map(Spec.from_line, self._contents[pkg_key])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def test_1(self):\n    self.assertEqual(determine_perimeter(TEST_MAP), 16)", "buggy_source_code": "def test_1(self):\n    s = Solution()\n    self.assertEqual(s.islandPerimeter(TEST_MAP), 16)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def test_playlist_unlisted(self):\n    ret = route_caller(youtube.Playlist, 'PLCnUnV3yCIYt_cgn_1UIU1w2YQ_TfFa6L')\n    self.assertGreaterEqual(len(ret), 30)", "buggy_source_code": "def test_playlist_unlisted(self):\n    ret = route_caller(youtube.Playlist, 'PLCnUnV3yCIYt_cgn_1UIU1w2YQ_TfFa6L')\n    self.assertGreaterEqual(len(ret), 25)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _compile_regex(self, word):\n    self.regex = re.compile('((^| ){0}(| ))|({0} )|{0}'.format(word), flags=re.IGNORECASE)\n    return self.regex", "buggy_source_code": "def _compile_regex(self, word):\n    self.regex = re.compile('((^| )((?<!\\\\w){0}(?!\\\\w))(| ))|(((?<!\\\\w){0}(?!\\\\w)) )|((?<!\\\\w){0}(?!\\\\w))'.format(word), flags=re.IGNORECASE)\n    return self.regex", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef version(self):\n    import version\n    return version.short_version", "buggy_source_code": "@property\ndef version(self):\n    from . import version\n    return version.short_version", "edit_actions": ["insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@task\ndef reset_account():\n    with cd('/home/cozy/cozy-setup'):\n        cozydo('cozy-monitor script home cleanuser')\n    print(green('Current account deleted.'))", "buggy_source_code": "@task\ndef reset_account():\n    with cd('ls /usr/local/cozy/apps/home/home/cozy-home/'):\n        sudo('coffee commands cleanuser')\n    print(green('Current account deleted.'))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def call(self, node_token):\n    node_token.action = 'redirect'\n    node_token.link = 'new_person.MakeContact:next:'\n    node_token.out = node_token.data", "buggy_source_code": "def call(self, node_token):\n    link_data = node_token['main'].url_encode()\n    node_token.action = 'redirect'\n    node_token.link = 'new_person.MakeContact:next:%s' % link_data", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def call(self, node_token):\n    data = dict(__message='Enter details')\n    self['main'].show(node_token, data)", "buggy_source_code": "def call(self, node_token):\n    data = node_token.get_node_data().data\n    data['__message'] = 'Enter details'\n    self['main'].show(node_token, data)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def entered_text(self, *args, **kw):\n    res = super(EdgeWidget, self).entered_text(*args, **kw)\n    self.node.value.update_from_widget_text()\n    return res", "buggy_source_code": "def entered_text(self, *args, **kw):\n    res = super(EdgeWidget, self).entered_text(*args, **kw)\n    self.edge.value.update_from_widget_text()\n    return res", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_user_stats(user_id):\n    user_stats = {}\n    user_stats['feedback'] = stats_services.get_feedback_items_for_user(user_id)\n    return user_stats", "buggy_source_code": "def get_user_stats(user_id):\n    user_stats = {}\n    user_stats['feedback'] = stats_domain.FeedbackItem.get_feedback_items_for_user(user_id)\n    return user_stats", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def verRevNotesRx(s):\n    return re.compile('^\\\\w\\\\S*\\\\s+\\\\(\\\\d+\\\\)\\\\s+\\\\w+\\\\s+' + s + '$')", "buggy_source_code": "def verRevNotesRx(s):\n    return re.compile('^\\\\w\\\\S*\\\\s+\\\\(\\\\d+\\\\)\\\\s+[1-9][0-9]*\\\\w+\\\\s+' + s + '$')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    return render_template('bootshell.htm')", "buggy_source_code": "@app.route('/')\ndef index():\n    return render_template('index.html')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_resource_limits(self, account, quotas):\n    quota = 'GrpTRESMins=cpu=%d,gres/gpu=%d,mem=%d' % (quotas.cpu, quotas.gpu, quotas.ram)\n    return self._execute_command(['modify', 'account', account, 'set', quota])", "buggy_source_code": "def set_resource_limits(self, account, quotas):\n    quota = 'GrpTRES=cpu=%d,gres/gpu=%d,mem=%d' % (quotas.cpu, quotas.gpu, quotas.ram)\n    return self._execute_command(['modify', 'account', account, 'set', quota])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def update_winamp_volume(self):\n    winamp_volume = int(self.base_volume * self.current_song_volume)\n    winamp_volume = min(max(winamp_volume, 0), 255)\n    self.winampplayer.setVolume(winamp_volume)", "buggy_source_code": "def update_winamp_volume(self):\n    winamp_volume = int(self.base_volume * self.current_song_volume)\n    winamp_volume = min(max(winamp_volume, 0), 255)\n    self.winamp.setVolume(winamp_volume)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def disabled_for_browser(self, browser):\n    return not browser.can_filter_albums() or browser == 'Playlists'", "buggy_source_code": "def disabled_for_browser(self, browser):\n    return not browser.can_filter('album') or isinstance(browser, PlaylistsBrowser)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __changed(self, entry, section, name):\n    config.set(section, name, entry.get_text())\n    player.playlist.volume = player.playlist.volume", "buggy_source_code": "def __changed(self, adj, section, name):\n    config.set(section, name, str(adj.get_value()))\n    player.playlist.volume = player.playlist.volume", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node"]}
{"fixed_source_code": "def load_license():\n    with open('license.rst') as f:\n        return f.read()", "buggy_source_code": "def load_license():\n    with open('LICENSE.rst') as f:\n        return f.read()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def BuildExponential(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['half_light_radius', 'scale_radius'], [])", "buggy_source_code": "def BuildExponential(config, input_cat):\n    return galsim.BuildSimple(config, input_cat, [], ['half_light_radius', 'scale_radius'], ['flux'])", "edit_actions": ["insert-node"]}
{"fixed_source_code": "@on_trait_change('item.object.name')\ndef _name_modified(self, name):\n    self.item.title = name", "buggy_source_code": "@on_trait_change('item:object:name')\ndef _name_modified(self, name):\n    self.item.title = name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_no_ocb_lat(self):\n    self.vdata.ocb_lat = np.nan\n    with self.assertRaisesRegexp(ValueError, 'OCB coordinates required'):\n        self.vdata.scale_vector()", "buggy_source_code": "def test_no_ocb_lat(self):\n    self.vdata.ocb_lat = np.nan\n    with self.assertRaisesRegex(ValueError, 'OCB coordinates required'):\n        self.vdata.scale_vector()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_bad_calc_vec_sign_direction(self):\n    self.vdata.set_ocb(self.ocb, None)\n    with self.assertRaisesRegexp(ValueError, 'must set at least one direction'):\n        self.vdata.calc_ocb_vec_sign()", "buggy_source_code": "def test_bad_calc_vec_sign_direction(self):\n    self.vdata.set_ocb(self.ocb, None)\n    with self.assertRaisesRegex(ValueError, 'must set at least one direction'):\n        self.vdata.calc_ocb_vec_sign()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_no_ocb_mlt(self):\n    self.vdata.ocb_mlt = np.nan\n    with self.assertRaisesRegexp(ValueError, 'OCB coordinates required'):\n        self.vdata.scale_vector()", "buggy_source_code": "def test_no_ocb_mlt(self):\n    self.vdata.ocb_mlt = np.nan\n    with self.assertRaisesRegex(ValueError, 'OCB coordinates required'):\n        self.vdata.scale_vector()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def push_message(self, message: Message) -> NoReturn:\n    heapqueue.heappush(self.messages, message)", "buggy_source_code": "def push_message(self, message: Message) -> NoReturn:\n    self.message_prioritizer.push(self.messages, message)", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def parse_env_config(config, env_name):\n    all_env = get(config, 'app.all_environments', {})\n    env = get(config, 'app.environments.' + env_name, {})\n    return merge_dict(all_env, env)", "buggy_source_code": "def parse_env_config(config, env_name):\n    all_env = get(config, 'app.all_environments', {})\n    env = get(config, 'app.environments.' + str(env_name), {})\n    return merge_dict(all_env, env)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def delete_application(self):\n    out('Deleting application ' + self.app_name)\n    self.ebs.delete_application(self.app_name, terminate_env_by_force=True)", "buggy_source_code": "def delete_application(self):\n    out('Deleting application ' + str(self.app_name))\n    self.ebs.delete_application(self.app_name, terminate_env_by_force=True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _imm_is_persist(imm):\n    dd = object.__getattribute__(imm, '__dict__')\n    return '_neuropythy_immutable_is_init' not in dd and '_neuropythy_immutable_is_trans' not in dd", "buggy_source_code": "def _imm_is_persist(imm):\n    dd = object.__getattribute__(imm, '__dict__')\n    return '_pimms_immutable_is_init' not in dd and '_pimms_immutable_is_trans' not in dd", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _imm_const_data(imm):\n    return type(imm)._neuropythy_immutable_data_['consts']", "buggy_source_code": "def _imm_const_data(imm):\n    return type(imm)._pimms_immutable_data_['consts']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _imm_value_data(imm):\n    return type(imm)._neuropythy_immutable_data_['values']", "buggy_source_code": "def _imm_value_data(imm):\n    return type(imm)._pimms_immutable_data_['values']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _imm_is_trans(imm):\n    dd = object.__getattribute__(imm, '__dict__')\n    return '_neuropythy_immutable_is_trans' in dd", "buggy_source_code": "def _imm_is_trans(imm):\n    dd = object.__getattribute__(imm, '__dict__')\n    return '_pimms_immutable_is_trans' in dd", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _imm_is_init(imm):\n    dd = object.__getattribute__(imm, '__dict__')\n    return '_neuropythy_immutable_is_init' in dd", "buggy_source_code": "def _imm_is_init(imm):\n    dd = object.__getattribute__(imm, '__dict__')\n    return '_pimms_immutable_is_init' in dd", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _imm_check_data(imm):\n    return type(imm)._neuropythy_immutable_data_['checks']", "buggy_source_code": "def _imm_check_data(imm):\n    return type(imm)._pimms_immutable_data_['checks']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _imm_param_data(imm):\n    return type(imm)._neuropythy_immutable_data_['params']", "buggy_source_code": "def _imm_param_data(imm):\n    return type(imm)._pimms_immutable_data_['params']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_imm(obj):\n    return hasattr(type(obj), '_neuropythy_immutable_data_')", "buggy_source_code": "def is_imm(obj):\n    return hasattr(type(obj), '_pimms_immutable_data_')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_imm_type(cls):\n    return hasattr(cls, '_neuropythy_immutable_data_')", "buggy_source_code": "def is_imm_type(cls):\n    return hasattr(cls, '_pimms_immutable_data_')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def load_pytorch_model_in_tf2_model(tf_model, pt_model, tf_inputs=DUMMY_INPUTS, allow_missing_keys=False):\n    pt_state_dict = pt_model.state_dict()\n    return load_pytorch_weights_in_tf2_model(tf_model, pt_state_dict, tf_inputs=tf_inputs, allow_missing_keys=allow_missing_keys)", "buggy_source_code": "def load_pytorch_model_in_tf2_model(tf_model, pt_model, tf_inputs=None, allow_missing_keys=False):\n    pt_state_dict = pt_model.state_dict()\n    return load_pytorch_weights_in_tf2_model(tf_model, pt_state_dict, tf_inputs=tf_inputs, allow_missing_keys=allow_missing_keys)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def handleargv(self, argv):\n    (success, filename, errormessage) = self.argvhandler.handle(argv)\n    if not success:\n        raise Exception(errormessage)\n    return filename", "buggy_source_code": "def handleargv(self, argv):\n    (success, filename, errormessage) = self.argvhandler.handle(argv)\n    if not success:\n        raise MainError(errormessage)\n    return filename", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main(self, argv):\n    try:\n        self.trymain(argv)\n        return 0\n    except Exception as e:\n        self.stdout.write(str(e))\n        return 1", "buggy_source_code": "def main(self, argv):\n    try:\n        self.trymain(argv)\n        return 0\n    except MainError as me:\n        self.stdout.write(str(me))\n        return 1", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_should_pass_std_cookie_test(self):\n    self.assert_pass_opera_cookie_test('http://jsbin.com/pohuvijoro/1/', 'Set 1st party cookie')", "buggy_source_code": "def test_should_pass_std_cookie_test(self):\n    self.assert_pass_opera_cookie_test('http://jsbin.com/soluqi/1/', 'Set 1st party cookie')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _validate_config(self):\n    if isinstance(self.evolve_all, str):\n        self.evolve_all = [str(pokemon_name) for pokemon_name in self.evolve_all.split(',')]", "buggy_source_code": "def _validate_config(self):\n    if isinstance(self.evolve_all, basestring):\n        self.evolve_all = [str(pokemon_name) for pokemon_name in self.evolve_all.split(',')]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test(self, *args):\n    super(SVMCVMethod, self).test(*args, batch=False)", "buggy_source_code": "def test(self, test_mol_lists_dict, batch=False):\n    return super(SVMCVMethod, self).test(test_mol_lists_dict, batch=batch)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@route('/blablabla/')\ndef list_items():\n    return render('list', items=Key.objects())", "buggy_source_code": "@route('/list')\ndef list_items():\n    return render('list', items=Key.objects())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def with_user_vote(self, user):\n    return self.extra(select={'user_vote': 'SELECT value FROM brainstorm_vote WHERE idea_id=ideas_idea.id AND user_id=%s'}, select_params=[user.id])", "buggy_source_code": "def with_user_vote(self, user):\n    return self.extra(select={'user_vote': 'SELECT value FROM brainstorm_vote WHERE idea_id=brainstorm_idea.id AND user_id=%s'}, select_params=[user.id])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ignore(self, send, nick):\n    if nick not in self.ignored:\n        self.ignored.append(nick)\n        send('Now igoring %s.' % nick)", "buggy_source_code": "def ignore(self, send, nick):\n    if nick not in self.ignored:\n        self.ignored.append(nick)\n        send('Now ignoring %s (not Igoring).' % nick)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def build_extensions(self):\n    num_jobs = int(os.environ.get('CUPY_NUM_BUILD_JOBS', '1'))\n    if num_jobs > 1:\n        self.parallel = num_jobs\n    super().build_extensions()", "buggy_source_code": "def build_extensions(self):\n    num_jobs = int(os.environ.get('CUPY_NUM_BUILD_JOBS', '4'))\n    if num_jobs > 1:\n        self.parallel = num_jobs\n    super().build_extensions()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def command(self, command):\n    self._conn.command('[con_id=\"{}\"] {}'.format(self.id, command))", "buggy_source_code": "def command(self, command):\n    return self._conn.command('[con_id=\"{}\"] {}'.format(self.id, command))", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def polygon(pointList):\n    return DesignScript.Geometry.Polygon.ByPoints(pointList)", "buggy_source_code": "def polygon(point_list):\n    return DesignScript.Geometry.Polygon.ByPoints(point_list)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_git_with_non_editable_unpacking():\n    reset_env()\n    result = run_pip('install', '--global-option=--version', local_checkout('git+http://github.com/pypa/pip-test-package.git@0.1.2#egg=pip-test-package'), expect_error=True)\n    assert '0.1.2\\n' in result.stdout", "buggy_source_code": "def test_git_with_non_editable_unpacking():\n    reset_env()\n    result = run_pip('install', '--global-option=--version', local_checkout('git+http://github.com/pypa/pip-test-package.git@0.1.2#egg=pip-test-package'), expect_error=True)\n    assert '0.1.2' in result.stdout", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_exif_keypairs(plugin_image):\n    if plugin_image:\n        return [keytag for keytag in (plugin_image.exifKeys() if OLD_API else plugin_image.exif_keys)]\n    else:\n        return False", "buggy_source_code": "def _get_exif_keypairs(plugin_image):\n    if plugin_image:\n        return [key for key in (plugin_image.exifKeys() if OLD_API else plugin_image.exif_keys)]\n    else:\n        return False", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def getblockcount(self):\n    return self.end_block", "buggy_source_code": "def getblockcount(self):\n    return self.end_block - 1", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def validate_urlname(link):\n    validator = RegexValidator(regex='meetup\\\\.com\\\\/\\\\w+(-\\\\w+)*\\\\/$', message='Does not conform to Meetup Url', code='invalid_url')\n    return validator(link)", "buggy_source_code": "def validate_urlname(link):\n    validator = RegexValidator(regex='meetup\\\\.com\\\\/\\\\w+(-\\\\w+)*\\\\/$', message=\"Url should be in form 'meetup.com/meetup-name/'\", code='invalid_url')\n    return validator(link)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate_meetup_exists(link):\n    looker = MeetupApiLookupAgent(link)\n    is_real = looker.is_real_meetup()\n    if not is_real:\n        raise ValidationError(\"That's not a meetup\")", "buggy_source_code": "def validate_meetup_exists(link):\n    if not MeetupApiLookupAgent(link).meetup_exists():\n        raise ValidationError('Meetup not found on meetup.com')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _url_save(self):\n    if SAVE_FULL_URL:\n        return self.url_full\n    else:\n        return self.path", "buggy_source_code": "def _url_save(self):\n    if SAVE_FULL_URL:\n        return self.url_full\n    else:\n        return self.url_rel", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _url_relative(self):\n    return self.path", "buggy_source_code": "def _url_relative(self):\n    return self.url_rel", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _url_full(self):\n    return u'%s' % url_join(MEDIA_URL, self.path)", "buggy_source_code": "def _url_full(self):\n    return u'%s' % url_join(MEDIA_URL, self.url_rel)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def complete_set(self):\n    return super(SoftDeleteManager, self).get_query_set()", "buggy_source_code": "def complete_set(self):\n    return super(SoftDeleteManager, self).get_queryset()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@contextmanager\ndef organisation_ctx(name):\n    original_organisation = SamPageObject.organisation_menu.current_organisation\n    SamPageObject.organisation_menu.current_organisation = name\n    yield\n    if original_organisation == 'Select an Organization':\n        return\n    SamPageObject.organisation_menu.current_organisation = original_organisation", "buggy_source_code": "@contextmanager\ndef organisation_ctx(name):\n    original_organisation = organisation_get()\n    organization_set(name)\n    with restore_url():\n        yield\n    if original_organisation == 'Select an Organization':\n        return\n    organization_set(original_organisation)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __call__(self):\n    result = show_quicksearch(self._suggest_my_files_and_folders)\n    if result:\n        (query, file_path) = result\n        self.pane.place_cursor_at(self.file_prefix + file_path)", "buggy_source_code": "def __call__(self):\n    result = show_quicksearch(self._suggest_my_files_and_folders)\n    if result:\n        (query, file_path) = result\n        self.pane.place_cursor_at(as_url(file_path))", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getPosition(self):\n    value = self.parameter_manager.get_constraint(self.parameterName)\n    (_, cons_value) = settings.geometry.map_to_internal_position(self.parameterName, value)\n    return cons_value", "buggy_source_code": "def getPosition(self):\n    value = self.parameter_manager.get_constraint(self.parameterName)\n    (_, cons_value) = settings.geometry.map_to_internal_position(self.parameterName, value)\n    return [cons_value]", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, interface, controller_name):\n    super(FrequencySynthesizer, self).__init__(interface, controller_name)", "buggy_source_code": "def __init__(self, interface, controller_name):\n    super(LMX2581, self).__init__(interface, controller_name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def vocalization_started(self):\n    scheme_eval_h(self.atomspace, '(State chat-state chat-talk)')", "buggy_source_code": "def vocalization_started(self):\n    scheme_eval_h(self.atomspace, '(State chat-state chat-start)')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def vocalization_ended(self):\n    scheme_eval_h(self.atomspace, '(State chat-state chat-listen)')", "buggy_source_code": "def vocalization_ended(self):\n    scheme_eval_h(self.atomspace, '(State chat-state chat-stop)')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def omdb():\n    run_omdb(API_KEY, 'data.json')\n    update_movie_db('moviecritic\\\\movies.json')", "buggy_source_code": "def omdb():\n    run_omdb(API_KEY, 'moviecritic\\\\data.json')\n    update_movie_db('moviecritic\\\\movies.json')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def render_to_kml(*args, **kwargs):\n    return HttpResponse(loader.render_to_string(*args, **kwargs), mimetype='application/vnd.google-earth.kml+xml kml')", "buggy_source_code": "def render_to_kml(*args, **kwargs):\n    return HttpResponse(loader.render_to_string(*args, **kwargs), mimetype='application/vnd.google-earth.kml+xml')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return ('Sitting #%s of %s' % self.seq_n, self.date)", "buggy_source_code": "def __repr__(self):\n    return 'Sitting #%(sitting_n)s of %(sitting_date)s' % {'sitting_n': self.seq_n, 'sitting_date': self.date}", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@decorators.singleton\ndef shared():\n    shared_config_dir = os.path.dirname(os.path.realpath(__file__))\n    return load_config(shared_config_dir, 'local')", "buggy_source_code": "@decorators.singleton\ndef shared():\n    shared_config_dir = os.path.dirname(os.path.realpath(__file__))\n    return load_config(shared_config_dir, 'shared')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init_local_config_at(path):\n    store.touch_file(path)\n    local_config = ''\n    write_config_file(path, local_config)\n    return True", "buggy_source_code": "def init_local_config_at(path):\n    store.touch_file(path)\n    local_config = yaml.safe_load('\\n    ') or {}\n    write_config_file(local_config, path)\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def init_shared_config_at(path):\n    store.touch_file(path)\n    shared_config = ''\n    write_config_file(path, shared_config)\n    return True", "buggy_source_code": "def init_shared_config_at(path):\n    store.touch_file(path)\n    shared_config = yaml.safe_load('\\n    ') or {}\n    write_config_file(shared_config, path)\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def set_persistence_visibility(self, persistence):\n    self.lbl_passphrase.set_visible(persistence)\n    self.entry_passphrase.set_visible(persistence)\n    self.btn_persistence_yes.set_active(persistence)\n    self.btn_persistence_no.set_active(not persistence)", "buggy_source_code": "def set_persistence_visibility(self, persistence):\n    self.passphrase_box.set_visible(persistence)\n    self.warning_area.set_visible(persistence)\n    self.btn_persistence_yes.set_active(persistence)\n    self.btn_persistence_no.set_active(not persistence)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, chardata):\n    self._chardata = chardata", "buggy_source_code": "def __init__(self, char):\n    self._char = char", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def base_statuseffects(self):\n    return self._chardata._base._statuseffects", "buggy_source_code": "def base_statuseffects(self):\n    return self._char._base._statuseffects", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef char(self):\n    return self._chardata._char", "buggy_source_code": "@property\ndef char(self):\n    return self._char._char", "edit_actions": ["update-node"]}
{"fixed_source_code": "def base_stats(self):\n    return self._chardata._base._stats", "buggy_source_code": "def base_stats(self):\n    return self._char._base._stats", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, chardata):\n    self._chardata = chardata\n    self._subparts = {}\n    self._attribs = {}\n    self._mesh = None", "buggy_source_code": "def __init__(self, char):\n    self._char = char\n    self._subparts = {}\n    self._attribs = {}\n    self._mesh = None", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, chardata):\n    self._chardata = chardata", "buggy_source_code": "def __init__(self, char):\n    self._char = char", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, chardata):\n    self._char = chardata\n    self = {}", "buggy_source_code": "def __init__(self, char):\n    self._char = char\n    self = {}", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, chardata):\n    self._chardata = chardata", "buggy_source_code": "def __init__(self, char):\n    self._char = char", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, chardata, slots):\n    self._chardata = chardata\n    self._slots = {}", "buggy_source_code": "def __init__(self, char, slots):\n    self._char = char\n    self._slots = {}", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@property\ndef base(self):\n    return self._chardata._base", "buggy_source_code": "@property\ndef base(self):\n    return self._char._base", "edit_actions": ["update-node"]}
{"fixed_source_code": "def visit(self, node):\n    raise NotImplementedError('Unreachable')", "buggy_source_code": "def visit(self, node):\n    raise NotImplementedError('This should have been overridden')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_key_binding(self, action_number):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    key_binding = self._get_key_binding(self._pointer, action_number, ep)\n    return key_binding", "buggy_source_code": "@g_error_handler\ndef get_key_binding(self, action_number, g_error_pointer=None):\n    key_binding = self._get_key_binding(self._pointer, action_number, g_error_pointer)\n    return key_binding", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_action_name(self, action_number):\n    error = _GError()\n    ep = POINTER(POINTER(_GError))(error)\n    name = self._get_action_name(self._pointer, action_number, ep)\n    return name", "buggy_source_code": "@g_error_handler\ndef get_action_name(self, action_number, g_error_pointer=None):\n    name = self._get_action_name(self._pointer, action_number, g_error_pointer)\n    return name", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_unrecognized_field_error(self):\n    fp = get_data_path('blast7_invalid_unrecognized_field')\n    with assertRaisesRegex(self, BLAST7FormatError, \"Unrecognized field.*\\\\('sallid'\\\\)\"):\n        _blast7_to_data_frame(fp)", "buggy_source_code": "def test_unrecognized_field_error(self):\n    fp = get_data_path('blast7_invalid_unrecognized_field')\n    with assertRaisesRegex(self, BLAST7FormatError, \"Unrecognized field \\\\(.*'sallid'\\\\)\"):\n        _blast7_to_data_frame(fp)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def relationship_types(self):\n    if not self.__relationship_types:\n        self.__labels = self.__client.relationship_types()\n    return self.__relationship_types", "buggy_source_code": "def relationship_types(self):\n    if not self.__relationship_types:\n        self.__relationship_types = self.__client.relationship_types()\n    return self.__relationship_types", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_sentences(self, summary):\n    return ['%s.' % m.strip(' .:') for m in re.split('(?<![.0-9])[:.](?=[ <\\\\Z])', summary)]", "buggy_source_code": "def get_sentences(self, summary):\n    return ['%s.' % m.strip(' .:') for m in re.split('(?<![.0-9])[:.](?=([ <]|\\\\Z))', summary)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getOutput(self, idx):\n    return self._thresholder.GetOutput()", "buggy_source_code": "def getOutput(self, idx):\n    return self._nbcLS.GetOutput()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Node: [%s] @ s = %.3f' % (self.id, self.scale)", "buggy_source_code": "def __repr__(self):\n    return 'Node: [%s] @ s = %.3f' % (self.id_, self.scale)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_id(self):\n    return self.id", "buggy_source_code": "def get_id(self):\n    return self.id_", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, lookup_id, attrs=None, choices=()):\n    self.lookup_id = lookup_id\n    super(ContentTypeSelect, self).__init__(attrs, choices)", "buggy_source_code": "def __init__(self, object_id, attrs=None, choices=()):\n    self.object_id = 'id_%s' % object_id\n    super(ContentTypeSelect, self).__init__(attrs, choices)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node"]}
{"fixed_source_code": "def __init__(self, name='', description='', ext=None):\n    self.name = name\n    self.description = description\n    self.ext = ext", "buggy_source_code": "def __init__(self, name='', description='', ext=None):\n    Output.__init__(self, name, description)\n    self.ext = ext", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def count_chunks(self, bytes_per_chunk):\n    return int(float(self.size) / float(bytes_per_chunk))", "buggy_source_code": "def count_chunks(self, bytes_per_chunk):\n    return math.ceil(float(self.size) / float(bytes_per_chunk))", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@RequireFile.cd\ndef Write(self, *args, **kwargs):\n    ROOT.TTree.Write(self, *args, **kwargs)", "buggy_source_code": "@RequireFile.cd\ndef Write(self, *args, **kwargs):\n    self.ROOT_base.Write(self, *args, **kwargs)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def save(self, *args, **kwargs):\n    self.abstract_html = creole_parser.parse(self.abstract)\n    super(Session, self).save(*args, **kwargs)", "buggy_source_code": "def save(self, *args, **kwargs):\n    self.abstract_html = creole_parser.parse(self.abstract)\n    super(Presentation, self).save(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.errorhandler(413)\ndef request_entity_too_large(error):\n    return ('File Too Large', 413)", "buggy_source_code": "@app.errorhandler(413)\ndef request_entity_too_large(error):\n    return (flask.render_template('413.html'), 413)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def remount_devices():\n    if 0 != os.system('adb remount'):\n        exit_with_msg(2)", "buggy_source_code": "def remount_devices(device_id):\n    if 0 != os.system('adb -s %s remount' % device_id):\n        exit_with_msg(2)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def root_devices():\n    if 0 != os.system('adb root'):\n        exit_with_msg(1)", "buggy_source_code": "def root_devices(device_id):\n    if 0 != os.system('adb -s %s root' % device_id):\n        exit_with_msg(1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_capability():\n    sc = tigetstr('sc')\n    t = Terminal()\n    eq_(t.save, sc)\n    eq_(t.save, sc)", "buggy_source_code": "def test_capability():\n    t = Terminal()\n    sc = tigetstr('sc')\n    eq_(t.save, sc)\n    eq_(t.save, sc)", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def GetExistingID(ester_id):\n    db_connection = db.connection()\n    entity = db_connection.get(\"SELECT property.entity_id, entity.entity_definition_keyname FROM property, entity, property_definition WHERE entity.id = property.entity_id AND property_definition.keyname = property.property_definition_keyname AND property_definition.dataproperty = 'ester-id' AND property.value_string = %s AND property.deleted IS NULL LIMIT 1\", ester_id)\n    if not entity:\n        return {}\n    return entity", "buggy_source_code": "def GetExistingID(ester_id):\n    db_connection = db.connection()\n    entity = db_connection.get(\"SELECT property.entity_id, entity.entity_definition_keyname FROM property, entity, property_definition WHERE entity.id = property.entity_id AND property_definition.keyname = property.property_definition_keyname AND property_definition.dataproperty = 'ester-id' AND property.value_string = %s AND property.deleted IS NULL AND entity.deleted IS NULL LIMIT 1\", ester_id)\n    if not entity:\n        return {}\n    return entity", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testSelfExe(self):\n    pid = os.getpid()\n    self.assertTrue(pid in fuser.fuser('/proc/%s/exe' % pid))", "buggy_source_code": "def testSelfExe(self):\n    pid = os.getpid()\n    with NamedTemporaryFile() as tempFile:\n        self.assertTrue(pid in fuser.fuser(tempFile.name))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tweet_age():\n    pic = take_picture(flip=True)\n    age = datetime.now() - BORN\n    message = 'I was born {days} days ago!'.format(age.days)\n    tweet_picture(pic, message)", "buggy_source_code": "def tweet_age():\n    pic = take_picture(flip=True)\n    age = datetime.now() - BORN\n    message = 'I was born {days} days ago!'.format(days=age.days)\n    tweet_picture(pic, message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def value_to_string(self, obj):\n    value = self._get_val_from_obj(obj)\n    return self.get_db_prep_value(value)", "buggy_source_code": "def value_to_string(self, obj):\n    value = self._get_val_from_obj(obj)\n    return self.get_prep_value(value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef checkJobUnique(query):\n    return BaseInterface.runUniqueQuery(query, 'Job ID not found in job table', 'Conflicting jobs found for this ID')", "buggy_source_code": "def checkJobUnique(self, query):\n    return self.runUniqueQuery(query, 'Job ID not found in job table', 'Conflicting jobs found for this ID')", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, bq_ops_dataset, query_batch_size=20000):\n    super().__init__()\n    self._query_batch_size = query_batch_size\n    self._first_element_processed = False\n    self._bq_ops_dataset = str(bq_ops_dataset)", "buggy_source_code": "def __init__(self, bq_ops_dataset, query_batch_size=20000):\n    super().__init__()\n    self._query_batch_size = query_batch_size\n    self._first_element_processed = False\n    self._bq_ops_dataset = bq_ops_dataset", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@check_verbosity\ndef err(self, msg, newline=True):\n    sys.stderr.write(msg + '\\n' if newline else '')", "buggy_source_code": "@check_verbosity\ndef err(self, msg, newline=True):\n    sys.stderr.write(msg + ('\\n' if newline else ''))", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def copy_expert(self, table, data_types):\n\n    def fn(cursor):\n        cursor.copy_expert(self.create_copy_from_query(table), self.create_copy_from_file(data_types))\n    return fn", "buggy_source_code": "def copy_expert(self, table, data_types):\n\n    def fn(cursor):\n        cursor.copy_expert(self._create_copy_from_query(table), self._create_copy_from_file(data_types))\n    return fn", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@inlineCallbacks\ndef test_receive_message_no_reply(self):\n    yield self.get_application(config={})\n    yield self.dispatch(self.mkmsg_in())\n    self.assertEqual([], self.get_dispatched_messages())", "buggy_source_code": "@inlineCallbacks\ndef test_receive_message_no_reply(self):\n    yield self.app_helper.get_application({})\n    yield self.app_helper.make_dispatch_inbound('Hello')\n    self.assertEqual([], self.app_helper.get_dispatched_outbound())", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return u'%s-%s' % (self.id, self.name)", "buggy_source_code": "def __unicode__(self):\n    return u'%s-%s %s' % (self.id, self.first_name, self.last_name)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "@staticmethod\ndef create_file_descriptor(content):\n    fp = io.BytesIO(content)\n    return fp", "buggy_source_code": "@staticmethod\ndef create_file_descriptor(content):\n    fp = cStringIO.StringIO(content)\n    return fp", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def reset(self):\n    self.rotor1.reset()\n    self.rotor2.reset()\n    self.rotor3.reset()", "buggy_source_code": "def reset(self):\n    self.leftRotor.reset()\n    self.midRotor.reset()\n    self.rightRotor.reset()", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def reset(self):\n    self.transitions = self.originalTransition\n    self.nbDecal = 0", "buggy_source_code": "def reset(self):\n    self.transTable = self.originalTransition\n    self.nbDecal = 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def toString(self):\n    return 'original : ' + str(self.originalTransition) + ' current : ' + str(self.transitions)", "buggy_source_code": "def toString(self):\n    subs = ''\n    for c in self.transTable:\n        subs += c\n    return subs", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def correspondance(self, letter):\n    return self.transitions[ALPHABET.index(letter)]", "buggy_source_code": "def correspondance(self, letter):\n    return self.transTable[ALPHABET.index(letter)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def shift(self):\n    self.nbDecal += 1\n    self.transitions.rotate(1)", "buggy_source_code": "def shift(self):\n    self.nbDecal += 1\n    self.transTable.rotate(1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getKey(self):\n    return 'Start positions : ' + self.rotor1.startPos + ', ' + self.rotor2.startPos + ', ' + self.rotor3.startPos", "buggy_source_code": "def getKey(self):\n    return 'Start positions : ' + self.leftRotor.startPos + ', ' + self.midRotor.startPos + ', ' + self.leftRotor.startPos", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def for_write(self, **hints):\n    language = get_language()\n    if language not in settings.HAYSTACK_CONNECTIONS:\n        return DEFAULT_ALIAS\n    return language", "buggy_source_code": "def for_write(self, **hints):\n    language = get_current_language()\n    if language not in settings.HAYSTACK_CONNECTIONS:\n        return DEFAULT_ALIAS\n    return language", "edit_actions": ["update-node"]}
{"fixed_source_code": "def for_read(self, **hints):\n    language = get_language()\n    if language not in settings.HAYSTACK_CONNECTIONS:\n        return DEFAULT_ALIAS\n    return language", "buggy_source_code": "def for_read(self, **hints):\n    language = get_current_language()\n    if language not in settings.HAYSTACK_CONNECTIONS:\n        return DEFAULT_ALIAS\n    return language", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate_batch_coa(self):\n    for item in self.items:\n        if item.batch_no:\n            item.certificate_of_analysis = frappe.db.get_value('Batch', item.batch_no, 'certificate_of_analysis')", "buggy_source_code": "def validate_batch_coa(self):\n    for item in self.items:\n        if item.coa_batch:\n            item.certificate_of_analysis = frappe.db.get_value('Batch', item.coa_batch, 'certificate_of_analysis')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_filesize(cipher_signature, mocker):\n    mocker.patch.object(request, 'headers')\n    request.head.return_value = {'content-length': '6796391'}\n    assert cipher_signature.streams.first().filesize == 6796391", "buggy_source_code": "def test_filesize(cipher_signature, mocker):\n    mocker.patch.object(request, 'head')\n    request.head.return_value = {'content-length': '6796391'}\n    assert cipher_signature.streams.first().filesize == 6796391", "edit_actions": ["update-node"]}
{"fixed_source_code": "def flatparam(self):\n    return self.logit", "buggy_source_code": "def flatparam(self):\n    return self.logits", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef validate(value, arg_name):\n    if not isinstance(value, bool):\n        raise TypeError('parameter value must be a list, got %r' % value)\n    return value", "buggy_source_code": "@staticmethod\ndef validate(value, arg_name):\n    if not isinstance(value, bool):\n        raise TypeError('parameter value must be a boolean, got %r' % value)\n    return value", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_gain_array(self):\n    error_tot = calc_total_error(DATA, error=ERROR, effective_gain=EFFGAIN)\n    assert_allclose(error_tot, np.sqrt(2.0) * ERROR)", "buggy_source_code": "def test_gain_array(self):\n    error_tot = calc_total_error(DATA, BKG_ERROR, EFFGAIN)\n    assert_allclose(error_tot, np.sqrt(2.0) * BKG_ERROR)", "edit_actions": ["update-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_gain_scalar(self):\n    error_tot = calc_total_error(DATA, error=ERROR, effective_gain=2.0)\n    assert_allclose(error_tot, np.sqrt(2.0) * ERROR)", "buggy_source_code": "def test_gain_scalar(self):\n    error_tot = calc_total_error(DATA, BKG_ERROR, 2.0)\n    assert_allclose(error_tot, np.sqrt(2.0) * BKG_ERROR)", "edit_actions": ["update-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def bounded(self, nodename):\n    return not unbounded(nodename)", "buggy_source_code": "def bounded(self, nodename):\n    return not self.unbounded(nodename)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@step(u'I press the button with the label \"([^\"]*)\"$')\ndef press_the_button_with_label(_step, buttonname):\n    button_css = 'button span.show-label'\n    elem = world.css_find(button_css).first\n    assert_equal(elem.text, buttonname)\n    elem.click()", "buggy_source_code": "@step(u'I press the button with the label \"([^\"]*)\"$')\ndef press_the_button_with_label(_step, buttonname):\n    button_css = 'button span.show-label'\n    elem = world.css_find(button_css).first\n    assert_equal(elem.text, buttonname)\n    world.css_click(button_css)", "edit_actions": ["update-node", "update-node", "insert-node"]}
{"fixed_source_code": "def copy(self, path, destination):\n    return NotImplementedError(\"SnakebiteClient in luigi doesn't implement copy\")", "buggy_source_code": "def copy(self, path, destination):\n    raise NotImplementedError(\"SnakebiteClient in luigi doesn't implement copy\")", "edit_actions": ["insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def put(self, local_path, destination):\n    return NotImplementedError(\"Snakebite doesn't implement put\")", "buggy_source_code": "def put(self, local_path, destination):\n    raise NotImplementedError(\"Snakebite doesn't implement put\")", "edit_actions": ["insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@callback\ndef action(self, user, channel, msg):\n    msg(user, channel, msg)", "buggy_source_code": "@callback\ndef action(self, user, channel, msg):\n    self.msg(user, channel, msg)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def ready_to_spawn(self):\n    self.state.set_spawned()", "buggy_source_code": "def ready_to_spawn(self):\n    self.state.set_spawned()\n    return False", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def fail(self, key, **kwargs):\n    message = self.default_error_messages[key]\n    message = message.format(**kwargs)\n    raise ValidationError(message)", "buggy_source_code": "def fail(self, key, **kwargs):\n    message = self.error_messages[key]\n    message = message.format(**kwargs)\n    raise ValidationError(message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_pending(sy, sm, sd):\n    return not has_started(sd, sm, sy)", "buggy_source_code": "def is_pending(sy, sm, sd):\n    return not has_started(sy, sm, sd)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def destroy(self):\n    self.set__auto_update(False)\n    gtk.Alignment.destroy(self)", "buggy_source_code": "def destroy(self):\n    self.set_auto_update(False)\n    gtk.Alignment.destroy(self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.vocab = {}\n    self.special_words = ['$CARDINAL$', '$DATE', '$UNKNOWN$']", "buggy_source_code": "def __init__(self):\n    self.vocab = {}\n    self.special_words = ['$CARDINAL$', '$DATE$', '$UNKNOWN$']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    a = 'Wherelives searching for ' + self.searchkey + 'on '\n    return a + str(self.hostlist)", "buggy_source_code": "def __str__(self):\n    a = 'Wherelives searching for ' + self.searchkey + ' on '\n    return a + str(self.hostlist)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef greenify(msg):\n    return Color.GREEN + msg + Color.NORMAL if not NO_COLOR else ''", "buggy_source_code": "@staticmethod\ndef greenify(msg):\n    return Color.GREEN + msg + Color.NORMAL if not NO_COLOR else msg", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef blueify(msg):\n    return Color.BLUE + msg + Color.NORMAL if not NO_COLOR else ''", "buggy_source_code": "@staticmethod\ndef blueify(msg):\n    return Color.BLUE + msg + Color.NORMAL if not NO_COLOR else msg", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def _IS_PARAMETER(o: Any) -> bool:\n    return isinstance(o, Parameter)", "buggy_source_code": "def _IS_PARAMETER(o: object) -> bool:\n    return isinstance(o, Parameter)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _IS_TRAINABLE_PARAMETER(o: Any) -> bool:\n    return _IS_PARAMETER(o) and o.trainable", "buggy_source_code": "def _IS_TRAINABLE_PARAMETER(o: object) -> bool:\n    return isinstance(o, Parameter) and o.trainable", "edit_actions": ["update-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@timer_decorator('Adding documents to the collection took %s seconds')\ndef create_big_number_of_documents(big_collection):\n    for i in range(1, document_number):\n        doc = big_collection.create_document()\n        doc.index = i\n        doc.save()", "buggy_source_code": "@timer_decorator('Adding %s documents to the collection took %s seconds')\ndef create_big_number_of_documents(big_collection):\n    for i in range(1, document_number):\n        doc = big_collection.create_document()\n        doc.index = i\n        doc.save()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@main.route('playlist/download/playlist.pls')\ndef download_playlist():\n    pls = make_pls_playlist(playlist.playlist_entries())\n    response = make_response(pls, None, None, 'audio/x-scpls')\n    return response", "buggy_source_code": "@main.route('playlist/download/playlist.pls')\ndef download_playlist():\n    pls = make_pls_playlist(playlist_entries())\n    response = make_response(pls, None, None, 'audio/x-scpls')\n    return response", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@main.route('playlist/clear')\ndef clear_playlist():\n    playlist.playlist_clear()\n    return redirect(request.headers['referer'])", "buggy_source_code": "@main.route('playlist/clear')\ndef clear_playlist():\n    playlist_clear()\n    return redirect(request.headers['referer'])", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, name, dtype=None, basedir=None):\n    super().__init__(name, dtype, basedir)\n    self.name = name\n    self._initialize_tables()", "buggy_source_code": "def __init__(self, name, basedir=None):\n    super().__init__(name, basedir=basedir)\n    self.name = name\n    self._initialize_tables()", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def welcome(request):\n    return render_to_response('welcome.html')", "buggy_source_code": "def welcome(request):\n    return render(request, 'welcome.html')", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def mprotect_asm(self, addr, size, perm):\n    GefUnsupportedOS('Architecture {:s} not supported yet'.format(get_arch()))", "buggy_source_code": "def mprotect_asm(self, addr, size, perm):\n    GefUnsupportedOS('Architecture {:s} not supported yet'.format(self.arch))\n    return", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node"]}
{"fixed_source_code": "def ssh_set_blocking(ssh_session, blocking):\n    c_ssh_set_blocking(c_void_p(ssh_session), c_long(blocking))", "buggy_source_code": "def ssh_set_blocking(ssh_session, blocking):\n    c_ssh_set_blocking(c_void_p(ssh_session), c_int(blocking))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def zoom(self):\n    return int(self.matrix().m11() * 100.0)", "buggy_source_code": "def zoom(self):\n    return int(self.transform().m11() * 100.0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_cached_response_fresh(self, response, request):\n    return True", "buggy_source_code": "def is_cached_response_fresh(self, cachedresponse, request):\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, request):\n    self.request = request\n    self['klanten'] = Customer(self, 'klanten', request=request)\n    self['session'] = Session(self, 'session')", "buggy_source_code": "def __init__(self, request):\n    self.request = request\n    self['klanten'] = CustomerCollection(self, 'klanten', request=request)\n    self['session'] = Session(self, 'session')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def random(value, _):\n    return random.choice(value)", "buggy_source_code": "def random(value, _):\n    return random_module.choice(value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _success_droplet_callback(self, result):\n    result = json.loads()\n    self._record.id = result['reply']['pk']\n    return self._post_revision()", "buggy_source_code": "def _success_droplet_callback(self, result):\n    result = json.load(result)\n    self._record.id = result['reply']['pk']\n    return self._post_revision()", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def main():\n    opfxml = '\\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n<package xmlns=\"http://www.idpf.org/2007/opf\" unique-identifier=\"BookId\" version=\"2.0\">\\n  <metadata xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:opf=\"http://www.idpf.org/2007/opf\">\\n    <dc:identifier id=\"BookId\" opf:scheme=\"UUID\">urn:uuid:a418a8f1-dcbc-4c5d-a18f-533765e34ee8</dc:identifier>\\n  </metadata>\\n  <manifest>\\n    <item href=\"toc.ncx\" id=\"ncx\" media-type=\"application/x-dtbncx+xml\" />\\n    <item href=\"Text/Section0001.xhtml\" id=\"Section0001.xhtml\" media-type=\"application/xhtml+xml\" />\\n  </manifest>\\n  <spine toc=\"ncx\">\\n    <itemref idref=\"Section0001.xhtml\" >\\n  </spine>\\n  <guide />\\n</package>\\n'\n    print(repairXML(opfxml))\n    return 0", "buggy_source_code": "def main():\n    opfxml = '\\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n<package xmlns=\"http://www.idpf.org/2007/opf\" unique-identifier=\"BookId\" version=\"2.0\">\\n  <metadata xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:opf=\"http://www.idpf.org/2007/opf\">\\n    <dc:identifier id=\"BookId\" opf:scheme=\"UUID\">urn:uuid:a418a8f1-dcbc-4c5d-a18f-533765e34ee8</dc:identifier>\\n  </metadata>\\n  <manifest>\\n    <item href=\"toc.ncx\" id=\"ncx\" media-type=\"application/x-dtbncx+xml\" />\\n    <item href=\"Text/Section0001.xhtml\" id=\"Section0001.xhtml\" media-type=\"application/xhtml+xml\" />\\n  </manifest>\\n  <spine toc=\"ncx\">\\n    <itemref idref=\"Section0001.xhtml\" >\\n  </spine>\\n  <text>\\n    this is a bunch of nonsense\\n  </text>\\n  <guide />\\n</package>\\n'\n    print(repairXML(opfxml))\n    return 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def close_request(self, request):\n    super(BofhdServerImplementation, self).close_request(request)\n    self.logger.debug2('closed connection %r', request)", "buggy_source_code": "def close_request(self, request):\n    super(BofhdServerImplementation, self).close_request(request)\n    logger.debug('closed connection %r', request)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    repr_list = []\n    for name in self.converter_list:\n        repr_list.append(self.converter_dict[name])\n    return '<Simulation consisting of {0}>'.format(repr_list)", "buggy_source_code": "def __repr__(self):\n    repr = '<Simulation, converters: {0}, containers: {1}>'\n    return repr.format([self.converter_dict[name] for name in self.converter_list], list(self.container_dict.values()))", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'NoDataOffset(%d)' % self", "buggy_source_code": "def __str__(self):\n    return 'NoDataOffset(%d)' % int(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_value(app, watcher):\n    x = app.fire(hello())\n    watcher.wait('hello')\n    assert 'Hello World!' in x\n    assert x.value == 'Hello World!'", "buggy_source_code": "def test_value(app, watcher):\n    x = app.fire(hello())\n    assert watcher.wait('hello')\n    assert 'Hello World!' in x\n    assert x.value == 'Hello World!'", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def test_nested_value(app, watcher):\n    x = app.fire(test())\n    watcher.wait('test')\n    assert x.value == 'Hello World!'\n    assert str(x) == 'Hello World!'", "buggy_source_code": "def test_nested_value(app, watcher):\n    x = app.fire(test())\n    assert watcher.wait('test')\n    assert x.value == 'Hello World!'\n    assert str(x) == 'Hello World!'", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _reset_symbols(self) -> None:\n    self.symbols = copy.deepcopy(default_symbols)\n    self.local_symbols = dict()", "buggy_source_code": "def _reset_symbols(self) -> None:\n    self.symbols = copy.deepcopy(default_symbols)\n    self._local_symbols = dict()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@task\ndef simple_task_return_name(name, **kwargs):\n    logger = simple_task_return_name.get_logger(**kwargs)\n    wait_time = _wait_a_bit()\n    logger.info('processing %s, waited %s seconds' % (name, wait_time))\n    return name", "buggy_source_code": "@task\ndef simple_task_return_name(name, **kwargs):\n    logger = simple_task_return_name.get_logger(**kwargs)\n    wait_time = _wait_a_bit()\n    logger.info('processing %s, waited %s milliseconds' % (name, wait_time))\n    return name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def tmpl_choose_profile_search_new_person_generator(self, free_id):\n\n    def stub():\n        text = self._('Create new profile')\n        link = '%s/author/claim/action?associate_profile=True&pid=%s' % (CFG_SITE_URL, free_id)\n        return (text, link)\n    return stub", "buggy_source_code": "def tmpl_choose_profile_search_new_person_generator(self, free_id):\n\n    def stub():\n        text = self._('Create new profile')\n        link = '%s/author/claim/action?associate_profile=True&amp;pid=%s' % (CFG_SITE_URL, free_id)\n        return (text, link)\n    return stub", "edit_actions": ["update-node"]}
{"fixed_source_code": "def working_directory(self):\n    _complain_ifclosed(self.closed)\n    wd = self.fs.working_directory()\n    return wd", "buggy_source_code": "def working_directory(self):\n    _complain_ifclosed(self.closed)\n    wd = self.fs.get_working_directory()\n    return wd", "edit_actions": ["update-node"]}
{"fixed_source_code": "def default_block_size(self):\n    _complain_ifclosed(self.closed)\n    return self.fs.default_block_size()", "buggy_source_code": "def default_block_size(self):\n    _complain_ifclosed(self.closed)\n    return self.fs.get_default_block_size()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def capacity(self):\n    _complain_ifclosed(self.closed)\n    if self.__status.host is '':\n        raise RuntimeError('Capacity is not defined for a local fs')\n    return self.fs.capacity()", "buggy_source_code": "def capacity(self):\n    _complain_ifclosed(self.closed)\n    if self.__status.host is '':\n        raise RuntimeError('Capacity is not defined for a local fs')\n    return self.fs.get_capacity()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def used(self):\n    _complain_ifclosed(self.closed)\n    return self.fs.used()", "buggy_source_code": "def used(self):\n    _complain_ifclosed(self.closed)\n    return self.fs.get_used()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cleanup(self):\n    for measure in self.measures.all():\n        measure.cleanup()\n        if measure.chords.count() == 0:\n            measure.delete()", "buggy_source_code": "def cleanup(self):\n    for measure in self.measures.all():\n        measure.cleanup()\n    if self.measures.count() == 0:\n        self.delete()", "edit_actions": ["move-tree", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, qubit_name, frequencies=np.linspace(4000000000.0, 5000000000.0, 1000)):\n    super(CavitySearch, self).__init__(qubit_name)\n    self.frequencies = frequencies", "buggy_source_code": "def __init__(self, qubit_name, frequencies=np.linspace(4, 5, 100)):\n    super(CavitySearch, self).__init__(qubit_name)\n    self.frequencies = frequencies", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, qubit_name, frequencies=np.linspace(4000000000.0, 5000000000.0, 1000)):\n    super(QubitSearch, self).__init__(qubit_name)\n    self.frequencies = frequencies", "buggy_source_code": "def __init__(self, qubit_name, frequencies=np.linspace(4, 5, 100)):\n    super(QubitSearch, self).__init__(qubit_name)\n    self.frequencies = frequencies", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _sample(self):\n    gan = self.gan\n    z_t = gan.encoder.z\n    inputs_t = gan.inputs.x\n    return {'generator': gan.session.run(gan.generator.sample)}", "buggy_source_code": "def _sample(self):\n    gan = self.gan\n    z_t = gan.encoder.z\n    inputs_t = gan.inputs.x\n    return {'generator': gan.session.run(gan.uniform_sample)}", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def read(filename):\n    with open(os.path.joi(os.path.dirname(__file__), filename)) as _f:\n        contents = _f.read()\n    return contents", "buggy_source_code": "def read(filename):\n    with open(os.path.join(os.path.dirname(__file__), filename)) as _f:\n        contents = _f.read()\n    return contents", "edit_actions": ["update-node"]}
{"fixed_source_code": "def next_observation(self):\n    idx = random.randint(0, self.width - 1)\n    ob = self.X[:, idx].reshape((self.ambient_dim, 1))\n    return ob", "buggy_source_code": "def next_observation(self):\n    random_projection = np.random.rand(self.rank, 1)\n    ob = self.U @ random_projection\n    return ob", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@Discordant.register_handler('https?:\\\\/\\\\/(www\\\\.)?jisho\\\\.org\\\\/search\\\\/(\\\\S*)')\nasync def _jisho_link(self, match, message):\n    await _dict_search_link(self, match, message, 'jisho', 2)", "buggy_source_code": "@Discordant.register_handler('https?:\\\\/\\\\/(www\\\\.)?jisho\\\\.org\\\\/(search|word)\\\\/(\\\\S*)')\nasync def _jisho_link(self, match, message):\n    await _dict_search_link(self, match, message, 'jisho', 3)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def pre_load(self):\n    try:\n        __import__('keystone')\n    except ImportError:\n        msg = 'Missing `keystone-engine` package for Python{0}, install with: `pip{0} install retdec-python`.'.format(PYTHON_MAJOR)\n        raise GefMissingDependencyException(msg)\n    return", "buggy_source_code": "def pre_load(self):\n    try:\n        __import__('keystone')\n    except ImportError:\n        msg = 'Missing `keystone-engine` package for Python{0}, install with: `pip{0} install keystone-engine`.'.format(PYTHON_MAJOR)\n        raise GefMissingDependencyException(msg)\n    return", "edit_actions": ["update-node"]}
{"fixed_source_code": "def pre_load(self):\n    try:\n        __import__('keystone')\n    except ImportError:\n        msg = 'Missing `keystone-engine` package for Python{0}, install with: `pip{0} install retdec-python`.'.format(PYTHON_MAJOR)\n        raise GefMissingDependencyException(msg)\n    return", "buggy_source_code": "def pre_load(self):\n    try:\n        __import__('keystone')\n    except ImportError:\n        msg = 'Missing `keystone-engine` package for Python{0}, install with: `pip{0} install keystone-engine`.'.format(PYTHON_MAJOR)\n        raise GefMissingDependencyException(msg)\n    return", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Tree %s %s' % (self.guid, self.label)", "buggy_source_code": "def __str__(self):\n    return '%s %s' % (unicode(type(self)), json.dumps(self.dump(), indent=4))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def changed_10026(self, base):\n    base.append_fields(FloatField('coeffeffect1'), FloatField('coeffeffect2'), FloatField('coeffeffect3'), ForeignKey('descriptionvars', 'spelldescriptionvariables'))", "buggy_source_code": "def changed_10026(self, base):\n    base.append_fields(FloatField('coeffeffect1'), FloatField('coeffeffect2'), FloatField('coeffeffect3'), ForeignKey('descriptionvars', 'SpellDescriptionVariables'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def to_root(df, fname, tree_name='default', *kargs, **kwargs):\n    from root_numpy import array2root\n    arr = df.to_records()\n    array2root(arr, fname, tree_name, *kargs, **kwargs)", "buggy_source_code": "def to_root(df, path, tree_key='default', *kargs, **kwargs):\n    from root_numpy import array2root\n    arr = df.to_records()\n    array2root(arr, path, tree_key, *kargs, **kwargs)", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def solve(self):\n    if self.solve_lkh():\n        return self.path\n    return self.solve_annealing", "buggy_source_code": "def solve(self):\n    if self.solve_lkh():\n        return self.path\n    return self.solve_annealing()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __enter__(self):\n    connection = connections[get_tenant_database_alias()]\n    self._previous_tenant.append(connection.tenant)\n    self.activate()", "buggy_source_code": "def __enter__(self):\n    connection = connections[get_tenant_database_alias()]\n    self._previous_tenant.append(connection.tenant)\n    self.activate()\n    return self", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def to_hdf5(self, f, **kwargs):\n    (f, opened) = get_hdf5(f, **kwargs)\n    deep_group_copy(self, f)\n    return f", "buggy_source_code": "def to_hdf5(self, f, **kwargs):\n    (f, opened) = get_h5py_File(f, **kwargs)\n    deep_group_copy(self, f)\n    return f", "edit_actions": ["update-node"]}
{"fixed_source_code": "def looks_like_file(filename):\n    (name, ext) = splitext(filename)\n    if ext != '':\n        return True\n    return False", "buggy_source_code": "def looks_like_file(filename):\n    (_, ext) = splitext(filename)\n    if ext != '':\n        return True\n    return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def handle_unknown_opcode(self, info, inst):\n    msg = 'Use of unknown opcode {} at line {} of {}'\n    raise NotImplementedError(msg.format(inst.opname, inst.lineno, self.bytecode.func_id.filename))", "buggy_source_code": "def handle_unknown_opcode(self, info, inst):\n    raise UnsupportedError(\"Use of unknown opcode '{}'\".format(inst.opname), loc=Loc(filename=self.bytecode.func_id.filename, line=inst.lineno))", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef is_mip(data):\n    return len(data[s.BOOL_IDX]) > 0 or len(data[s.BOOL_IDX]) > 0", "buggy_source_code": "@staticmethod\ndef is_mip(data):\n    return len(data[s.BOOL_IDX]) > 0 or len(data[s.INT_IDX]) > 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_context_data(self, **kwargs):\n    context = super(ResetPasswordView, self).get_context_data(**kwargs)\n    context['menuitem'] = 'email'\n    return context", "buggy_source_code": "def get_context_data(self, **kwargs):\n    context = super(ResetPasswordView, self).get_context_data(**kwargs)\n    context['menuitem'] = 'password'\n    return context", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def write_queue(self):\n    while self.message_queue:\n        msg = self.message_queue.pop(0)\n        self.writer.write(msg)\n        self.writer.drain()", "buggy_source_code": "async def write_queue(self):\n    while self.message_queue:\n        msg = self.message_queue.pop(0)\n        self.writer.write(msg)\n        await self.writer.drain()", "edit_actions": []}
{"fixed_source_code": "def test_get_result_label(self):\n    self.assertEqual(EmployeeAutocomplete().get_result_label(self.jean), 'Dupont Jean')\n    self.assertEqual(EmployeeAutocomplete().get_result_label(self.henry), 'Arkin Henry')", "buggy_source_code": "def test_get_result_label(self):\n    self.assertEqual(EmployeeAutocomplete().get_result_label(self.jean), 'DUPONT Jean')\n    self.assertEqual(EmployeeAutocomplete().get_result_label(self.henry), 'ARKIN Henry')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self):\n    self._child_map = dict(((c.tag, c) for c in self._children()))", "buggy_source_code": "def __init__(self):\n    self._child_handlers = dict(((c.tag, c) for c in self._children()))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def end(self, elem):\n    (result, handler) = self._stack.pop()\n    handler.end(elem, result)", "buggy_source_code": "def end(self, elem):\n    (handler, result) = self._stack.pop()\n    handler.end(elem, result)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.6b2.tar.gz', url_subpath='pywebsocket-0.6b2/src/mod_pywebsocket')", "buggy_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.6b5.tar.gz', url_subpath='pywebsocket-0.6b5/src/mod_pywebsocket')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_object(self, request, blog_slug=None, category_slug=None):\n    return get_object_or_404(Category.objects.get(blog=blog_slug, slug=category_slug))", "buggy_source_code": "def get_object(self, request, blog_slug=None, category_slug=None):\n    blog = get_blog(blog_slug)\n    return get_object_or_404(Category, blog=blog, slug=category_slug)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_custom_properties(data):\n    return {k: v for (k, v) in data.items() if k not in _ignored_custom_props and (not isinstance(v, idprop.types.IDPropertyGroup))}", "buggy_source_code": "def _get_custom_properties(data):\n    return {k: v for (k, v) in data.items() if k not in _IGNORED_CUSTOM_PROPS and (not isinstance(v, idprop.types.IDPropertyGroup))}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_str(self):\n    assert str(self.const) == 'stringgoeshere'", "buggy_source_code": "def test_str(self):\n    assert str(self.const) == '\\npysat Constellation object:\\ntesting\\ntesting\\n'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def dni_validator(dni):\n    if is_dni(dni) or is_nie(dni):\n        return\n    else:\n        raise ValidationError(_('DNI o NIE no válido: %(dni)'), params={'dni': dni})", "buggy_source_code": "def dni_validator(dni):\n    if is_dni(dni) or is_nie(dni):\n        return\n    else:\n        raise ValidationError(_('DNI o NIE no válido: %(dni)s'), params={'dni': dni})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_builds(self):\n    self.hit('/mygroup/myproject/builds')", "buggy_source_code": "def test_builds(self):\n    self.hit('/mygroup/myproject/builds/')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_group(self):\n    self.hit('/mygroup')", "buggy_source_code": "def test_group(self):\n    self.hit('/mygroup/')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_project(self):\n    self.hit('/mygroup/myproject')", "buggy_source_code": "def test_project(self):\n    self.hit('/mygroup/myproject/')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def Basis(self):\n    return Basis3D(self.u, self.v)", "buggy_source_code": "def Basis(self):\n    return Basis2D(self.u, self.v)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def confirm(self):\n    self.server.contact_verified = True\n    self.server.save()", "buggy_source_code": "def confirm(self):\n    self.subject.contact_verified = True\n    self.subject.save()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def jobs_display(self):\n    return ' '.join([x.name for x in self.jobs.all()])", "buggy_source_code": "def jobs_display(self):\n    return ', '.join([x.name for x in self.jobs.all()])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def prepare_cbinit_config(self, service_type):\n    super(CloudbaseinitWinrmRecipe, self).prepare_cbinit_config(service_type)\n    self._cbinit_conf.set_conf_value(name='plugins', value='cloudbaseinit.plugins.windows.winrmcertificateauth.ConfigWinRMCertificateAuthPlugin,cloudbaseinit.plugins.windows.winrmlistener.ConfigWinRMListenerPlugin')", "buggy_source_code": "def prepare_cbinit_config(self, service_type):\n    super(CloudbaseinitWinrmRecipe, self).prepare_cbinit_config(service_type)\n    self._cbinit_conf.set_conf_value(name='plugins', value='cloudbaseinit.plugins.windows.createuser.CreateUserPlugin,cloudbaseinit.plugins.windows.setuserpassword.SetUserPasswordPlugin,cloudbaseinit.plugins.windows.winrmlistener.ConfigWinRMListenerPlugin,cloudbaseinit.plugins.windows.winrmcertificateauth.ConfigWinRMCertificateAuthPlugin')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def transform(self, node, results):\n    name = results['name']\n    name.replace(Name('__str__', prefix=name.prefix))", "buggy_source_code": "def transform(self, node, results):\n    new = node.clone()\n    new.value = '__str__'\n    return new", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_android_project():\n    p = get_android_project_path()\n    if p is None:\n        logging.info('Could not locate android project.')\n        return False\n    return True", "buggy_source_code": "def is_android_project():\n    p = get_android_project_path()\n    if p is None:\n        log.debug('Could not locate android project.')\n        return False\n    return True", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@app.route('/robots.txt', methods=['GET'])\ndef robots():\n    return Response('User-agent: *\\nAllow: /\\nAllow: /about\\nDisallow: /stats\\nDisallow: /engines\\n', mimetype='text/plain')", "buggy_source_code": "@app.route('/robots.txt', methods=['GET'])\ndef robots():\n    return Response('User-agent: *\\nAllow: /\\nAllow: /about\\nDisallow: /stats\\nDisallow: /preferences\\n', mimetype='text/plain')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_cmnd_aliases(self):\n    return self.user_aliases", "buggy_source_code": "def get_cmnd_aliases(self):\n    return self.cmnd_aliases", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, blinkytape):\n    self._blinkytape = blinkytape\n    self._animated = False\n    self._timebase_sec = 0.05", "buggy_source_code": "def __init__(self, blinkytape):\n    self._blinkytape = blinkytape\n    self._animated = False\n    self._timebase_sec = 0.01", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args: Any) -> None:\n    super().__init__(*args)\n    self.formats: Optional[List] = None", "buggy_source_code": "def __init__(self, parent: QtCore.QObject, settings: Settings) -> None:\n    super().__init__(parent)\n    self.formats: List = []\n    self.update_formats(settings.backstory_viewer_formats)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_check_genbank_for_fasta(self):\n    with self.assertRaises(SystemExit):\n        check_genbank_for_fasta(gb=self.ref_fasta, logger=logger)", "buggy_source_code": "def test_check_genbank_for_fasta(self):\n    with self.assertRaises(ValueError):\n        check_genbank_for_fasta(gb=self.ref_fasta, logger=logger)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def evaluate(self, individuals):\n    blueprints = [GaBlueprint(individual=individual) for individual in individuals]\n    return super().evaluate(blueprints)", "buggy_source_code": "def evaluate(self, individuals):\n    blueprints = [Blueprint(individual.layout, individual.training) for individual in individuals]\n    return super().evaluate(blueprints)", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def quit(self, fr, to, text):\n    if self.circa.is_admin(fr):\n        self.circa.close()", "buggy_source_code": "def quit(self, fr, to, text, m):\n    if self.circa.is_admin(m.prefix):\n        self.circa.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def leave(self, fr, to, text):\n    if self.circa.is_admin(fr) and fr != to:\n        self.circa.part(to)", "buggy_source_code": "def leave(self, fr, to, text, m):\n    if self.circa.is_admin(m.prefix) and fr != to:\n        self.circa.part(to)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def test_initial_form(self):\n    from tardis.tardis_portal import forms\n    as_table = '<tr><th><label for=\"url\">Url:</label></th><td><input id=\"url\" type=\"text\" name=\"url\" maxlength=\"255\" /></td></tr>\\n<tr><th><label for=\"title\">Title:</label></th><td><input id=\"title\" type=\"text\" name=\"title\" maxlength=\"400\" /></td></tr>\\n<tr><th><label for=\"institution_name\">Institution name:</label></th><td><input id=\"institution_name\" type=\"text\" name=\"institution_name\" maxlength=\"400\" /></td></tr>\\n<tr><th><label for=\"description\">Description:</label></th><td><textarea id=\"description\" rows=\"10\" cols=\"40\" name=\"description\"></textarea></td></tr>\\n<tr><th><label for=\"created_by\">Created by:</label></th><td><select name=\"created_by\" id=\"created_by\">\\n<option value=\"\" selected=\"selected\">---------</option>\\n<option value=\"1\">tardis_user1</option>\\n</select></td></tr>\\n<tr><th><label for=\"public\">Public:</label></th><td><input type=\"checkbox\" name=\"public\" id=\"public\" /></td></tr>\\n<tr><th><label for=\"authors\">Authors:</label></th><td><input type=\"text\" name=\"authors\" id=\"authors\" /></td></tr>'\n    f = forms.FullExperiment()\n    self.assertEqual(f.as_table(), as_table)", "buggy_source_code": "def test_initial_form(self):\n    from tardis.tardis_portal import forms\n    as_table = '<tr><th><label for=\"url\">Url:</label></th><td><input id=\"url\" type=\"text\" name=\"url\" maxlength=\"255\" /></td></tr>\\n<tr><th><label for=\"title\">Title:</label></th><td><input id=\"title\" type=\"text\" name=\"title\" maxlength=\"400\" /></td></tr>\\n<tr><th><label for=\"institution_name\">Institution name:</label></th><td><input id=\"institution_name\" type=\"text\" name=\"institution_name\" maxlength=\"400\" /></td></tr>\\n<tr><th><label for=\"description\">Description:</label></th><td><textarea id=\"description\" rows=\"10\" cols=\"40\" name=\"description\"></textarea></td></tr>\\n<tr><th><label for=\"start_time\">Start time:</label></th><td><input type=\"text\" name=\"start_time\" id=\"start_time\" /></td></tr>\\n<tr><th><label for=\"end_time\">End time:</label></th><td><input type=\"text\" name=\"end_time\" id=\"end_time\" /></td></tr>\\n<tr><th><label for=\"created_by\">Created by:</label></th><td><select name=\"created_by\" id=\"created_by\">\\n<option value=\"\" selected=\"selected\">---------</option>\\n<option value=\"1\">tardis_user1</option>\\n</select></td></tr>\\n<tr><th><label for=\"public\">Public:</label></th><td><input type=\"checkbox\" name=\"public\" id=\"public\" /></td></tr>\\n<tr><th><label for=\"authors\">Authors:</label></th><td><input type=\"text\" name=\"authors\" id=\"authors\" /></td></tr>'\n    f = forms.FullExperiment()\n    self.assertEqual(f.as_table(), as_table)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def patch_account_id(self):\n\n    def test_account_id(options):\n        options.account_id = self.account_id\n    self.patch(cli, '_default_account_id', test_account_id)", "buggy_source_code": "def patch_account_id(self):\n\n    def test_account_id(options):\n        options.account_id = self.account_id\n    self.patch(aws, '_default_account_id', test_account_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@api.multi\ndef _compute_has_purchase_request_lines(self):\n    self.has_purchase_request_lines = bool(self.purchase_request_lines)", "buggy_source_code": "@api.multi\ndef _compute_has_purchase_request_lines(self):\n    for rec in self:\n        rec.has_purchase_request_lines = bool(rec.purchase_request_lines)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node"]}
{"fixed_source_code": "@pytest.fixture\ndef app(request):\n    fixture = Application()\n    request.addfinalizser(fixture.destroy)\n    return fixture", "buggy_source_code": "@pytest.fixture\ndef app(request):\n    fixture = Application()\n    request.addfinalizer(fixture.destroy)\n    return fixture", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_run_replay_noid(self):\n    cmd_line = './scripts/avocado run --replay %s--job-results-dir %s --replay-data-dir %s--sysinfo=off' % ('foo', self.tmpdir, self.jobdir)\n    expected_rc = exit_codes.AVOCADO_JOB_FAIL\n    self.run_and_check(cmd_line, expected_rc)", "buggy_source_code": "def test_run_replay_noid(self):\n    cmd_line = './scripts/avocado run --replay %s--job-results-dir %s --replay-data-dir %s --sysinfo=off' % ('foo', self.tmpdir, self.jobdir)\n    expected_rc = exit_codes.AVOCADO_JOB_FAIL\n    self.run_and_check(cmd_line, expected_rc)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef bitbucket_hosts(self):\n    custom_hosts = self.settings.get('bitbucket_hosts', [])\n    return list(set(['bitbucket.org'] + custom_hosts))", "buggy_source_code": "@property\ndef bitbucket_hosts(self):\n    custom_hosts = load_settings().get('bitbucket_hosts', [])\n    return list(set(['bitbucket.org'] + custom_hosts))", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def index_netcdf_file(filename, session):\n    with CFDataset(filename) as cf:\n        data_file = find_update_or_insert_file(session, cf)\n    return data_file", "buggy_source_code": "def index_netcdf_file(filename, session):\n    with CFDataset(filename) as cf:\n        data_file = find_update_or_insert_nc_file(session, cf)\n    return data_file", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_perm_admin_id_from_session(self):\n    from .services import SuperAdminService\n    admin_id = session.get('perm_admin_id')\n    super_admin = SuperAdminService.get(admin_id)\n    return super_admin and super_admin.id", "buggy_source_code": "def get_perm_admin_id_from_session(self):\n    from .services import SuperAdminService\n    admin_id = session.get('perm_admin_id')\n    super_admin = admin_id and SuperAdminService.get(admin_id)\n    return super_admin and super_admin.id", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __button_add_clicked(self, widget, data=None):\n    self._add_menu_directory.popup_at_widget(widget, Gdk.Gravity.SOUTH_WEST, Gdk.Gravity.NORTH_WEST, None)", "buggy_source_code": "def __button_add_clicked(self, widget, data=None):\n    self._menu_add_directory.popup_at_widget(widget, Gdk.Gravity.SOUTH_WEST, Gdk.Gravity.NORTH_WEST, None)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    retval = BaseData.__str__(self)\n    if self.uid:\n        retval += 'user'\n        retval += self._getArgsAsStr() + '\\n'\n    return retval", "buggy_source_code": "def __str__(self):\n    retval = BaseData.__str__(self)\n    args = self._getArgsAsStr()\n    if args:\n        retval += 'user%s\\n' % args\n    return retval", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _call_function(self):\n    self._error_mesage = 'Error Getting Inf. List.'\n    (auth_data, filter) = self.arguments\n    return IM.InfrastructureManager.InfrastructureManager.GetInfrastructureList(Authentication(auth_data), filter)", "buggy_source_code": "def _call_function(self):\n    self._error_mesage = 'Error Getting Inf. List.'\n    (auth_data, flt) = self.arguments\n    return IM.InfrastructureManager.InfrastructureManager.GetInfrastructureList(Authentication(auth_data), flt)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _update_mhat(self):\n    self.mhat = np.dot(self.pihat.reshape((self.n_mstates_active,)), self.E_active[:])\n    self._update_S()", "buggy_source_code": "def _update_mhat(self):\n    self.mhat = _np.dot(self.pihat.reshape((self.n_mstates_active,)), self.E_active[:])\n    self._update_S()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def middleware(func):\n\n    def app_builder(app):\n\n        def app_wrapp(environ, start_response):\n            return func(environ, start_response, app)\n        return app_wrapp\n    return app_builder", "buggy_source_code": "def middleware(func):\n\n    def app_builder(app):\n\n        def app_wrap(environ, start_response):\n            return func(environ, start_response, app)\n        return app_wrap\n    return app_builder", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@rpc(String, _port_type='FirstPort', _returns=String)\ndef echo_first_port(self, string):\n    return string", "buggy_source_code": "@rpc(String, _soap_port_type='FirstPort', _returns=String)\ndef echo_first_port(self, string):\n    return string", "edit_actions": ["update-node"]}
{"fixed_source_code": "@rpc(String, _port_type='SecondPort', _returns=String)\ndef echo_second_port(self, string):\n    return string", "buggy_source_code": "@rpc(String, _soap_port_type='SecondPort', _returns=String)\ndef echo_second_port(self, string):\n    return string", "edit_actions": ["update-node"]}
{"fixed_source_code": "@rpc(String, _port_type='FirstPortType', _returns=String)\ndef echo_default_port_service(self, string):\n    return string", "buggy_source_code": "@rpc(String, _soap_port_type='FirstPortType', _returns=String)\ndef echo_default_port_service(self, string):\n    return string", "edit_actions": ["update-node"]}
{"fixed_source_code": "@rpc(String, _port_type='existingss', _returns=String)\ndef raise_exception(self, string):\n    return string", "buggy_source_code": "@rpc(String, _soap_port_type='existingss', _returns=String)\ndef raise_exception(self, string):\n    return string", "edit_actions": ["update-node"]}
{"fixed_source_code": "@rpc(String, _port_type='bobhope', _returns=String)\ndef echo_bob_hope(self, string):\n    return 'Bob Hope'", "buggy_source_code": "@rpc(String, _soap_port_type='bobhope', _returns=String)\ndef echo_bob_hope(self, string):\n    return 'Bob Hope'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@rpc(String, _port_type='existingss', _returns=String)\ndef raise_exception(self, string):\n    return string", "buggy_source_code": "@rpc(String, _soap_port_type='existingss', _returns=String)\ndef raise_exception(self, string):\n    return string", "edit_actions": ["update-node"]}
{"fixed_source_code": "def speed_tune(self, direction: Direction) -> [ResponseBaseInfo]:\n    return self._controller.speed_tune(direction, self._module_id, self._channel, self._broadcast_mode, self._module_mode)", "buggy_source_code": "def speed_tune(self, direction: Direction) -> [ResponseBaseInfo]:\n    return self._controller.brightness_tune(direction, self._module_id, self._channel, self._broadcast_mode, self._module_mode)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_parseRaises(self):\n    self.assertRaises(NotImplemented, fseq.SeqEncoder().parse, None, None, None)", "buggy_source_code": "def test_parseRaises(self):\n    with self.assertRaises(NotImplementedError):\n        fseq.SeqEncoder().parse(None, None, None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_parse(self):\n    self.assertEqual(Permissions.parse('---------').mode, 500)\n    self.assertEqual(Permissions.parse('rwxrw-r--').mode, 500)", "buggy_source_code": "def test_parse(self):\n    self.assertEqual(Permissions.parse('---------').mode, 0)\n    self.assertEqual(Permissions.parse('rwxrw-r--').mode, 500)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def keepalive(self):\n    self.__get__(urls['keepalive'])\n    return True", "buggy_source_code": "def keepalive(self):\n    self.__get__(urls['fut']['Credits'])\n    return True", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def release(self):\n    self.db.close()", "buggy_source_code": "def release(self):\n    self.db.disconnect()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop_streaming(self):\n    assert self.is_connected\n    if self.is_streaming:\n        self._stopped.set()\n        self._thread.join()\n        self._send_command('CalcStop')", "buggy_source_code": "def stop_streaming(self):\n    assert self.is_connected\n    if self.is_streaming:\n        self._stopped.set()\n        self._thread.join()\n    self._send_command('CalcStop')", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def test_invalid_consultation(self):\n    self._test_missing_item('oparl:Consultation', 'consultation.missing.committee_agendaItem_paper.json', ['committee', 'agendaItem', 'paper'])", "buggy_source_code": "def test_invalid_consultation(self):\n    self._test_missing_item('oparl:Consultation', 'consultation.missing.paper_organization_agendaitem.json', ['paper', 'organization', 'agendaItem'])", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def add_component(self, component):\n    component._parent_component = self\n    self.__all_components.append(component)", "buggy_source_code": "def add_component(self, component):\n    component.set_parent(self)\n    self.__all_components.append(component)", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@get('/v1/firewalls/policies/<owner_type>/<id>')\n@handle_auth\n@reply_json\ndef policy_info(owner_type, id):\n    manager = create_manager('firewall')\n    return manager.policy_info(owner_type, id)", "buggy_source_code": "@get('/v1/firewalls/policies/<owner_type:re:(?!by).+>/<id>')\n@handle_auth\n@reply_json\ndef policy_info(owner_type, id):\n    manager = create_manager('firewall')\n    return manager.policy_info(owner_type, id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@delete('/v1/firewalls/policies/<owner_type>/<id>')\n@handle_auth\n@reply_json\ndef policy_delete(owner_type, id):\n    manager = create_manager('firewall')\n    return manager.policy_delete(owner_type, id)", "buggy_source_code": "@delete('/v1/firewalls/policies/<owner_type:re:(?!by).+>/<id>')\n@handle_auth\n@reply_json\ndef policy_delete(owner_type, id):\n    manager = create_manager('firewall')\n    return manager.policy_delete(owner_type, id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_ancestor_exit_points(self, call):\n    return self._contained_in(self.get_ancestors(call), self.entry_points)", "buggy_source_code": "def get_ancestor_exit_points(self, call):\n    return self._contained_in(self.get_ancestors(call), self.exit_points)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('/')\ndef hello_world():\n    return 'Hello World!'", "buggy_source_code": "@app.route('/')\ndef hello_world():\n    return '<h1>Hello world!</h1>'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@cherrypy.expose\ndef index(self, **kargs):\n    ua = cherrypy.request.headers['User-Agent']\n    return '\\n            <!DOCTYPE html \\n                PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\\n                \"http://www.w3.org/TR/html4/strict.dtd\">\\n            <html lang=\"en-US\">\\n            <head profile=\"http://www.w3.org/2005/10/profile\">\\n                <script src=\"/static/js/jquery-min.js\"></script>\\n                <script src=\"/static/js/shortener.js\"></script>\\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/main.css\">\\n                <link rel=\"icon\" type=\"image/png\" href=\"static/img/small-icon.png\">\\n            </head>\\n            <body>\\n                <div id=\"central\">\\n                    <div id=\"title\">\\n                        <span>Press CTRL+V to shorten your URL</span><br />\\n                    </div> <br />\\n                    <div id=\"query\">\\n                        <input type=\"text\" name=\"url\" id=\"urlbox\" />\\n                    </div> <br />\\n                    <div id=\"results\">\\n                    </div>\\n                </div>\\n            </body>\\n            </html>\\n            '", "buggy_source_code": "@cherrypy.expose\ndef index(self, **kargs):\n    ua = cherrypy.request.headers['User-Agent']\n    return '\\n            <html>\\n            <head>\\n                <script src=\"/static/js/jquery-min.js\"></script>\\n                <script src=\"/static/js/shortener.js\"></script>\\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/main.css\">\\n            </head>\\n            <body>\\n                <div id=\"central\">\\n                    <div id=\"title\">\\n                        <span>Press CTRL+V to shorten your URL</span><br />\\n                    </div> <br />\\n                    <div id=\"query\">\\n                        <input type=\"text\" name=\"url\" id=\"urlbox\" />\\n                    </div> <br />\\n                    <div id=\"results\">\\n                    </div>\\n                </div>\\n            </body>\\n            </html>\\n            '", "edit_actions": ["update-node"]}
{"fixed_source_code": "def current_date(date_format='%Y-%m-%d %H:%M:%S'):\n    now = datetime.now()\n    return now.strftime(date_format)", "buggy_source_code": "def current_date(date_format='%Y-%m-%d %H:%M:%S'):\n    now = datetime.now()\n    return string_to_datetime(now.strftime(date_format))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@app.route('/api/busy/<person>', methods=['GET'])\ndef busy(person):\n    from . import busy\n    return yamlfy(**busy.busy(person))", "buggy_source_code": "@app.route('/api/busy/<person>', methods=['GET'])\n@yamlerrors\ndef busy(person):\n    from . import busy\n    return yamlfy(**busy.busy(person))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_render_span(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            <span>Hello world</span>\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, [('write', 'Hello world'), ('write', '\\n')])", "buggy_source_code": "def test_render_span(self):\n    commands = list(render('\\n        <document>\\n          <line>\\n            <span>Hello world</span>\\n          </line>\\n        </document>\\n        ', prelude=False))\n    self.assertEqual(commands, [('write', 'Hello world'), 'newline'])", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef shelve_path(self):\n    return os.path.join(self.shelve_dir, 'schedule')", "buggy_source_code": "@property\ndef shelve_path(self):\n    return os.path.join(self.shelve_dir, 'schedule.data')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def pad(self, ln):\n    self.version = version_pad(self.version, ln)\n    return self", "buggy_source_code": "def pad(self, ln):\n    self.version = version_pad(Version.normalize(self.version), ln)\n    return self", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __kick_mro_update(cls):\n    cls.__bases__ = cls.__bases__", "buggy_source_code": "def __kick_mro_update(cls):\n    type.__dict__['__bases__'].__set__(cls, cls.__bases__)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_false_value():\n    d = DefaultOrderedDict(DefaultOrderedDict)\n    d['key'] = False\n    print(json.dumps(d, indent=4))\n    assert d['key'] == False", "buggy_source_code": "def test_false_value():\n    d = DefaultOrderedDict(DefaultOrderedDict)\n    d['key'] = False\n    print(json.dumps(d, indent=4))\n    assert d['key'] is False", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def onTick(self, tick):\n    self.lastTick = tick\n    self.trade()", "buggy_source_code": "def onTick(self, tick):\n    self.lastTick = tick\n    if self.trading:\n        self.trade()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "async def on_message(self, msg: discord.Message):\n    await self.autotranslate(msg)\n    await self.translate_channel(msg)", "buggy_source_code": "async def on_message(self, msg: discord.Message):\n    await self._autotranslate(msg)\n    await self.translate_channel(msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def classdir(cl):\n    return abspath(dirname(inspect.getfile(cl)))", "buggy_source_code": "def classdir(cl):\n    return realpath(dirname(inspect.getfile(cl)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    config = get_collector_config('resqueweb.ResqueWebCollector', {'interval': 10})\n    self.collector = ResqueWebCollector(config, None)", "buggy_source_code": "def setUp(self):\n    config = get_collector_config('ResqueWebCollector', {'interval': 10})\n    self.collector = ResqueWebCollector(config, None)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_ap_on_db(self, data):\n    requests.post('http://' + self.server_ip + '/report', data=data, headers={'content-type': 'application/json'})", "buggy_source_code": "def set_ap_on_db(self, data):\n    return requests.post('http://' + self.server_ip + '/report/', data=data, headers={'content-type': 'application/json'})", "edit_actions": ["insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def get_db_data(self):\n    r = requests.get('http://' + self.server_ip + '/get')\n    if r.headers['content-type'] != 'application/json':\n        raise ValueError\n    return r.json", "buggy_source_code": "def get_db_data(self):\n    r = requests.get('http://' + self.server_ip + '/get/')\n    if r.headers['content-type'] != 'application/json':\n        raise ValueError\n    return r.text", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def warn(self, text):\n    if self.to_cloud:\n        self.safe_cloud_log(text, severity='WARNING')\n    else:\n        self.logger.warning(text)", "buggy_source_code": "def warn(self, text):\n    if self.to_cloud:\n        self.safe_log_text(text, severity='WARNING')\n    else:\n        self.logger.warning(text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error(self, text):\n    if self.to_cloud:\n        self.safe_cloud_log(text, severity='ERROR')\n    else:\n        self.logger.error(text)", "buggy_source_code": "def error(self, text):\n    if self.to_cloud:\n        self.safe_log_text(text, severity='ERROR')\n    else:\n        self.logger.error(text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def info(self, text):\n    if self.to_cloud:\n        self.safe_cloud_log(text, severity='INFO')\n    else:\n        self.logger.info(text)", "buggy_source_code": "def info(self, text):\n    if self.to_cloud:\n        self.safe_log_text(text, severity='INFO')\n    else:\n        self.logger.info(text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def debug(self, text):\n    if self.to_cloud:\n        self.safe_cloud_log(text, severity='DEBUG')\n    else:\n        self.logger.debug(text)", "buggy_source_code": "def debug(self, text):\n    if self.to_cloud:\n        self.safe_log_text(text, severity='DEBUG')\n    else:\n        self.logger.debug(text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_test_set(self):\n    return OCR('test', self.one_hot)", "buggy_source_code": "def get_test_set(self):\n    return OCR('test', one_hot=self.one_hot)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def partial_update(self, request, *args, **kwargs):\n    self._update_or_partial_update(request, True)\n    return super(RulesetViewSet, self).partial_update(request, *args, **kwargs)", "buggy_source_code": "def partial_update(self, request, *args, **kwargs):\n    self._update_or_partial_update(request, True)\n    return super(RulesetViewSet, self).update(request, *args, partial=True, **kwargs)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@APP.route('/')\n@APP.route('/index')\ndef index():\n    return render_template('index.html', options=opt())", "buggy_source_code": "@app.route('/')\n@app.route('/index')\ndef index():\n    return render_template('index.html', options=opt())", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _started(self, job):\n    job.started.disconnect(self._started)\n    self.update.emit(self, Builder.ACTIVE, job.port)", "buggy_source_code": "def _started(self, portjob):\n    portjob.started.disconnect(self._started)\n    self.update.emit(self, Builder.ACTIVE, portjob.port)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _port_clean(self, job):\n    self._pending[job.port] -= 1\n    if not self._pending[job.port]:\n        self._port_ready(job.port)", "buggy_source_code": "def _port_clean(self, cleanjob):\n    self._pending[cleanjob.port] -= 1\n    if not self._pending[cleanjob.port]:\n        self._port_ready(cleanjob.port)", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_remove_learner_group_rejects_non_learner_group_objects(self):\n    with self.assertRaises(InvalidPermission):\n        self.admin.has_perm('remove.remove_learner_group', obj={})", "buggy_source_code": "def test_remove_learner_group_rejects_non_learner_group_objects(self):\n    with self.assertRaises(InvalidPermission):\n        self.admin.has_perm('auth.remove_learner_group', obj={})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_attachment(self, attachment_tuple):\n    return XFormInstance.get_db().fetch_attchment(attachment_tuple[0], attachment_tuple[1])", "buggy_source_code": "def get_attachment(self, attachment_tuple):\n    return XFormInstance.get_db().fetch_attachment(attachment_tuple[0], attachment_tuple[1])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_email(self):\n    if self.email:\n        return self.email\n    elif self.fax:\n        return '%s@fax2.faxaway.com' % self.normalize_fax()\n    else:\n        return None", "buggy_source_code": "def get_email(self):\n    if self.email:\n        return self.email\n    elif self.normalize_fax():\n        return '%s@fax2.faxaway.com' % self.normalize_fax()\n    else:\n        return None", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "@login_required\n@no_csrf\ndef editar(_resp, **itens):\n    _resp.write('editar , ' + str(itens))", "buggy_source_code": "@login_required\n@no_csrf\ndef editar(_resp, **itens):\n    itens['id'] = int(itens['id'])\n    return TemplateResponse(__ctx, '/meuperfil/caixaesquerda/itens/itensmeusitens.html')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_browser_names_from_env():\n    names = os.environ.get('MAAS_TEST_BROWSERS', 'Chrome, PhantomJS')\n    return extract_word_list(names)", "buggy_source_code": "def get_browser_names_from_env():\n    names = os.environ.get('MAAS_TEST_BROWSERS', 'Chrome')\n    return extract_word_list(names)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_full_name(self):\n    if self.user.get_full_name() == '':\n        return self.user.username\n    else:\n        return self.user.get_full_name()", "buggy_source_code": "def get_full_name(self):\n    if not self.user.get_full_name():\n        return self.user.username\n    else:\n        return self.user.get_full_name()", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def iter_types(self):\n    for node in self.api.iter(tag='type'):\n        yield Type(self, node)", "buggy_source_code": "def iter_types(self):\n    for node in self.api.iter('type'):\n        yield Type(self, node)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def transform(self, X):\n    return _transform_selected(X, self._transform, self.categorical_features, copy=True)", "buggy_source_code": "def transform(self, X):\n    return _transform_selected(X, self._transform, self.categorical_features_, copy=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    drop_view_if_exists(cr, 'stock_levels_report')\n    cr.execute(\"\\nCREATE OR REPLACE VIEW stock_levels_report AS (\\n    WITH RECURSIVE top_parent(id, top_parent_id) AS (\\n        SELECT\\n            sl.id,\\n            sl.id AS top_parent_id\\n        FROM\\n            stock_location sl\\n            LEFT JOIN stock_location slp ON sl.location_id = slp.id\\n        WHERE\\n            sl.usage = 'internal' AND (sl.location_id IS NULL OR slp.usage <> 'internal')\\n        UNION\\n        SELECT\\n            sl.id,\\n            tp.top_parent_id\\n        FROM\\n            stock_location sl, top_parent tp\\n        WHERE\\n            sl.usage = 'internal' AND sl.location_id = tp.id\\n    )\\n    SELECT\\n        foo.product_id :: TEXT || '-'\\n        || foo.location_id :: TEXT || '-'\\n        || coalesce(foo.move_id :: TEXT, 'existing') AS id,\\n        foo.product_id,\\n        pt.categ_id                                  AS product_categ_id,\\n        foo.location_id                              AS location_id,\\n        foo.other_location_id,\\n        foo.move_type,\\n        sum(foo.qty)\\n        OVER (PARTITION BY foo.location_id, foo.product_id\\n            ORDER BY date)                           AS qty,\\n        foo.date                                     AS date,\\n        foo.qty                                      AS move_qty\\n    FROM\\n        (\\n            SELECT\\n                sq.product_id      AS product_id,\\n                tp.top_parent_id   AS location_id,\\n                NULL               AS other_location_id,\\n                'existing' :: TEXT AS move_type,\\n                max(sq.in_date)    AS date,\\n                sum(sq.qty)        AS qty,\\n                NULL               AS move_id\\n            FROM\\n                stock_quant sq\\n                LEFT JOIN stock_location sl ON sq.location_id = sl.id\\n                LEFT JOIN top_parent tp ON sq.location_id = tp.id\\n            WHERE\\n                sl.usage = 'internal' :: TEXT OR sl.usage = 'transit' :: TEXT\\n            GROUP BY sq.product_id, tp.top_parent_id\\n            UNION ALL\\n            SELECT\\n                sm.product_id    AS product_id,\\n                tp.top_parent_id AS location_id,\\n                sm.location_id   AS other_location_id,\\n                'in' :: TEXT     AS move_type,\\n                sm.date_expected AS date,\\n                sm.product_qty   AS qty,\\n                sm.id            AS move_id\\n            FROM\\n                stock_move sm\\n                LEFT JOIN stock_location sl ON sm.location_dest_id = sl.id\\n                LEFT JOIN top_parent tp ON sm.location_dest_id = tp.id\\n            WHERE\\n                (sl.usage = 'internal' :: TEXT OR sl.usage = 'transit' :: TEXT)\\n                AND sm.state :: TEXT <> 'cancel' :: TEXT\\n                AND sm.state :: TEXT <> 'done' :: TEXT\\n                AND sm.state :: TEXT <> 'draft' :: TEXT\\n            UNION ALL\\n            SELECT\\n                sm.product_id       AS product_id,\\n                tp.top_parent_id    AS location_id,\\n                sm.location_dest_id AS other_location_id,\\n                'out' :: TEXT       AS move_type,\\n                sm.date_expected    AS date,\\n                -sm.product_qty     AS qty,\\n                sm.id               AS move_id\\n            FROM\\n                stock_move sm\\n                LEFT JOIN stock_location sl ON sm.location_id = sl.id\\n                LEFT JOIN top_parent tp ON sm.location_id = tp.id\\n            WHERE\\n                (sl.usage = 'internal' :: TEXT OR sl.usage = 'transit' :: TEXT)\\n                AND sm.state :: TEXT <> 'cancel' :: TEXT\\n                AND sm.state :: TEXT <> 'done' :: TEXT\\n                AND sm.state :: TEXT <> 'draft' :: TEXT\\n        ) foo\\n        LEFT JOIN product_product pp ON foo.product_id = pp.id\\n        LEFT JOIN product_template pt ON pp.product_tmpl_id = pt.id\\n)\\n        \")", "buggy_source_code": "def init(self, cr):\n    drop_view_if_exists(cr, 'stock_levels_report')\n    cr.execute(\"\\nCREATE OR REPLACE VIEW stock_levels_report AS (\\n    WITH link_location_warehouse AS (\\n\\tSELECT\\n\\t\\tsl.id AS location_id,\\n\\t\\tmin(sw.id) AS warehouse_id\\n\\tFROM stock_location sl\\n\\tCROSS JOIN stock_warehouse sw\\n\\tLEFT JOIN stock_location sl_view ON sl_view.id = sw.view_location_id\\n\\tWHERE sl.parent_left >= sl_view.parent_left AND sl.parent_left <= sl_view.parent_right\\n\\tGROUP BY sl.id)\\n\\n    SELECT\\n        foo.product_id :: TEXT || '-'\\n        || foo.warehouse_id :: TEXT || '-'\\n        || coalesce(foo.move_id :: TEXT, 'existing') AS id,\\n        foo.product_id,\\n        pt.categ_id                                  AS product_categ_id,\\n        foo.move_type,\\n        sum(foo.qty)\\n        OVER (PARTITION BY foo.warehouse_id, foo.product_id\\n            ORDER BY date)                           AS qty,\\n        foo.date                                     AS date,\\n        foo.qty                                      AS move_qty,\\n        foo.warehouse_id,\\n        foo.other_warehouse_id\\n    FROM\\n        (\\n            SELECT\\n                sq.product_id      AS product_id,\\n                'existing' :: TEXT AS move_type,\\n                max(sq.in_date)    AS date,\\n                sum(sq.qty)        AS qty,\\n                NULL               AS move_id,\\n                link.warehouse_id,\\n                NULL               AS other_warehouse_id\\n            FROM\\n                stock_quant sq\\n                LEFT JOIN stock_location sl ON sq.location_id = sl.id\\n                LEFT JOIN link_location_warehouse link ON link.location_id = sl.location_id\\n            WHERE link.warehouse_id IS NOT NULL\\n            GROUP BY sq.product_id, link.warehouse_id\\n            UNION ALL\\n            SELECT\\n                sm.product_id    AS product_id,\\n                'in' :: TEXT     AS move_type,\\n                sm.date_expected AS date,\\n                sm.product_qty   AS qty,\\n                sm.id            AS move_id,\\n                link_dest.warehouse_id,\\n                link.warehouse_id AS other_warehouse_id\\n            FROM\\n                stock_move sm\\n                LEFT JOIN stock_location sl ON sm.location_dest_id = sl.id\\n                LEFT JOIN link_location_warehouse link ON link.location_id = sm.location_id\\n                LEFT JOIN link_location_warehouse link_dest ON link_dest.location_id = sm.location_dest_id\\n            WHERE\\n                link_dest.warehouse_id IS NOT NULL AND link.warehouse_id != link_dest.warehouse_id\\n                AND sm.state :: TEXT <> 'cancel' :: TEXT\\n                AND sm.state :: TEXT <> 'done' :: TEXT\\n                AND sm.state :: TEXT <> 'draft' :: TEXT\\n            UNION ALL\\n            SELECT\\n                sm.product_id       AS product_id,\\n                'out' :: TEXT       AS move_type,\\n                sm.date_expected    AS date,\\n                -sm.product_qty     AS qty,\\n                sm.id               AS move_id,\\n                link.warehouse_id,\\n                link_dest.warehouse_id AS other_warehouse_id\\n            FROM\\n                stock_move sm\\n                LEFT JOIN stock_location sl ON sm.location_id = sl.id\\n                LEFT JOIN link_location_warehouse link ON link.location_id = sm.location_id\\n                LEFT JOIN link_location_warehouse link_dest ON link_dest.location_id = sm.location_dest_id\\n            WHERE\\n                link.warehouse_id IS NOT NULL AND link.warehouse_id != link_dest.warehouse_id\\n                AND sm.state :: TEXT <> 'cancel' :: TEXT\\n                AND sm.state :: TEXT <> 'done' :: TEXT\\n                AND sm.state :: TEXT <> 'draft' :: TEXT\\n        ) foo\\n        LEFT JOIN product_product pp ON foo.product_id = pp.id\\n        LEFT JOIN product_template pt ON pp.product_tmpl_id = pt.id\\n)\\n        \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef price_limit(self):\n    self._parser.getint('PriceCriteria', 'price.limit')", "buggy_source_code": "@property\ndef price_limit(self):\n    return self._parser.getint('PriceCriteria', 'price.limit')", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _save_databases(self):\n    f = open(HARDTREE_DB_SETTINGS_FILE, 'w')\n    json.dump(self.store, f)\n    f.close()", "buggy_source_code": "def _save_databases(self):\n    f = open(DB_SETTINGS_FILE, 'w')\n    json.dump(self.store, f)\n    f.close()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@patch('doorstop.gui.main.run', Mock(return_value=False))\ndef test_exit(self):\n    self.assertRaises(SystemExit, main, [])", "buggy_source_code": "@patch('doorstop.gui.main.run', Mock(return_value=False))\ndef test_exit(self):\n    self.assertIs(1, main, [])", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@patch('doorstop.gui.main.run', Mock(side_effect=KeyboardInterrupt))\ndef test_interrupt(self):\n    self.assertRaises(KeyboardInterrupt, main, [])", "buggy_source_code": "@patch('doorstop.gui.main.run', Mock(side_effect=KeyboardInterrupt))\ndef test_interrupt(self):\n    self.assertIs(1, main, [])", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def now_int():\n    return int(time())", "buggy_source_code": "def now_int():\n    now = datetime.now()\n    return int(now.strftime('%s'))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_skill_emphases(self, skid):\n    return self.model.get_skill_emphases(skid)", "buggy_source_code": "def get_skill_emphases(self, skid):\n    if skid not in self.emphases:\n        return []\n    return self.emphases[skid]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_md(self, md_device):\n    if md_device not in self._detail:\n        self._detail[md_device] = MD(md_device, self._lock)\n    return self._detail[md_device]", "buggy_source_code": "def get_md(self, md_name):\n    if md_name not in self._detail:\n        self._detail[md_name] = MD(md_name, self._lock)\n    return self._detail[md_name]", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, device, lock):\n    self.name = os.path.basename(device)\n    self.dev_file = device\n    self.refresh()\n    self._lock = lock", "buggy_source_code": "def __init__(self, name, lock):\n    self.name = name\n    self.dev_file = _md_name_to_dev_file(name)\n    self.refresh()\n    self._lock = lock", "edit_actions": ["update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def attach_volume(self, name, volume_id):\n    vm = self.conn.lookupByName(name)\n    volume_xml = volume_xml_generate('/home/test/' + volume_id)\n    vm.attachDevice(volume_xml)\n    return True", "buggy_source_code": "def attach_volume(self, name, volume_id):\n    vm = self.conn.lookupByName(name)\n    volume_xml = define_volume_xml('/home/test/' + volume_id)\n    vm.attachDevice(volume_xml)\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def extendMarkdown(self, md, md_globals):\n    md.registerExtension(self)\n    md.preprocessors.add('comments', CommentsProcessor(md, self.config), '_begin')", "buggy_source_code": "def extendMarkdown(self, md, md_globals):\n    md.registerExtension(self)\n    md.preprocessors.add('comments', CommentsProcessor(md, self.config), '>fenced_code_block')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def existsGlobalCharacteristic(self, charname):\n    char = self.getCharacteristic(charname)\n    if char.name == '':\n        return False\n    else:\n        return True", "buggy_source_code": "def existsGlobalCharacteristic(self, charname):\n    char = self.getGlobalCharacteristic(charname)\n    if char.name == '':\n        return False\n    else:\n        return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_mayan_haab(self):\n    assert mayan.HAAB_MONTHS[2] == 'Zip'\n    assert mayan.to_haab(self.c) == (7, \"Sotz'\")\n    assert mayan.to_haab(2456282.5) == (3, \"K'ank'in\")", "buggy_source_code": "def test_mayan_haab(self):\n    assert mayan.HAAB_MONTHS[2] == 'Zip'\n    assert mayan.to_haab(self.c) == (16, \"Sotz'\")\n    assert mayan.to_haab(2456282.5) == (3, \"K'ank'in\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_mayan_tzolkin(self):\n    assert mayan.TZOLKIN_NAMES[0] == \"Imix'\"\n    assert mayan.to_tzolkin(self.c) == (3, \"K'an\")\n    assert mayan.to_tzolkin(2456282.5) == (4, 'Ajaw')", "buggy_source_code": "def test_mayan_tzolkin(self):\n    assert mayan.TZOLKIN_NAMES[0] == \"Imix'\"\n    assert mayan.to_tzolkin(self.c) == (12, \"B'en\")\n    assert mayan.to_tzolkin(2456282.5) == (4, 'Ajaw')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_gregorian_2_ma(self):\n    assert gregorian.to_jd2(1492, 10, 12) == 2266286.5", "buggy_source_code": "def test_gregorian_2_ma(self):\n    assert gregorian.to_jd2(*self.c_greg) == 2266295.5", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_gregorian_1_ma(self):\n    assert gregorian.to_jd(1492, 10, 12) == 2266286.5", "buggy_source_code": "def test_gregorian_1_ma(self):\n    assert gregorian.to_jd(*self.c_greg) == 2266295.5", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_string_arg_for_byte_array(self):\n    ByteBuffer = autoclass('java.nio.ByteBuffer')\n    self.assertIsNotNone(ByteBuffer.wrap('hello world'))", "buggy_source_code": "def test_string_arg_for_byte_array(self):\n    ByteBuffer = autoclass('java.nio.ByteBuffer')\n    self.assertIsNotNone(ByteBuffer.wrap(b'hello world'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_string_arg_with_signed_char(self):\n    ByteBuffer = autoclass('java.nio.ByteBuffer')\n    self.assertIsNotNone(ByteBuffer.wrap('\\x00ÿHello World\\x7f'))", "buggy_source_code": "def test_string_arg_with_signed_char(self):\n    ByteBuffer = autoclass('java.nio.ByteBuffer')\n    self.assertIsNotNone(ByteBuffer.wrap(b'\\x00\\xffHello World\\x7f'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def addQuestion(self, question, answer):\n    self.questions.append(str(question))\n    self.questions.append(str(answer))", "buggy_source_code": "def addQuestion(self, question, answer):\n    self.questions.append(str(question))\n    self.answers.append(str(answer))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def checkvalue(server, key, value):\n    if key == 'exe_name':\n        return value\n    if key == 'backupfiles':\n        return backupfiles.split(',')\n    raise ServerError('All read only as not yet implemented')", "buggy_source_code": "def checkvalue(server, key, value):\n    if key == 'exe_name':\n        return value\n    if key == 'backupfiles':\n        return value.split(',')\n    raise ServerError('All read only as not yet implemented')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def goExplorePage():\n    typeUrlOnChrome(urlText='https://www.indiegogo.com/explore')\n    wait('1455771252801.png', 20)\n    wait('1456057892065.png', 20)\n    sleep(5)", "buggy_source_code": "def goExplorePage():\n    typeUrlOnChrome(urlText='https://www.indiegogo.com/explore')\n    wait('1455771252801.png', 20)\n    wait('1456057892065.png', 20)\n    waitVanish('1456214096530.png', 20)\n    wait('1456214122362.png', 20)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def get_dim(min_mz, max_mz, bin_size):\n    return int(math.ceil((max_mz - min_mz + 1) // bin_size))", "buggy_source_code": "def get_dim(min_mz, max_mz, bin_size):\n    return math.ceil((max_mz - min_mz + 1) / bin_size)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def qnx_setbeam(ip, beam):\n    os.system('ssh root@' + QNX_IP + ' \"/root/current_ros/dio_beam_direction -b ' + str(int(beam)) + '\"')\n    time.sleep(BEAM_SETTLE)", "buggy_source_code": "def qnx_setbeam(ip, beam):\n    os.system('ssh root@' + QNX_IP + ' \"/root/current_ros/dio_beam_direction -b ' + str(int(beam)) + ' >/dev/null 2>/dev/null\"')\n    time.sleep(BEAM_SETTLE)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ideal_gibbs_excess(self, temperature, molar_fractions):\n    return 0.0 - temperature * configurational_entropy(molar_fractions)", "buggy_source_code": "def ideal_gibbs_excess(self, temperature, molar_fractions):\n    return -temperature * self.configurational_entropy(molar_fractions)", "edit_actions": ["move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_tree_str():\n    test_tree_nwk = os.path.join(TESTS_DATA_DIR, 'test_tree.nwk')\n    tree_str = get_tree_str(test_tree_nwk)\n    assert tree_str == test_tree_2", "buggy_source_code": "def test_get_tree_str():\n    test_tree_nwk = os.path.join(os.path.dirname(__file__), 'test_tree.nwk')\n    tree_str = get_tree_str(test_tree_nwk)\n    assert tree_str == test_tree_2", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_rhythm(self, newrhythm):\n    self.rhythm = newrhyth", "buggy_source_code": "def set_rhythm(self, newrhythm):\n    self.rhythm = newrhythm", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getCellWhitelist(cell_barcode_counts, method, error_correct_cell=False, hamming_threshold=1):\n    cell_whitelist = list(cell_barcode_counts.keys())\n    error_correct_mapping = {}\n    return (cell_whitelist, error_correct_mapping)", "buggy_source_code": "def getCellWhitelist(cell_barcode_counts, method, error_correct_cell=False, hamming_threshold=1):\n    cell_whitelist = set(list(cell_barcode_counts.keys()))\n    error_correct_mapping = {}\n    return (cell_whitelist, error_correct_mapping)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_advanced_search_by_type_species_negative(self):\n    response = self.client.get('/search/advanced/?typeSpecies=y&code=CP100-09')\n    content = response.content.decode('utf-8')\n    self.assertTrue('No results found' in content)", "buggy_source_code": "def test_advanced_search_by_type_species_negative(self):\n    response = self.client.get('/search/advanced/?typeSpecies=yes&code=CP100-09')\n    content = response.content.decode('utf-8')\n    self.assertTrue('No results found' in content)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_advanced_search_by_type_species_positive(self):\n    response = self.client.get('/search/advanced/?typeSpecies=y')\n    content = response.content.decode('utf-8')\n    self.assertTrue('CP100-10' in content)", "buggy_source_code": "def test_advanced_search_by_type_species_positive(self):\n    response = self.client.get('/search/advanced/?typeSpecies=yes')\n    content = response.content.decode('utf-8')\n    self.assertTrue('CP100-10' in content)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_advanced_search_by_type_species_unknown(self):\n    response = self.client.get('/search/advanced/?typeSpecies=d')\n    content = response.content.decode('utf-8')\n    self.assertTrue('CP100-09' in content)", "buggy_source_code": "def test_advanced_search_by_type_species_unknown(self):\n    response = self.client.get('/search/advanced/?typeSpecies=unknown')\n    content = response.content.decode('utf-8')\n    self.assertTrue('CP100-09' in content)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate_code(self):\n    return CGIndenter(CGGeneric('let undef = UndefinedValue();\\nlet argv: *JSVal = if argc != 0 { JS_ARGV(cx, vp as *JSVal) } else { &undef as *JSVal };\\nlet info: *JSJitInfo = RUST_FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp as *JSVal));\\nlet ok = with_gc_disabled(cx, || {\\n  CallJitPropertyOp(info, cx, obj, this.unsafe_get() as *libc::c_void, argv)\\n});\\nif ok == 0 {\\n  return 0;\\n}\\n*vp = UndefinedValue();\\nreturn 1;'))", "buggy_source_code": "def generate_code(self):\n    return CGIndenter(CGGeneric('let undef = UndefinedValue();\\nlet argv: *JSVal = if argc != 0 { JS_ARGV(cx, vp as *JSVal) } else { &undef as *JSVal };\\nlet info: *JSJitInfo = RUST_FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, vp as *JSVal));\\nif CallJitPropertyOp(info, cx, obj, this.unsafe_get() as *libc::c_void, argv) == 0 {\\n  return 0;\\n}\\n*vp = UndefinedValue();\\nreturn 1;'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate_code(self):\n    return CGIndenter(CGGeneric('return with_gc_disabled(cx, || {\\n  let info: *JSJitInfo = RUST_FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, &*vp));\\n  CallJitPropertyOp(info, cx, obj, this.unsafe_get() as *libc::c_void, &*vp)\\n});\\n'))", "buggy_source_code": "def generate_code(self):\n    return CGIndenter(CGGeneric('let info: *JSJitInfo = RUST_FUNCTION_VALUE_TO_JITINFO(JS_CALLEE(cx, &*vp));\\nreturn CallJitPropertyOp(info, cx, obj, this.unsafe_get() as *libc::c_void, &*vp);\\n'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef RegisterBindings(config):\n    return CGImports(CGRegisterProtos(config), ['dom::bindings::codegen', 'dom::bindings::js::JS', 'dom::window::Window', 'script_task::JSPageInfo'])", "buggy_source_code": "@staticmethod\ndef RegisterBindings(config):\n    return CGImports(CGRegisterProtos(config), ['dom::bindings::codegen', 'dom::bindings::js::{JS, JSRef}', 'dom::window::Window', 'script_task::JSPageInfo'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _unsafe_open(self):\n    return '\\n  unsafe {' if self.unsafe else ''", "buggy_source_code": "def _unsafe_open(self):\n    return '\\n  unsafe {\\n  let roots = RootCollection::new();\\n' if self.unsafe else ''", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testOutOfBounds(self):\n    e = MyEvent()\n    self.assertEqual(repr(e.type()), '<enum-item PySide.QtCore.QEvent.Type.#out of bounds# (999)>')", "buggy_source_code": "def testOutOfBounds(self):\n    e = MyEvent()\n    self.assertEqual(repr(e.type()), 'PySide.QtCore.QEvent.Type(999)')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ping(self):\n    self.logger.debug('Pinging gem5 to see if it is still alive')\n    self.gem5_shell('ls /', timeout=self.longdelay)", "buggy_source_code": "def ping(self):\n    self.logger.debug('Pinging gem5 to see if it is still alive')\n    self.gem5_shell('ls /', timeout=self.long_delay)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_margins(self, l=0, t=0, r=0, b=0):\n    self._margins = [l, t, r, b]", "buggy_source_code": "def set_margins(self, left=0, top=0, right=0, bottom=0):\n    self._margins = [left, top, right, bottom]", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def tl_required_trans_ids(self):\n    return self._top_level_required_transforms.keys()", "buggy_source_code": "def tl_required_trans_ids(self):\n    return list(self._top_level_required_transforms)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def modifyTargetCommand(self, target_id, kwargs):\n    raise NotImplemented", "buggy_source_code": "def modifyTargetCommand(self, target_id, kwargs):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def modifyTaskCommand(self):\n    raise NotImplemented", "buggy_source_code": "def modifyTaskCommand(self):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _return_case_names(self, html_tree):\n    path = '{base}/td[2]//text()'.format(base=self.base_path)\n    return [titlecase(s.lower()) for s in html_tree.xpath(path)]", "buggy_source_code": "def _return_case_names(self, html_tree):\n    path = '{base}/td[2]//text()[1]'.format(base=self.base_path)\n    return [titlecase(s.lower()) for s in html_tree.xpath(path)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def total_time(self):\n    elements = self.soup.findAll('p', {'class': 'Recipe__time-label'})\n    return sum([get_minutes(element) for element in elements])", "buggy_source_code": "def total_time(self):\n    elements = self.soup.findAll('p', {'class': 'Recipe__timeEntry'})\n    return sum([get_minutes(element) for element in elements])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def yields(self):\n    return get_yields(self.soup.find('span', {'class': 'Recipe__yield-entry'}))", "buggy_source_code": "def yields(self):\n    return get_yields(self.soup.find('p', {'class': 'jsx-1778438071 Recipe__yield'}))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def with_counts(self):\n    return self.get_query_set().filter(rep__active=True).annotate(count=models.Count('rep'))", "buggy_source_code": "def with_counts(self):\n    return self.get_query_set().filter(representative__active=True).annotate(count=models.Count('representative'))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef volume(self):\n    mol = self.molecule(library='openbabel')\n    return openbabel.monte_carlo_volume(mol, self.atom_coordinates, tolerance=0.01, max_iterations=1000)", "buggy_source_code": "@property\ndef volume(self):\n    mol = self.molecule(library='openbabel')\n    return openbabel.monte_carlo_volume(mol, self.atom_coordinates, tolerance=1, max_iterations=100)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_state_item(name, default=None):\n    with State() as data:\n        return data.get(name, default)", "buggy_source_code": "def get_state_item(name, default=None):\n    with State() as state:\n        return state.get(name, default)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def update(self, *args, **kwargs):\n    self._modified = True\n    return self._storage.update(*args, **kwargs)", "buggy_source_code": "def update(self, *args, **kwargs):\n    self.modified = True\n    return self._storage.update(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __setitem__(self, key, value):\n    self._modified = True\n    self._storage[key] = value", "buggy_source_code": "def __setitem__(self, key, value):\n    self.modified = True\n    self._storage[key] = value", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __delitem__(self, key):\n    self._modified = True\n    del self._storage[key]", "buggy_source_code": "def __delitem__(self, key):\n    self.modified = True\n    del self._storage[key]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def delete_state_item(name):\n    with State(lock=True) as data:\n        if name in data:\n            del data[name]", "buggy_source_code": "def delete_state_item(name):\n    with State(lock=True) as state:\n        if name in state:\n            del state[name]", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def set_state_item(name, value):\n    with State(lock=True) as data:\n        data[name] = value", "buggy_source_code": "def set_state_item(name, value):\n    with State(lock=True) as state:\n        state[name] = value\n        state.modified = True", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def reset_settings():\n    with State(lock=True) as data:\n        if 'settings' in data:\n            del data['settings']", "buggy_source_code": "def reset_settings():\n    with State(lock=True) as state:\n        if 'settings' in state:\n            del state['settings']", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def get_image_name(self) -> str:\n    photo_url = self.link\n    photo_filename = photo_url.split('/')[-1]\n    return photo_filename", "buggy_source_code": "def get_image_name(self) -> str:\n    photo_url = self.link\n    image_name = photo_url.split('/')[-1]\n    return image_name", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def int_from_32bit_array(val):\n    rval = 0\n    for fragment in bytearray(val):\n        rval |= fragment\n        rval <<= 8\n    return rval", "buggy_source_code": "def int_from_32bit_array(val):\n    rval = 0\n    for fragment in bytearray(val):\n        rval <<= 8\n        rval |= fragment\n    return rval", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def get_proccess_args(self, script):\n    args = [self.get_settings('php_bin', 'php'), '-r', script]\n    return args", "buggy_source_code": "def get_proccess_args(self, file_name):\n    args = [self.get_setting('php_bin', 'php'), file_name]\n    return args", "edit_actions": ["update-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def print_message(self, message):\n    self.output.run_command('append', {'characters': message, 'force': True, 'scroll_to_end': self.get_settings('scroll_output_to_end', True)})", "buggy_source_code": "def print_message(self, message):\n    self.output.run_command('append', {'characters': message, 'force': True, 'scroll_to_end': self.get_setting('scroll_output_to_end', True)})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_raw_script(self):\n    view_region = sublime.Region(0, self.view.size())\n    view_content = self.view.substr(view_region)\n    return view_content", "buggy_source_code": "def get_raw_script(self):\n    region = sublime.Region(0, self.view.size())\n    content = self.view.substr(region)\n    return content", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, queue, key, **kws):\n    super(PSSubscribe, self).__init__(**kws)\n    self.queue = queue\n    self.key = key", "buggy_source_code": "def __init__(self, queue, key, **kws):\n    super(PSUnsubscribe, self).__init__(**kws)\n    self.queue = queue\n    self.key = key", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_contains_string(trie):\n    assert simple_trie.contains('in')", "buggy_source_code": "def test_contains_string(trie):\n    assert trie.contains('in')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_formatted_start_time(self):\n    return self.get_start_time().strftime('%b %d (%a): %H:%M')", "buggy_source_code": "def get_formatted_start_time(self):\n    return self.get_start_time().strftime('%H:%M')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def survey_detail(request, survey_id):\n    survey = get_object_or_404(Survey, pk=survey_id)\n    render_to_response('django_surveys/survey_detail.html', locals(), context_instance=RequestContext(request))", "buggy_source_code": "def survey_detail(request, survey_id):\n    survey = get_object_or_404(Survey, pk=survey_id)\n    return render_to_response('django_surveys/survey_detail.html', locals(), context_instance=RequestContext(request))", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def die_screaming(str):\n    logger.error(str)\n    sys.exit(1)", "buggy_source_code": "def die_screaming(string):\n    global DIED_SCREAMING_P\n    LOGGER.error(string)\n    DIED_SCREAMING_P = True", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _init_hospitals(self):\n    self.hospitals = dict()\n    for district_name in self.district_names:\n        self.hospitals[district_name] = Hospital(district_name, 'diabetes')", "buggy_source_code": "def _init_hospitals(self):\n    self.hospitals = dict()\n    for district_name in self.district_names:\n        self.hospitals[district_name] = Hospital(district_name, ['diabetes'])", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def setNoSuchInstanceError(self, pdu, errorIndex):\n    varBindList = self.apiGetVarBindList(pdu)\n    varBindList[errorIndex - 1][1] = exval.noSuchInstance", "buggy_source_code": "def setNoSuchInstanceError(self, pdu, errorIndex):\n    varBindList = self.getVarBindList(pdu)\n    varBindList[errorIndex - 1].setComponentByPosition(1, exval.noSuchInstance)", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setEndOfMibError(self, pdu, errorIndex):\n    varBindList = self.apiGetVarBindList(pdu)\n    varBindList[errorIndex - 1][1] = exval.endOfMib", "buggy_source_code": "def setEndOfMibError(self, pdu, errorIndex):\n    varBindList = self.getVarBindList(pdu)\n    varBindList[errorIndex - 1].setComponentByPosition(1, exval.endOfMib)", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def raise_200_for_OPTIONS(request):\n    if request.line.method == b'OPTIONS' and request.line.uri == '*':\n        raise Response(200)", "buggy_source_code": "def raise_200_for_OPTIONS(request):\n    if request.line.method == b'OPTIONS' and request.line.uri == b'*':\n        raise Response(200)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def load_source(name, path):\n    return SourceFileLoader(name, path).load_module()", "buggy_source_code": "def load_source(name, path):\n    spec = importlib.util.spec_from_file_location(name, path)\n    mod = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(mod)\n    return mod", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_buffer_sample_errors():\n    b = Buffer(10, (2, 1), dtype=bool)\n    with pytest.raises(ValueError):\n        b.sample(5)", "buggy_source_code": "def test_buffer_sample_errors():\n    b = Buffer(10, (2, 1), dtypes=bool)\n    with pytest.raises(ValueError):\n        b.sample(5)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@Command.command()\nasync def caps(self, value: '\\\\d+'):\n    await self.update_config(self, 'spam', 'maxCapsScore', int(value))\n    return 'Maximum capitals score is now {value}.'.format(value=value)", "buggy_source_code": "@Command.command()\nasync def caps(self, value: '\\\\d+'):\n    await _update_config(self.api, 'spam', 'maxCapsScore', int(value))\n    return 'Maximum capitals score is now {value}.'.format(value=value)", "edit_actions": ["update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@Command.command()\nasync def emoji(self, value: '\\\\d+'):\n    await self.update_config(self, 'spam', 'maxEmoji', int(value))\n    return 'Maximum number of emoji is now {value}.'.format(value=value)", "buggy_source_code": "@Command.command()\nasync def emoji(self, value: '\\\\d+'):\n    await _update_config(self.api, 'spam', 'maxEmoji', int(value))\n    return 'Maximum number of emoji is now {value}.'.format(value=value)", "edit_actions": ["update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def resource_file_name(output_dir, r):\n    return os.path.join(output_dir, '%s.rst' % r.type).replace(' ', '-').lower()", "buggy_source_code": "def resource_file_name(output_dir, r):\n    return os.path.join(output_dir, ('%s.rst' % r.type).replace(' ', '-').lower())", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_filename0():\n    o2j = Orgmode2json()\n    ofile = o2j.open_jsonfile('tests/test.json')\n    if not isinstance(ofile, IOBase):\n        pytest.fail('no file object returned')\n    ofile.close()", "buggy_source_code": "def test_filename0():\n    o2j = Orgmode2json()\n    ofile = o2j.open_jsonfile('tests/test.json')\n    if not isinstance(ofile, TextIOWrapper):\n        pytest.fail('no file object returned')\n    ofile.close()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def show_exists(self, title):\n    title = re.sub('[^a-zA-Z0-9\\\\s]', '', title.encode('utf-8'))\n    show_meta = '%s' % title\n    return show_meta in self.db[self.series_label]", "buggy_source_code": "def show_exists(self, title):\n    title = re.sub('[?|$|!|:|#]', '', title)\n    show_meta = '%s' % title\n    return show_meta in self.db[self.series_label]", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _format_from_import(module, ast_alias):\n    return 'from {0} import {1}\\n'.format(module, ', '.join(sorted((_ast_alias_to_s(ast_alias) for ast_alias in ast_alias))))", "buggy_source_code": "def _format_from_import(module, ast_aliases):\n    return 'from {0} import {1}\\n'.format(module, ', '.join(sorted((_ast_alias_to_s(ast_alias) for ast_alias in ast_aliases))))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _format_import_import(ast_alias):\n    return 'import {0}\\n'.format(', '.join(sorted((_ast_alias_to_s(ast_alias) for ast_alias in ast_alias))))", "buggy_source_code": "def _format_import_import(ast_aliases):\n    return 'import {0}\\n'.format(', '.join(sorted((_ast_alias_to_s(ast_alias) for ast_alias in ast_aliases))))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _parse_ci_file(self, content, filepath):\n    if filepath == '.gitlab-ci.yml':\n        return yaml.load(content)", "buggy_source_code": "def _parse_ci_file(self, content, filepath):\n    if filepath == '.gitlab-ci.yml':\n        return yaml.safe_load(content)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def forwards(self, orm):\n    for field in orm.DataField.objects.all():\n        field.indexable = field.enumerable or field.searchable\n        field.save()", "buggy_source_code": "def forwards(self, orm):\n    for field in DataField.objects.all():\n        field.indexable = field.enumerable or field.searchable\n        field.save()", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def WeGet42(self, topic):\n    Vows.Assert.not_are_equal(42, topic)", "buggy_source_code": "def WeGet42(self, topic):\n    Vows.Assert.are_equal(42, topic)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def WeGetANumber(self, topic):\n    Vows.Assert.not_is_numeric(topic)", "buggy_source_code": "def WeGetANumber(self, topic):\n    Vows.Assert.is_numeric(topic)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_container(self, template):\n    cmd = \"cube-ctl list | tail -2 | awk '{ print $1 }'\"\n    return subprocess.check_output(cmd, shell=True).decode('utf-8').strip('\\n').split()", "buggy_source_code": "def get_container(self, template):\n    cmd = \"cube-ctl list | sed -n '3,$p' | awk '{ print $1 }'\"\n    return subprocess.check_output(cmd, shell=True).decode('utf-8').strip('\\n').split()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_bootstrap_theme():\n    theme = request.cookies.get('theme_cookie')\n    return theme or 'paper'", "buggy_source_code": "def get_bootstrap_theme():\n    theme = request.cookies.get('theme_cookie')\n    return theme or 'cyborg'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'report_checkin')\n    cr.execute('\\n        CREATE OR REPLACE VIEW report_checkin AS (\\n        SELECT\\n        MIN(id) AS id,\\n        partner_id,\\n        count(check_id) as quantity_checkin,\\n        count(membership_id) as quantity_members,\\n        membership_state,\\n        associate_member_id,\\n        membership_id,\\n        date_check_in,\\n        date_check_out\\n        FROM\\n        (SELECT\\n            MIN(p.id) AS id,\\n            p.id AS partner_id,\\n            p.membership_state AS membership_state,\\n            p.associate_member AS associate_member_id,\\n            ml.membership_id AS membership_id,\\n            mc.id AS check_id,\\n            mc.date_check_in AS date_check_in,\\n            mc.date_check_out AS date_check_out\\n            FROM res_partner p\\n            LEFT JOIN membership_membership_line ml ON (ml.partner = p.id)\\n            LEFT JOIN members_checkin mc ON (mc.partner = p.id)\\n            GROUP BY\\n              p.id,\\n              p.user_id,\\n              p.membership_state,\\n              p.associate_member,\\n              p.membership_start,\\n              ml.membership_id,\\n              ml.state,\\n              ml.id\\n        ) AS foo\\n        GROUP BY\\n            partner_id,\\n            membership_id,\\n            membership_state,\\n            associate_member_id,\\n            check_id,\\n            date_check_in,\\n            date_check_out\\n        )')", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'report_checkin')\n    cr.execute('\\n        CREATE OR REPLACE VIEW report_checkin AS (\\n        SELECT\\n        MIN(id) AS id,\\n        partner_id,\\n        count(check_id) as quantity_checkin,\\n        count(membership_id) as quantity_members,\\n        membership_state,\\n        associate_member_id,\\n        membership_id,\\n        date_check_in,\\n        date_check_out\\n        FROM\\n        (SELECT\\n            MIN(p.id) AS id,\\n            p.id AS partner_id,\\n            p.membership_state AS membership_state,\\n            p.associate_member AS associate_member_id,\\n            ml.membership_id AS membership_id,\\n            mc.id AS check_id,\\n            mc.date_check_in AS date_check_in,\\n            mc.date_check_out AS date_check_out\\n            FROM res_partner p\\n            LEFT JOIN membership_membership_line ml ON (ml.partner = p.id)\\n            LEFT JOIN members_checkin mc ON (mc.partner = p.id)\\n            GROUP BY\\n              p.id,\\n              p.user_id,\\n              p.membership_state,\\n              p.associate_member,\\n              p.membership_start,\\n              ml.membership_id,\\n              ml.state,\\n              ml.id\\n              mc.id\\n              mc.date_check_in\\n              mc.date_check_out\\n        ) AS foo\\n        GROUP BY\\n            partner_id,\\n            membership_id,\\n            membership_state,\\n            associate_member_id,\\n            check_id,\\n            date_check_in,\\n            date_check_out\\n        )')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, domain, range=None, impl='numpy', **kwargs):\n    super().__init__(inverse=False, domain=domain, range=range, impl=impl, **kwargs)", "buggy_source_code": "def __init__(self, domain, range=None, impl=None, **kwargs):\n    super().__init__(inverse=False, domain=domain, range=range, impl=impl, **kwargs)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __init__(self, range, domain=None, impl='numpy', **kwargs):\n    super().__init__(inverse=True, domain=range, range=domain, impl=impl, **kwargs)", "buggy_source_code": "def __init__(self, range, domain=None, impl=None, **kwargs):\n    super().__init__(inverse=True, domain=range, range=domain, impl=impl, **kwargs)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@property\ndef holes(self):\n    return [hole for (hole, distance) in self._items]", "buggy_source_code": "@property\ndef holes(self):\n    return [hole for (hole, accumulate_distance) in self._items]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def connect_wifi(addr: str) -> Device:\n    _addr = __(addr)\n    del addr\n    if _addr is None:\n        raise ConnectError('addr is invalid or atx-agent is not running', addr)\n    return Device(_addr)", "buggy_source_code": "def connect_wifi(addr: str) -> Device:\n    _addr = _fix_wifi_addr(addr)\n    if _addr is None:\n        raise ConnectError('addr is invalid or atx-agent is not running', addr)\n    del addr\n    return Device(_addr)", "edit_actions": ["move-tree", "update-node"]}
{"fixed_source_code": "def test_download_file_to_temp_path():\n    temp_file = download_file_to_temp_path(source_url='https://www.google.com/robots.txt')\n    assert os.path.isfile(temp_file)\n    assert os.path.getsize(temp_file) > 0\n    assert_raises(McDownloadFileToTempPathException, download_file_to_temp_path, 'http://mediacloud.org/should-not-exist.txt')", "buggy_source_code": "def test_download_file_to_temp_path():\n    temp_file = download_file_to_temp_path(source_url='https://www.google.com/robots.txt')\n    assert os.path.isfile(temp_file)\n    assert os.path.getsize(temp_file) > 0\n    assert_raises(McDownloadFileToTempPathException, download_file_to_temp_path, 'https://mediacloud.org/should-not-exist.txt')", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def delete(self, id_):\n    if id_ is None:\n        self.set_status(400)\n        return\n    controller = self.settings['controller']\n    controller.trash(id_)", "buggy_source_code": "async def delete(self, id_):\n    if id_ is None:\n        self.set_status(400)\n        return\n    controller = self.settings['controller']\n    await controller.trash(id_)", "edit_actions": []}
{"fixed_source_code": "def _parse_xml(self, node):\n    self.actions = []\n    super()._parse_xml(node)\n    self.delay = float(node.get('delay', 0.5))", "buggy_source_code": "def _parse_xml(self, node):\n    self.action_sets = []\n    super()._parse_xml(node)\n    self.delay = float(node.get('delay', 0.5))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def authorized_create_user(identities, primary, delegate_permissions=None):\n    return self.request('post', '/id/users/', json.dumps({'identities': identities, 'primary_identity': primary_identity, 'delegate_permissions': delegate_permissions}))", "buggy_source_code": "def authorized_create_user(self, identities, primary, permissions=None):\n    return self.request('post', 'id/users/', json.dumps({'identities': identities, 'primary_identity': primary, 'delegate_permissions': permissions}))", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __del__(self):\n    try:\n        self.cpufarm.terminate()\n    except AttributeError:\n        pass", "buggy_source_code": "def __del__(self):\n    try:\n        self.pool.terminate()\n    except AttributeError:\n        pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sort_results(results):\n    results.sort(cmp=locale.strcoll, key=lambda x: unicode_sorter(unicode(x)))", "buggy_source_code": "def sort_results(results):\n    results.sort(cmp=locale.strcoll, key=lambda x: unicode_sorter(str(x)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def serialize_results(results):\n    return [{'value': item.pk, 'display': unicode(item)} for item in results]", "buggy_source_code": "def serialize_results(results):\n    return [{'value': item.pk, 'display': str(item)} for item in results]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def Lookback(expression, count=1):\n    return Backtrack(count) >> term", "buggy_source_code": "def Lookback(expression, count=1):\n    return Backtrack(count) >> expression", "edit_actions": ["update-node"]}
{"fixed_source_code": "@step(u'Then there is no result')\ndef then_there_is_no_result(step):\n    assert_equals(len(world.response.json['ids']), 0)", "buggy_source_code": "@step(u'Then there is no result')\ndef then_there_is_no_result(step):\n    assert_equals(len(world.response.json()['ids']), 0)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "@step(u'Then this note is the second note I created')\ndef then_this_note_is_the_second_note_i_created(step):\n    assert_equals(world.response.json['ids'][0], unicode(world.index_posts[1]['id']))", "buggy_source_code": "@step(u'Then this note is the second note I created')\ndef then_this_note_is_the_second_note_i_created(step):\n    assert_equals(world.response.json()['ids'][0], unicode(world.index_posts[1]['id']))", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    self._hydrate_from_kwargs(kwargs)\n    parser = None", "buggy_source_code": "def __init__(self, **kwargs):\n    self._hydrate_from_kwargs(**kwargs)\n    parser = None", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def connect_db():\n    rv = sqlite3.connect(app.config['DATABASE'])\n    rv.row_factory = sqlite3.Row\n    return rv", "buggy_source_code": "def connect_db():\n    with app.app_context():\n        rv = sqlite3.connect(DB_ADDRESS)\n        rv.row_factory = sqlite3.Row\n        return rv", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delete(self, alertid):\n    self._delete('/alert', alertid)", "buggy_source_code": "def delete(self, alertid):\n    self._delete('/alert/%s' % alertid)", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def _poll_error(self, type, **options):\n    try:\n        self.client.parse_response(type)\n    except self.connection.connection_errors:\n        pass", "buggy_source_code": "def _poll_error(self, type, **options):\n    try:\n        self.client.parse_response(type)\n    except self.connection_errors:\n        pass", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef new_from_bytes(journal_id, contents):\n    return StreamJournalNavigator(journal_id, RecordInputStream(StringIO(contents)))", "buggy_source_code": "@staticmethod\ndef new_from_bytes(journal_id, contents):\n    return StreamJournalNavigator(journal_id, RecordInputStream(BytesIO(contents)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __getitem__(self, key):\n    self.get(key, required=True)", "buggy_source_code": "def __getitem__(self, key):\n    return self.get(key, required=True)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef add_default_factory(cls, setting, factory, cache=False):\n    self._defaults_factories[setting] = (factory, cache)", "buggy_source_code": "@classmethod\ndef add_default_factory(cls, setting, factory, cache=False):\n    cls._defaults_factories[setting] = (factory, cache)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _exit(self, newline=True):\n    if newline:\n        print('')\n    sys.exit(0)", "buggy_source_code": "def _exit(self, newline=True):\n    if newline:\n        self.show_output('')\n    sys.exit(0)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def projects(self):\n    projects = self._get('projects')['projects']\n    return [Project(self, project_data) for project_data in projects]", "buggy_source_code": "def projects(self):\n    projects = self._get('projects')['projects']\n    return [Project(self, data) for data in projects]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def alter_table(self, table_name, columns):\n    url = self.rest_url + 'tables/' + table_name\n    res = self.__send_request(requests.put, url, json=columns)\n    return parse_response_to_json(res)", "buggy_source_code": "def alter_table(self, table_name, columns):\n    url = self.rest_url + 'tables/' + table_name\n    res = self.__send_request(requests.put, url, json=columns)\n    return res", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cmac_algorithm_supported(self, algorithm):\n    return backend._lib.Cryptography_HAS_CMAC == 1 and backend.cipher_supported(algorithm, CBC(b'\\x00' * algorithm.block_size))", "buggy_source_code": "def cmac_algorithm_supported(self, algorithm):\n    return self._lib.Cryptography_HAS_CMAC == 1 and self.cipher_supported(algorithm, CBC(b'\\x00' * algorithm.block_size))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _new_evp_pkey(self):\n    evp_pkey = self._lib.EVP_PKEY_new()\n    assert evp_pkey != self._ffi.NULL\n    return self._ffi.gc(evp_pkey, backend._lib.EVP_PKEY_free)", "buggy_source_code": "def _new_evp_pkey(self):\n    evp_pkey = self._lib.EVP_PKEY_new()\n    assert evp_pkey != self._ffi.NULL\n    return self._ffi.gc(evp_pkey, self._lib.EVP_PKEY_free)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, filename):\n    super(StackableWriter, self).__init__()\n    self.fd = open(filename, 'r+')", "buggy_source_code": "def __init__(self, filename):\n    super(StackableWriter, self).__init__()\n    self.fd = open(filename, 'w')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def read_camera_id(name):\n    splitter = name.split('_')\n    return int(get_numeric(splitter[3]))", "buggy_source_code": "def read_camera_id(name):\n    splitter = name.split('_')\n    return int(get_numeric(splitter[1]))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def export_all(self):\n    query = 'SELECT quote, library, logid from quotes inner join quote_log on quotes.quoteid = quote_log.quoteid'\n    fields = ('quote', 'library', 'log_id')\n    return (dict(zip(fields, res)) for res in self.db.execute(query))", "buggy_source_code": "def export_all(self):\n    query = 'SELECT quote, library, logid from quotes inner join quote_log on quotes.quoteid = quote_log.quoteid'\n    fields = ('text', 'library', 'log_id')\n    return (dict(zip(fields, res)) for res in self.db.execute(query))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mock_create_source(*args: Any, **kwargs: Any) -> ListObject:\n    return util.convert_to_stripe_object(fixture_data['create_source'])", "buggy_source_code": "def mock_create_source(*args: Any, **kwargs: Any) -> ListObject:\n    return stripe.util.convert_to_stripe_object(fixture_data['create_source'])", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def local_load_geodata():\n    local('mkdir /tmp/geofetch')\n    local('./fetch_geodata.sh /tmp/geofetch 01')\n    local('cp data/shapefiles/definitions.py /tmp/geofetch')\n    local('./manage.py load_shapefiles -c -d /tmp/geofetch')", "buggy_source_code": "def local_load_geodata():\n    local('mkdir /tmp/geofetch')\n    local('./fetch_geodata.sh /tmp/geofetch 10')\n    local('cp data/shapefiles/definitions.py /tmp/geofetch')\n    local('./manage.py load_shapefiles -c -d /tmp/geofetch')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error(msg):\n    message(msg, fcolor='red', bcolor='on cyan')", "buggy_source_code": "def error(msg):\n    message(msg, fcolor='red', bcolor='on_yellow')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def migrate7(self):\n    cu = self.db.cursor()\n    add_columns(cu, 'Builds', 'productVersionId INTEGER DEFAULT 0', 'stage VARCHAR(255) DEFAULT \"\"')\n    return True", "buggy_source_code": "def migrate7(self):\n    cu = self.db.cursor()\n    add_columns(cu, 'Builds', 'productVersionId INTEGER DEFAULT 0', 'stageName VARCHAR(255) DEFAULT \"\"')\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def start_window():\n    os.system('firefox')", "buggy_source_code": "def start_window():\n    os.system('nohup firefox </dev/null &>/dev/null &')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@isolate\ndef test_can_download_in_sub_dir(self):\n    project = 'file://a_directory <-\\n        mkdir a_directory\\n\\nfile://a_directory/a_resource <- file://a_directory http://localhost:8043/huge_resource.js ! download\\n        '\n    (rcode, output) = run_tuttle_file(project)\n    assert rcode == 0, output", "buggy_source_code": "@isolate\ndef test_can_download_in_sub_dir(self):\n    project = 'file://a_directory <-\\n        mkdir a_directory\\n\\nfile://a_directory/a_resource <- http://localhost:8043/huge_resource.js file://a_directory ! download\\n        '\n    (rcode, output) = run_tuttle_file(project)\n    assert rcode == 0, output", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _load_yaml_file(yaml_file):\n    with codecs.open(yaml_file, 'r+', encoding='utf-8') as stream:\n        yaml_content = yaml.load(stream)\n        check_format(yaml_file, yaml_content)\n        return yaml_content", "buggy_source_code": "def _load_yaml_file(yaml_file):\n    with codecs.open(yaml_file, 'r', encoding='utf-8') as stream:\n        yaml_content = yaml.load(stream)\n        check_format(yaml_file, yaml_content)\n        return yaml_content", "edit_actions": ["update-node"]}
{"fixed_source_code": "@login_manager.user_loader\ndef load_user(user_id):\n    try:\n        account = UserAccount.from_urlsafe(user_id)\n    except:\n        return None\n    if account.is_enabled:\n        return account", "buggy_source_code": "@login_manager.user_loader\ndef load_user(user_id):\n    try:\n        account = UserAccount.from_urlsafe(user_id)\n    except:\n        return None\n    if account and account.is_enabled:\n        return account", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def erase_in_display(self, how=0):\n    super(CustomHistoryScreen, self).erase_in_display(how)\n    if how == 3:\n        self._reset_history()", "buggy_source_code": "def erase_in_display(self, how=0):\n    super(CustomHistoryScreen, self).erase_in_display(how)\n    if how == 3:\n        self.reset_history()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def reset(self):\n    super(CustomHistoryScreen, self).reset()\n    self._reset_history()", "buggy_source_code": "def reset(self):\n    super(CustomHistoryScreen, self).reset()\n    self.reset_history()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _is_dry_run(request):\n    return request.GET.get('dry_run') == 'true'", "buggy_source_code": "def _is_dry_run(request):\n    return request.POST.get('dry_run') == 'true'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@runs_once\n@roles('service')\ndef deploy_sesame():\n    setup_service()\n    package_sesame()\n    for warname in ['openrdf-sesame', 'sesame-workbench']:\n        _deploy_war('%(local_sesame_dir)s/%(warname)s.war' % env, warname)", "buggy_source_code": "@runs_once\n@roles('service')\ndef deploy_sesame():\n    setup_service()\n    package_sesame()\n    for warname in ['openrdf-sesame', 'sesame-workbench']:\n        _deploy_war('%(local_sesame_dir)s/%(warname)s.war' % venv(), warname)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '{}({!r})'.format(self.__class__.__name__, self._part)", "buggy_source_code": "def __repr__(self):\n    return '{}({!r}, count={})'.format(self.__class__.__name__, self._orig_part, self._count)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "@return_api_response(fmt.withdraw)\ndef withdraw(self, amount, tar_addr, **kwargs):\n    raise NotImplementedError()", "buggy_source_code": "@return_api_response(fmt.withdraw)\ndef withdraw(self, size, tar_addr, **kwargs):\n    raise NotImplementedError()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def work_shape(self, dealias):\n    if dealias == '3//2-rule':\n        return self.real_shape_padded()\n    else:\n        return self.real_shape()", "buggy_source_code": "def work_shape(self, dealias):\n    if dealias == '3/2-rule':\n        return self.real_shape_padded()\n    else:\n        return self.real_shape()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, stdout, stderr):\n    logger.info(_('Initilasing PiSi API...'))\n    pisi.api.init(options=self.options, stdout=stdout, stderr=stderr)", "buggy_source_code": "def init(self, stdout, stderr):\n    logger.info(_('Initialising PiSi API...'))\n    pisi.api.init(options=self.options, stdout=stdout, stderr=stderr)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, msg, code):\n    self.msg = msg\n    self.code = code", "buggy_source_code": "def __init__(self, message, code):\n    super().__init__(message)\n    self.code = code", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef disable(tool, version='head', branch='master'):\n    return", "buggy_source_code": "@staticmethod\ndef disable(tool, branch='master', version='HEAD'):\n    return", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@staticmethod\ndef enable(tool, version='HEAD', branch='master'):\n    return", "buggy_source_code": "@staticmethod\ndef enable(tool, branch='master', version='HEAD'):\n    return", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, testfile, timeout=10):\n    self.testfile = testfile\n    self.timeout = timeout\n    self._test = None", "buggy_source_code": "def __init__(self, testfile, timeout=10.0):\n    self.testfile = testfile\n    self.timeout = timeout\n    self._test = None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def textfile(self, filename):\n    txt = open(filename, 'w')\n    txt.write('start\\n')\n    txt.close()\n    self.textfile = filename", "buggy_source_code": "def textfile(self, filename):\n    txt = open(filename, 'w')\n    txt.write('start\\n')\n    txt.close()\n    self.textfilePath = filename", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop_service(service):\n    subprocess.check_call(['sudo', 'service', service, 'stop'])", "buggy_source_code": "def stop_service(service):\n    subprocess.check_call(['sudo', 'svc', '-d', '/etc/service/' + service])", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_new_activities(self):\n    sql = \"\\n SELECT DISTINCT\\n        a.id,\\n--  subquery columns:\\n        a.activity_identifier,\\n        a.negotiation_status AS negotiation_status\\n    FROM landmatrix_activity                       AS a\\n--  additional joins:\\n    LEFT JOIN landmatrix_activityattribute         AS target_country   ON a.id = target_country.fk_activity_id AND target_country.name = 'target_country'\\nLEFT JOIN landmatrix_country                   AS deal_country     ON CAST(target_country.value AS NUMERIC) = deal_country.id\\nLEFT JOIN landmatrix_activityattribute         AS attr_0                ON a.id = attr_0.fk_activity_id AND attr_0.name = 'intended_size'\\nLEFT JOIN landmatrix_activityattribute         AS attr_1                ON a.id = attr_1.fk_activity_id AND attr_1.name = 'contract_size'\\nLEFT JOIN landmatrix_activityattribute         AS attr_2                ON a.id = attr_2.fk_activity_id AND attr_2.name = 'production_size'\\nLEFT JOIN landmatrix_activityattribute         AS attr_3                ON a.id = attr_3.fk_activity_id AND attr_3.name = 'intention'\\nLEFT JOIN landmatrix_activityattribute         AS attr_4                ON a.id = attr_4.fk_activity_id AND attr_4.name = 'negotiation_status'\\nLEFT JOIN landmatrix_activityattribute         AS attr_5                ON a.id = attr_5.fk_activity_id AND attr_5.name = 'implementation_status'\\nLEFT JOIN landmatrix_activityattribute         AS attr_6                ON a.id = attr_6.fk_activity_id AND attr_6.name = 'implementation_status'\\nLEFT JOIN landmatrix_activityattribute         AS attr_7                ON a.id = attr_7.fk_activity_id AND attr_7.name = 'negotiation_status'\\nLEFT JOIN landmatrix_activityattribute         AS attr_8                ON a.id = attr_8.fk_activity_id AND attr_8.name = 'intention'\\nLEFT JOIN landmatrix_activityattribute         AS attr_9                ON a.id = attr_9.fk_activity_id AND attr_9.name = 'nature'\\n\\n                    LEFT JOIN landmatrix_activityattribute AS attr_10\\n                    ON (a.id = attr_10.fk_activity_id AND attr_10.name = 'target_country')\\n\\n\\n                    LEFT JOIN landmatrix_country AS ac10\\n                    ON CAST(NULLIF(attr_10.value, '0') AS NUMERIC) = ac10.id\\n\\nLEFT JOIN landmatrix_activityattribute         AS attr_11               ON a.id = attr_11.fk_activity_id AND attr_11.name = 'intention'\\nLEFT JOIN landmatrix_activityattribute         AS attr_12               ON a.id = attr_12.fk_activity_id AND attr_12.name = 'nature'\\nLEFT JOIN landmatrix_activityattribute         AS attr_13               ON a.id = attr_13.fk_activity_id AND attr_13.name = 'deal_scope'\\n\\n    WHERE\\n        a.fk_status_id IN (2, 3)\\nAND a.is_public = 't'\\n--  additional where conditions:\\n\\n--  filter sql:\\n        AND (((CAST(COALESCE(NULLIF(attr_0.value, ''), '0') AS FLOAT) >= 200) OR\\n(CAST(COALESCE(NULLIF(attr_1.value, ''), '0') AS FLOAT) >= 200) OR\\n(CAST(COALESCE(NULLIF(attr_2.value, ''), '0') AS FLOAT) >= 200)) AND\\n((attr_3.value NOT IN ('Oil / Gas extraction') OR attr_3.value IS NULL)) AND\\n((attr_4.date IS NULL) OR\\n(attr_5.date IS NULL) OR\\n(attr_6.date > '1999-12-31') OR\\n(attr_7.date > '1999-12-31')) AND\\n(((attr_8.value NOT IN ('Forest logging / management') OR attr_8.value IS NULL)) OR\\n((attr_9.value NOT IN ('Concession') OR attr_9.value IS NULL))) AND\\nac10.high_income = 'f' AND\\n(((attr_11.value NOT IN ('Mining') OR attr_11.value IS NULL))) AND\\n(((attr_12.value NOT IN ('Pure contract farming') OR attr_12.value IS NULL))) AND\\na.deal_scope = 'transnational')\\n        \"\n    cursor = connections['default'].cursor()\n    cursor.execute(sql)\n    return [a[1] for a in cursor.fetchall()]", "buggy_source_code": "def get_new_activities(self):\n    sql = \"\\nSELECT DISTINCT\\n        a.id,\\n--  subquery columns:\\n        a.activity_identifier,\\n        a.negotiation_status AS negotiation_status\\n    FROM landmatrix_activity                       AS a\\n--  additional joins:\\n    LEFT JOIN landmatrix_activityattribute         AS target_country   ON a.id = target_country.fk_activity_id AND target_country.name = 'target_country'\\nLEFT JOIN landmatrix_country                   AS deal_country     ON CAST(target_country.value AS NUMERIC) = deal_country.id\\nLEFT JOIN landmatrix_activityattribute         AS attr_0                ON a.id = attr_0.fk_activity_id AND attr_0.name = 'intended_size'\\nLEFT JOIN landmatrix_activityattribute         AS attr_1                ON a.id = attr_1.fk_activity_id AND attr_1.name = 'contract_size'\\nLEFT JOIN landmatrix_activityattribute         AS attr_2                ON a.id = attr_2.fk_activity_id AND attr_2.name = 'production_size'\\nLEFT JOIN landmatrix_activityattribute         AS attr_3                ON a.id = attr_3.fk_activity_id AND attr_3.name = 'intention'\\nLEFT JOIN landmatrix_activityattribute         AS attr_4                ON a.id = attr_4.fk_activity_id AND attr_4.name = 'init_date'\\nLEFT JOIN landmatrix_activityattribute         AS attr_5                ON a.id = attr_5.fk_activity_id AND attr_5.name = 'init_date'\\nLEFT JOIN landmatrix_activityattribute         AS attr_6                ON a.id = attr_6.fk_activity_id AND attr_6.name = 'intention'\\nLEFT JOIN landmatrix_activityattribute         AS attr_7                ON a.id = attr_7.fk_activity_id AND attr_7.name = 'nature'\\n\\n                    LEFT JOIN landmatrix_activityattribute AS attr_8\\n                    ON (a.id = attr_8.fk_activity_id AND attr_8.name = 'target_country')\\n\\n\\n                    LEFT JOIN landmatrix_country AS ac8\\n                    ON CAST(NULLIF(attr_8.value, '0') AS NUMERIC) = ac8.id\\n\\nLEFT JOIN landmatrix_activityattribute         AS attr_9                ON a.id = attr_9.fk_activity_id AND attr_9.name = 'intention'\\nLEFT JOIN landmatrix_activityattribute         AS attr_10               ON a.id = attr_10.fk_activity_id AND attr_10.name = 'nature'\\nLEFT JOIN landmatrix_activityattribute         AS attr_11               ON a.id = attr_11.fk_activity_id AND attr_11.name = 'deal_scope'\\n\\n    WHERE\\n        a.fk_status_id IN (2, 3)\\nAND a.is_public = 't'\\n--  additional where conditions:\\n\\n--  filter sql:\\n        AND (((CAST(COALESCE(NULLIF(attr_0.value, ''), '0') AS FLOAT) >= 200) OR\\n(CAST(COALESCE(NULLIF(attr_1.value, ''), '0') AS FLOAT) >= 200) OR\\n(CAST(COALESCE(NULLIF(attr_2.value, ''), '0') AS FLOAT) >= 200)) AND\\n((attr_3.value NOT IN ('Oil / Gas extraction') OR attr_3.value IS NULL)) AND\\n((attr_4.value > '1999-12-31') OR\\n(attr_5.value IS NULL)) AND\\n(((attr_6.value NOT IN ('Forest logging / management') OR attr_6.value IS NULL)) OR\\n((attr_7.value NOT IN ('Concession') OR attr_7.value IS NULL))) AND\\nac8.high_income = 'f' AND\\n(((attr_9.value NOT IN ('Mining') OR attr_9.value IS NULL))) AND\\n(((attr_10.value NOT IN ('Pure contract farming') OR attr_10.value IS NULL))) AND\\na.deal_scope = 'transnational')\\n        \"\n    cursor = connections['default'].cursor()\n    cursor.execute(sql)\n    return [a[1] for a in cursor.fetchall()]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __getstate__(self):\n    return {slot: [getattr(self, slot) for slot in self.__slots__]}", "buggy_source_code": "def __getstate__(self):\n    return {'slot': [getattr(self, slot) for slot in self.__slots__]}", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def specified(self):\n    return {n: v for (n, v) in self.data.items() if v != 0}", "buggy_source_code": "def specified(self):\n    return {k: v for (k, v) in self.data.items() if v != 0}", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def match(self, features):\n    return all([self.data[k] == v for (k, v) in features.items()])", "buggy_source_code": "def match(self, ft_mask):\n    return all([self.data[k] == v for (k, v) in ft_mask.items()])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_pretty_printing_supports_pretty_printing():\n    wsgi = graphql_wsgi(TestSchema, pretty=True)\n    c = Client(wsgi)\n    response = c.get('/', {'query': '{test}'})\n    assert response.body == '{\\n  \"data\": {\\n    \"test\": \"Hello World\"\\n  }\\n}'", "buggy_source_code": "def test_pretty_printing_supports_pretty_printing():\n    wsgi = graphql_wsgi(TestSchema, pretty=True)\n    c = Client(wsgi)\n    response = c.get('/', {'query': '{test}'})\n    assert response.body == b'{\\n  \"data\": {\\n    \"test\": \"Hello World\"\\n  }\\n}'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '%s - %s - %s - %s' % (self.light, self.screen, self.security, self.parking)", "buggy_source_code": "def __str__(self):\n    return 'light: %s / screen: %s / security: %s / parking: %s' % (self.light, self.screen, self.security, self.parking)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '(%s) %s:%s - %s:%s' % (self.matchday, self.home_team, self.guest_team, self.home_goals, self.guest_goals)", "buggy_source_code": "def __str__(self):\n    return '(%s) %s:%s - %s:%s' % (self.matchday, self.home_team_statistics.team_name, self.guest_team_statistics.team_name, self.home_team_statistics.score, self.guest_team_statistics.score)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "update-node", "insert-node", "update-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _check_json_result(json_result, result_key, json_request):\n    if 'error' in json_result:\n        raise JsonException(json_request, json_result)\n    return 'result' in json_result and result_key in json_result['result']", "buggy_source_code": "def _check_json_result(json_result, result_key, json_request):\n    if 'error' in json_result:\n        raise JSONException(json_request, json_result)\n    return 'result' in json_result and result_key in json_result['result']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_vertex(vertices, handle):\n    return next((item for item in vertices if item['handle'] == handle), None)", "buggy_source_code": "def get_vertex(vertices, atom):\n    return next((item for item in vertices if item['atom'] == atom), None)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def make_duplicate_vertex(vertex):\n    new_vertex = {'handle': 'vertex_{0}'.format(uuid.uuid4().int), 'name': vertex['name'], 'type': vertex['type']}\n    return new_vertex", "buggy_source_code": "def make_duplicate_vertex(vertex):\n    new_vertex = {'atom': 'vertex_{0}'.format(uuid.uuid4().int), 'name': vertex['name'], 'type': vertex['type']}\n    return new_vertex", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _clearHighlights(self):\n    for i in self._highlight_ids:\n        vim.command('call matchdelete(%d)' % i)\n    self._highlight_ids = []", "buggy_source_code": "def _clearHighlights(self):\n    for i in self._highlight_ids:\n        vim.command('silent! call matchdelete(%d)' % i)\n    self._highlight_ids = []", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_create_planner_override_fail_1(self, m):\n    with self.assertRaises(RequiredFieldMissing):\n        self.canvas.create_planner_override(plannable_type=None, plannable_id=69)", "buggy_source_code": "def test_create_planner_override_fail_1(self, m):\n    with self.assertRaises(RequiredFieldMissing):\n        self.canvas.create_planner_override(plannable_type=None, plannable_id=11)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def find_vertex_range(g, deg, range):\n    ret = libgraph_tool_util.find_vertex_range(g._Graph__graph, _degree(deg), range)\n    return ret", "buggy_source_code": "def find_vertex_range(g, deg, range):\n    ret = libgraph_tool_util.find_vertex_range(g._Graph__graph, _degree(g, deg), range)\n    return ret", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def find_edge_range(g, prop, range):\n    ret = libgraph_tool_util.find_edge_range(g._Graph__graph, _prop(prop, 'e'), range)\n    return ret", "buggy_source_code": "def find_edge_range(g, prop, range):\n    ret = libgraph_tool_util.find_edge_range(g._Graph__graph, _prop('e', g, prop), range)\n    return ret", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def find_edge(g, prop, match):\n    ret = libgraph_tool_util.find_edge_range(g._Graph__graph, _prop(prop, 'e'), (match, match))\n    return ret", "buggy_source_code": "def find_edge(g, prop, match):\n    ret = libgraph_tool_util.find_edge_range(g._Graph__graph, _prop('e', g, prop), (match, match))\n    return ret", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_generic_collection(t: Type) -> bool:\n    return is_generic(t) and issubclass(extract_origin_collection(t), Collection)", "buggy_source_code": "def is_generic_collection(t: Type) -> bool:\n    if not is_generic(t):\n        return False\n    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _raise_org_not_found(self, name):\n    raise OrgNotFound('Org information could not be found.  Expected to find encrypted file at {}/{}.org'.format(self.project_local_dir, name))", "buggy_source_code": "def _raise_org_not_found(self, name):\n    raise OrgNotFound('Org information could not be found. Expected to find encrypted file at {}/{}.org'.format(self.project_local_dir, name))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _raise_service_not_configured(self, name):\n    raise ServiceNotConfigured('Service configuration could not be found.  Expected to find encrypted file at {}/{}.org'.format(self.project_local_dir, name))", "buggy_source_code": "def _raise_service_not_configured(self, name):\n    raise ServiceNotConfigured(\"'{}' service configuration could not be found. Maybe you need to run: cci service connect {}\".format(name, name))", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef priority(self):\n    return self.priority", "buggy_source_code": "@property\ndef priority(self):\n    return self._priority", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_welcome_home_message():\n    return 'Welcome home, Tom'", "buggy_source_code": "def get_welcome_home_message():\n    return 'Welcome home.'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_parametrize_indirect_list_functional(self, testdir):\n    testdir.makepyfile(\"\\n            def pytest_generate_tests(metafunc):\\n                metafunc.parametrize('x, y', [('a', 'b')], indirect=['x'])\\n            def pytest_funcarg__x(request):\\n                return request.param * 3\\n            def pytest_funcarg__y(request):\\n                return request.param * 2\\n\\n            def test_simple(x,y):\\n                assert len(x) == 3\\n                assert len(y) == 1\\n        \")\n    result = testdir.runpytest('-v')\n    result.stdout.fnmatch_lines(['*test_simple*a-b*', '*1 passed*'])", "buggy_source_code": "def test_parametrize_indirect_list_functional(self, testdir):\n    testdir.makepyfile(\"\\n            import pytest\\n            @pytest.fixture(scope='function')\\n            def x(request):\\n                return request.param * 3\\n            @pytest.fixture(scope='function')\\n            def y(request):\\n                return request.param * 2\\n            @pytest.mark.parametrize('x, y', [('a', 'b')], indirect=['x'])\\n            def test_simple(x,y):\\n                assert len(x) == 3\\n                assert len(y) == 1\\n        \")\n    result = testdir.runpytest('-v')\n    result.stdout.fnmatch_lines(['*test_simple*a-b*', '*1 passed*'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def predict_continuous(predictor, data):\n    values = predictor(data, Model.Values)\n    return (values, [None] * len(data))", "buggy_source_code": "def predict_continuous(predictor, data):\n    values = predictor(data, Model.Value)\n    return (values, [None] * len(data))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, nRow, nCol, values):\n    Matrix.__init__(self, nRow, nCol)\n    assert len(values) == nRow * nCol\n    self.values = values", "buggy_source_code": "def __init__(self, numRows, numCols, values):\n    Matrix.__init__(self, numRows, numCols)\n    assert len(values) == numRows * numCols\n    self.values = values", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def toArray(self):\n    return np.ndarray((self.nRow, self.nCol), np.float64, buffer=self.values.tostring())", "buggy_source_code": "def toArray(self):\n    return np.reshape(self.values, (self.numRows, self.numCols), order='F')", "edit_actions": ["update-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "move-tree", "move-tree", "move-tree", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __reduce__(self):\n    return (DenseMatrix, (self.nRow, self.nCol, self.values))", "buggy_source_code": "def __reduce__(self):\n    return (DenseMatrix, (self.numRows, self.numCols, self.values))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, nRow, nCol):\n    self.nRow = nRow\n    self.nCol = nCol", "buggy_source_code": "def __init__(self, numRows, numCols):\n    self.numRows = numRows\n    self.numCols = numCols", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, root_path='data/output/'):\n    self.root_path = root_path", "buggy_source_code": "def __init__(self, root_path='data/'):\n    self.root_path = root_path", "edit_actions": ["update-node"]}
{"fixed_source_code": "@main.app_errorhandler(500)\ndef internal_server_error(e):\n    return (render_template('500.html'), 500)", "buggy_source_code": "@main.app_errorhandler(500)\ndef internal_server_error(e):\n    return (render_template('errors/500.html'), 500)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_temp_dir(self):\n    if not path.exists(self.tempdir):\n        os.makedirs(self.tempdir)\n    return self.tempdir", "buggy_source_code": "def get_temp_dir(self):\n    if not self.tempdir.exists():\n        self.tempdir.mkdir()\n    return self.tempdir", "edit_actions": ["move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_fname_base(self):\n    return ''.join((self.get_temp_dir(), '/', self.projectname))", "buggy_source_code": "def get_fname_base(self):\n    return str(self.get_temp_dir() / self.projectname)", "edit_actions": ["update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_core_data_dict_for_views(self):\n    return dict(worldmap_layerinfo=self, core_data=self.core_data, attribute_data=self.attribute_data, download_links=self.download_links)", "buggy_source_code": "def get_core_data_dict_for_views(self):\n    return dict(worldmap_layerinfo=self, core_data=self.core_data, attribute_data=self.attribute_data, download_links=self.get_formatted_download_links())", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def check_row_is_absent(self, row):\n    pane = self.browser.find_element_by_id('access-policy')\n    pane.find_element_by_xpath('.//table[not(tbody/tr/td[1][text()=\"%s\"])]' % row)", "buggy_source_code": "def check_row_is_absent(self, row):\n    pane = self.browser.find_element_by_id('access-policy')\n    pane.find_element_by_xpath('.//table[not(tbody/tr/td[1][normalize-space(string(.))=\"%s\"])]' % row)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def make_dynamic_default(self):\n    if self.allow_undefined:\n        return undefined\n    else:\n        return super(JSONInstance, self).make_dynamic_default()", "buggy_source_code": "def make_dynamic_default(self):\n    if self.default_args is None and self.default_kwargs is None:\n        return self.default_value\n    else:\n        return super(JSONInstance, self).make_dynamic_default()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def packing_fraction_state(state):\n    return state.get('obj').get_field()[state.inner].mean()", "buggy_source_code": "def packing_fraction_state(state):\n    return state.get('obj').get()[state.inner].mean()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_particles(self):\n    (r, m, pdb) = self.setup_restraint()\n    ps = r.get_input_particles()\n    self.assertEqual(len(ps), 163)", "buggy_source_code": "def test_particles(self):\n    (r, m, pdb) = self.setup_restraint()\n    ps = r.get_input_particles()\n    self.assertEqual(len(ps), 190)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def index(request):\n    return HttpResponseRedirect('/%s/top' % get_appname())", "buggy_source_code": "def index(request):\n    return HttpResponseRedirect('%s/top' % get_url_prefix())", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@login_required\ndef logout_view(request):\n    logout(request)\n    return HttpResponseRedirect('/%s/login/' % get_appname())", "buggy_source_code": "@login_required\ndef logout_view(request):\n    logout(request)\n    return HttpResponseRedirect('%s/login/' % get_url_prefix())", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def set_galaxy_data(self):\n    data = self.galaxies.loc[self.plateifu]\n    for key in data.keys():\n        setattr(self, key, data[key])", "buggy_source_code": "def set_galaxy_data(self, data_origin=None):\n    data = galaxy_data[self.plateifu]\n    for key in data.keys():\n        setattr(self, key, data[key])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='session', params=plateifus)\ndef get_plateifu(request):\n    return request.param", "buggy_source_code": "@pytest.fixture(scope='session', params=galaxy_data.keys())\ndef get_plateifu(request):\n    return request.param", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def get_srt_json(id):\n    url = 'http://comment.acfun.tv/%s.json' % id\n    return get_html(url)", "buggy_source_code": "def get_srt_json(id):\n    url = 'http://static.comment.acfun.mm111.net/%s' % id\n    return get_html(url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@fixture(scope='module')\ndef default():\n    return default_instruction_to_svg()", "buggy_source_code": "@fixture(scope='module')\ndef default():\n    return default_instructions_to_SVG()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_default_instruction_is_not_the_same(default):\n    assert default_instruction_to_svg() != default", "buggy_source_code": "def test_default_instruction_is_not_the_same(default):\n    assert default_instructions_to_SVG() != default", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.mark.parametrize('instruction', list(map(Instruction, default_types)))\ndef test_instructions_have_svg(default, instruction):\n    assert default.has_instruction(instruction)", "buggy_source_code": "@pytest.mark.parametrize('instruction', list(map(Instruction, default_types)))\ndef test_instructions_have_svg(default, instruction):\n    assert default.has_svg_for_instruction(instruction)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_default_does_not_have_all_instructions(default):\n    assert not default.has_instruction(Instruction('asjdkalks'))", "buggy_source_code": "def test_default_does_not_have_all_instructions(default):\n    assert not default.has_svg_for_instruction(Instruction('asjdkalks'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setText(self, text):\n    restriction = Restriction.forLabel(text)\n    if not restriction:\n        text = Restriction.Exists.format()\n    self.label.setText(text)", "buggy_source_code": "def setText(self, text):\n    restriction = Restriction.forLabel(text)\n    if not restriction:\n        text = Restriction.Exists.toString()\n    self.label.setText(text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def broadcast(self, *data):\n    for client in self.clients:\n        client.send(data)", "buggy_source_code": "def broadcast(self, *data):\n    for client in self.clients:\n        client.send(*data)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def PlotContour(ax, contour):\n    ax.plot(contour[:, 1], contour[:, 0], 'b-', linewidth=2)", "buggy_source_code": "def PlotContour(ax, contour):\n    ax.plot(contour[:, 0], contour[:, 1], 'b-', linewidth=2)", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def _preBuild(self, kSceneItem):\n    si.SetValue('preferences.scripting.cmdlog', False, '')\n    si.BeginUndo('Kraken SI Build: ' + kSceneItem.name)\n    return True", "buggy_source_code": "def _preBuild(self, kSceneItem):\n    si.SetValue('preferences.scripting.cmdlog', False, '')\n    si.BeginUndo('Kraken SI Build: ' + kSceneItem.getName())\n    return True", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'CallerMacro(%s)' % repr(self.command)", "buggy_source_code": "def __repr__(self):\n    return 'CallerMacro(%r,%r)' % (self._drawCallable, self._wrapCallable)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef release_compiler(cls):\n    _gl.glReleaseShaderCompiler()", "buggy_source_code": "def release_compiler(self):\n    with self._context:\n        _gl.glReleaseShaderCompiler()", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def today(self):\n    today = timezone.now().date()\n    try:\n        return Day.objects.get(date=today)\n    except Day.DoesNotExist:\n        return None", "buggy_source_code": "def today(self):\n    today = timezone.localdate()\n    try:\n        return Day.objects.get(date=today)\n    except Day.DoesNotExist:\n        return None", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_xmodule_handler_dispatch(self):\n    self.module.xmodule_handler(self.request, 'dispatch')\n    self.module.handle_ajax.assert_called_with('dispatch', self.request.POST)", "buggy_source_code": "def test_xmodule_handler_dispatch(self):\n    self.module.xmodule_handler(self.request, 'dispatch')\n    self.module.handle_ajax.assert_called_with('dispatch', MultiDict(self.request.POST))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_xmodule_handler_passed_data(self):\n    self.module.xmodule_handler(self.request)\n    self.module.handle_ajax.assert_called_with(None, self.request.POST)", "buggy_source_code": "def test_xmodule_handler_passed_data(self):\n    self.module.xmodule_handler(self.request)\n    self.module.handle_ajax.assert_called_with(None, MultiDict(self.request.POST))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def set_xml(self, key, xml_string):\n    self.connection.execute(\"INSERT INTO cache VALUES('%s', '%s')\" % (key, xml_string))\n    self.connection.commit()", "buggy_source_code": "def set_xml(self, key, xml_string):\n    self.connection.execute('INSERT INTO cache VALUES(?, ?)', (key, xml_string))\n    self.connection.commit()", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def get_xml(self, key):\n    row = self.connection.execute(\"SELECT xml FROM cache WHERE key='%s'\" % key).fetchone()\n    return row[0]", "buggy_source_code": "def get_xml(self, key):\n    row = self.connection.execute('SELECT xml FROM cache WHERE key=?', (key,)).fetchone()\n    return row[0]", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def has_key(self, key):\n    row = self.connection.execute(\"SELECT COUNT(*) FROM cache WHERE key='%s'\" % key).fetchone()\n    return row[0] > 0", "buggy_source_code": "def has_key(self, key):\n    row = self.connection.execute('SELECT COUNT(*) FROM cache WHERE key=?', (key,)).fetchone()\n    return row[0] > 0", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef res(self):\n    return self.volume.name", "buggy_source_code": "@property\ndef res(self):\n    return self.connection.res_name", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def fill_dni_array():\n    print('INFO: Loading DNI array...')\n    DNI_PATH = '/home/ubuntu/dni.txt'\n    dni_file = open(DNI_PATH, 'r')\n    for line in dni_file:\n        dni_array[line.strip(' \\t\\n\\r')] = True", "buggy_source_code": "def fill_dni_array():\n    print('INFO: Loading DNI array...')\n    DNI_PATH = '/home/authapi/dni.txt'\n    dni_file = open(DNI_PATH, 'r')\n    for line in dni_file:\n        dni_array[line.strip(' \\t\\n\\r')] = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_layout_widget_is_registered_for_layer(self):\n    widget = getMultiAdapter((ILayoutAware['contentLayout'], self.request), IFieldWidget)\n    self.assertIsInstance(widget, LayoutWidget)", "buggy_source_code": "def test_layout_widget_is_registered_for_layer(self):\n    widget = getMultiAdapter((ILayoutAware['content'], self.request), IFieldWidget)\n    self.assertIsInstance(widget, LayoutWidget)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_bans_single():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_single)\n    assert fishbans(test_user, DummyBot) == bans_reply_single", "buggy_source_code": "@responses.activate\ndef test_bans_single():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_single)\n    assert fishbans(test_user, DummyBot) == bans_reply_single", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_count_none():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_none)\n    assert bancount(test_user, DummyBot) == count_reply_none", "buggy_source_code": "@responses.activate\ndef test_count_none():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_none)\n    assert bancount(test_user, DummyBot) == count_reply_none", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_count():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', body=test_api)\n    assert bancount(test_user, DummyBot) == count_reply", "buggy_source_code": "@responses.activate\ndef test_count():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', body=test_api)\n    assert bancount(test_user, DummyBot) == count_reply", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_bans_failed():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_failed)\n    assert fishbans(test_user, DummyBot) == reply_failed", "buggy_source_code": "@responses.activate\ndef test_bans_failed():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_failed)\n    assert fishbans(test_user, DummyBot) == reply_failed", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_bans_error():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', status=404)\n    assert fishbans(test_user, DummyBot) == reply_error", "buggy_source_code": "@responses.activate\ndef test_bans_error():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', status=404)\n    assert fishbans(test_user, DummyBot) == reply_error", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_bans_none():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_none)\n    assert fishbans(test_user, DummyBot) == bans_reply_none", "buggy_source_code": "@responses.activate\ndef test_bans_none():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_none)\n    assert fishbans(test_user, DummyBot) == bans_reply_none", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_count_error():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', status=404)\n    assert bancount(test_user, DummyBot) == reply_error", "buggy_source_code": "@responses.activate\ndef test_count_error():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', status=404)\n    assert bancount(test_user, DummyBot) == reply_error", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_count_failed():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_failed)\n    assert bancount(test_user, DummyBot) == reply_failed", "buggy_source_code": "@responses.activate\ndef test_count_failed():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', body=test_api_failed)\n    assert bancount(test_user, DummyBot) == reply_failed", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@httpretty.activate\ndef test_bans():\n    httpretty.register_uri(httpretty.GET, 'http://api.fishbans.com/stats/notch/', body=test_api)\n    assert fishbans(test_user, DummyBot) == bans_reply", "buggy_source_code": "@responses.activate\ndef test_bans():\n    responses.add(responses.GET, 'http://api.fishbans.com/stats/notch/', body=test_api)\n    assert fishbans(test_user, DummyBot) == bans_reply", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def K204_34(self):\n    return (aw.qmc.extra309TX, aw.qmc.extra309T3, aw.qmc.extra309T4)", "buggy_source_code": "def K204_34(self):\n    return (aw.qmc.extra309TX, aw.qmc.extra309T4, aw.qmc.extra309T3)", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def CENTER309_34(self):\n    return (aw.qmc.extra309TX, aw.qmc.extra309T3, aw.qmc.extra309T4)", "buggy_source_code": "def CENTER309_34(self):\n    return (aw.qmc.extra309TX, aw.qmc.extra309T4, aw.qmc.extra309T3)", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def handleManageRequest(self, packet):\n    self.addManagedNode(packet)\n    node = Node(self.matchFriend(Node(packet)))\n    return self.respondWithRelationship(node)", "buggy_source_code": "def handleManageRequest(self, packet):\n    node = Node(self.matchFriend(Node(packet)))\n    self.addManagedNode(packet)\n    return self.respondWithRelationship(node)", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def generate_uuid():\n    uuid_temp = uuid.uuid5(uuid.NAMESPACE_DNS, cadftype.CADF_VERSION_1_0_0 + timestamp.get_utc_now())\n    return str(uuid_temp)", "buggy_source_code": "def generate_uuid():\n    prefix = CONF.audit.namespace + ':' if CONF.audit.namespace else ''\n    return prefix + str(uuid.uuid4())", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delete(self, *args, **kwds):\n    driver = OpenStackDriver()\n    driver.delete_tenant(self.tenant_id)\n    super(Slice, self).delete(*args, **kwargs)", "buggy_source_code": "def delete(self, *args, **kwds):\n    driver = OpenStackDriver()\n    driver.delete_tenant(self.tenant_id)\n    super(Slice, self).delete(*args, **kwds)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_volume(self):\n    return self.volume", "buggy_source_code": "def get_volume(self):\n    return self.volume or DEFAULT_VOLUME", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def create_html():\n    html = '                <!DOCTYPE html>\\n                <meta charset=\"utf-8\">\\n                <style type=\"text/css\">\\n                /* Basic Styling with CSS */\\n                h2 {\\n                  text-align: center;\\n                  font-family: \"Times New Roman\";\\n                  font-size: 19px;\\n                  padding: 10px;\\n                }\\n                p {\\n                  font-size: 14px;\\n                }\\n                table {\\n                  font-family: \"Times New Roman\";\\n                  width: 60%%;\\n                }\\n                td {\\n                  border: 1px solid #dddddd;\\n                  text-align: left;\\n                  padding: 8px;\\n                  font-size: 13px;\\n                }\\n                th {\\n                  border: 1px solid #dddddd;\\n                  text-align: left;\\n                  padding: 8px;\\n                  font-size: 15px;\\n                }\\n                tr:nth-child(even) {\\n                  background-color: #e6f2ff;\\n                }\\n                div {\\n                  display: block;\\n                  height: 500px;\\n                  width: 100%%;\\n                }\\n                .header {\\n                  margin-left: auto;\\n                  margin-right: auto;\\n                  height: auto;\\n                  width: 85%%;\\n                  background-color: #e6f2ff;\\n                }\\n                /* Style the lines by removing the fill and applying a stroke */\\n                .line {\\n                    fill: none;\\n                    stroke: #cc0000;\\n                    stroke-width: 2;\\n                }\\n                .overlay {\\n                  fill: none;\\n                  pointer-events: all;\\n                }\\n                /* Legend */\\n                .data-name {\\n                    margin: 0 !important;\\n                }\\n                .key-dot {\\n                    display: inline-block;\\n                    height: 7px;\\n                    margin-right: .5em;\\n                    width: 7px;\\n                }\\n                .mem { background: #2008FF;}\\n                .cpu { background: #800380;}\\n                .disk { background: #218000;\\n                }\\n                #legend{\\n                    overflow:hidden;\\n                }\\n                .legend {\\n                    position: relative;\\n                    float:left;\\n                    height: auto;\\n                    width: 100px;\\n                }\\n                .legend-wrapper {\\n                    margin-left: 150px;\\n                    height: auto;\\n                }\\n                /* Grid */\\n                .grid line {\\n                  stroke: #e6f2ff;\\n                  stroke-opacity: 0.9;\\n                  shape-rendering: crispEdges;\\n                }\\n                .grid path {\\n                  stroke-width: 0;\\n                }\\n                </style>\\n                <!-- Body tag is where we will append our SVG and SVG objects-->\\n                <body>\\n                  <section>\\n                    <div class=\"header\">\\n                      <h2>Summary Metrics and Time</h2>\\n                    </div>\\n                    </br>\\n                    <table align=\"center\">\\n                      <tr>\\n                        <th colspan=\"2\">General Information</th>\\n                      </tr>\\n                      <tr>\\n                        <td>EC2 Instance Type</td>\\n                        <td>%s</td>\\n                      </tr>\\n                    </table>\\n                    </br></br>\\n                    <table align=\"center\">\\n                      <tr>\\n                        <th>Metric</th>\\n                        <th>Value</th>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Memory Used [Mb]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Minimum Memory Available [Mb]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Disk Used (/data1) [Gb]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Memory Utilization [%%]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum CPU Utilization [%%]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Disk Utilization (/data1) [%%]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Cost</td>\\n                        <td>%s</td>\\n                      </tr>\\n                    </table>\\n                    </br></br>\\n                    <table align=\"center\">\\n                      <tr>\\n                        <th>Start Time</th>\\n                        <th>End Time</th>\\n                        <th>Total Time</th>\\n                      </tr>\\n                      <tr>\\n                        <td>%s</td>\\n                        <td>%s</td>\\n                        <td>%s</td>\\n                      </tr>\\n                    </table>\\n                  </section>\\n                  </br></br>\\n                  <section>\\n                    <div class=\"header\">\\n                      <h2>Resources Utilization</h2>\\n                    </div>\\n                      <div id=\"chart_percent\">\\n                        <div class=\"legend-wrapper\">\\n                            <div class=\"legend\"> <p class=\"data-name\"><span class=\"key-dot cpu\"></span>CPU Utilization</p> </div>\\n                            <div class=\"legend\"> <p class=\"data-name\"><span class=\"key-dot mem\"></span>Memory Utilization</p> </div>\\n                            <div class=\"legend\"> <p class=\"data-name\"><span class=\"key-dot disk\"></span>Disk Utilization (/data1)</p> </div>\\n                        </div>\\n                      </div></br></br>\\n                    <div class=\"header\">\\n                      <h2>Memory Usage</h2>\\n                    </div>\\n                      <div id=\"chart_max_mem\"> </div>\\n                    <div class=\"header\">\\n                      <h2>Memory Available</h2>\\n                    </div>\\n                      <div id=\"chart_min_mem\"> </div>\\n                    <div class=\"header\">\\n                      <h2>Disk Usage (/data1)</h2>\\n                    </div>\\n                      <div id=\"chart_disk\"> </div>\\n                  </section>\\n                </body>\\n                <!-- Load in the d3 library -->\\n                <script src=\"https://d3js.org/d3.v5.min.js\"></script>\\n                <script>\\n                //var onResize = _.debounce(function(){\\n                //  svgElem.innerHTML = \\'\\';\\n                //  line_plot();\\n                //});\\n                //window.onload = function(){\\n                //  window.addEventListener(\\'resize\\', onResize);\\n                //}\\n                /* Functions definition */\\n                function make_x_gridlines(x, n) {\\n                  var n_l = 0\\n                  if (n < 1440) {\\n                    n_l = n / 10\\n                  } else { // runtime longer than a day\\n                    n_l = n / 60\\n                  }\\n                  return d3.axisBottom(x)\\n                        .ticks(n_l)\\n                }\\n                function make_y_gridlines(y, n) {\\n                  var n_l = 0\\n                  if (n <= 100) {\\n                    n_l = n / 10\\n                  } else if (n <= 1000) {\\n                    n_l = n / 100\\n                  } else if (n <= 50000) {\\n                    n_l = n / 1000\\n                  } else {\\n                    n_l = n / 5000\\n                  }\\n                  return d3.axisLeft(y)\\n                        .ticks(n_l)\\n                }\\n                function percent_plot(data_array, div) { // data_array = [data_mem, data_disk, data_cpu]\\n                  // Get div dimensions\\n                  var div_width = document.getElementById(div).offsetWidth\\n                    , div_height = document.getElementById(div).offsetHeight;\\n                  // Use the margin convention practice\\n                  var margin = {top: 40, right: 150, bottom: 100, left: 150}\\n                    , width = div_width - margin.left - margin.right // Use the window\\'s width\\n                    , height = div_height - margin.top - margin.bottom; // Use the window\\'s height\\n                  // Dataset as y values\\n                  data_mem = data_array[0]\\n                  data_disk = data_array[1]\\n                  data_cpu = data_array[2]\\n                  // The number of datapoints\\n                  var n = data_mem.length;\\n                  var n_cpu = data_cpu.length;\\n                  // X scale will use the index of our data\\n                  var xScale = d3.scaleLinear()\\n                      .domain([0, n-1]) // input\\n                      .range([0, width]); // output\\n                  // X scale for CPU utilization that has interval size of 5 instead of 1\\n                  var xScale_cpu = d3.scaleLinear()\\n                      .domain([0, n_cpu-1]) // input\\n                      .range([0, width]); // output\\n                  // Y scale will use the randomly generate number\\n                  var yScale = d3.scaleLinear()\\n                      .domain([0, 100]) // input\\n                      .range([height, 0]); // output\\n                  // d3\\'s line generator\\n                  var line = d3.line()\\n                      .x(function(d, i) { return xScale(i); }) // set the x values for the line generator\\n                      .y(function(d) { return yScale(d.y); }) // set the y values for the line generator\\n                      //.curve(d3.curveMonotoneX) // apply smoothing to the line\\n                  // d3\\'s line generator for CPU utilization\\n                  var line_cpu = d3.line()\\n                      .x(function(d, i) { return xScale_cpu(i); }) // set the x values for the line generator\\n                      .y(function(d) { return yScale(d.y); }) // set the y values for the line generator\\n                      //.curve(d3.curveMonotoneX) // apply smoothing to the line\\n                  // An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\\n                  var dataset_mem = d3.range(n).map(function(d) { return {\"y\": data_mem[d] } })\\n                  var dataset_disk = d3.range(n).map(function(d) { return {\"y\": data_disk[d] } })\\n                  var dataset_cpu = d3.range(n_cpu).map(function(d) { return {\"y\": data_cpu[d] } })\\n                  // Add the SVG to the page\\n                  var svg = d3.select(\"#\" + div).append(\"svg\")\\n                      .attr(\"width\", width + margin.left + margin.right)\\n                      .attr(\"height\", height + margin.top + margin.bottom)\\n                    .append(\"g\")\\n                      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\\n                  // Add the X gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(make_x_gridlines(xScale, n)\\n                          .tickSize(-height)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Add the Y gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .call(make_y_gridlines(yScale, 100)\\n                          .tickSize(-width)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Call the x axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"x axis\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\\n                  // Call the y axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"y axis\")\\n                      .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset_mem) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .style(\"stroke\", \"blue\")\\n                      .attr(\"d\", line); // Calls the line generator\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset_disk) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .style(\"stroke\", \"green\")\\n                      .attr(\"d\", line); // Calls the line generator\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset_cpu) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .style(\"stroke\", \"purple\")\\n                      .attr(\"d\", line_cpu); // Calls the line generator\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"translate(\" + (width / 2) + \" ,\" + (height + margin.bottom - margin.bottom / 2) + \")\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(\"Time [min]\");\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"rotate(-90)\")\\n                      .attr(\"y\", 0 - margin.left + margin.left / 2)\\n                      .attr(\"x\",0 - (height / 2))\\n                      .attr(\"dy\", \"1em\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(\\'Percentage [%%]\\');\\n                }\\n                function line_plot(data, div, axis_label) {\\n                  // Get div dimensions\\n                  var div_width = document.getElementById(div).offsetWidth\\n                    , div_height = document.getElementById(div).offsetHeight;\\n                  // Use the margin convention practice\\n                  var margin = {top: 20, right: 150, bottom: 100, left: 150}\\n                    , width = div_width - margin.left - margin.right // Use the window\\'s width\\n                    , height = div_height - margin.top - margin.bottom; // Use the window\\'s height\\n                  // The number of datapoints\\n                  var n = data.length;\\n                  // X scale will use the index of our data\\n                  var xScale = d3.scaleLinear()\\n                      .domain([0, n-1]) // input\\n                      .range([0, width]); // output\\n                  // Y scale will use the randomly generate number\\n                  var yScale = d3.scaleLinear()\\n                      .domain([0, d3.max(data)]) // input\\n                      .range([height, 0]); // output\\n                  // d3\\'s line generator\\n                  var line = d3.line()\\n                      .x(function(d, i) { return xScale(i); }) // set the x values for the line generator\\n                      .y(function(d) { return yScale(d.y); }) // set the y values for the line generator\\n                      //.curve(d3.curveMonotoneX) // apply smoothing to the line\\n                  // An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\\n                  var dataset = d3.range(n).map(function(d) { return {\"y\": data[d] } })\\n                  // Add the SVG to the page\\n                  var svg = d3.select(\"#\" + div).append(\"svg\")\\n                      .attr(\"width\", width + margin.left + margin.right)\\n                      .attr(\"height\", height + margin.top + margin.bottom)\\n                    .append(\"g\")\\n                      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\\n                  // Add the X gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(make_x_gridlines(xScale, n)\\n                          .tickSize(-height)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Add the Y gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .call(make_y_gridlines(yScale, d3.max(data))\\n                          .tickSize(-width)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Call the x axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"x axis\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\\n                  // Call the y axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"y axis\")\\n                      .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .attr(\"d\", line); // Calls the line generator\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"translate(\" + (width / 2) + \" ,\" + (height + margin.bottom - margin.bottom / 2) + \")\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(\"Time [min]\");\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"rotate(-90)\")\\n                      .attr(\"y\", 0 - margin.left + margin.left / 2)\\n                      .attr(\"x\",0 - (height / 2))\\n                      .attr(\"dy\", \"1em\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(axis_label);\\n                }\\n                /* Reading data and Plotting */\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    return data.map(function(d){\\n                      if (Number.isNaN(parseFloat(d.max_mem_used_MB)) == false) {\\n                        return parseFloat(d.max_mem_used_MB);\\n                      }\\n                    });\\n                  }).then(function(d){\\n                    line_plot(d, \\'chart_max_mem\\', \\'Memory used [Mb]\\');\\n                });\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    return data.map(function(d){\\n                      if (Number.isNaN(parseFloat(d.min_mem_available_MB)) == false) {\\n                        return parseFloat(d.min_mem_available_MB);\\n                      }\\n                    });\\n                  }).then(function(d){\\n                    line_plot(d, \\'chart_min_mem\\', \\'Memory available [Mb]\\');\\n                });\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    return data.map(function(d){\\n                      if (Number.isNaN(parseFloat(d.max_disk_space_used_GB)) == false) {\\n                        return parseFloat(d.max_disk_space_used_GB);\\n                      }\\n                    });\\n                  }).then(function(d){\\n                    line_plot(d, \\'chart_disk\\', \\'Disk space used [Gb]\\');\\n                });\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    var data_array = [[], [], []]\\n                    data.forEach(function(d) {\\n                        if (Number.isNaN(parseFloat(d.max_mem_utilization_percent)) == false) {\\n                          data_array[0].push(parseFloat(d.max_mem_utilization_percent));\\n                        }\\n                        if (Number.isNaN(parseFloat(d.max_disk_space_utilization_percent)) == false) {\\n                          data_array[1].push(parseFloat(d.max_disk_space_utilization_percent));\\n                        }\\n                        if (Number.isNaN(parseFloat(d.max_cpu_utilization_percent)) == false) {\\n                          data_array[2].push(parseFloat(d.max_cpu_utilization_percent));\\n                        }\\n                    });\\n                    return data_array;\\n                  }).then(function(d_a){\\n                    percent_plot(d_a, \\'chart_percent\\');\\n                });\\n                </script>            '\n    return html", "buggy_source_code": "def create_html():\n    html = '                <!DOCTYPE html>\\n                <meta charset=\"utf-8\">\\n                <style type=\"text/css\">\\n                /* Basic Styling with CSS */\\n                h2 {\\n                  text-align: center;\\n                  font-family: \"Times New Roman\";\\n                  font-size: 19px;\\n                  padding: 10px;\\n                }\\n                p {\\n                  font-size: 14px;\\n                }\\n                table {\\n                  font-family: \"Times New Roman\";\\n                  width: 60%%;\\n                }\\n                td {\\n                  border: 1px solid #dddddd;\\n                  text-align: left;\\n                  padding: 8px;\\n                  font-size: 13px;\\n                }\\n                th {\\n                  border: 1px solid #dddddd;\\n                  text-align: left;\\n                  padding: 8px;\\n                  font-size: 15px;\\n                }\\n                tr:nth-child(even) {\\n                  background-color: #e6f2ff;\\n                }\\n                div {\\n                  display: block;\\n                  height: 500px;\\n                  width: 100%%;\\n                }\\n                .header {\\n                  margin-left: auto;\\n                  margin-right: auto;\\n                  height: auto;\\n                  width: 85%%;\\n                  background-color: #e6f2ff;\\n                }\\n                /* Style the lines by removing the fill and applying a stroke */\\n                .line {\\n                    fill: none;\\n                    stroke: #cc0000;\\n                    stroke-width: 2;\\n                }\\n                .overlay {\\n                  fill: none;\\n                  pointer-events: all;\\n                }\\n                /* Legend */\\n                .data-name {\\n                    margin: 0 !important;\\n                }\\n                .key-dot {\\n                    display: inline-block;\\n                    height: 7px;\\n                    margin-right: .5em;\\n                    width: 7px;\\n                }\\n                .mem { background: #2008FF;}\\n                .cpu { background: #800380;}\\n                .disk { background: #218000;\\n                }\\n                #legend{\\n                    overflow:hidden;\\n                }\\n                .legend {\\n                    position: relative;\\n                    float:left;\\n                    height: auto;\\n                    width: 100px;\\n                }\\n                .legend-wrapper {\\n                    margin-left: 150px;\\n                    height: auto;\\n                }\\n                /* Grid */\\n                .grid line {\\n                  stroke: #e6f2ff;\\n                  stroke-opacity: 0.9;\\n                  shape-rendering: crispEdges;\\n                }\\n                .grid path {\\n                  stroke-width: 0;\\n                }\\n                </style>\\n                <!-- Body tag is where we will append our SVG and SVG objects-->\\n                <body>\\n                  <section>\\n                    <div class=\"header\">\\n                      <h2>Summary Metrics and Time</h2>\\n                    </div>\\n                    </br>\\n                    <table align=\"center\">\\n                      <tr>\\n                        <th colspan=\"2\">General Information</th>\\n                      </tr>\\n                      <tr>\\n                        <td>EC2 Instance Type</td>\\n                        <td>%s</td>\\n                      </tr>\\n                    </table>\\n                    </br></br>\\n                    <table align=\"center\">\\n                      <tr>\\n                        <th>Metric</th>\\n                        <th>Value</th>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Memory Used [Mb]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Minimum Memory Available [Mb]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Disk Used (/data1) [Gb]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Memory Utilization [%%]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum CPU Utilization [%%]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Maximum Disk Utilization (/data1) [%%]</td>\\n                        <td>%d</td>\\n                      </tr>\\n                      <tr>\\n                        <td>Cost</td>\\n                        <td>%s</td>\\n                      </tr>\\n                    </table>\\n                    </br></br>\\n                    <table align=\"center\">\\n                      <tr>\\n                        <th>Start Time</th>\\n                        <th>End Time</th>\\n                        <th>Total Time</th>\\n                      </tr>\\n                      <tr>\\n                        <td>%s</td>\\n                        <td>%s</td>\\n                        <td>%s</td>\\n                      </tr>\\n                    </table>\\n                  </section>\\n                  </br></br>\\n                  <section>\\n                    <div class=\"header\">\\n                      <h2>Resources Utilization</h2>\\n                    </div>\\n                      <div id=\"chart_percent\">\\n                        <div class=\"legend-wrapper\">\\n                            <div class=\"legend\"> <p class=\"data-name\"><span class=\"key-dot cpu\"></span>CPU Utilization</p> </div>\\n                            <div class=\"legend\"> <p class=\"data-name\"><span class=\"key-dot mem\"></span>Memory Utilization</p> </div>\\n                            <div class=\"legend\"> <p class=\"data-name\"><span class=\"key-dot disk\"></span>Disk Utilization (/data1)</p> </div>\\n                        </div>\\n                      </div></br></br>\\n                    <div class=\"header\">\\n                      <h2>Memory Usage</h2>\\n                    </div>\\n                      <div id=\"chart_max_mem\"> </div>\\n                    <div class=\"header\">\\n                      <h2>Memory Available</h2>\\n                    </div>\\n                      <div id=\"chart_min_mem\"> </div>\\n                    <div class=\"header\">\\n                      <h2>Disk Usage (/data1)</h2>\\n                    </div>\\n                      <div id=\"chart_disk\"> </div>\\n                  </section>\\n                </body>\\n                <!-- Load in the d3 library -->\\n                <script src=\"https://d3js.org/d3.v5.min.js\"></script>\\n                <script>\\n                //var onResize = _.debounce(function(){\\n                //  svgElem.innerHTML = \\'\\';\\n                //  line_plot();\\n                //});\\n                //window.onload = function(){\\n                //  window.addEventListener(\\'resize\\', onResize);\\n                //}\\n                /* Functions definition */\\n                function make_x_gridlines(x, n) {\\n                  var n_l = 0\\n                  if (n < 1440) {\\n                    n_l = n / 10\\n                  } else { // runtime longer than a day\\n                    n_l = n / 60\\n                  }\\n                  return d3.axisBottom(x)\\n                        .ticks(n_l)\\n                }\\n                function make_y_gridlines(y, n) {\\n                  var n_l = 0\\n                  if (n <= 200) {\\n                    n_l = n / 10\\n                  } else if (n <= 500) {\\n                    n_l = n / 50\\n                  } else if (n <= 2000) {\\n                    n_l = n / 100\\n                  } else if (n <= 5000) {\\n                    n_l = n / 500\\n                  } else if (n <= 20000) {\\n                    n_l = n / 1000\\n                  } else {\\n                    n_l = n / 5000\\n                  }\\n                  return d3.axisLeft(y)\\n                        .ticks(n_l)\\n                }\\n                function percent_plot(data_array, div) { // data_array = [data_mem, data_disk, data_cpu]\\n                  // Get div dimensions\\n                  var div_width = document.getElementById(div).offsetWidth\\n                    , div_height = document.getElementById(div).offsetHeight;\\n                  // Use the margin convention practice\\n                  var margin = {top: 40, right: 150, bottom: 100, left: 150}\\n                    , width = div_width - margin.left - margin.right // Use the window\\'s width\\n                    , height = div_height - margin.top - margin.bottom; // Use the window\\'s height\\n                  // Dataset as y values\\n                  data_mem = data_array[0]\\n                  data_disk = data_array[1]\\n                  data_cpu = data_array[2]\\n                  // The number of datapoints\\n                  var n = data_mem.length;\\n                  var n_cpu = data_cpu.length;\\n                  // X scale will use the index of our data\\n                  var xScale = d3.scaleLinear()\\n                      .domain([0, n-1]) // input\\n                      .range([0, width]); // output\\n                  // X scale for CPU utilization that has interval size of 5 instead of 1\\n                  var xScale_cpu = d3.scaleLinear()\\n                      .domain([0, n_cpu-1]) // input\\n                      .range([0, width]); // output\\n                  // Y scale will use the randomly generate number\\n                  var yScale = d3.scaleLinear()\\n                      .domain([0, 100]) // input\\n                      .range([height, 0]); // output\\n                  // d3\\'s line generator\\n                  var line = d3.line()\\n                      .x(function(d, i) { return xScale(i); }) // set the x values for the line generator\\n                      .y(function(d) { return yScale(d.y); }) // set the y values for the line generator\\n                      //.curve(d3.curveMonotoneX) // apply smoothing to the line\\n                  // d3\\'s line generator for CPU utilization\\n                  var line_cpu = d3.line()\\n                      .x(function(d, i) { return xScale_cpu(i); }) // set the x values for the line generator\\n                      .y(function(d) { return yScale(d.y); }) // set the y values for the line generator\\n                      //.curve(d3.curveMonotoneX) // apply smoothing to the line\\n                  // An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\\n                  var dataset_mem = d3.range(n).map(function(d) { return {\"y\": data_mem[d] } })\\n                  var dataset_disk = d3.range(n).map(function(d) { return {\"y\": data_disk[d] } })\\n                  var dataset_cpu = d3.range(n_cpu).map(function(d) { return {\"y\": data_cpu[d] } })\\n                  // Add the SVG to the page\\n                  var svg = d3.select(\"#\" + div).append(\"svg\")\\n                      .attr(\"width\", width + margin.left + margin.right)\\n                      .attr(\"height\", height + margin.top + margin.bottom)\\n                    .append(\"g\")\\n                      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\\n                  // Add the X gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(make_x_gridlines(xScale, n)\\n                          .tickSize(-height)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Add the Y gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .call(make_y_gridlines(yScale, 100)\\n                          .tickSize(-width)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Call the x axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"x axis\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\\n                  // Call the y axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"y axis\")\\n                      .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset_mem) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .style(\"stroke\", \"blue\")\\n                      .attr(\"d\", line); // Calls the line generator\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset_disk) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .style(\"stroke\", \"green\")\\n                      .attr(\"d\", line); // Calls the line generator\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset_cpu) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .style(\"stroke\", \"purple\")\\n                      .attr(\"d\", line_cpu); // Calls the line generator\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"translate(\" + (width / 2) + \" ,\" + (height + margin.bottom - margin.bottom / 2) + \")\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(\"Time [min]\");\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"rotate(-90)\")\\n                      .attr(\"y\", 0 - margin.left + margin.left / 2)\\n                      .attr(\"x\",0 - (height / 2))\\n                      .attr(\"dy\", \"1em\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(\\'Percentage [%%]\\');\\n                }\\n                function line_plot(data, div, axis_label) {\\n                  // Get div dimensions\\n                  var div_width = document.getElementById(div).offsetWidth\\n                    , div_height = document.getElementById(div).offsetHeight;\\n                  // Use the margin convention practice\\n                  var margin = {top: 20, right: 150, bottom: 100, left: 150}\\n                    , width = div_width - margin.left - margin.right // Use the window\\'s width\\n                    , height = div_height - margin.top - margin.bottom; // Use the window\\'s height\\n                  // The number of datapoints\\n                  var n = data.length;\\n                  // X scale will use the index of our data\\n                  var xScale = d3.scaleLinear()\\n                      .domain([0, n-1]) // input\\n                      .range([0, width]); // output\\n                  // Y scale will use the randomly generate number\\n                  var yScale = d3.scaleLinear()\\n                      .domain([0, d3.max(data)]) // input\\n                      .range([height, 0]); // output\\n                  // d3\\'s line generator\\n                  var line = d3.line()\\n                      .x(function(d, i) { return xScale(i); }) // set the x values for the line generator\\n                      .y(function(d) { return yScale(d.y); }) // set the y values for the line generator\\n                      //.curve(d3.curveMonotoneX) // apply smoothing to the line\\n                  // An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\\n                  var dataset = d3.range(n).map(function(d) { return {\"y\": data[d] } })\\n                  // Add the SVG to the page\\n                  var svg = d3.select(\"#\" + div).append(\"svg\")\\n                      .attr(\"width\", width + margin.left + margin.right)\\n                      .attr(\"height\", height + margin.top + margin.bottom)\\n                    .append(\"g\")\\n                      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\\n                  // Add the X gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(make_x_gridlines(xScale, n)\\n                          .tickSize(-height)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Add the Y gridlines\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"grid\")\\n                      .call(make_y_gridlines(yScale, d3.max(data))\\n                          .tickSize(-width)\\n                          .tickFormat(\"\")\\n                      )\\n                  // Call the x axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"x axis\")\\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\\n                      .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\\n                  // Call the y axis in a group tag\\n                  svg.append(\"g\")\\n                      .attr(\"class\", \"y axis\")\\n                      .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\\n                  // Append the path, bind the data, and call the line generator\\n                  svg.append(\"path\")\\n                      .datum(dataset) // Binds data to the line\\n                      .attr(\"class\", \"line\") // Assign a class for styling\\n                      .attr(\"d\", line); // Calls the line generator\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"translate(\" + (width / 2) + \" ,\" + (height + margin.bottom - margin.bottom / 2) + \")\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(\"Time [min]\");\\n                  svg.append(\"text\")\\n                      .attr(\"transform\", \"rotate(-90)\")\\n                      .attr(\"y\", 0 - margin.left + margin.left / 2)\\n                      .attr(\"x\",0 - (height / 2))\\n                      .attr(\"dy\", \"1em\")\\n                      .style(\"text-anchor\", \"middle\")\\n                      .text(axis_label);\\n                }\\n                /* Reading data and Plotting */\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    return data.map(function(d){\\n                      if (Number.isNaN(parseFloat(d.max_mem_used_MB)) == false) {\\n                        return parseFloat(d.max_mem_used_MB);\\n                      }\\n                    });\\n                  }).then(function(d){\\n                    line_plot(d, \\'chart_max_mem\\', \\'Memory used [Mb]\\');\\n                });\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    return data.map(function(d){\\n                      if (Number.isNaN(parseFloat(d.min_mem_available_MB)) == false) {\\n                        return parseFloat(d.min_mem_available_MB);\\n                      }\\n                    });\\n                  }).then(function(d){\\n                    line_plot(d, \\'chart_min_mem\\', \\'Memory available [Mb]\\');\\n                });\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    return data.map(function(d){\\n                      if (Number.isNaN(parseFloat(d.max_disk_space_used_GB)) == false) {\\n                        return parseFloat(d.max_disk_space_used_GB);\\n                      }\\n                    });\\n                  }).then(function(d){\\n                    line_plot(d, \\'chart_disk\\', \\'Disk space used [Gb]\\');\\n                });\\n                d3.tsv(\"metrics.tsv\").then(function(data) {\\n                    var data_array = [[], [], []]\\n                    data.forEach(function(d) {\\n                        if (Number.isNaN(parseFloat(d.max_mem_utilization_percent)) == false) {\\n                          data_array[0].push(parseFloat(d.max_mem_utilization_percent));\\n                        }\\n                        if (Number.isNaN(parseFloat(d.max_disk_space_utilization_percent)) == false) {\\n                          data_array[1].push(parseFloat(d.max_disk_space_utilization_percent));\\n                        }\\n                        if (Number.isNaN(parseFloat(d.max_cpu_utilization_percent)) == false) {\\n                          data_array[2].push(parseFloat(d.max_cpu_utilization_percent));\\n                        }\\n                    });\\n                    return data_array;\\n                  }).then(function(d_a){\\n                    percent_plot(d_a, \\'chart_percent\\');\\n                });\\n                </script>            '\n    return html", "edit_actions": ["update-node"]}
{"fixed_source_code": "def preprocess_corpora():\n    for locale in LOCALES:\n        if locale in NON_ALPHABET_LOCALES:\n            continue\n        preprocess_corpus(locale)", "buggy_source_code": "def preprocess_corpora():\n    for locale in LOCALES:\n        if locale.endswith(TRANSLITERATION_CODE):\n            continue\n        preprocess_corpus(locale)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def execute_javascript(self, code):\n    self._send_spontaneous_websocket_message('2' + code)", "buggy_source_code": "def execute_javascript(self, code):\n    self._send_spontaneous_websocket_message(_MSG_JS + code)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, match):\n    PatreonExtractor.__init__(self, match)\n    self.post_id = match.group(1)", "buggy_source_code": "def __init__(self, match):\n    PatreonExtractor.__init__(self, match)\n    self.slug = match.group(1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef volume(self):\n    return int(self.bin.get_property('volume') * 100)", "buggy_source_code": "@property\ndef volume(self):\n    return int(self._bin.get_property('volume') * 100)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef time_position(self):\n    try:\n        return self.bin.query_position(gst.FORMAT_TIME)[0] // gst.MSECOND\n    except gst.QueryError:\n        return 0", "buggy_source_code": "@property\ndef time_position(self):\n    try:\n        return self._bin.query_position(gst.FORMAT_TIME)[0] // gst.MSECOND\n    except gst.QueryError:\n        return 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _auto_init(self, cr, context=None):\n    result = super(res_partner, self)._auto_init(cr, context=context)\n    cr.execute('\\n            DROP INDEX IF EXISTS res_partner_vat_uniq_for_companies;\\n            DROP INDEX IF EXISTS res_partner_nrc_uniq_for_companies;\\n            CREATE UNIQUE INDEX res_partner_vat_uniq_for_companies ON res_partner (vat) WHERE is_company OR parent_id IS NULL;\\n            CREATE UNIQUE INDEX res_partner_nrc_uniq_for_companies ON res_partner (nrc) WHERE is_company OR parent_id IS NULL;\\n        ')\n    return result", "buggy_source_code": "def _auto_init(self, cr, context=None):\n    result = super(res_partner, self)._auto_init(cr, context=context)\n    cr.execute('\\n            DROP INDEX IF EXISTS res_partner_vat_uniq_for_companies;\\n            DROP INDEX IF EXISTS res_partner_nrc_uniq_for_companies;\\n        ')\n    return result", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __ne__(self, other):\n    result = self.__eq__(other)\n    return not result", "buggy_source_code": "def __ne__(self, other):\n    return not self == other", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def decompose_srt(self, m):\n    (b_trans, b_rot, b_scale) = m.decompose()\n    return (b_scale, b_rot, b_trans)", "buggy_source_code": "def decompose_srt(self, matrix):\n    (b_trans_vec, b_rot_quat, b_scale_vec) = matrix.decompose()\n    return [b_trans_vec, b_rot_quat, b_scale_vec]", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def new_file(self):\n    file = filedialog.asksaveasfile()\n    return self._set_file(file)", "buggy_source_code": "def new_file(self):\n    file = filedialog.asksaveasfilename()\n    return self._set_file(file)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _getVirginResponse(self, link):\n    return Util.getResponseBS(self._makeUrl(link))", "buggy_source_code": "def _getVirginResponse(self, link):\n    return nw.getResponseBS(self._makeUrl(link))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def list_channels(self):\n    return [doc['name'] for doc in self._recent.find()]", "buggy_source_code": "def list_channels(self):\n    return [doc['channel'] for doc in self._recent.find()]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_Good_NoNamesDupes_NamesStartsEndsAllMatch(self):\n    self.runtest_Good_NoNamesDupes(\"from tempvars import TempVars\\nt_y_f = 15\\nwith TempVars(names=['t_y_f'], starts=['t_'], ends=['_f']) as tv:\\n    names_len_one = len(tv.names) == 1\\n    nsvars_len_one = len(tv.stored_nsvars) == 1\\n    t_y_f = 35\\nret_tempvars_len_one = len(tv.retained_tempvars) == 1\\n\")", "buggy_source_code": "def test_Good_NoNamesDupes_NamesStartsEndsAllMatch(self):\n    self.runtest_Good_NoNamesDupes(\"from tempvars import TempVars\\nt_y_f = 15\\nwith TempVars(names=['t_y_f'], starts=['t_'],\\n              ends=['_f']) as tv:\\n    names_len_one = len(tv.names) == 1\\n    nsvars_len_one = len(tv.stored_nsvars) == 1\\n    t_y_f = 35\\nret_tempvars_len_one = len(tv.retained_tempvars) == 1\\n\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "@defknown((_name, '\\n', _form, (['\\n', (typep, _py.str), ' ', (typep, t)],)))\ndef _ir_args():\n    pass", "buggy_source_code": "@defknown((_name, '\\n', _form, ['\\n', ((_typep, _py.str), ' ', (_typep, t))]))\ndef _ir_args():\n    pass", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_add_ocb_to_data_bad_mlat(self):\n    with self.assertRaisesRegexp(ValueError, 'unknown magnetic latitude name: mlat'):\n        ocb_pysat.add_ocb_to_data(self.test_inst, 'mlat', 'mlt', ocb=self.ocb)", "buggy_source_code": "def test_add_ocb_to_data_bad_mlat(self):\n    with self.assertRaisesRegexp(ValueError, 'unknown magnetic latitude name mlat'):\n        ocb_pysat.add_ocb_to_data(self.test_inst, 'mlat', 'mlt', ocb=self.ocb)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_cust_add_ocb_to_data_bad_mlat(self):\n    with self.assertRaisesRegexp(ValueError, 'unknown magnetic latitude name: mlat'):\n        ocb_pysat.add_ocb_to_data(self.test_inst, 'mlat', 'mlt', ocb=self.ocb)", "buggy_source_code": "def test_cust_add_ocb_to_data_bad_mlat(self):\n    with self.assertRaisesRegexp(ValueError, 'unknown magnetic latitude name mlat'):\n        ocb_pysat.add_ocb_to_data(self.test_inst, 'mlat', 'mlt', ocb=self.ocb)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_add_ocb_to_data_bad_mlt(self):\n    with self.assertRaisesRegexp(ValueError, 'unknown magnetic local time name: bad'):\n        ocb_pysat.add_ocb_to_data(self.test_inst, 'latitude', 'bad', ocb=self.ocb)", "buggy_source_code": "def test_add_ocb_to_data_bad_mlt(self):\n    with self.assertRaisesRegexp(ValueError, 'unknown magnetic local time name bad'):\n        ocb_pysat.add_ocb_to_data(self.test_inst, 'latitude', 'bad', ocb=self.ocb)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_configuration(self):\n    for telescope in ['LOWBD1', 'LOWBD2', 'LOWBD2-CORE', 'LOFAR', 'VLAA', 'VLAA-north']:\n        fc = create_named_configuration(telescope)\n        log.debug(fc.location.to_geodetic())", "buggy_source_code": "def test_configuration(self):\n    for telescope in ['LOWBD1', 'LOWBD2', 'LOWBD2-CORE', 'LOFAR', 'VLAA', 'VLAA_north']:\n        fc = create_named_configuration(telescope)\n        log.debug(fc.location.to_geodetic())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def useFilter(self):\n    return self.__use_button__.isChecked() if not self.params.use_apply_button else False", "buggy_source_code": "def useFilter(self):\n    return self.__action_button__.isChecked() if not self.params.use_apply_button else False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def convert_time_to_nicey_format(date_to_parse):\n    los_angeles = pytz.timezone('US/Pacific')\n    target_datetime = los_angeles.localize(parser.parse(date_to_parse))\n    return target_datetime", "buggy_source_code": "def convert_time_to_nicey_format(date_time_parse):\n    utc = timezone('UTC')\n    pacific = pytz.timezone('US/Pacific')\n    date_time_parse = parser.parse(date_time_parse)\n    pacificizd_date_time_parse = pacific.localize(date_time_parse)\n    return pacificizd_date_time_parse", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def noColumn(self, index):\n    return '%d' % self.cards[index.row()][CARD_EASE]", "buggy_source_code": "def noColumn(self, index):\n    return '%d' % self.cards[index.row()][CARD_NO]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def initialize(self):\n    self.image = np.zeros(self.shape)\n    self._slab(self.pos, self.normal)", "buggy_source_code": "def initialize(self):\n    self.image = np.zeros(self.shape)\n    self._slab(self.zpos, self.normal)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_params(self):\n    return np.hstack([self.pos.ravel(), self.normal.ravel()])", "buggy_source_code": "def get_params(self):\n    return np.hstack([self.zpos, self.normal.ravel()])", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def add_component_type(self, base_class):\n    if not hasattr(base_class, 'required_attributes'):\n        raise TypeError(\"%s is missing attribute 'required_attributes'.\".format(base_class))\n    self._components[base_class] = OrderedDict()", "buggy_source_code": "def add_component_type(self, base_class):\n    if not hasattr(base_class, 'required_attributes'):\n        raise TypeError(\"Component type {0} is missing attribute 'required_attributes'.\".format(base_class))\n    self._components[base_class] = OrderedDict()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def run(self):\n    system('fastqc %s --outdir=%s' % (self.readFastQFile, self.outputDir))", "buggy_source_code": "def run(self):\n    system('fastqc %s --outdir=%s' % (self.readFastqFile, self.outputDir))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_parse(self):\n    result = openapi_parser.parse(self.doc)\n    assert isinstance(result, str)", "buggy_source_code": "def test_parse(self):\n    result = openapi_parser.parse(self.doc)\n    assert isinstance(result, dict)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_dr(r):\n    dr = (r[-1] - r[0]) / (len(r) - 1)\n    return dr", "buggy_source_code": "def get_dr(rad):\n    dr = _mean([R - r for (R, r) in zip(rad[1:], rad[:-1])])\n    return dr", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def createBox(self, boxName, boxCaption=None):\n    box = OWGUI.widgetBox(self.mainArea, boxCaption)\n    box.setAlignment(Qt.AlignLeft)\n    return box", "buggy_source_code": "def createBox(self, boxName, boxCaption=None):\n    box = gui.widgetBox(self.mainArea, boxCaption)\n    box.setAlignment(QtCore.Qt.AlignLeft)\n    return box", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def colorSchemaChange(self):\n    self.setCurrentState(self.getCurrentState())\n    self.emit(SIGNAL('shemaChanged'))\n    if self.callback:\n        self.callback()", "buggy_source_code": "def colorSchemaChange(self):\n    self.setCurrentState(self.getCurrentState())\n    self.emit(QtCore.SIGNAL('shemaChanged'))\n    if self.callback:\n        self.callback()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_ifconfig_0003_host_is_oa_host(cursor):\n    stmt = \"select column_name from INFORMATION_SCHEMA.COLUMNS where table_name = 'ifconfig_host'\"\n    return 'is_oa_host' not in [d['column_name'] for d in execute_and_fetch(cursor, stmt)]", "buggy_source_code": "def test_ifconfig_0003_host_is_oa_host(cursor):\n    stmt = \"SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'ifconfig_host'\"\n    return 'is_oa_host' not in [d['column_name'] for d in execute_and_fetch(cursor, stmt)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_ifconfig_0002_auto_20160329_1248(cursor):\n    stmt = \"select character_maximum_length from INFORMATION_SCHEMA.COLUMNS\\n              where table_name = 'ifconfig_netdevice' and column_name = 'devname';\"\n    res = execute_and_fetch(cursor, stmt)\n    return len(res) == 1 and res[0]['character_maximum_length'] == 10", "buggy_source_code": "def test_ifconfig_0002_auto_20160329_1248(cursor):\n    stmt = \"SELECT character_maximum_length FROM INFORMATION_SCHEMA.COLUMNS\\n              WHERE table_name = 'ifconfig_netdevice' AND column_name = 'devname';\"\n    res = execute_and_fetch(cursor, stmt)\n    return len(res) == 1 and res[0]['character_maximum_length'] == 10", "edit_actions": ["update-node"]}
{"fixed_source_code": "def insert_into_django_migrations(app, name, cursor):\n    stmt = '\\n        INSERT INTO \"django_migrations\" (\"app\", \"name\", \"applied\")\\n        VALUES (%s, %s, now())\\n        '\n    cursor.execute(stmt, [app, name])", "buggy_source_code": "def insert_into_django_migrations(app, name, cursor):\n    stmt = 'INSERT INTO \"django_migrations\" (\"app\", \"name\", \"applied\")\\n              VALUES (%s, %s, now())'\n    cursor.execute(stmt, [app, name])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _table_exists(table_name, cursor):\n    stmt = 'select table_name from INFORMATION_SCHEMA.COLUMNS\\n              where table_name = %s;'\n    res = execute_and_fetch(cursor, stmt, [table_name])\n    return len(res) > 0 and res[0]['table_name'] == table_name", "buggy_source_code": "def _table_exists(table_name, cursor):\n    stmt = 'SELECT table_name FROM INFORMATION_SCHEMA.COLUMNS\\n              WHERE table_name = %s;'\n    res = execute_and_fetch(cursor, stmt, [table_name])\n    return len(res) > 0 and res[0]['table_name'] == table_name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def django_migration_already_inserted(app, name, cursor):\n    stmt = '\\n    SELECT * FROM \"django_migrations\"\\n    WHERE app = %s AND name = %s\\n    '\n    return len(execute_and_fetch(cursor, stmt, [app, name])) == 1", "buggy_source_code": "def django_migration_already_inserted(app, name, cursor):\n    stmt = 'SELECT * FROM \"django_migrations\"\\n              WHERE app = %s AND name = %s'\n    return len(execute_and_fetch(cursor, stmt, [app, name])) == 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def transform_inverse(self, *args, interpolation='linear', **kwargs):\n    kwargs['interp'] = interpolation\n    return super().transform_inverse(*args, **kwargs)", "buggy_source_code": "def transform_inverse(self, *args, interpolation='linear', **kwargs):\n    kwargs['interp'] = interpolation\n    return super().transform(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def transform(self, *args, interpolation='linear', **kwargs):\n    kwargs['interp'] = interpolation\n    return super().transform(*args, **kwargs)", "buggy_source_code": "def transform(self, *args, interpolation='linear', **kwargs):\n    kwargs['interp'] = interpolation\n    return super().transform_inverse(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _test_vm_provision(appliance):\n    logger.info('Checking for provision access')\n    navigate_to(vms.Vm, 'VMsOnly')\n    vms.lcl_btn('Provision VMs')", "buggy_source_code": "def _test_vm_provision(appliance):\n    logger.info('Checking for provision access')\n    view = navigate_to(vms.Vm, 'VMsOnly')\n    view.toolbar.lifecycle.item_enabled('Provision VMs')", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "@models.permalink\ndef get_absolute_url(self):\n    return ('question-detail', [], {'slug': self.slug, 'idx': self.pk})", "buggy_source_code": "@models.permalink\ndef get_absolute_url(self):\n    return ('question-detail', [], {'slug': self.slug, 'pk': self.pk})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return \"ConfigItem('{0}', {1}, ,{2}, 'r{3}')\".format(self.label, self.type, repr(self.value), 'o' if self.readonly else 'w')", "buggy_source_code": "def __repr__(self):\n    return \"ConfigItem('{0}', {1}, {2}, r{3})\".format(self.label, self.type, repr(self.value), 'o' if self.readonly else 'w')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def post_config_hook(self):\n    self.displayed = ''\n    self.scrolling = None", "buggy_source_code": "def post_config_hook(self):\n    self.displayed = ''\n    self.scrolling = False", "edit_actions": []}
{"fixed_source_code": "def _set_email(self, val):\n    self.message_data = pickle.dumps(val)", "buggy_source_code": "def _set_email(self, val):\n    self.message_data = base64.encodestring(pickle.dumps(val))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    TestBase.__init__(self, 'exception', lang='C++', result='\\n# DURATION    TID     FUNCTION\\n   2.777 us [10827] | __cxa_atexit();\\n            [10827] | foo() {\\n            [10827] |   __static_initialization_and_destruction_0() {\\n 108.818 us [10827] |     std::ios_base::Init::Init();\\n   0.350 us [10827] |     __cxa_atexit();\\n 111.039 us [10827] |   } /* __static_initialization_and_destruction_0 */\\n 111.488 us [10827] | } /* foo */\\n            [10827] | main() {\\n   0.078 us [10827] |   foo();\\n            [10827] |   test() {\\n            [10827] |     oops() {\\n   1.752 us [10827] |       __cxa_allocate_exception();\\n   0.088 us [10827] |       std::exception::exception();\\n   9.640 us [10827] |       __gxx_personality_v0();\\n   9.640 us [10827] |       __gxx_personality_v0();\\n   9.640 us [10827] |       __gxx_personality_v0();\\n  84.367 us [10827] |     } /* oops */\\n   9.640 us [10827] |     __gxx_personality_v0();\\n   1.903 us [10827] |     __gxx_personality_v0();\\n   0.873 us [10827] |     std::exception::~exception();\\n  84.652 us [10827] |   } /* test */\\n   0.090 us [10827] |   bar();\\n  85.590 us [10827] | } /* main */\\n   2.352 us [10827] | std::ios_base::Init::~Init();\\n')", "buggy_source_code": "def __init__(self):\n    TestBase.__init__(self, 'exception', lang='C++', result='\\n# DURATION    TID     FUNCTION\\n   2.777 us [10827] | __cxa_atexit();\\n            [10827] | _GLOBAL__sub_I__Z3foov() {\\n            [10827] |   __static_initialization_and_destruction_0() {\\n 108.818 us [10827] |     std::ios_base::Init::Init();\\n   0.350 us [10827] |     __cxa_atexit();\\n 111.039 us [10827] |   } /* __static_initialization_and_destruction_0 */\\n 111.488 us [10827] | } /* foo */\\n            [10827] | main() {\\n   0.078 us [10827] |   foo();\\n            [10827] |   test() {\\n            [10827] |     oops() {\\n   1.752 us [10827] |       __cxa_allocate_exception();\\n   0.088 us [10827] |       std::exception::exception();\\n  84.367 us [10827] |     } /* oops */\\n  84.652 us [10827] |   } /* test */\\n   0.090 us [10827] |   bar();\\n  85.590 us [10827] | } /* main */\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def grayscale(self):\n    luminance = self.luminance() & 255\n    self.r = luminance\n    self.g = luminance\n    self.b = luminance", "buggy_source_code": "def grayscale(self):\n    luminance = self.get_luminance() & 255\n    self.r = luminance\n    self.g = luminance\n    self.b = luminance", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef status_api():\n    return ('{\"response\": \"running\"}', HTTPStatus.CREATED.value)", "buggy_source_code": "@staticmethod\ndef status_api():\n    return ('{\"response\": \"running\"}', HTTPStatus.OK.value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def to_native(self, obj):\n    if obj is None:\n        return None\n    else:\n        return self.model_field.to_mongo(obj)", "buggy_source_code": "def to_native(self, obj):\n    if obj is None:\n        return None\n    else:\n        return self.transform_object(obj, self.depth)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dictitems(dict):\n    if sys.version_info[0] >= 3:\n        return dict.items()\n    else:\n        return dictitems(dict)", "buggy_source_code": "def dictitems(dict):\n    if sys.version_info[0] >= 3:\n        return dict.items()\n    else:\n        return dict.iteritems()", "edit_actions": ["update-node", "insert-node", "update-node"]}
{"fixed_source_code": "def test_user(self):\n    u = User('localhost', 'bot', 'postgre', 'empty')", "buggy_source_code": "def test_user(self):\n    u = User('localhost', 'bot', 'postgres', 'empty')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def calc_h(node, finish):\n    return abs(finish.x - node.x) + abs(finish.y - node.y)", "buggy_source_code": "def calc_h(start, finish):\n    return abs(finish[0] - start[0]) + abs(finish[1] - finish[1])", "edit_actions": ["update-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_image(self, context, handler):\n    here = context.object\n    path = here.get_pathto(handler)\n    content = '<img src=\"%s\"/>' % path\n    return XMLParser(content)", "buggy_source_code": "def _get_image(self, context, object):\n    here = context.object\n    path = here.get_pathto(object)\n    content = '<img src=\"%s\"/>' % path\n    return XMLParser(content)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_no_redis_configured(bp):\n    with pytest.raises(KeyError) as excinfo:\n        bp.redis\n    expected = 'Must set a redis connection URL in app config.'\n    assert str(excinfo.value.message) == expected", "buggy_source_code": "def test_no_redis_configured(bp):\n    with pytest.raises(KeyError) as excinfo:\n        bp.redis\n    expected = 'Must set a redis connection URL in app config.'\n    assert str(excinfo.value.args[0]) == expected", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def describe_query(self, index):\n    return self.sparql_meta.iloc[index]", "buggy_source_code": "def describe_query(self, index):\n    return self.sparql_meta.ix[index]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def render_link(self, form):\n    return render_to_string(self.link_template, Context({'link': self, 'tab_has_errors': self.has_errors(form)}))", "buggy_source_code": "def render_link(self, form):\n    return render_to_string(self.link_template, Context({'link': self, 'item_has_errors': self.has_errors(form)}))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def play_buffer(buffer):\n    for sample in buffer:\n        stream.write(sample)", "buggy_source_code": "def play_buffer(buffer):\n    output = ''.join(buffer)\n    stream.write(output)", "edit_actions": ["insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.6b2.tar.gz', url_subpath='pywebsocket-0.6b2/src/mod_pywebsocket')", "buggy_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.6b4.tar.gz', url_subpath='pywebsocket-0.6b4/src/mod_pywebsocket')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def fields(self):\n    return {'name': (cbpos.tr.auth._('Name'), ''), 'comment': (cbpos.tr.auth._('Comment'), '')}", "buggy_source_code": "def fields(self):\n    return {'name': (cbpos.tr.customer._('Name'), ''), 'comment': (cbpos.tr.customer._('Comment'), '')}", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def find_smarts_matches(self, molecule, smarts, aromaticity_model='OEAroModel_MDL'):\n    oemol = molecule.to_openeye()\n    return self._find_smarts_matches(oemol, smarts)", "buggy_source_code": "def find_smarts_matches(self, molecule, smarts, aromaticity_model='OEAroModel_MDL'):\n    oemol = self.to_openeye(molecule)\n    return self._find_smarts_matches(oemol, smarts)", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def test_Simulation(self):\n    self.assertEqual(self.pop.generation, 1000)", "buggy_source_code": "def test_Simulation(self):\n    self.assertEqual(self.pop.generation, 10000)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_decimation_10MHz(self):\n    for board in self.boards:\n        for dec in range(-10, 1000000):\n            yield (check_decimation_10MHz, board.board_type(), dec)", "buggy_source_code": "def test_decimation_10MHz(self):\n    for board in self.boards:\n        for dec in range(-1, 11):\n            yield (self.check_decimation_10MHz, board.get_board_type(), dec)", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "@retry(attempts=30, expect=(ConsulSharedSecretChanged,))\ndef raise_if_shared_secret_changed():\n    if consul_shared_secret_changed():\n        sleep(1)\n        raise ConsulSharedSecretChanged('The consul shared might have become stale')", "buggy_source_code": "@retry(attempts=30, expect=(ConsulSharedSecretChanged,))\ndef raise_if_shared_secret_changed():\n    if consul_shared_secret_changed():\n        sleep(1)\n        raise ConsulSharedSecretChanged('The consul shared secret might have become stale')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def docker_repo_field(value, name):\n    if not DOCKER_REPO_RE.match(value):\n        raise ValueError(\"Invalid %s. Must only contain lower case, 0-9, and the characters '-', '_' and '.'\" % name)\n    return value", "buggy_source_code": "def docker_repo_field(value, name):\n    if not DOCKER_REPO_RE.match(value):\n        raise ValueError(\"Invalid %s. Must start with a lower case, alphanumeric character, and contain only the additional characters '-', '_' and '.'\" % name)\n    return value", "edit_actions": ["update-node"]}
{"fixed_source_code": "def connectionMade(self):\n    self._request.channel._openTunnel(self)\n    self._request.setResponseCode(200, 'Connection established')\n    self._request.write('')", "buggy_source_code": "def connectionMade(self):\n    self._channel._openTunnel(self)\n    self._request.setResponseCode(200, 'Connection established')\n    self._request.write('')", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def connectionLost(self, reason):\n    self._request.finish()\n    self._request.channel._closeTunnel()", "buggy_source_code": "def connectionLost(self, reason):\n    self._request.finish()\n    self._channel._closeTunnel()", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dataReceived(self, data):\n    self._request.write(data)", "buggy_source_code": "def dataReceived(self, data):\n    self._peertransport.write(data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def smoothfilter(f, spacesig=0.5, timesig=1):\n    return _gaussian_filter(f, (spacesig, spacesig, timesig), order=0)", "buggy_source_code": "def smoothfilter(f, spacesig=0.5, timesig=1):\n    return _ndimage.filters.gaussian_filter(f, (spacesig, spacesig, timesig), order=0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def restart(self):\n    if self.stream != None:\n        self.stream.start()", "buggy_source_code": "def restart(self):\n    if self.stream is not None:\n        self.stream.start()", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def pause(self):\n    if self.stream != None:\n        self.stream.stop()", "buggy_source_code": "def pause(self):\n    if self.stream is not None:\n        self.stream.stop()", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def md5(text):\n    hash = hashlib.md5()\n    hash.update(_string(text))\n    return hash.hexdigest()", "buggy_source_code": "def md5(text):\n    h = hashlib.md5()\n    h.update(_string(text))\n    return h.hexdigest()", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def extract_items(topitems_or_libraryitems):\n    list = []\n    for i in topitems_or_libraryitems:\n        list.append(i.get_item())\n    return list", "buggy_source_code": "def extract_items(topitems_or_libraryitems):\n    seq = []\n    for i in topitems_or_libraryitems:\n        seq.append(i.get_item())\n    return seq", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __ne__(self, other):\n    self.get_name() != other.get_name()", "buggy_source_code": "def __ne__(self, other):\n    return self.get_name() != other.get_name()", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def __eq__(self, other):\n    self.get_name().lower() == other.get_name().lower()", "buggy_source_code": "def __eq__(self, other):\n    return self.get_name().lower() == other.get_name().lower()", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _delay_call():\n    DELAY_TIME = 1.0\n    now = time.time()\n    if now - self.last_call_time < DELAY_TIME:\n        time.sleep(1)\n    self.last_call_time = now", "buggy_source_code": "def _delay_call(self):\n    DELAY_TIME = 1.0\n    now = time.time()\n    if now - self.last_call_time < DELAY_TIME:\n        time.sleep(1)\n    self.last_call_time = now", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def jump_backwards(self):\n    if not self._jump(True):\n        return self._handle_failure(backward_trigger)", "buggy_source_code": "def jump_backwards(self):\n    if not self._jump(True):\n        return self._handle_failure(self.backward_trigger)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_log_user_info(self):\n    self._log_data['user'] = get_userid_for_log()\n    return self._log_data", "buggy_source_code": "def get_log_user_info(self):\n    self._log_data['user'] = self._get_userid_for_log()\n    return self._log_data", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def setup_shell(self):\n    self.shell = wx.py.crust.Crust(parent=self)\n    self.shell.Show()", "buggy_source_code": "def setup_shell(self):\n    self.shell = wx.py.shell.Shell(parent=self)\n    self.shell.Show()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def form_valid(self, form):\n    results = super(UserProfileCreateView, self).form_valid(form)\n    message = _('Wait please for verification by editor.')\n    return JsonResponse({'message': message})", "buggy_source_code": "def form_valid(self, form):\n    results = super(UserProfileCreateView, self).form_valid(form)\n    message = _('Your account is inactive yet. Please wait for the verification. Thank you.')\n    return JsonResponse({'message': message})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def abort(self):\n    with self.__abort_lock:\n        if not self.__abort and self.__h_read_event:\n            self.__abort = True\n            winapi.SetEvent(self.__h_read_event)", "buggy_source_code": "def abort(self):\n    with self.__abort_lock:\n        if not self.__abort:\n            self.__abort = True\n            if self.__h_read_event:\n                winapi.SetEvent(self.__h_read_event)", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def get_sales_invoice_data(filters):\n    conditions = get_conditions(filters)\n    return frappe.db.sql('select a.owner, a.posting_date, c.mode_of_payment, b.warehouse, b.cost_center, \\n\\tsum(a.net_total) as \"net_total\",sum(a.total_taxes_and_charges) as \"total_taxes\", sum(a.base_paid_amount) as \"paid_amount\"\\n \\tfrom `tabSales Invoice` a, `tabSales Invoice Item` b, `tabSales Invoice Payment` c \\n\\twhere a.name = b.parent and a.name = c.parent and {conditions}\\n\\tgroup by a.owner, a.posting_date, c.mode_of_payment, b.warehouse, b.cost_center'.format(conditions=conditions), filters, as_dict=1)", "buggy_source_code": "def get_sales_invoice_data(filters):\n    conditions = get_conditions(filters)\n    return frappe.db.sql('select a.owner, a.posting_date, c.mode_of_payment, b.warehouse, b.cost_center,\\n\\tsum(a.net_total) as \"net_total\",sum(a.total_taxes_and_charges) as \"total_taxes\", sum(a.base_paid_amount) as \"paid_amount\"\\n \\tfrom `tabSales Invoice` a, `tabSales Invoice Item` b, `tabSales Invoice Payment` c \\n\\twhere a.name = b.parent and a.name = c.parent and {conditions}\\n\\tgroup by a.owner, a.posting_date, c.mode_of_payment, b.warehouse, b.cost_center'.format(conditions=conditions), filters, as_dict=1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@entrypoint\ndef main():\n    with Display():\n        print(click_button_get_return_code(0))\n        print(click_button_get_return_code(1))", "buggy_source_code": "@entrypoint\ndef main():\n    with Display():\n        print(click_button_get_return_code(0))\n    with Display():\n        print(click_button_get_return_code(1))", "edit_actions": ["move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def disable(self):\n    _values = self.appsetting._values\n    for (key, orig_value) in self.orig_settings.iteritems():\n        _values[key] = orig_value", "buggy_source_code": "def disable(self):\n    _values = self.appsetting._values\n    for (key, orig_value) in self.orig_settings.items():\n        _values[key] = orig_value", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef app_id():\n    return 'e6d73965-8ee6-410c-5e33-4c0cef331557'", "buggy_source_code": "@pytest.fixture(scope='session')\ndef app_id():\n    return 'e6d73965-8ee6-410c-5e33-4c0cef331557'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef auth_key():\n    return 'OMEtD0IktVMJDjwN22NGTRjzOjh0MMkEOIM4L42DjyGQTUyM'", "buggy_source_code": "@pytest.fixture(scope='session')\ndef auth_key():\n    return 'OMEtD0IktVMJDjwN22NGTRjzOjh0MMkEOIM4L42DjyGQTUyM'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef large_icon():\n    return 'large_icon_example'", "buggy_source_code": "@pytest.fixture(scope='session')\ndef large_icon():\n    return 'large_icon_example'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef notification_content():\n    return {'en': 'Custom message.'}", "buggy_source_code": "@pytest.fixture(scope='session')\ndef notification_content():\n    return {'en': 'Custom message.'}", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef app_client(app_id, app_api_key):\n    return OneSignalAppClient(app_id=app_id, app_api_key=app_api_key)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef app_client(app_id, app_api_key):\n    return OneSignalAppClient(app_id=app_id, app_api_key=app_api_key)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef app_api_key():\n    return 'Ojh0MMk22NGTRjz2DjyGQTUyMEOIM4L4OMEtD0IktVMJDjwN'", "buggy_source_code": "@pytest.fixture(scope='session')\ndef app_api_key():\n    return 'Ojh0MMk22NGTRjz2DjyGQTUyMEOIM4L4OMEtD0IktVMJDjwN'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef device_notification(app_id):\n    return Notification(app_id, Notification.DEVICES_MODE)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef device_notification(app_id):\n    return Notification(app_id, Notification.DEVICES_MODE)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef dict():\n    return {'json': 'serializable'}", "buggy_source_code": "@pytest.fixture(scope='session')\ndef dict():\n    return {'json': 'serializable'}", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef user_client(auth_key):\n    return OneSignalUserClient(auth_key=auth_key)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef user_client(auth_key):\n    return OneSignalUserClient(auth_key=auth_key)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef segment_notification(app_id):\n    return Notification(app_id, Notification.SEGMENTS_MODE)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef segment_notification(app_id):\n    return Notification(app_id, Notification.SEGMENTS_MODE)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef small_icon():\n    return 'small_icon_example'", "buggy_source_code": "@pytest.fixture(scope='session')\ndef small_icon():\n    return 'small_icon_example'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate(self, value):\n    if self.null == False and value == None:\n        raise ValidationError('Null value not allowed.')\n    for validator in self.validators:\n        validator(value)", "buggy_source_code": "def validate(self, value):\n    if not self.null and value == None:\n        raise ValidationError('Null value not allowed.')\n    for validator in self.validators:\n        validator(value)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, db):\n    self.db = db\n    schema.createTrove(db)", "buggy_source_code": "def __init__(self, db):\n    self.db = db\n    schema.createTroves(db)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def s(str):\n    return Template(str).substitute(dict(pod='[\\\\\"\\\\w\\\\.]+', eos='\\\\n|;', id='[a-zA-Z_][a-zA-Z0-9_]*', type='(?:\\\\[|[a-zA-Z_]|\\\\|)[:\\\\w_\\\\[\\\\]\\\\|\\\\->\\\\?]*?'))", "buggy_source_code": "def s(str):\n    return Template(str).substitute(dict(pod='[\\\\\"\\\\w\\\\.]+', eos='\\\\n|;', id='[a-zA-Z_][a-zA-Z0-9_]*', type='(?:\\\\[|[a-zA-Z_]|\\\\|)[:\\\\w\\\\[\\\\]\\\\|\\\\->\\\\?]*?'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def resource(args=[], pout=True):\n    output = \"\\nUsage: pcs resource [commands]...\\nManage pacemaker resources\\n\\nCommands:\\n    [show [<resource id>] | --full | --groups | --hide-inactive]\\n        Show all currently configured resources or if a resource is specified\\n        show the options for the configured resource.  If --full is specified,\\n        all configured resource options will be displayed.  If --groups is\\n        specified, only show groups (and their resources).  If --hide-inactive\\n        is specified, only show active resources.\\n\\n    list [filter] [--nodesc]\\n        Show list of all available resource agents (if filter is provided then\\n        only resource agents matching the filter will be shown). If --nodesc is\\n        used then descriptions of resource agents are not printed.\\n\\n    describe [<standard>:[<provider>:]]<type> [--full]\\n        Show options for the specified resource. If --full is specified, all\\n        options including advanced ones are shown.\\n\\n    create <resource id> [<standard>:[<provider>:]]<type> [resource options]\\n           [op <operation action> <operation options> [<operation action>\\n           <operation options>]...] [meta <meta options>...]\\n           [clone [<clone options>] | master [<master options>] |\\n           --group <group id> [--before <resource id> | --after <resource id>]\\n           | bundle <bundle id>] [--disabled] [--no-default-ops] [--wait[=n]]\\n        Create specified resource. If clone is used a clone resource is\\n        created. If master is specified a master/slave resource is created.\\n        If --group is specified the resource is added to the group named. You\\n        can use --before or --after to specify the position of the added\\n        resource relatively to some resource already existing in the group.\\n        If bundle is used, the resource will be created inside of the specified\\n        bundle. If --disabled is specified the resource is not started\\n        automatically. If --no-default-ops is specified, only monitor\\n        operations are created for the resource and all other operations use\\n        default settings. If --wait is specified, pcs will wait up to 'n'\\n        seconds for the resource to start and then return 0 if the resource is\\n        started, or 1 if the resource has not yet started. If 'n' is not\\n        specified it defaults to 60 minutes.\\n        Example: Create a new resource called 'VirtualIP' with IP address\\n            192.168.0.99, netmask of 32, monitored everything 30 seconds,\\n            on eth2:\\n            pcs resource create VirtualIP ocf:heartbeat:IPaddr2 \\\\\\n                ip=192.168.0.99 cidr_netmask=32 nic=eth2 \\\\\\n                op monitor interval=30s\\n\\n    delete <resource id|group id|master id|clone id>\\n        Deletes the resource, group, master or clone (and all resources within\\n        the group/master/clone).\\n\\n    enable <resource id>... [--wait[=n]]\\n        Allow the cluster to start the resources. Depending on the rest of the\\n        configuration (constraints, options, failures, etc), the resources may\\n        remain stopped. If --wait is specified, pcs will wait up to 'n' seconds\\n        for the resources to start and then return 0 if the resources are\\n        started, or 1 if the resources have not yet started. If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    disable <resource id>... [--wait[=n]]\\n        Attempt to stop the resources if they are running and forbid the\\n        cluster from starting them again. Depending on the rest of the\\n        configuration (constraints, options, failures, etc), the resources may\\n        remain started. If --wait is specified, pcs will wait up to 'n' seconds\\n        for the resources to stop and then return 0 if the resources are\\n        stopped or 1 if the resources have not stopped. If 'n' is not specified\\n        it defaults to 60 minutes.\\n\\n    restart <resource id> [node] [--wait=n]\\n        Restart the resource specified. If a node is specified and if the\\n        resource is a clone or master/slave it will be restarted only on\\n        the node specified.  If --wait is specified, then we will wait\\n        up to 'n' seconds for the resource to be restarted and return 0 if\\n        the restart was successful or 1 if it was not.\\n\\n    debug-start <resource id> [--full]\\n        This command will force the specified resource to start on this node\\n        ignoring the cluster recommendations and print the output from\\n        starting the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to start.\\n\\n    debug-stop <resource id> [--full]\\n        This command will force the specified resource to stop on this node\\n        ignoring the cluster recommendations and print the output from\\n        stopping the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to stop.\\n\\n    debug-promote <resource id> [--full]\\n        This command will force the specified resource to be promoted on this\\n        node ignoring the cluster recommendations and print the output from\\n        promoting the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to promote.\\n\\n    debug-demote <resource id> [--full]\\n        This command will force the specified resource to be demoted on this\\n        node ignoring the cluster recommendations and print the output from\\n        demoting the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to demote.\\n\\n    debug-monitor <resource id> [--full]\\n        This command will force the specified resource to be monitored on this\\n        node  ignoring the cluster recommendations and print the output from\\n        monitoring the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to be monitored.\\n\\n    move <resource id> [destination node] [--master] [lifetime=<lifetime>]\\n         [--wait[=n]]\\n        Move the resource off the node it is currently running on by creating a\\n        -INFINITY location constraint to ban the node.  If destination node is\\n        specified the resource will be moved to that node by creating an\\n        INFINITY location constraint to prefer the destination node.  If\\n        --master is used the scope of the command is limited to the master role\\n        and you must use the master id (instead of the resource id).  If\\n        lifetime is specified then the constraint will expire after that time,\\n        otherwise it defaults to infinity and the constraint can be cleared\\n        manually with 'pcs resource clear' or 'pcs constraint delete'.  If\\n        --wait is specified, pcs will wait up to 'n' seconds for the resource\\n        to move and then return 0 on success or 1 on error.  If 'n' is not\\n        specified it defaults to 60 minutes.\\n        If you want the resource to preferably avoid running on some nodes but\\n        be able to failover to them use 'pcs location avoids'.\\n\\n    ban <resource id> [node] [--master] [lifetime=<lifetime>] [--wait[=n]]\\n        Prevent the resource id specified from running on the node (or on the\\n        current node it is running on if no node is specified) by creating a\\n        -INFINITY location constraint.  If --master is used the scope of the\\n        command is limited to the master role and you must use the master id\\n        (instead of the resource id).  If lifetime is specified then the\\n        constraint will expire after that time, otherwise it defaults to\\n        infinity and the constraint can be cleared manually with 'pcs resource\\n        clear' or 'pcs constraint delete'.  If --wait is specified, pcs will\\n        wait up to 'n' seconds for the resource to move and then return 0\\n        on success or 1 on error. If 'n' is not specified it defaults to 60\\n        minutes.\\n        If you want the resource to preferably avoid running on some nodes but\\n        be able to failover to them use 'pcs location avoids'.\\n\\n    clear <resource id> [node] [--master] [--wait[=n]]\\n        Remove constraints created by move and/or ban on the specified\\n        resource (and node if specified).\\n        If --master is used the scope of the command is limited to the\\n        master role and you must use the master id (instead of the resource id).\\n        If --wait is specified, pcs will wait up to 'n' seconds for the\\n        operation to finish (including starting and/or moving resources if\\n        appropriate) and then return 0 on success or 1 on error.  If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    standards\\n        List available resource agent standards supported by this installation\\n        (OCF, LSB, etc.).\\n\\n    providers\\n        List available OCF resource agent providers.\\n\\n    agents [standard[:provider]]\\n        List available agents optionally filtered by standard and provider.\\n\\n    update <resource id> [resource options] [op [<operation action>\\n           <operation options>]...] [meta <meta operations>...] [--wait[=n]]\\n        Add/Change options to specified resource, clone or multi-state\\n        resource.  If an operation (op) is specified it will update the first\\n        found operation with the same action on the specified resource, if no\\n        operation with that action exists then a new operation will be created.\\n        (WARNING: all existing options on the updated operation will be reset\\n        if not specified.)  If you want to create multiple monitor operations\\n        you should use the 'op add' & 'op remove' commands.  If --wait is\\n        specified, pcs will wait up to 'n' seconds for the changes to take\\n        effect and then return 0 if the changes have been processed or 1\\n        otherwise.  If 'n' is not specified it defaults to 60 minutes.\\n\\n    op add <resource id> <operation action> [operation properties]\\n        Add operation for specified resource.\\n\\n    op remove <resource id> <operation action> [<operation properties>...]\\n        Remove specified operation (note: you must specify the exact operation\\n        properties to properly remove an existing operation).\\n\\n    op remove <operation id>\\n        Remove the specified operation id.\\n\\n    op defaults [options]\\n        Set default values for operations, if no options are passed, lists\\n        currently configured defaults. Defaults do not apply to resources which\\n        override them with their own defined operations.\\n\\n    meta <resource id | group id | master id | clone id> <meta options>\\n         [--wait[=n]]\\n        Add specified options to the specified resource, group, master/slave\\n        or clone.  Meta options should be in the format of name=value, options\\n        may be removed by setting an option without a value.  If --wait is\\n        specified, pcs will wait up to 'n' seconds for the changes to take\\n        effect and then return 0 if the changes have been processed or 1\\n        otherwise.  If 'n' is not specified it defaults to 60 minutes.\\n        Example: pcs resource meta TestResource failure-timeout=50 stickiness=\\n\\n    group add <group id> <resource id> [resource id] ... [resource id]\\n              [--before <resource id> | --after <resource id>] [--wait[=n]]\\n        Add the specified resource to the group, creating the group if it does\\n        not exist.  If the resource is present in another group it is moved\\n        to the new group.  You can use --before or --after to specify\\n        the position of the added resources relatively to some resource already\\n        existing in the group.  If --wait is specified, pcs will wait up to 'n'\\n        seconds for the operation to finish (including moving resources if\\n        appropriate) and then return 0 on success or 1 on error.  If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    group remove <group id> <resource id> [resource id] ... [resource id]\\n          [--wait[=n]]\\n        Remove the specified resource(s) from the group, removing the group if\\n        no resources remain in it. If --wait is specified, pcs will wait up to\\n        'n' seconds for the operation to finish (including moving resources if\\n        appropriate) and then return 0 on success or 1 on error. If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    ungroup <group id> [resource id] ... [resource id] [--wait[=n]]\\n        Remove the group (note: this does not remove any resources from the\\n        cluster) or if resources are specified, remove the specified resources\\n        from the group.  If --wait is specified, pcs will wait up to 'n' seconds\\n        for the operation to finish (including moving resources if appropriate)\\n        and the return 0 on success or 1 on error.  If 'n' is not specified it\\n        defaults to 60 minutes.\\n\\n    clone <resource id | group id> [clone options]... [--wait[=n]]\\n        Set up the specified resource or group as a clone. If --wait is\\n        specified, pcs will wait up to 'n' seconds for the operation to finish\\n        (including starting clone instances if appropriate) and then return 0\\n        on success or 1 on error. If 'n' is not specified it defaults to 60\\n        minutes.\\n\\n    unclone <resource id | group id> [--wait[=n]]\\n        Remove the clone which contains the specified group or resource (the\\n        resource or group will not be removed).  If --wait is specified, pcs\\n        will wait up to 'n' seconds for the operation to finish (including\\n        stopping clone instances if appropriate) and then return 0 on success\\n        or 1 on error.  If 'n' is not specified it defaults to 60 minutes.\\n\\n    master [<master/slave id>] <resource id | group id> [options] [--wait[=n]]\\n        Configure a resource or group as a multi-state (master/slave) resource.\\n        If --wait is specified, pcs will wait up to 'n' seconds for the\\n        operation to finish (including starting and promoting resource\\n        instances if appropriate) and then return 0 on success or 1 on error.\\n        If 'n' is not specified it defaults to 60 minutes.\\n        Note: to remove a master you must remove the resource/group it contains.\\n\\n    bundle create <bundle id> container <container type> [<container options>]\\n            [network <network options>] [port-map <port options>]...\\n            [storage-map <storage options>]... [meta <meta options>]\\n            [--disabled] [--wait[=n]]\\n        Create a new bundle encapsulating no resources. The bundle can be used\\n        either as it is or a resource may be put into it at any time.\\n        If --disabled is specified, the bundle is not started automatically.\\n        If --wait is specified, pcs will wait up to 'n' seconds for the bundle\\n        to start and then return 0 on success or 1 on error. If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    bundle update <bundle id> [container <container options>]\\n            [network <network options>]\\n            [port-map (add <port options>) | (remove <id>...)]...\\n            [storage-map (add <storage options>) | (remove <id>...)]...\\n            [meta <meta options>]\\n            [--wait[=n]]\\n        Add, remove or change options to specified bundle. If you wish to update\\n        a resource encapsulated in the bundle, use the 'pcs resource update'\\n        command instead and specify the resource id. If --wait is specified,\\n        pcs will wait up to 'n' seconds for the operation to finish (including\\n        moving resources if appropriate) and then return 0 on success or 1 on\\n        error. If 'n' is not specified it defaults to 60 minutes.\\n\\n    manage <resource id>... [--monitor]\\n        Set resources listed to managed mode (default). If --monitor is\\n        specified, enable all monitor operations of the resources.\\n\\n    unmanage <resource id>... [--monitor]\\n        Set resources listed to unmanaged mode. When a resource is in unmanaged\\n        mode, the cluster is not allowed to start nor stop the resource. If\\n        --monitor is specified, disable all monitor operations of the\\n        resources.\\n\\n    defaults [options]\\n        Set default values for resources, if no options are passed, lists\\n        currently configured defaults. Defaults do not apply to resources which\\n        override them with their own defined values.\\n\\n    cleanup [<resource id>] [node=<node>] [operation=<operation>\\n            [interval=<interval>]]\\n        Make the cluster forget failed operations from history of the resource\\n        and re-detect its current state. This can be useful to purge knowledge\\n        of past failures that have since been resolved. If a resource id is not\\n        specified then all resources / stonith devices will be cleaned up. If a\\n        node is not specified then resources / stonith devices on all nodes will\\n        be cleaned up.\\n\\n    refresh [<resource id>] [node=<node>] [--full]\\n        Make the cluster forget the complete operation history (including\\n        failures) of the resource and re-detect its current state. If you are\\n        interested in forgetting failed operations only, use the 'pcs resource\\n        cleanup' command. If a resource id is not specified then all resources\\n        / stonith devices will be refreshed. If a node is not specified then\\n        resources / stonith devices on all nodes will be refreshed. Use --full\\n        to refresh a resource on all nodes, otherwise only nodes where the\\n        resource's state is known will be considered.\\n\\n    failcount show [<resource id>] [node=<node>] [operation=<operation>\\n            [interval=<interval>]] [--full]\\n        Show current failcount for resources, optionally filtered by a resource,\\n        node, operation and its interval. If --full is specified do not sum\\n        failcounts per resource and node. Use 'pcs resource cleanup' or 'pcs\\n        resource refresh' to reset failcounts.\\n\\n    relocate dry-run [resource1] [resource2] ...\\n        The same as 'relocate run' but has no effect on the cluster.\\n\\n    relocate run [resource1] [resource2] ...\\n        Relocate specified resources to their preferred nodes.  If no resources\\n        are specified, relocate all resources.\\n        This command calculates the preferred node for each resource while\\n        ignoring resource stickiness.  Then it creates location constraints\\n        which will cause the resources to move to their preferred nodes.  Once\\n        the resources have been moved the constraints are deleted automatically.\\n        Note that the preferred node is calculated based on current cluster\\n        status, constraints, location of resources and other settings and thus\\n        it might change over time.\\n\\n    relocate show\\n        Display current status of resources and their optimal node ignoring\\n        resource stickiness.\\n\\n    relocate clear\\n        Remove all constraints created by the 'relocate run' command.\\n\\n    utilization [<resource id> [<name>=<value> ...]]\\n        Add specified utilization options to specified resource. If resource is\\n        not specified, shows utilization of all resources. If utilization\\n        options are not specified, shows utilization of specified resource.\\n        Utilization option should be in format name=value, value has to be\\n        integer. Options may be removed by setting an option without a value.\\n        Example: pcs resource utilization TestResource cpu= ram=20\\n\\nExamples:\\n\\n    pcs resource show\\n      Show all resources.\\n\\n    pcs resource show VirtualIP\\n      Show options specific to the 'VirtualIP' resource.\\n\\n\\n    pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip=192.168.0.99 \\\\\\n               cidr_netmask=32 nic=eth2 op monitor interval=30s\\n      Create a new resource called 'VirtualIP' with options.\\n\\n    pcs resource create VirtualIP IPaddr2 ip=192.168.0.99 \\\\\\n               cidr_netmask=32 nic=eth2 op monitor interval=30s\\n      Create a new resource called 'VirtualIP' with options.\\n\\n    pcs resource update VirtualIP ip=192.168.0.98 nic=\\n      Change the ip address of VirtualIP and remove the nic option.\\n\\n    pcs resource delete VirtualIP\\n      Delete the VirtualIP resource.\\n\\nNotes:\\n    Starting resources on a cluster is (almost) always done by pacemaker and\\n    not directly from pcs.  If your resource isn't starting, it's usually\\n    due to either a misconfiguration of the resource (which you debug in\\n    the system log), or constraints preventing the resource from starting or\\n    the resource being disabled.  You can use 'pcs resource debug-start' to\\n    test resource configuration, but it should *not* normally be used to start\\n    resources in a cluster.\\n\\n\"\n    if pout:\n        print(sub_usage(args, output))\n    else:\n        return output", "buggy_source_code": "def resource(args=[], pout=True):\n    output = \"\\nUsage: pcs resource [commands]...\\nManage pacemaker resources\\n\\nCommands:\\n    [show [<resource id>] | --full | --groups | --hide-inactive]\\n        Show all currently configured resources or if a resource is specified\\n        show the options for the configured resource.  If --full is specified,\\n        all configured resource options will be displayed.  If --groups is\\n        specified, only show groups (and their resources).  If --hide-inactive\\n        is specified, only show active resources.\\n\\n    list [filter] [--nodesc]\\n        Show list of all available resource agents (if filter is provided then\\n        only resource agents matching the filter will be shown). If --nodesc is\\n        used then descriptions of resource agents are not printed.\\n\\n    describe [<standard>:[<provider>:]]<type> [--full]\\n        Show options for the specified resource. If --full is specified, all\\n        options including advanced ones are shown.\\n\\n    create <resource id> [<standard>:[<provider>:]]<type> [resource options]\\n           [op <operation action> <operation options> [<operation action>\\n           <operation options>]...] [meta <meta options>...]\\n           [clone [<clone options>] | master [<master options>] |\\n           --group <group id> [--before <resource id> | --after <resource id>]\\n           | bundle <bundle id>] [--disabled] [--no-default-ops] [--wait[=n]]\\n        Create specified resource. If clone is used a clone resource is\\n        created. If master is specified a master/slave resource is created.\\n        If --group is specified the resource is added to the group named. You\\n        can use --before or --after to specify the position of the added\\n        resource relatively to some resource already existing in the group.\\n        If bundle is used, the resource will be created inside of the specified\\n        bundle. If --disabled is specified the resource is not started\\n        automatically. If --no-default-ops is specified, only monitor\\n        operations are created for the resource and all other operations use\\n        default settings. If --wait is specified, pcs will wait up to 'n'\\n        seconds for the resource to start and then return 0 if the resource is\\n        started, or 1 if the resource has not yet started. If 'n' is not\\n        specified it defaults to 60 minutes.\\n        Example: Create a new resource called 'VirtualIP' with IP address\\n            192.168.0.99, netmask of 32, monitored everything 30 seconds,\\n            on eth2:\\n            pcs resource create VirtualIP ocf:heartbeat:IPaddr2 \\\\\\n                ip=192.168.0.99 cidr_netmask=32 nic=eth2 \\\\\\n                op monitor interval=30s\\n\\n    delete <resource id|group id|master id|clone id>\\n        Deletes the resource, group, master or clone (and all resources within\\n        the group/master/clone).\\n\\n    enable <resource id>... [--wait[=n]]\\n        Allow the cluster to start the resources. Depending on the rest of the\\n        configuration (constraints, options, failures, etc), the resources may\\n        remain stopped. If --wait is specified, pcs will wait up to 'n' seconds\\n        for the resources to start and then return 0 if the resources are\\n        started, or 1 if the resources have not yet started. If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    disable <resource id>... [--wait[=n]]\\n        Attempt to stop the resources if they are running and forbid the\\n        cluster from starting them again. Depending on the rest of the\\n        configuration (constraints, options, failures, etc), the resources may\\n        remain started. If --wait is specified, pcs will wait up to 'n' seconds\\n        for the resources to stop and then return 0 if the resources are\\n        stopped or 1 if the resources have not stopped. If 'n' is not specified\\n        it defaults to 60 minutes.\\n\\n    restart <resource id> [node] [--wait=n]\\n        Restart the resource specified. If a node is specified and if the\\n        resource is a clone or master/slave it will be restarted only on\\n        the node specified.  If --wait is specified, then we will wait\\n        up to 'n' seconds for the resource to be restarted and return 0 if\\n        the restart was successful or 1 if it was not.\\n\\n    debug-start <resource id> [--full]\\n        This command will force the specified resource to start on this node\\n        ignoring the cluster recommendations and print the output from\\n        starting the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to start.\\n\\n    debug-stop <resource id> [--full]\\n        This command will force the specified resource to stop on this node\\n        ignoring the cluster recommendations and print the output from\\n        stopping the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to stop.\\n\\n    debug-promote <resource id> [--full]\\n        This command will force the specified resource to be promoted on this\\n        node ignoring the cluster recommendations and print the output from\\n        promoting the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to promote.\\n\\n    debug-demote <resource id> [--full]\\n        This command will force the specified resource to be demoted on this\\n        node ignoring the cluster recommendations and print the output from\\n        demoting the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to demote.\\n\\n    debug-monitor <resource id> [--full]\\n        This command will force the specified resource to be monitored on this\\n        node  ignoring the cluster recommendations and print the output from\\n        monitoring the resource.  Using --full will give more detailed output.\\n        This is mainly used for debugging resources that fail to be monitored.\\n\\n    move <resource id> [destination node] [--master] [lifetime=<lifetime>]\\n         [--wait[=n]]\\n        Move the resource off the node it is currently running on by creating a\\n        -INFINITY location constraint to ban the node.  If destination node is\\n        specified the resource will be moved to that node by creating an\\n        INFINITY location constraint to prefer the destination node.  If\\n        --master is used the scope of the command is limited to the master role\\n        and you must use the master id (instead of the resource id).  If\\n        lifetime is specified then the constraint will expire after that time,\\n        otherwise it defaults to infinity and the constraint can be cleared\\n        manually with 'pcs resource clear' or 'pcs constraint delete'.  If\\n        --wait is specified, pcs will wait up to 'n' seconds for the resource\\n        to move and then return 0 on success or 1 on error.  If 'n' is not\\n        specified it defaults to 60 minutes.\\n        If you want the resource to preferably avoid running on some nodes but\\n        be able to failover to them use 'pcs constraint location avoids'.\\n\\n    ban <resource id> [node] [--master] [lifetime=<lifetime>] [--wait[=n]]\\n        Prevent the resource id specified from running on the node (or on the\\n        current node it is running on if no node is specified) by creating a\\n        -INFINITY location constraint.  If --master is used the scope of the\\n        command is limited to the master role and you must use the master id\\n        (instead of the resource id).  If lifetime is specified then the\\n        constraint will expire after that time, otherwise it defaults to\\n        infinity and the constraint can be cleared manually with 'pcs resource\\n        clear' or 'pcs constraint delete'.  If --wait is specified, pcs will\\n        wait up to 'n' seconds for the resource to move and then return 0\\n        on success or 1 on error. If 'n' is not specified it defaults to 60\\n        minutes.\\n        If you want the resource to preferably avoid running on some nodes but\\n        be able to failover to them use 'pcs constraint location avoids'.\\n\\n    clear <resource id> [node] [--master] [--wait[=n]]\\n        Remove constraints created by move and/or ban on the specified\\n        resource (and node if specified).\\n        If --master is used the scope of the command is limited to the\\n        master role and you must use the master id (instead of the resource id).\\n        If --wait is specified, pcs will wait up to 'n' seconds for the\\n        operation to finish (including starting and/or moving resources if\\n        appropriate) and then return 0 on success or 1 on error.  If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    standards\\n        List available resource agent standards supported by this installation\\n        (OCF, LSB, etc.).\\n\\n    providers\\n        List available OCF resource agent providers.\\n\\n    agents [standard[:provider]]\\n        List available agents optionally filtered by standard and provider.\\n\\n    update <resource id> [resource options] [op [<operation action>\\n           <operation options>]...] [meta <meta operations>...] [--wait[=n]]\\n        Add/Change options to specified resource, clone or multi-state\\n        resource.  If an operation (op) is specified it will update the first\\n        found operation with the same action on the specified resource, if no\\n        operation with that action exists then a new operation will be created.\\n        (WARNING: all existing options on the updated operation will be reset\\n        if not specified.)  If you want to create multiple monitor operations\\n        you should use the 'op add' & 'op remove' commands.  If --wait is\\n        specified, pcs will wait up to 'n' seconds for the changes to take\\n        effect and then return 0 if the changes have been processed or 1\\n        otherwise.  If 'n' is not specified it defaults to 60 minutes.\\n\\n    op add <resource id> <operation action> [operation properties]\\n        Add operation for specified resource.\\n\\n    op remove <resource id> <operation action> [<operation properties>...]\\n        Remove specified operation (note: you must specify the exact operation\\n        properties to properly remove an existing operation).\\n\\n    op remove <operation id>\\n        Remove the specified operation id.\\n\\n    op defaults [options]\\n        Set default values for operations, if no options are passed, lists\\n        currently configured defaults. Defaults do not apply to resources which\\n        override them with their own defined operations.\\n\\n    meta <resource id | group id | master id | clone id> <meta options>\\n         [--wait[=n]]\\n        Add specified options to the specified resource, group, master/slave\\n        or clone.  Meta options should be in the format of name=value, options\\n        may be removed by setting an option without a value.  If --wait is\\n        specified, pcs will wait up to 'n' seconds for the changes to take\\n        effect and then return 0 if the changes have been processed or 1\\n        otherwise.  If 'n' is not specified it defaults to 60 minutes.\\n        Example: pcs resource meta TestResource failure-timeout=50 stickiness=\\n\\n    group add <group id> <resource id> [resource id] ... [resource id]\\n              [--before <resource id> | --after <resource id>] [--wait[=n]]\\n        Add the specified resource to the group, creating the group if it does\\n        not exist.  If the resource is present in another group it is moved\\n        to the new group.  You can use --before or --after to specify\\n        the position of the added resources relatively to some resource already\\n        existing in the group.  If --wait is specified, pcs will wait up to 'n'\\n        seconds for the operation to finish (including moving resources if\\n        appropriate) and then return 0 on success or 1 on error.  If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    group remove <group id> <resource id> [resource id] ... [resource id]\\n          [--wait[=n]]\\n        Remove the specified resource(s) from the group, removing the group if\\n        no resources remain in it. If --wait is specified, pcs will wait up to\\n        'n' seconds for the operation to finish (including moving resources if\\n        appropriate) and then return 0 on success or 1 on error. If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    ungroup <group id> [resource id] ... [resource id] [--wait[=n]]\\n        Remove the group (note: this does not remove any resources from the\\n        cluster) or if resources are specified, remove the specified resources\\n        from the group.  If --wait is specified, pcs will wait up to 'n' seconds\\n        for the operation to finish (including moving resources if appropriate)\\n        and the return 0 on success or 1 on error.  If 'n' is not specified it\\n        defaults to 60 minutes.\\n\\n    clone <resource id | group id> [clone options]... [--wait[=n]]\\n        Set up the specified resource or group as a clone. If --wait is\\n        specified, pcs will wait up to 'n' seconds for the operation to finish\\n        (including starting clone instances if appropriate) and then return 0\\n        on success or 1 on error. If 'n' is not specified it defaults to 60\\n        minutes.\\n\\n    unclone <resource id | group id> [--wait[=n]]\\n        Remove the clone which contains the specified group or resource (the\\n        resource or group will not be removed).  If --wait is specified, pcs\\n        will wait up to 'n' seconds for the operation to finish (including\\n        stopping clone instances if appropriate) and then return 0 on success\\n        or 1 on error.  If 'n' is not specified it defaults to 60 minutes.\\n\\n    master [<master/slave id>] <resource id | group id> [options] [--wait[=n]]\\n        Configure a resource or group as a multi-state (master/slave) resource.\\n        If --wait is specified, pcs will wait up to 'n' seconds for the\\n        operation to finish (including starting and promoting resource\\n        instances if appropriate) and then return 0 on success or 1 on error.\\n        If 'n' is not specified it defaults to 60 minutes.\\n        Note: to remove a master you must remove the resource/group it contains.\\n\\n    bundle create <bundle id> container <container type> [<container options>]\\n            [network <network options>] [port-map <port options>]...\\n            [storage-map <storage options>]... [meta <meta options>]\\n            [--disabled] [--wait[=n]]\\n        Create a new bundle encapsulating no resources. The bundle can be used\\n        either as it is or a resource may be put into it at any time.\\n        If --disabled is specified, the bundle is not started automatically.\\n        If --wait is specified, pcs will wait up to 'n' seconds for the bundle\\n        to start and then return 0 on success or 1 on error. If 'n' is not\\n        specified it defaults to 60 minutes.\\n\\n    bundle update <bundle id> [container <container options>]\\n            [network <network options>]\\n            [port-map (add <port options>) | (remove <id>...)]...\\n            [storage-map (add <storage options>) | (remove <id>...)]...\\n            [meta <meta options>]\\n            [--wait[=n]]\\n        Add, remove or change options to specified bundle. If you wish to update\\n        a resource encapsulated in the bundle, use the 'pcs resource update'\\n        command instead and specify the resource id. If --wait is specified,\\n        pcs will wait up to 'n' seconds for the operation to finish (including\\n        moving resources if appropriate) and then return 0 on success or 1 on\\n        error. If 'n' is not specified it defaults to 60 minutes.\\n\\n    manage <resource id>... [--monitor]\\n        Set resources listed to managed mode (default). If --monitor is\\n        specified, enable all monitor operations of the resources.\\n\\n    unmanage <resource id>... [--monitor]\\n        Set resources listed to unmanaged mode. When a resource is in unmanaged\\n        mode, the cluster is not allowed to start nor stop the resource. If\\n        --monitor is specified, disable all monitor operations of the\\n        resources.\\n\\n    defaults [options]\\n        Set default values for resources, if no options are passed, lists\\n        currently configured defaults. Defaults do not apply to resources which\\n        override them with their own defined values.\\n\\n    cleanup [<resource id>] [node=<node>] [operation=<operation>\\n            [interval=<interval>]]\\n        Make the cluster forget failed operations from history of the resource\\n        and re-detect its current state. This can be useful to purge knowledge\\n        of past failures that have since been resolved. If a resource id is not\\n        specified then all resources / stonith devices will be cleaned up. If a\\n        node is not specified then resources / stonith devices on all nodes will\\n        be cleaned up.\\n\\n    refresh [<resource id>] [node=<node>] [--full]\\n        Make the cluster forget the complete operation history (including\\n        failures) of the resource and re-detect its current state. If you are\\n        interested in forgetting failed operations only, use the 'pcs resource\\n        cleanup' command. If a resource id is not specified then all resources\\n        / stonith devices will be refreshed. If a node is not specified then\\n        resources / stonith devices on all nodes will be refreshed. Use --full\\n        to refresh a resource on all nodes, otherwise only nodes where the\\n        resource's state is known will be considered.\\n\\n    failcount show [<resource id>] [node=<node>] [operation=<operation>\\n            [interval=<interval>]] [--full]\\n        Show current failcount for resources, optionally filtered by a resource,\\n        node, operation and its interval. If --full is specified do not sum\\n        failcounts per resource and node. Use 'pcs resource cleanup' or 'pcs\\n        resource refresh' to reset failcounts.\\n\\n    relocate dry-run [resource1] [resource2] ...\\n        The same as 'relocate run' but has no effect on the cluster.\\n\\n    relocate run [resource1] [resource2] ...\\n        Relocate specified resources to their preferred nodes.  If no resources\\n        are specified, relocate all resources.\\n        This command calculates the preferred node for each resource while\\n        ignoring resource stickiness.  Then it creates location constraints\\n        which will cause the resources to move to their preferred nodes.  Once\\n        the resources have been moved the constraints are deleted automatically.\\n        Note that the preferred node is calculated based on current cluster\\n        status, constraints, location of resources and other settings and thus\\n        it might change over time.\\n\\n    relocate show\\n        Display current status of resources and their optimal node ignoring\\n        resource stickiness.\\n\\n    relocate clear\\n        Remove all constraints created by the 'relocate run' command.\\n\\n    utilization [<resource id> [<name>=<value> ...]]\\n        Add specified utilization options to specified resource. If resource is\\n        not specified, shows utilization of all resources. If utilization\\n        options are not specified, shows utilization of specified resource.\\n        Utilization option should be in format name=value, value has to be\\n        integer. Options may be removed by setting an option without a value.\\n        Example: pcs resource utilization TestResource cpu= ram=20\\n\\nExamples:\\n\\n    pcs resource show\\n      Show all resources.\\n\\n    pcs resource show VirtualIP\\n      Show options specific to the 'VirtualIP' resource.\\n\\n\\n    pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip=192.168.0.99 \\\\\\n               cidr_netmask=32 nic=eth2 op monitor interval=30s\\n      Create a new resource called 'VirtualIP' with options.\\n\\n    pcs resource create VirtualIP IPaddr2 ip=192.168.0.99 \\\\\\n               cidr_netmask=32 nic=eth2 op monitor interval=30s\\n      Create a new resource called 'VirtualIP' with options.\\n\\n    pcs resource update VirtualIP ip=192.168.0.98 nic=\\n      Change the ip address of VirtualIP and remove the nic option.\\n\\n    pcs resource delete VirtualIP\\n      Delete the VirtualIP resource.\\n\\nNotes:\\n    Starting resources on a cluster is (almost) always done by pacemaker and\\n    not directly from pcs.  If your resource isn't starting, it's usually\\n    due to either a misconfiguration of the resource (which you debug in\\n    the system log), or constraints preventing the resource from starting or\\n    the resource being disabled.  You can use 'pcs resource debug-start' to\\n    test resource configuration, but it should *not* normally be used to start\\n    resources in a cluster.\\n\\n\"\n    if pout:\n        print(sub_usage(args, output))\n    else:\n        return output", "edit_actions": ["update-node"]}
{"fixed_source_code": "def photo_detail(request, pk):\n    photo_id = Photo.objects.filter(id=pk)\n    return render(request, 'imager_images/photo_detail.html', {'photo': photo_id})", "buggy_source_code": "def photo_detail(request, pk):\n    photo_id = Photo.objects.get(pk=pk)\n    return render(request, 'imager_images/photo_detail.html', {'photo': photo_id})", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self):\n    super(SleepMonitorWithTargetROIBuilder, self).__init__(n_rows=2, n_cols=2, top_margin=6.99 / 111.0, bottom_margin=6.99 / 111.0, horizontal_fill=0.9, vertical_fill=0.7)", "buggy_source_code": "def __init__(self):\n    super(SleepMonitorWithTargetROIBuilder, self).__init__(n_rows=10, n_cols=2, top_margin=6.99 / 111.0, bottom_margin=6.99 / 111.0, horizontal_fill=0.9, vertical_fill=0.7)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _list_files():\n    files = [file for file in next(os.walk('./uploads'))[2] if not file[0] == '.']\n    return files", "buggy_source_code": "def _list_files():\n    files = [file for file in next(os.walk(app.config['UPLOAD_FOLDER']))[2] if not file[0] == '.']\n    return files", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node"]}
{"fixed_source_code": "def set_value(self, value):\n    self.field_value = value\n    setattr(self.obj, self.field_name, self.field_value)\n    return value", "buggy_source_code": "def set_value(self, value):\n    self.field_value = value\n    setattr(self.obj, self.field_name, value)\n    return value", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def create_buf(size=4096):\n    return array.array('B', itertools.repeat(0, size))", "buggy_source_code": "def create_buf(size=4096):\n    return array.array(b'B', itertools.repeat(0, size))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_admin_url(self):\n    return '%s/%s/%s/' % (self.get_content_type().package, self.get_content_type().python_module_name, self.object_id)", "buggy_source_code": "def get_admin_url(self):\n    return '%s/%s/%s/' % (self.get_content_type().get_package(), self.get_content_type().python_module_name, self.object_id)", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "@api.multi\ndef _compute_has_purchase_request_lines(self):\n    self.has_purchase_request_lines = bool(self.purchase_request_lines)", "buggy_source_code": "@api.multi\ndef _compute_has_purchase_request_lines(self):\n    for rec in self:\n        rec.has_purchase_request_lines = bool(rec.purchase_request_lines)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node"]}
{"fixed_source_code": "def is_debug():\n    return 'global.debug' in __config__.keys() and __config__['global.debug'][0] == True", "buggy_source_code": "def is_debug():\n    return 'gef.debug' in __config__.keys() and __config__['gef.debug'][0] == True", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def save(self, config: Config):\n    vptree_file = config.get_vptree_path()\n    pickle.dump(vptree, open(vptree_file, 'wb'))", "buggy_source_code": "def save(self, config: Config):\n    pickle.dump(self, open(config.vptree_path, 'wb'))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef load(config: Config):\n    with open(config.get_vptree_path(), 'rb') as f:\n        vptree = pickle.load(f)\n        return vptree", "buggy_source_code": "@staticmethod\ndef load(config: Config):\n    with open(config.vptree_path, 'rb') as f:\n        vptree = pickle.load(f)\n        return vptree", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def __getattr__(self, item):\n    package = super(Spec, self).__getattribute__('package')\n    return getattr(package, item)", "buggy_source_code": "def __getattr__(self, item):\n    if item.endswith('libs'):\n        return getattr(self.package, item)\n    raise AttributeError()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _to_cupy(array):\n    assert cupy is not None\n    return chainerx.to_cupy(array)", "buggy_source_code": "def _to_cupy(array):\n    assert cupy is not None\n    return chainerx._to_cupy(array)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def addEntry(self, emoteDict):\n    if not self.on:\n        return\n    self.emoteRecord.append(self.__createEmoteEntry(emoteDict))\n    self.__updateTotalCount(emoteDict)\n    self.__updateRecord()", "buggy_source_code": "def addEntry(self, emoteDict):\n    if not self.on:\n        return\n    self.emoteRecord.append(self.__createEmoteEntry(emoteDict))\n    self.__updateMinuteCount(emoteDict)\n    self.__updateRecord()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, message):\n    error_page = 'https://flax.readthedocs.io/en/improve-error/flax.errors.html'\n    module_name = self.__class__.__module__\n    class_name = self.__class__.__name__\n    error_msg = f'{message} ({error_page}#{module_name}.{class_name})'\n    super().__init__(error_msg)", "buggy_source_code": "def __init__(self, message):\n    error_page = 'https://flax.readthedocs.io/en/latest/flax.errors.html'\n    module_name = self.__class__.__module__\n    class_name = self.__class__.__name__\n    error_msg = f'{message} ({error_page}#{module_name}.{class_name})'\n    super().__init__(error_msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _build_y(self, subject, ictyp):\n    y_length = 0\n    for segment in self.segments[subject][ictyp]:\n        y_length += 1\n    return [1] * y", "buggy_source_code": "def _build_y(self, subject, ictyp):\n    y_length = 0\n    for segment in self.segments[subject][ictyp]:\n        y_length += 1\n    return [1] * y_length", "edit_actions": ["update-node"]}
{"fixed_source_code": "def core(request):\n    from django.core.urlresolvers import resolve\n    return {'CURRENT_MODULE': resolve(request.get_full_path()).app_name}", "buggy_source_code": "def core(request):\n    from django.core.urlresolvers import resolve\n    return {'CURRENT_MODULE': resolve(request.path).app_name}", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def test_import_coverage():\n    import importlib\n    import pytest_wish\n    importlib.reload(pytest_wish)", "buggy_source_code": "def test_import_coverage():\n    from imp import reload\n    import pytest_wish\n    reload(pytest_wish)", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return self.variable_name", "buggy_source_code": "def __unicode__(self):\n    return self.value", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_e224_and_e225(self):\n    line = '\\nclass Foo():\\n    def __init__(self):\\n        x= \\t3\\n'.lstrip()\n    fixed = '\\nclass Foo():\\n    def __init__(self):\\n        x = 3\\n'.lstrip()\n    self._inner_setup(line)\n    self.assertEqual(self.result, fixed)", "buggy_source_code": "def test_e224_and_e225(self):\n    line = '\\nclass Foo():\\n\\tdef __init__(self):\\n\\t\\tx= \\t3\\n'.lstrip()\n    fixed = '\\nclass Foo():\\n    def __init__(self):\\n        x = 3\\n'.lstrip()\n    self._inner_setup(line)\n    self.assertEqual(self.result, fixed)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def do_program(self, arg, opts=None):\n    self.stdout.write(prog_file + ' ' + 'is selected for auto mode.' + '\\n')", "buggy_source_code": "def do_program(self, arg, opts=None):\n    self.stdout.write(self.prog_file + ' ' + 'is selected for auto mode.' + '\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    service_url = 'gecko7.wu.ac.at:8081'\n    self.client = JeremiaNg(url=service_url)", "buggy_source_code": "def setUp(self):\n    service_url = 'localhost:63001'\n    self.client = JeremiaNg(url=service_url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _bottom_left(self):\n    return self.first + self.height - 1", "buggy_source_code": "def _bottom_left(self):\n    return self.first + self.rows - 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _bottom_right(self):\n    return self.first + self.height * self.columns - 1", "buggy_source_code": "def _bottom_right(self):\n    return self.first + self.rows * self.columns - 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _top_right(self):\n    return self.first + self.height * (self.columns - 1)", "buggy_source_code": "def _top_right(self):\n    return self.first + self.rows * (self.columns - 1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _items_in_page(self):\n    return min(self.height * self.columns, len(self.options))", "buggy_source_code": "def _items_in_page(self):\n    return min(self.rows * self.columns, len(self.options))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_default_arg(self):\n    exp = self.create(DefaultArg)\n    self.assertEqual(exp.run(), 42)", "buggy_source_code": "def test_default_arg(self):\n    exp = self.create(_DefaultArg)\n    self.assertEqual(exp.run(), 42)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def assertRoundtrip(self, obj):\n    exp = self.create(Roundtrip)\n\n    def callback(objcopy):\n        self.assertEqual(obj, objcopy)\n    exp.roundtrip(obj, callback)", "buggy_source_code": "def assertRoundtrip(self, obj):\n    exp = self.create(_Roundtrip)\n\n    def callback(objcopy):\n        self.assertEqual(obj, objcopy)\n    exp.roundtrip(obj, callback)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def productionCheck(strength, production):\n    return strength >= production * PRODUCTION_FACTOR_THRESHOLD[production]", "buggy_source_code": "def productionCheck(strength, production):\n    return strength >= PRODUCTION_FACTOR * PRODUCTION_FACTOR_THRESHOLD[production]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def startTunerStatusTimer(self):\n    self.tunerStatusTimer.start(2000, True)", "buggy_source_code": "def startTunerStatusTimer(self):\n    self.tunerStatusTimer.start(1000, True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_system_comments(self):\n    comments = self.sys_h.system_comments()\n    self.assertEqual(comments[1], 'xK')", "buggy_source_code": "def test_system_comments(self):\n    comments = self.sys_h.system_comments()\n    self.assertEqual(comments[1], 'K')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getCliVersion(self):\n    return __version__", "buggy_source_code": "@staticmethod\ndef getCliVersion():\n    return __version__", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef results(self):\n    if self._finalised:\n        return self._results\n    else:\n        raise AttributeError('No payoffs list has been passed to this ResultSet object.')", "buggy_source_code": "@property\ndef results(self):\n    if self._finalised:\n        return self._results\n    else:\n        raise AttributeError(self.unfinalised_error_msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'stock_history')\n    cr.execute(\"\\n            CREATE OR REPLACE VIEW stock_history AS (\\n                SELECT\\n                    stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    stock_move.location_dest_id AS location_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    stock_move.product_qty AS quantity,\\n                    stock_move.date AS date,\\n                    ir_property.value_text AS cost_method,\\n                    stock_move.price_unit as price_unit_on_move\\n                FROM\\n                    stock_move\\n                LEFT JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                LEFT JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                LEFT JOIN\\n                    ir_property ON (ir_property.name = 'cost_method' and ir_property.res_id = 'product.template,' || product_template.id::text)\\n                WHERE stock_move.state = 'done'\\n            )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'stock_history')\n    cr.execute(\"\\n            CREATE OR REPLACE VIEW stock_history AS (\\n                (SELECT\\n                    quant.id AS id,\\n                    stock_move.id AS move_id,\\n                    stock_move.location_dest_id AS location_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    ir_property.value_text AS cost_method,\\n                    quant.cost as price_unit_on_quant\\n                FROM\\n                    stock_move\\n                LEFT JOIN\\n                   stock_quant quant ON quant.id IN (SELECT quant_id FROM stock_quant_move_rel WHERE move_id = stock_move.id)\\n                LEFT JOIN\\n                   stock_location location ON stock_move.location_dest_id = location.id\\n                LEFT JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                LEFT JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                LEFT JOIN\\n                    ir_property ON (ir_property.name = 'cost_method' and ir_property.res_id = 'product.template,' || product_template.id::text)\\n                WHERE stock_move.state = 'done' AND location.usage = 'internal'\\n                ) UNION\\n                (SELECT\\n                    - quant.id AS id,\\n                    stock_move.id AS move_id,\\n                    stock_move.location_id AS location_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    - quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    ir_property.value_text AS cost_method,\\n                    quant.cost as price_unit_on_quant\\n                FROM\\n                    stock_move\\n                LEFT JOIN\\n                   stock_quant quant ON quant.id IN (SELECT quant_id FROM stock_quant_move_rel WHERE move_id = stock_move.id)\\n                LEFT JOIN\\n                   stock_location location ON stock_move.location_id = location.id\\n                LEFT JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                LEFT JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                LEFT JOIN\\n                    ir_property ON (ir_property.name = 'cost_method' and ir_property.res_id = 'product.template,' || product_template.id::text)\\n                WHERE stock_move.state = 'done' AND location.usage = 'internal'\\n                )\\n            )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef _get_settings_for_webkit():\n    return {'enable_developer_extras': False, 'javascript_can_open_windows_automatically': True, 'allow_file_access_from_file_urls': True, 'enable_write_console_messages_to_stdout': True}", "buggy_source_code": "@staticmethod\ndef _get_settings_for_webkit():\n    return {'enable_developer_extras': False, 'javascript_can_open_windows_automatically': True, 'allow_file_access_from_file_urls': True, 'enable_write_console_messages_to_stdout': False}", "edit_actions": []}
{"fixed_source_code": "def load(self):\n    self._content.load()", "buggy_source_code": "def load(self):\n    self._content._load()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def execute():\n    frappe.delete_doc('DocType', 'Website Route', force=1)\n    frappe.delete_doc('Page', 'sitemap-browser', force=1)\n    frappe.db.sql('drop table `tabWebsite Route`')", "buggy_source_code": "def execute():\n    frappe.delete_doc('DocType', 'Website Route', force=1)\n    frappe.delete_doc('Page', 'sitemap-browser', force=1)\n    frappe.db.sql('drop table if exists `tabWebsite Route`')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@actionrun(action=True)\ndef goraml(self):\n    C = '\\n        go get -u github.com/Jumpscale/go-raml\\n        set -ex\\n        cd $GOPATH/src/github.com/Jumpscale/go-raml\\n        sh build.sh\\n        '\n    j.tools.cuisine.local.core.run_script(C)", "buggy_source_code": "@actionrun(action=True)\ndef goraml(self):\n    C = '\\n        go get -u github.com/Jumpscale/go-raml\\n        set -ex\\n        cd $GOPATH/src/github.com/jteeuwen/go-bindata/go-bindata\\n        go build \\n        go install \\n        cd $GOPATH/src/github.com/Jumpscale/go-raml\\n        sh build.sh\\n        '\n    self.cuisine.core.run_script(C, profile=True)", "edit_actions": ["update-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task\ndef release(ctx):\n    ctx.run('inv docs')\n    target = 'docs'\n    rmtree(target, ignore_errors=True)\n    copytree(docs_build, target)\n    publish(ctx)\n    print(\"\\n\\nDon't forget to update RTD's versions page for new minor releases!\")", "buggy_source_code": "@task\ndef release(ctx):\n    ctx.run('inv docs')\n    target = 'docs'\n    rmtree(target, ignore_errors=True)\n    copytree('sites/docs/_build', target)\n    publish(ctx)\n    print(\"\\n\\nDon't forget to update RTD's versions page for new minor releases!\")", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def is_default_rtnlri(self):\n    if self._origin_as is RtNlri.DEFAULT_AS and self._route_target is RtNlri.DEFAULT_RT:\n        return True\n    return False", "buggy_source_code": "def is_default_rtnlri(self):\n    if self._origin_as is self.DEFAULT_AS and self._route_target is self.DEFAULT_RT:\n        return True\n    return False", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def address_generator(host):\n    prefix = '192.168.1.'\n    host_address = prefix + str(host)\n    return host_address", "buggy_source_code": "def address_generator(host):\n    prefix = '192.168.0.'\n    host_address = prefix + str(host)\n    return host_address", "edit_actions": ["update-node"]}
{"fixed_source_code": "def close(self):\n    if not self.closed():\n        log_info('~~ [CLOSE]')\n        self.socket.close()\n        self._closed = True", "buggy_source_code": "def close(self):\n    if not self.closed():\n        log_debug('~~ [CLOSE]')\n        self.socket.close()\n        self._closed = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def booster(self):\n    if self._Booster is None:\n        raise XGBError('need to call fit beforehand')\n    return self._Booster", "buggy_source_code": "def booster(self):\n    if self._Booster is None:\n        raise XGBoostError('need to call fit beforehand')\n    return self._Booster", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, imp, context, sig):\n    self._imp = imp\n    self._context = context\n    self._sig = sig", "buggy_source_code": "def __init__(self, imp, context, sig):\n    self._imp = _wrap_missing_loc(imp)\n    self._context = context\n    self._sig = sig", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def close(self):\n    BaseRemoteMachine.close(self)\n    if self._connected:\n        self._paramiko_client.close()", "buggy_source_code": "def close(self):\n    BaseRemoteMachine.close(self)\n    if self._connected:\n        self.disconnect()", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_ifc(self) -> constants.StatusCode:\n    if not isinstance(self, GPIBInterface):\n        warnings.warn(FutureWarning('`control_atn` is only supported on GPIB::INTFC resources and the methods will be removed in PyVISA 1.12'))\n    return self.visalib.gpib_send_ifc(self.session)", "buggy_source_code": "def send_ifc(self) -> constants.StatusCode:\n    if not isinstance(self, GPIBInterface):\n        warnings.warn(FutureWarning('`send_ifc` is only supported on GPIB::INTFC resources and the methods will be removed in PyVISA 1.12'))\n    return self.visalib.gpib_send_ifc(self.session)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_parse_args_defaults():\n    args = ['development.ini', '--app-name', 'app']\n    args = go.parse_args(args)\n    assert args.ontologies == 'all'\n    assert args.key is None\n    assert args.env == 'data'", "buggy_source_code": "def test_parse_args_defaults():\n    args = ['development.ini', '--app_name', 'app']\n    args = go.parse_args(args)\n    assert args.ontologies == 'all'\n    assert args.key is None\n    assert args.env == 'data'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_2_0_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('2.0',))", "buggy_source_code": "def setUp(self):\n    OpenNebulaNodeDriver.connectionCls.conn_class = OpenNebula_2_0_MockHttp\n    self.driver = OpenNebulaNodeDriver(*OPENNEBULA_PARAMS + ('2.0',), host='dummy')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_server_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]", "buggy_source_code": "def get_server_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def find_suffixes(root, prefix):\n    return extract_suffixees(find_prefixed(root, prefix), prefix)", "buggy_source_code": "def find_suffixes(root, prefix):\n    return extract_suffixes(find_prefixed(root, prefix), prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __iter__(self):\n    return __iter__(self.txns)", "buggy_source_code": "def __iter__(self):\n    return iter(self.txns)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_descr_text(self):\n    s = _PLATFORM_DESCRIPTIONS[self]\n    if self == self.VK_MOBILE:\n        return s\n    s = s.replace('unrecognized', 'an unrecognized')\n    return 'the ' + s", "buggy_source_code": "def get_descr_text(self):\n    s = _PLATFORM_DESCRIPTIONS[self]\n    if self == Platform.VK_MOBILE:\n        return s\n    s = s.replace('unrecognized', 'an unrecognized')\n    return 'the ' + s", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_client_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]", "buggy_source_code": "def get_client_transport_class_by_name(name):\n    return _TRANSPORT_MAPPING[name.lower()]()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def assert_message(self, msg, index=0):\n    assert_equals(self.messages[index], msg)", "buggy_source_code": "def assert_message(self, msg, index=0):\n    assert_equals(self.messages[index], self._normalize_drive_letter(msg))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def unsupported_message():\n    sys.exit('F2Py functionality not currently available on your platform.')", "buggy_source_code": "def unsupported_message():\n    logger.error('F2Py functionality not currently available on your platform.')\n    sys.exit()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def savefile(self):\n    self.fileName = QtGui.QFileDialog.getSaveFileName(self.vindu, 'Save as', '', 'Python Files (*.py *.pyc *.pyw)')\n    if self.fileName:\n        self.savetext(self.fileName)", "buggy_source_code": "def savefile(self):\n    self.fileName = AskFile(1, 'Python Files (*.py *.pyc *.pyw)', 'Save File')\n    if self.fileName:\n        self.savetext(self.fileName)", "edit_actions": ["update-node", "move-tree", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@gen.coroutine\ndef get_imageinfo(self, origin_url):\n    url = self.imageinfo_url(origin_url)\n    response = (yield self._send_async_request(url))\n    if response:\n        return json_decode(response)", "buggy_source_code": "@gen.coroutine\ndef get_imageinfo(self, origin_url):\n    url = self.imageinfo_url(origin_url)\n    response = (yield self.send_async_request(url))\n    if response:\n        return json_decode(response)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@gen.coroutine\ndef get_imageexif(self, origin_url):\n    url = self.imageexif_url(origin_url)\n    response = (yield self._send_async_request(url))\n    return response", "buggy_source_code": "@gen.coroutine\ndef get_imageexif(self, origin_url):\n    url = self.imageexif_url(origin_url)\n    response = (yield self.send_async_request(url))\n    return response", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '{}(snapname={}, chunkname={}, msg={})'.format(self.__class__.__name__, self.snapshot_name, self.chunkname)", "buggy_source_code": "def __repr__(self):\n    return '{}(snapname={}, chunkname={}, msg={})'.format(self.__class__.__name__, self.snapshot_name, self.chunk_name, self.message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return '<{} snapshot={}, chunkname={}, message={}>'.format(self.__class__.__name__, self.snapshot_name, self.chunkname)", "buggy_source_code": "def __str__(self):\n    return '<{} snapshot={}, chunkname={}, message={}>'.format(self.__class__.__name__, self.snapshot_name, self.chunk_name, self.message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "@property\ndef rebuig_anullacio(self):\n    data = []\n    for i in self.obj.RechazoDeAnulacion.RechazoAnulacion:\n        data.append(C1.Rebuig(i))\n    return data", "buggy_source_code": "@property\ndef rebuig_anullacio(self):\n    data = []\n    for i in self.obj.RechazoDeAnulacion.RechazoAnulacion:\n        data.append(Rebuig(i))\n    return data", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_line_width():\n    (row, col) = get_terminal_size()\n    if col:\n        return col\n    else:\n        return maxwidth", "buggy_source_code": "def get_line_width():\n    (row, col) = get_terminal_size()\n    if col:\n        return col\n    else:\n        return _maxwidth", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_main_color(c):\n    global mc\n    mc = c", "buggy_source_code": "def set_main_color(c):\n    global _mc\n    _mc = c", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def print_heading(text):\n    write_color('%s > #w%s\\n' % (mc, text), file=sys.stdout)", "buggy_source_code": "def print_heading(text):\n    write_color('%s > #w%s\\n' % (_mc, text), file=sys.stdout)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def print_item(text):\n    write_color('%s * #w%s\\n' % (mc, text), file=sys.stdout)", "buggy_source_code": "def print_item(text):\n    write_color('%s * #w%s\\n' % (_mc, text), file=sys.stdout)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def print_enum(i, n, text):\n    write_color('%s(%d/%d) #t%s\\n' % (mc, i, n, text), file=sys.stdout)", "buggy_source_code": "def print_enum(i, n, text):\n    write_color('%s(%d/%d) #t%s\\n' % (_mc, i, n, text), file=sys.stdout)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ask_question_string(question):\n    write_color('%s ? #w%s ' % (mc, question), file=sys.stderr)\n    return input()", "buggy_source_code": "def ask_question_string(question):\n    write_color('%s ? #w%s ' % (_mc, question), file=sys.stderr)\n    return input()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sid(self):\n    return str(self.key())", "buggy_source_code": "def sid(self):\n    return unicode(self.key())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sid(self):\n    return str(self.key())", "buggy_source_code": "def sid(self):\n    return unicode(self.key())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def resource_url(self):\n    return '/statuses/' + str(self.slug)", "buggy_source_code": "def resource_url(self):\n    return '/statuses/' + unicode(self.slug)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fastdeploy():\n    fix_perms(user='django')\n    rsync()\n    collect_static()\n    fix_perms()\n    apache_reload()", "buggy_source_code": "def fastdeploy():\n    if env.environment == 'production':\n        pull()\n    else:\n        rsync()\n    collect_static()\n    apache_reload()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def task_nuget_pack():\n    depends('build')\n    log('packing all')\n    for proj in PROJECTS:\n        if include_proj(proj):\n            nuget_pack(proj)", "buggy_source_code": "def task_nuget_pack():\n    depends('build')\n    log('packing all projects')\n    for proj in PROJECTS:\n        if include_proj(proj):\n            nuget_pack(proj)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def task_release_build():\n    depends('clean', 'build', 'test', 'nuget_pack')\n    copy_pkgs_to_local_repo()", "buggy_source_code": "def task_release_build():\n    depends('build', 'test', 'nuget-pack')\n    copy_pkgs_to_local_repo()", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getGroup(self, file):\n    try:\n        match = re.search('-(?P<group>[A-Z0-9]+).', file, re.I)\n        return match.group('group') or ''\n    except:\n        return ''", "buggy_source_code": "def getGroup(self, file):\n    try:\n        match = re.findall('\\\\-([A-Z0-9]+)[\\\\.\\\\/]', file, re.I)\n        return match[-1] or ''\n    except:\n        return ''", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture()\ndef user(db):\n    create_user('common')", "buggy_source_code": "@pytest.fixture()\ndef user(db):\n    return create_user('common')", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _do_get(cnf, get_path):\n    (cnf, err) = API.get(cnf, get_path)\n    if err:\n        _exit_with_output(err, 1)\n    return cnf", "buggy_source_code": "def _do_get(cnf, get_path):\n    (cnf, err) = API.get(cnf, get_path)\n    if cnf is None:\n        _exit_with_output('Failed to get result: err=%s' % err, 1)\n    return cnf", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef hourly(self) -> bool:\n    return self._db_record.schedule == 'hourly'", "buggy_source_code": "@property\ndef hourly(self) -> bool:\n    return self.inheritedAttr('schedule') == 'hourly'", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef daily(self) -> bool:\n    return self._db_record.schedule == 'daily'", "buggy_source_code": "@property\ndef daily(self) -> bool:\n    return self.inheritedAttr('schedule') == 'daily'", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef never(self) -> bool:\n    return self._db_record.schedule == 'never'", "buggy_source_code": "@property\ndef never(self) -> bool:\n    return self.inheritedAttr('schedule') == 'never'", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef continuous(self) -> bool:\n    return self._db_record.schedule == 'continuous'", "buggy_source_code": "@property\ndef continuous(self) -> bool:\n    return self.inheritedAttr('schedule') == 'continuous'", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef attachall():\n    from governor.module import Module\n    for s in Module.modulelist:\n        if s.id not in modules:\n            attach(s)", "buggy_source_code": "@staticmethod\ndef attachall():\n    from governor.module import Module\n    for s in Module.modulelist:\n        if s.id not in Runtime.modules:\n            attach(s)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_patch_format(self):\n    for _item in cls.items:\n        self.assertFalse(_item.is_empty, 'Mbox should not be empty')\n        self.assertGreater(len(_item.changes), 0, 'There should be changed files')", "buggy_source_code": "def test_patch_format(self):\n    for _item in self.items:\n        self.assertFalse(_item.is_empty, 'Mbox should not be empty')\n        self.assertGreater(len(_item.changes), 0, 'There should be changed files')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_error_to_step(self, message, slug):\n    step = self.get_step(slug)\n    if step:\n        step.add_error(message)", "buggy_source_code": "def add_error_to_step(self, message, slug):\n    step = self.get_step(slug)\n    if step:\n        step.add_step_error(message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef is_active(self):\n    if '_transport' in self.__dict__ and self._transport.is_authenticated():\n        return True\n    return False", "buggy_source_code": "@property\ndef is_active(self):\n    if '_transport' in self.__dict__ and self._transport.is_active():\n        return True\n    return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def print_colors2(**kwargs):\n    print('Foreground: {fore_color} Background: {back_color}Links: {link_color} Visitedlinks: {visited_color}'.format(**kwargs))", "buggy_source_code": "def print_colors2(**kwargs):\n    print('Foreground: {fore_color} Background: {back_color} Links: {link_color} Visited links: {visited_color}'.format(**kwargs))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.errorhandler(404)\ndef stub(e):\n    return render_template('stub.html')", "buggy_source_code": "@app.errorhandler(404)\n@app.errorhandler(405)\ndef stub(e):\n    return redirect('/')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def check_if_new_fastest_lap(event: LapEvent):\n    global _fastest_known_lap_time\n    if _fastest_known_lap_time is None or _fastest_known_lap_time > event.lap_time:\n        _fastest_known_lap_time = event.lap_time\n        return True\n    return False", "buggy_source_code": "def check_if_new_fastest_lap(event: LapEvent):\n    global _fastest_known_lap_time\n    if _fastest_known_lap_time is None or _fastest_known_lap_time >= event.lap_time:\n        _fastest_known_lap_time = event.lap_time\n        return True\n    return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_test_database_name(self):\n    self.assertEquals(self.path.test_database_name(), 'test_csw_web_patrick')", "buggy_source_code": "def test_test_database_name(self):\n    self.assertEquals(self.path.test_database_name(), 'test_csw_web_{}'.format(getpass.getuser()))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture\ndef in_tmpdir(tmpdir):\n    tmpdir.chdir()", "buggy_source_code": "@pytest.yield_fixture\ndef in_tmpdir(tmpdir):\n    with tmpdir.as_cwd():\n        yield tmpdir", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def getTemperature():\n    return float(os.popen('vcgencmd measure_temp').readline()[5:-2])", "buggy_source_code": "def getTemperature():\n    return float(os.popen('vcgencmd measure_temp').readline()[5:-3])", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def revoked(client: Client) -> dict:\n    return await client.get(MODULE + '/with/excluded', schema=BLOCK_NUMBERS_SCHEMA)", "buggy_source_code": "async def revoked(client: Client) -> dict:\n    return await client.get(MODULE + '/with/revoked', schema=BLOCK_NUMBERS_SCHEMA)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@auto_refresh\ndef plot_spectrum_mmm(self, *args, **kwargs):\n    warnings.warn('{0}.plot_spectrum_mmm was renamed {0}.plot_frequencyseries_mmm, and will be removed in an upcoming release'.format(type(self).__name__))\n    return self.plot_frequencyseries(*args, **kwargs)", "buggy_source_code": "@auto_refresh\ndef plot_spectrum_mmm(self, *args, **kwargs):\n    warnings.warn('{0}.plot_spectrum_mmm was renamed {0}.plot_frequencyseries_mmm, and will be removed in an upcoming release'.format(type(self).__name__))\n    return self.plot_frequencyseries_mmm(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def partial_predict(X, y=None):\n    if isinstance(X, md.Trajectory):\n        X.center_coordinates()\n    return super(MultiSequenceClusterMixin, self).predict(sequence)", "buggy_source_code": "def partial_predict(self, X, y=None):\n    if isinstance(X, md.Trajectory):\n        X.center_coordinates()\n    return super(MultiSequenceClusterMixin, self).predict(X)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def system_call(command):\n    p = subprocess.Popen([command], stdout=subprocess.PIPE, shell=True)\n    return p.stdout.read()", "buggy_source_code": "def system_call(command):\n    p = subprocess.Popen([command], stdout=subprocess.PIPE, shell=True)\n    p.wait()\n    return str(p.returncode)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def generateFactorgraph(runPath):\n    system_call('pgmlab --generate-factorgraph --pairwise-interaction-file=' + str(runPath) + 'pathway.pi --logical-factorgraph-file=' + str(runPath) + 'logical.fg --number-of-states 3')", "buggy_source_code": "def generateFactorgraph(runPath):\n    return system_call('pgmlab --generate-factorgraph --pairwise-interaction-file=' + str(runPath) + 'pathway.pi --logical-factorgraph-file=' + str(runPath) + 'logical.fg --number-of-states 3')", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def getPropertyAttribute(self, propertyName, propertyAttribute):\n    self.properties.getPropertyAttribute(propertyName, propertyAttribute)", "buggy_source_code": "def getPropertyAttribute(self, propertyName, propertyAttribute):\n    return self.properties.getPropertyAttribute(propertyName, propertyAttribute)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, name=''):\n    logging.Filter.__init__(self, name)\n    self.start = 0", "buggy_source_code": "def __init__(self, name=''):\n    logging.Filter.__init__(self, name)\n    self._start = 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def filter(self, record):\n    record.delta = time.time() - self.start\n    return True", "buggy_source_code": "def filter(self, record):\n    record.delta = time.time() - self._start\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def start(self):\n    self.start = time.time()", "buggy_source_code": "def start(self):\n    self._start = time.time()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def execute_srliw(s, inst):\n    s.rf[inst.rd] = sext_32(s.rf[inst.rs1] >> SHAMT(s, inst))\n    s.pc += 4", "buggy_source_code": "def execute_srliw(s, inst):\n    s.rf[inst.rd] = sext_32(trim_32(s.rf[inst.rs1]) >> SHAMT(s, inst))\n    s.pc += 4", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def show_commands():\n    return ':hammer_and_wrench: *List of supported commands:*\\n`issue <subject>` - creates new issue and assigns it to you\\n`issueto <name> <subject>` - creates new issue and assigns it to `<name>`\\n`issuep <project> <subject>` - creates new issue in `<project>` and assigns it to you\\n`issuepto <project> <name> <subject>` - creates new issue and assigns it to `<name>` in `<project>`\\n`issuepv <project> <version> <subject>` - creates new issue in `<project>` with version `<version>` and assigns it to you\\n`issuepvto <project> <version> <name> <subject>` - creates new issue and assigns it to `<name>` in `<project>` with version `<version>`\\n`update <issue #> <comment>` - updates an issue with the following `<comment>`\\n`status <issue #> <status> <comment>` - changes the status of an issue\\n\\t`<status>` must be one of the following: ' + list_status_keys() + '\\n`close <issue #> <comment>` - closes an issue with the following comment\\n`list` - list all open issues assigned to you\\n`listfor <name>` - list all open issues assigned to `<name>`\\n`scrum` - generate daily scrum for issues assigned to you\\n`scrumfor <name>` - generate daily scrum for issues assigned to `<name>`\\n`eod` - generate end of day report for issues assigned to you\\n`eodfor <name>` - generate end of day report for issues assigned to `<name>`\\n\\n:key: *List of keywords:*\\nEstimate time - `$<t>h` - where `<t>` is an integer/decimal for # of hours\\n_*NOTE:* These keywords can be used in_ `<comment>` _text only_\\nRecord time - `!<t>h` - where `<t>` is an integer/decimal for # of hours\\nPercent done - `%<p>` - where `<p>` is an integer from 0-100\\n'", "buggy_source_code": "def show_commands():\n    return ':hammer_and_wrench: *List of supported commands:*\\n`<issue #>` - returns a link to the referenced issue number\\n`issue <subject>` - creates new issue and assigns it to you\\n`issueto <name> <subject>` - creates new issue and assigns it to `<name>`\\n`issuep <project> <subject>` - creates new issue in `<project>` and assigns it to you\\n`issuepto <project> <name> <subject>` - creates new issue and assigns it to `<name>` in `<project>`\\n`issuepv <project> <version> <subject>` - creates new issue in `<project>` with version `<version>` and assigns it to you\\n`issuepvto <project> <version> <name> <subject>` - creates new issue and assigns it to `<name>` in `<project>` with version `<version>`\\n`update <issue #> <comment>` - updates an issue with the following `<comment>`\\n`status <issue #> <status> <comment>` - changes the status of an issue\\n\\t`<status>` must be one of the following: ' + list_status_keys() + '\\n`close <issue #> <comment>` - closes an issue with the following comment\\n`list` - list all open issues assigned to you\\n`listfor <name>` - list all open issues assigned to `<name>`\\n`scrum` - generate daily scrum for issues assigned to you\\n`scrumfor <name>` - generate daily scrum for issues assigned to `<name>`\\n`eod` - generate end of day report for issues assigned to you\\n`eodfor <name>` - generate end of day report for issues assigned to `<name>`\\n\\n:key: *List of keywords:*\\nEstimate time - `$<t>h` - where `<t>` is an integer/decimal for # of hours\\n_*NOTE:* These keywords can be used in_ `<comment>` _text only_\\nRecord time - `!<t>h` - where `<t>` is an integer/decimal for # of hours\\nPercent done - `%<p>` - where `<p>` is an integer from 0-100\\n'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def send_uplink(self, msgContainer):\n    self.uplinkSocketLock.acquire()\n    try:\n        self.socket_pub.send_multipart(msgContainer)\n    finally:\n        self.uplinkSocketLock.release()", "buggy_source_code": "def send_uplink(self, msgContainer):\n    self.uplinkSocketLock.acquire()\n    try:\n        self.ul_socket.send_multipart(msgContainer)\n    finally:\n        self.uplinkSocketLock.release()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def subscribe_to(self, topic):\n    self.log.debug('Agent subscribes to topic: {}'.format(topic))\n    self.socket_sub.setsockopt(zmq.SUBSCRIBE, str(topic))", "buggy_source_code": "def subscribe_to(self, topic):\n    self.log.debug('Agent subscribes to topic: {}'.format(topic))\n    self.dl_socket.setsockopt(zmq.SUBSCRIBE, str(topic))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@login_required()\ndef delete(request):\n    username = request.user.get_username()\n    datahub_delete_user(username=username, remove_db=True)\n    return HttpResponse(reverse('browser-home'))", "buggy_source_code": "@login_required()\ndef delete(request):\n    username = request.user.get_username()\n    delete_user(username=username, remove_db=True)\n    return HttpResponse(reverse('browser-home'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, tcam):\n    _tcam = tcam", "buggy_source_code": "def __init__(self, tcam):\n    self._tcam = tcam", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def to_string(self):\n    owner = self.val['__data']['__owner']\n    if owner == 0:\n        return '<unlocked>'\n    else:\n        return '<locked by #' + owner + '>'", "buggy_source_code": "def to_string(self):\n    owner = self.val['__data']['__owner']\n    if owner == 0:\n        return '<unlocked>'\n    else:\n        return '<locked by #' + str(owner) + '>'", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, err_no, err_msg):\n    super(Error, self).__init__(err_msg)\n    self.err_no = err_no\n    self.err_msg = err_msg", "buggy_source_code": "def __init__(self, err_no, err_msg):\n    super(MidiException, self).__init__(err_msg)\n    self.err_no = err_no\n    self.err_msg = err_msg", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getAbsoluteLeft(elem):\n    JS('\\n    var left = 0;\\n    var parent = elem;\\n\\n    while (parent) {\\n        if (parent.scrollLeft > 0) {\\n            left = left -  parent.scrollLeft;\\n        }\\n        parent = parent.parentNode;\\n    }\\n    while (elem) {\\n        left = left + elem.offsetLeft;\\n        elem = elem.offsetParent;\\n    }\\n\\n    return left + $doc.body.scrollLeft + $doc.documentElement.scrollLeft;\\n    ')", "buggy_source_code": "def getAbsoluteLeft(_elem):\n    JS('\\n    var left = 0;\\n    var elem = @{{_elem}};\\n    var parent = elem;\\n\\n    while (parent) {\\n        if (parent.scrollLeft > 0) {\\n            left = left -  parent.scrollLeft;\\n        }\\n        parent = parent.parentNode;\\n    }\\n    while (elem) {\\n        left = left + elem.offsetLeft;\\n        elem = elem.offsetParent;\\n    }\\n\\n    return left + $doc.body.scrollLeft + $doc.documentElement.scrollLeft;\\n    ')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def isOrHasChild(parent, child):\n    JS(\"\\n    while (child) {\\n        if ((!parent.isSameNode)) {\\n            if (parent == child) {\\n                return true;\\n            }\\n        }\\n        else if (parent.isSameNode(child)) {\\n            return true;\\n        }\\n        try {\\n            child = child.parentNode;\\n        } catch(e) {\\n          // Give up on 'Permission denied to get property\\n          // HTMLDivElement.parentNode'\\n          // See https://bugzilla.mozilla.org/show_bug.cgi?id=208427\\n          return false;\\n        }\\n        if (child && (child.nodeType != 1)) {\\n          child = null;\\n        }\\n      }\\n    return false;\\n    \")", "buggy_source_code": "def isOrHasChild(parent, _child):\n    JS(\"\\n    var child = @{{_child}};\\n    while (child) {\\n        if ((!@{{parent}}.isSameNode)) {\\n            if (@{{parent}} == child) {\\n                return true;\\n            }\\n        }\\n        else if (@{{parent}}.isSameNode(child)) {\\n            return true;\\n        }\\n        try {\\n            child = child.parentNode;\\n        } catch(e) {\\n          // Give up on 'Permission denied to get property\\n          // HTMLDivElement.parentNode'\\n          // See https://bugzilla.mozilla.org/show_bug.cgi?id=208427\\n          return false;\\n        }\\n        if (child && (child.nodeType != 1)) {\\n          child = null;\\n        }\\n      }\\n    return false;\\n    \")", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def eventGetButton(evt):\n    JS('\\n    var button = evt.button;\\n    if(button == 0) {\\n        return 1;\\n    } else if (button == 1) {\\n        return 4;\\n    } else {\\n        return button;\\n    }\\n    ')", "buggy_source_code": "def eventGetButton(evt):\n    JS('\\n    var button = @{{evt}}.button;\\n    if(button == 0) {\\n        return 1;\\n    } else if (button == 1) {\\n        return 4;\\n    } else {\\n        return button;\\n    }\\n    ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getAbsoluteTop(elem):\n    JS('\\n    var top = 0;\\n    var parent = elem;\\n    while (parent) {\\n        if (parent.scrollTop > 0) {\\n            top -= parent.scrollTop;\\n        }\\n        parent = parent.parentNode;\\n    }\\n\\n    while (elem) {\\n        top += elem.offsetTop;\\n        elem = elem.offsetParent;\\n    }\\n    return top + $doc.body.scrollTop + $doc.documentElement.scrollTop;\\n    ')", "buggy_source_code": "def getAbsoluteTop(_elem):\n    JS('\\n    var top = 0;\\n    var elem = @{{_elem}};\\n    var parent = elem;\\n    while (parent) {\\n        if (parent.scrollTop > 0) {\\n            top -= parent.scrollTop;\\n        }\\n        parent = parent.parentNode;\\n    }\\n\\n    while (elem) {\\n        top += elem.offsetTop;\\n        elem = elem.offsetParent;\\n    }\\n    return top + $doc.body.scrollTop + $doc.documentElement.scrollTop;\\n    ')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def compare(elem1, elem2):\n    JS('\\n    if (!elem1 && !elem2) {\\n        return true;\\n    } else if (!elem1 || !elem2) {\\n        return false;\\n    }\\n\\tif (!elem1.isSameNode) {\\n\\t    return (elem1 == elem2);\\n\\t}\\n    return (elem1.isSameNode(elem2));\\n    ')", "buggy_source_code": "def compare(elem1, elem2):\n    JS('\\n    if (!@{{elem1}} && !@{{elem2}}) {\\n        return true;\\n    } else if (!@{{elem1}} || !@{{elem2}}) {\\n        return false;\\n    }\\n\\tif (!@{{elem1}}.isSameNode) {\\n\\t    return (@{{elem1}} == @{{elem2}});\\n\\t}\\n    return (@{{elem1}}.isSameNode(@{{elem2}}));\\n    ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getChildIndex(parent, child):\n    JS('\\n    var count = 0, current = parent.firstChild;\\n    while (current) {\\n\\t\\tif (! current.isSameNode) {\\n\\t\\t\\tif (current == child) {\\n\\t\\t\\t   return count;\\n\\t\\t   }\\n\\t\\t}\\n        else if (current.isSameNode(child)) {\\n            return count;\\n        }\\n        if (current.nodeType == 1) {\\n            ++count;\\n        }\\n        current = current.nextSibling;\\n    }\\n    return -1;\\n    ')", "buggy_source_code": "def getChildIndex(parent, child):\n    JS('\\n    var count = 0, current = @{{parent}}.firstChild;\\n    while (current) {\\n\\t\\tif (! current.isSameNode) {\\n\\t\\t\\tif (current == @{{child}}) {\\n\\t\\t\\t   return count;\\n\\t\\t   }\\n\\t\\t}\\n        else if (current.isSameNode(@{{child}})) {\\n            return count;\\n        }\\n        if (current.nodeType == 1) {\\n            ++count;\\n        }\\n        current = current.nextSibling;\\n    }\\n    return -1;\\n    ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def footer(self):\n    self.set_y(-10)\n    self.set_font('Arial', '', 9)\n    self.cell(0, 5, 'Diese Liste bildet lediglich eine Hilfe im Unterricht und verbleibt beim Dozenten.', 0, 1, 'C')", "buggy_source_code": "def footer(self):\n    self.set_y(-10)\n    self.set_font('DejaVu', '', 8)\n    self.cell(0, 5, 'Diese Liste bildet lediglich eine Hilfe im Unterricht und verbleibt beim Dozenten.', 0, 1, 'C')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def getState(self):\n    return self.state.copy()", "buggy_source_code": "def getState(self):\n    return self.stateCopy()", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef schema(self):\n    path_elems = self.path.split('/')\n    return path_elems[2] if len(path_elems) > 1 else None", "buggy_source_code": "@property\ndef schema(self):\n    path_elems = self.path.split('/')\n    return path_elems[2] if len(path_elems) > 2 else None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test():\n    thread1 = start_strike()\n    thread1.start()\n    thread1.join()", "buggy_source_code": "def test():\n    thread1 = StrikeThread()\n    thread1.start()\n    thread1.join()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def loop(self, session):\n    timeout = None\n    while not self._quit:\n        self._event.wait(timeout)\n        self._event.clear()\n        timeout = session.process_events()", "buggy_source_code": "def loop(self, session):\n    timeout = None\n    while not self._quit:\n        self._event.wait(timeout)\n        timeout = session.process_events()\n        self._event.clear()", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.ssh_client = util.netutil.ssh_connect_or_return(SSH_IP, SSH_UNAME, SSH_PWD, 10, 22)", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    cls.ssh_client = util.netutil.ssh_connect_or_return(SSH_IP, 22, SSH_UNAME, SSH_PWD, 10)", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, filename, width=72):\n    self.__filename = filename\n    self.__width = 72", "buggy_source_code": "def __init__(self, filename, width=72):\n    self.__filename = filename\n    self.__width = width", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def object_exists(self, key):\n    self.client.head_object(Bucket=self.bucket_name, Key=key)\n    return True", "buggy_source_code": "def object_exists(self, key):\n    waiter = self.client.get_waiter('object_exists')\n    waiter.wait(Bucket=self.bucket_name, Key=key)\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def pcre_Linux(self):\n    xqt('sudo apt-get install -y libpcre3-dev')", "buggy_source_code": "def pcre_Linux(self):\n    xqt('sudo apt-get install -y libpcre3-dev libegl1-mesa')", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def get_tag(self, server_id: int, tag_name: str):\n    query = ' SELECT server_id, owner_id, tag_name, tag_contents \\n                    FROM tags WHERE server_id = $1 \\n                    AND tag_name = $2; '\n    return await self.pg_con.fetchrow(query, server_id, tag_name)", "buggy_source_code": "async def get_tag(self, server_id: int, tag_name: str):\n    query = ' SELECT server_id, owner_id, tag_name, tag_contents, created_at, total_uses \\n                    FROM tags WHERE server_id = $1 \\n                    AND tag_name = $2; '\n    return await self.pg_con.fetchrow(query, server_id, tag_name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop(self):\n    return libcsound.csoundStop(self.cs)", "buggy_source_code": "def stop(self):\n    libcsound.csoundStop(self.cs)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def closeLibrary(self, library):\n    libcsound.csoundCloseLibrary(library)", "buggy_source_code": "def closeLibrary(self, library):\n    return libcsound.csoundCloseLibrary(library)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "@hooks.register('register_settings_menu_item')\ndef register_editors_picks_menu_item():\n    return EditorsPicksMenuItem(_('Editors picks'), urlresolvers.reverse('wagtailsearch_editorspicks_index'), classnames='icon icon-pick', order=900)", "buggy_source_code": "@hooks.register('register_settings_menu_item')\ndef register_editors_picks_menu_item():\n    return EditorsPicksMenuItem(_('Promoted search results'), urlresolvers.reverse('wagtailsearch_editorspicks_index'), classnames='icon icon-pick', order=900)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<MayaInterval start={!r0} end={!r1}>'.format(self.start, self.end)", "buggy_source_code": "def __repr__(self):\n    return '<MayaInterval start={0!r} end={1!r}>'.format(self.start, self.end)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def backward(self, indexes, gy):\n    return (gy[0] * _heaviside(self.b),)", "buggy_source_code": "def backward(self, indexes, grad_outputs):\n    return ReLUGrad2(self.b).apply(grad_outputs)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _add_title(hist, vega, kwargs):\n    title = kwargs.pop('title', hist.title)\n    if title:\n        vega['title'] = {'text': title}", "buggy_source_code": "def _add_title(hist: HistogramBase, vega: dict, kwargs: dict):\n    title = kwargs.pop('title', hist.title)\n    if title:\n        vega['title'] = {'text': title}", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _create_colorbar(vega, kwargs):\n    if kwargs.pop('show_colorbar', True):\n        vega['legends'] = [{'fill': 'color', 'type': 'gradient'}]", "buggy_source_code": "def _create_colorbar(vega: dict, kwargs: dict):\n    if kwargs.pop('show_colorbar', True):\n        vega['legends'] = [{'fill': 'color', 'type': 'gradient'}]", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def has_url_recently_changed(self, url):\n    self._tested_urls.add(url)\n    return self._watcher.peek_has_url_recently_changed(url)", "buggy_source_code": "def has_url_recently_changed(self, url):\n    self._tested_urls.add(url)\n    return self._watcher.has_url_recently_changed(url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_file_destination(self, instrument, n):\n    return 'files/{}.1.{}.ogg'.format(instrument, n)", "buggy_source_code": "def _get_file_destination(self, instrument, n):\n    return 'AdventureMachineSamples/{}.1.{}.ogg'.format(instrument, n)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _ensure_local_directory_exists(self):\n    relative_path = 'files/'\n    os.makedirs(relative_path, exist_ok=True)", "buggy_source_code": "def _ensure_local_directory_exists(self):\n    relative_path = 'AdventureMachineSamples/'\n    os.makedirs(relative_path, exist_ok=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_absolute_url(self):\n    return urlresolvers.reverse('admin:discipline_action_change', args=(self.uid,))", "buggy_source_code": "def get_absolute_url(self):\n    return urlresolvers.reverse('admin:discipline_action_change', args=(self.id,))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef _get_switchboard_kwargs(cls, free_params, prev_switchboard, prev_output_dim):\n    in_channel_dim = prev_output_dim // prev_switchboard.output_channels\n    return {'input_dim': prev_output_dim, 'connections': range(prev_output_dim), 'out_channel_dim': prev_output_dim, 'in_channel_dim': in_channel_dim}", "buggy_source_code": "@staticmethod\ndef _get_switchboard_kwargs(free_params, prev_switchboard, prev_output_dim):\n    in_channel_dim = prev_output_dim // prev_switchboard.output_channels\n    return {'input_dim': prev_output_dim, 'connections': range(prev_output_dim), 'out_channel_dim': prev_output_dim, 'in_channel_dim': in_channel_dim}", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef _upgrade(cls, options, unknown=None):\n    cmd = cls(options)\n    cmd._exec_cmd('upgrade', options, unknown)", "buggy_source_code": "@classmethod\ndef _upgrade(cls, options, unknown=None):\n    cmd = cls(options)\n    cmd.exec_helm_cmd('upgrade', options, unknown)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef _install(cls, options, unknown=None):\n    cmd = cls(options)\n    cmd._exec_cmd('install', options, unknown)", "buggy_source_code": "@classmethod\ndef _install(cls, options, unknown=None):\n    cmd = cls(options)\n    cmd.exec_helm_cmd('install', options, unknown)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_check_pending_call_processing(self):\n    result = pending_call_processing.delay(1)\n    self.assertEqual(result.successful(), True)", "buggy_source_code": "def test_check_pending_call_processing(self):\n    result = pending_call_processing.delay(1)\n    self.assertEqual(result.successful(), False)", "edit_actions": []}
{"fixed_source_code": "@app.route('/api/v1.0/entries/<name>', method='GET')\ndef get_entry(name):\n    e = entry(name)\n    if not e:\n        abort(404)\n    return e", "buggy_source_code": "@app.route('/api/v1.0/entries/<name>', method='GET')\ndef get_entry(name):\n    e = entry(name)\n    if not e:\n        return entry_not_found(name)\n    return e", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def is_softwarechannel(self, name):\n    if not name:\n        return\n    return name in self.do_softwarechannel_list(name, True)", "buggy_source_code": "def is_softwarechannel(self, name):\n    if not name:\n        return None\n    return name in self.do_softwarechannel_list(name, True)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def test_multiverse_ref(self):\n    self.assertEqual(f('John 1:1-3'), 'John 1:1-3')\n    self.assertEqual(f('John 2:3-5'), 'John 2:3-5')\n    self.assertEqual(f('Jude 1:3-5'), 'Jude 1:3-5')", "buggy_source_code": "def test_multiverse_ref(self):\n    self.assertEqual(f('John 1:1-3'), 'John 1:1-3')\n    self.assertEqual(f('John 2:3-5'), 'John 2:3-5')\n    self.assertEqual(f('Jude 1:3-5'), 'Jude 3-5')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def localtime(timep=None):\n    return struct_time()(1, 2, 3)", "buggy_source_code": "def localtime(timep=None):\n    return struct_time((1, 2, 3))", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def _close_event(event, fig):\n    if fig.lasso is not None:\n        fig.lasso.disconnect()", "buggy_source_code": "def _close_event(event, fig):\n    if getattr(fig, 'lasso') is not None:\n        fig.lasso.disconnect()", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "async def stop_now(self, request):\n    logger.warning('Stopping agent from web interface.')\n    self.agent.stop()\n    return aioweb.json_response({})", "buggy_source_code": "async def stop_now(self, request):\n    logger.warning('Stopping agent from web interface.')\n    await self.agent.stop()\n    return aioweb.json_response({})", "edit_actions": []}
{"fixed_source_code": "def queryset(self, request, queryset):\n    if self.value():\n        return queryset.filter(dates__year__exact=self.value())", "buggy_source_code": "def queryset(self, request, queryset):\n    if self.value():\n        return queryset.filter(date__year__exact=self.value())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_by_group_name(self):\n    added_group = self._addGroup()\n    queried_group = Group.by_group_name(u'group', db_session=self.session)\n    assert added_group, queried_group", "buggy_source_code": "def test_by_group_name(self):\n    added_group = self._addGroup()\n    queried_group = Group.by_group_name(u'group', db_session=self.session)\n    assert added_group == queried_group", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "move-tree"]}
{"fixed_source_code": "@d.command(name='metrics', usage='')\ndef metrics(options):\n    options.executor.executeAction('metrics', **{'runtime': options.getService('metrics')})", "buggy_source_code": "@d.command(name='metrics', usage='')\ndef metrics(options):\n    options.executor.executeAction('metrics', **{'metrics': options.getService('metrics')})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '%s/%s[Active: %s]' % (str(self.service), self.ni, self.active)", "buggy_source_code": "def __str__(self):\n    return '%s/%s' % (str(self.service), self.ni)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def clearscans():\n    global myScans\n    myScans = {}", "buggy_source_code": "def clearscans():\n    global _myScans\n    _myScans = {}", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, access_token=None):\n    self.token = access_token", "buggy_source_code": "def __init__(self, access_token=None):\n    self.Token = access_token", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_authenticated(self):\n    return self.token is not None and self.token.is_valid()", "buggy_source_code": "def is_authenticated(self):\n    return self.Token is not None and self.Token.is_valid()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, tag, attrib):\n    ElementTree._ElementInterface.__init__(self, tag, attrib)\n    simpleTALES.ContextVariable.__init__(self)", "buggy_source_code": "def __init__(self, tag, attrib):\n    xml.etree.ElementTree.Element.__init__(self, tag, attrib)\n    simpletal.simpleTALES.ContextVariable.__init__(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def __init__(self, dim):\n    super(MultioptTestFunction, self).__init__(dim)\n    self.local_minima = []", "buggy_source_code": "def __init__(self, dim):\n    super(MultioptTestFunction, self).__init__(dim)\n    self.local_minima_loc = []", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_table_exists(self, table_name):\n    if table_name not in self.table_names_in_db:\n        raise ConfigError(f\"The database at {self.db_path} does seem to have a table `{table_name}` :/ Here is a list of table names this database knows: {', '.join(self.table_names_in_db)}\")", "buggy_source_code": "def is_table_exists(self, table_name):\n    if table_name not in self.table_names_in_db:\n        raise ConfigError(f\"The database at {self.db_path} does not seem to have a table named `{table_name}` :/ Here is a list of table names this database knows: {', '.join(self.table_names_in_db)}\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, e, logger):\n    logger.error(\"The NLTK tagger failed. This may be caused by a missing NLTK component. Please consult the 'Installing NLTK Data' guide on http://www.nltk.org/data.html for instructions on how to add the necessary components. Alternatively, you may want to use --no-nltk argument to disable the use of NLTK.\")\n    logger.error(e)\n    if use_gui:\n        error_box.ErrorBox.show(sys.exc_info(), self)", "buggy_source_code": "def __init__(self, e, logger):\n    logger.error(\"The NLTK tagger failed. This may be caused by a missing NLTK component. Please consult the 'Installing NLTK Data' guide on http://www.nltk.org/data.html for instructions on how to add the necessary components. Alternatively, you may want to use --no-nltk argument to disable the use of NLTK.\")\n    logger.error(e)\n    if use_gui:\n        errorbox.ErrorBox.show(sys.exc_info(), self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, e, logger):\n    logger.error(\"The NLTK tokenizer failed. This may be caused by a missing NLTK component. Please consult the 'Installing NLTK Data' guide on http://www.nltk.org/data.html for instructions on how to add the necessary components. Alternatively, you may want to use --no-nltk argument to disable the use of NLTK.\")\n    logger.error(e)\n    if use_gui:\n        error_box.ErrorBox.show(sys.exc_info(), self)", "buggy_source_code": "def __init__(self, e, logger):\n    logger.error(\"The NLTK tokenizer failed. This may be caused by a missing NLTK component. Please consult the 'Installing NLTK Data' guide on http://www.nltk.org/data.html for instructions on how to add the necessary components. Alternatively, you may want to use --no-nltk argument to disable the use of NLTK.\")\n    logger.error(e)\n    if use_gui:\n        errorbox.ErrorBox.show(sys.exc_info(), self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def draw_tape_contours(self):\n    if self.tape_contours is not None:\n        cv2.drawContours(self.frame, self.tape_contours, -1, (0, 255, 0), 2)", "buggy_source_code": "def draw_tape_contours(self):\n    if self.tape_contours is not None:\n        cv2.drawContours(self.frame, self.tape_contours, -1, (255, 0, 0), 2)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def main():\n    logging.getLogger().setLevel(logging.WARN)\n    run_wsgi_app(application)", "buggy_source_code": "def main():\n    logging.getLogger().setLevel(logging.DEBUG)\n    run_wsgi_app(application)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    if hasattr(cache.REGION, 'backend'):\n        del cache.REGION.backend\n    cache.configure_cache_region(cache.REGION)\n    super(Cache, self).setUp()", "buggy_source_code": "def setUp(self):\n    super(Cache, self).setUp()\n    if hasattr(cache.REGION, 'backend'):\n        del cache.REGION.backend\n    cache.configure_cache_region(cache.REGION)", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def query(self, query):\n    return [_hydrated(assembled(result)) for (i, result) in grouped(self._get(query='query={q}', fields={'q': query}))]", "buggy_source_code": "def query(self, query):\n    return [_hydrated(assembled(result)) for (i, result) in grouped(self._query.expand(query=query).get())]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef _id(self):\n    if self.is_abstract:\n        return None\n    else:\n        return int(URI(self).path.split('/')[-1])", "buggy_source_code": "@property\ndef _id(self):\n    if self.is_abstract:\n        return None\n    else:\n        return int(URI(self).path.segments[-1])", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def di(self):\n    self.logger.debug('di')\n    self.interrupt_handler.di()", "buggy_source_code": "def di(self):\n    self.logger.debug('di')\n    self.interrupt_controller.di()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ei(self):\n    self.logger.debug('ei')\n    self.interrupt_handler.ei()", "buggy_source_code": "def ei(self):\n    self.logger.debug('ei')\n    self.interrupt_controller.ei()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fetch(self):\n    value = self.mmu.get_addr(self.get_pc())\n    self.inc_pc()\n    return value", "buggy_source_code": "def fetch(self):\n    value = self.mmu.get_addr(self.pc)\n    self.inc_pc()\n    return value", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def session_id(self):\n    return self._session_id", "buggy_source_code": "@property\ndef session_id(self):\n    return self._session_id", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get(self, tier_id, default=None):\n    return self._data.get(tier_id, default)", "buggy_source_code": "def get(self, obj_id, default=None):\n    try:\n        return self[obj_id]\n    except (KeyError, IndexError):\n        return default", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'User %s' % self.username", "buggy_source_code": "def __repr__(self):\n    return 'User(username=%s)' % self.username", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Role %s' % self.name", "buggy_source_code": "def __repr__(self):\n    return 'Role(name=%s)' % self.name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Story (%s->%s)' % (self.title, self.content)", "buggy_source_code": "def __repr__(self):\n    return 'Story(title=%s->content=%s)' % (self.title, self.content)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Upvote %s->%s' % (self.user_id, self.story_id)", "buggy_source_code": "def __repr__(self):\n    return 'Upvote(user_id=%s->story_id=%s)' % (self.user_id, self.story_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Follow %s->%s' % (self.fans_id, self.user_id)", "buggy_source_code": "def __repr__(self):\n    return 'Follow(fans_id=%s->user_id=%s)' % (self.fans_id, self.user_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef max_order(cls):\n    return self.__class__.objects.order_by('-order')[0].order", "buggy_source_code": "@classmethod\ndef max_order(cls):\n    return cls.objects.order_by('-order')[0].order", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def exception(self, **vargs):\n    pass", "buggy_source_code": "def exception(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def log(self, **vargs):\n    pass", "buggy_source_code": "def log(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def error(self, **vargs):\n    pass", "buggy_source_code": "def error(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def warning(self, **vargs):\n    pass", "buggy_source_code": "def warning(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def debug(self, **vargs):\n    pass", "buggy_source_code": "def debug(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def critical(self, **vargs):\n    pass", "buggy_source_code": "def critical(self, *args, **kwargs):\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def query_recent(self, user_id, num=10):\n    return e_Json.select().where(e_Json.user == user_id).order_by(e_Json.time_update.desc()).limit(num)", "buggy_source_code": "def query_recent(self, user_id, num=10):\n    return e_Json.select().where(e_Json.user_id == user_id).order_by(e_Json.time_update.desc()).limit(num)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_get_visits():\n    assert get_visits('>') == 1\n    assert get_visits('^>v<') == 4\n    assert get_visits('^v^v^v^v^v') == 2\n    assert get_visits('^>v<>^') == 4\n    assert get_visits('>^^v^<>v') == 5", "buggy_source_code": "def test_get_visits():\n    assert get_visits('>') == 2\n    assert get_visits('^>v<') == 4\n    assert get_visits('^v^v^v^v^v') == 2\n    assert get_visits('^>v<>^') == 4\n    assert get_visits('>^^v^<>v') == 5", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_find_service_factory_fail(self):\n    self.assertRaises(LookupError, self.config.find_service_factory, IFooService)", "buggy_source_code": "def test_find_service_factory_fail(self):\n    self.assertRaises(LookupError, lambda : self.config.find_service_factory(IFooService))", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def get_all_redundant_groups(self, names):\n    dict = {}\n    for name in names:\n        hash = self.hash[genome]\n        dict[name] = self.groups[hash]\n    return dict", "buggy_source_code": "def get_all_redundant_groups(self, names):\n    d = {}\n    for name in names:\n        genome_hash = self.hash[name]\n        d[name] = self.groups[genome_hash]\n    return d", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def init_groups(self):\n    hash = 0\n    for name in self.genome_names:\n        self.hash[name] = hash\n        self.groups[hash] = [name]\n        hash = hash + 1", "buggy_source_code": "def init_groups(self):\n    h = 0\n    for name in self.genome_names:\n        self.hash[name] = h\n        self.groups[h] = [name]\n        h += 1", "edit_actions": ["update-node", "update-node", "update-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, to_export, revs):\n    Command.__init__(self)\n    self.to_export = to_export\n    self.revs = revs", "buggy_source_code": "def __init__(self, to_export, revs):\n    Command.__init__(self)\n    self.to_export = list(to_export)\n    self.revs = list(revs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def test01(self):\n    lasso.Login(None).msg_url", "buggy_source_code": "def test01(self):\n    try:\n        lasso.Login(None).msg_url\n    except:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_children(self, node):\n    return node[1].items()", "buggy_source_code": "def get_children(self, node):\n    return list(node[1].items())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __reduce__(self):\n    return (self.__class__, (self.delta, self.maxDiscrete.self.nclusters, self.clustX, self.clustM))", "buggy_source_code": "def __reduce__(self):\n    return (self.__class__, (self.delta, self.maxDiscrete, self.nclusters, self.clustX, self.clustM))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    super(FilterDetailsCtxTest, cls).setUpClass()\n    cls.details = filters.DEFAULT_FILTER_DETAILS", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    SE.reset(url=KATELLO.url)\n    cls.details = filters.DEFAULT_FILTER_DETAILS", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def generate_random_filename(suffix='.xlsx'):\n    return ''.join((random.choice(string.lowercase) for i in range(12))) + suffix", "buggy_source_code": "def generate_random_filename(suffix='.xlsx'):\n    return ''.join((random.choice(string.ascii_lowercase) for i in range(12))) + suffix", "edit_actions": ["update-node"]}
{"fixed_source_code": "@functools.wraps(Model.load_weights)\ndef load(self, *args, **kwargs):\n    return Model.load_weights(self, **args, **kwargs)", "buggy_source_code": "@functools.wraps(Model.load_weights)\ndef load(self, *args, **kwargs):\n    return Model.load_weights(self, *args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_empty_response(self):\n    non_existing_result = u'youwillmostdeffinitlynotfindthisveryweirdandlongstringopnanysitewhatsoever123'\n    web_bing = PyMsCognitiveWebSearch(SECRET_KEY, non_existing_result)\n    self.assertRaises(KeyError, web_bing.search)", "buggy_source_code": "def test_empty_response(self):\n    non_existing_result = u'youwillmostdeffinitlynotfindthisveryweirdandlongstringopnanysitewhatsoever123'\n    web_bing = PyMsCognitiveWebSearch(SECRET_KEY, non_existing_result)\n    self.assertTrue([] == web_bing.search())", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remove_mobile(self, mobile):\n    del self.mobiles[mobile.uuid]\n    mobile.world = None", "buggy_source_code": "def remove_mobile(self, mobile):\n    del self.mobiles[mobile.uuid]\n    mobile.universe = None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __setitem__(self, index, val):\n    print('index', index)\n    self.mat[index[1]][index[0]] = val", "buggy_source_code": "def __setitem__(self, index, val):\n    print('index', index)\n    self.mat[index[0]][index[1]] = val", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def get_absolute_url(self):\n    return reverse('package_detail', kwargs={'name': self.name})", "buggy_source_code": "def get_absolute_url(self):\n    return reverse('package_detail', kwargs={'package': self.name})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _verify_table_name(self):\n    if all([self._is_required_table_name, typepy.is_null_string(self.table_name)]):\n        raise EmptyTableNameError('table_name must be string, with at least one character or more length.')", "buggy_source_code": "def _verify_table_name(self):\n    if all([self._is_required_table_name, typepy.is_null_string(self.table_name)]):\n        raise EmptyTableNameError('table_name must be a string, with at least one or more character.')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __getitem__(self, key):\n    return self._get_rowitem(key)", "buggy_source_code": "def __getitem__(self, key):\n    return self._data[key]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_assembly_instance')\n    cr.execute(\"\\n        create or replace view virtual_assembly_instance as (\\n        SELECT\\n        'int.assembly' as model,\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            assembly.partner_id as partner_id,\\n            i.id as int_instance_id,\\n\\n            ica.name as category,\\n\\n            assembly.assembly_category_id as int_category_assembly_id,\\n            NULL::int as sta_category_assembly_id,\\n            NULL::int as ext_category_assembly_id,\\n\\n            i.power_level_id as int_power_level_id,\\n            NULL as sta_power_level_id,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM\\n            int_assembly assembly\\n        JOIN\\n            res_partner p\\n        ON p.id = assembly.partner_id\\n\\n        JOIN\\n            int_assembly_category ica\\n        ON ica.id = assembly.assembly_category_id\\n\\n        JOIN\\n            int_instance i\\n        ON i.id = assembly.instance_id\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE)\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE)\\n        WHERE assembly.active = TRUE\\n        AND p.active = TRUE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT\\n        'sta.assembly' as model,\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            assembly.partner_id as partner_id,\\n            i.int_instance_id as int_instance_id,\\n\\n            sca.name as category,\\n\\n            NULL::int as int_category_assembly_id,\\n            assembly.assembly_category_id as sta_category_assembly_id,\\n            NULL::int as ext_category_assembly_id,\\n\\n            NULL as int_power_level_id,\\n            i.power_level_id as sta_power_level_id,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM\\n            sta_assembly assembly\\n        JOIN\\n            res_partner p\\n        ON p.id = assembly.partner_id\\n\\n        JOIN\\n            sta_assembly_category sca\\n        ON sca.id = assembly.assembly_category_id\\n\\n        JOIN\\n            sta_instance i\\n        ON i.id = assembly.instance_id\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE)\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE)\\n        WHERE assembly.active = TRUE\\n        AND p.active = TRUE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT\\n        'ext.assembly' as model,\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            assembly.partner_id as partner_id,\\n            assembly.instance_id as int_instance_id,\\n\\n            eca.name as category,\\n\\n            NULL::int as int_category_assembly_id,\\n            NULL::int as sta_category_assembly_id,\\n            assembly.assembly_category_id as ext_category_assembly_id,\\n\\n            NULL as int_power_level_id,\\n            NULL as sta_power_level_id,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM\\n            ext_assembly assembly\\n\\n        JOIN\\n            res_partner p\\n        ON p.id = assembly.partner_id\\n\\n        JOIN\\n            ext_assembly_category eca\\n        ON eca.id = assembly.assembly_category_id\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE)\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE)\\n\\n        WHERE assembly.active = TRUE\\n        AND p.active = TRUE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n        )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_assembly_instance')\n    cr.execute(\"\\n        create or replace view virtual_assembly_instance as (\\n        SELECT\\n            'int.assembly' as model,\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            assembly.partner_id as partner_id,\\n            i.id as int_instance_id,\\n\\n            ica.name as category,\\n\\n            assembly.assembly_category_id as int_category_assembly_id,\\n            NULL::int as sta_category_assembly_id,\\n            NULL::int as ext_category_assembly_id,\\n\\n            i.power_level_id as int_power_level_id,\\n            NULL as sta_power_level_id,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM int_assembly assembly\\n        JOIN res_partner p\\n            ON p.id = assembly.partner_id\\n        JOIN int_assembly_category ica\\n            ON ica.id = assembly.assembly_category_id\\n        JOIN int_instance i\\n            ON i.id = assembly.instance_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON (pc.partner_id = p.id\\n            AND pc.active = TRUE)\\n        LEFT OUTER JOIN email_coordinate e\\n            ON (e.partner_id = p.id\\n            AND e.active = TRUE)\\n        WHERE assembly.active = TRUE\\n        AND p.active = TRUE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT\\n            'sta.assembly' as model,\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            assembly.partner_id as partner_id,\\n            i.int_instance_id as int_instance_id,\\n\\n            sca.name as category,\\n\\n            NULL::int as int_category_assembly_id,\\n            assembly.assembly_category_id as sta_category_assembly_id,\\n            NULL::int as ext_category_assembly_id,\\n\\n            NULL as int_power_level_id,\\n            i.power_level_id as sta_power_level_id,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM sta_assembly assembly\\n        JOIN res_partner p\\n            ON p.id = assembly.partner_id\\n        JOIN sta_assembly_category sca\\n            ON sca.id = assembly.assembly_category_id\\n        JOIN sta_instance i\\n            ON i.id = assembly.instance_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON (pc.partner_id = p.id\\n            AND pc.active = TRUE)\\n        LEFT OUTER JOIN email_coordinate e\\n            ON (e.partner_id = p.id\\n            AND e.active = TRUE)\\n        WHERE assembly.active = TRUE\\n        AND p.active = TRUE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT\\n            'ext.assembly' as model,\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            assembly.partner_id as partner_id,\\n            assembly.instance_id as int_instance_id,\\n\\n            eca.name as category,\\n\\n            NULL::int as int_category_assembly_id,\\n            NULL::int as sta_category_assembly_id,\\n            assembly.assembly_category_id as ext_category_assembly_id,\\n\\n            NULL as int_power_level_id,\\n            NULL as sta_power_level_id,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM ext_assembly assembly\\n        JOIN res_partner p\\n            ON p.id = assembly.partner_id\\n        JOIN ext_assembly_category eca\\n            ON eca.id = assembly.assembly_category_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON (pc.partner_id = p.id\\n            AND pc.active = TRUE)\\n        LEFT OUTER JOIN email_coordinate e\\n            ON (e.partner_id = p.id\\n            AND e.active = TRUE)\\n        WHERE assembly.active = TRUE\\n        AND p.active = TRUE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n        )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_instance')\n    cr.execute(\"\\n        create or replace view virtual_partner_instance as (\\n        SELECT\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            p.id as partner_id,\\n            p.int_instance_id as int_instance_id,\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            p.is_company as is_company,\\n            p.birth_date as birth_date,\\n            p.identifier as identifier,\\n            p.display_name as display_name,\\n            p.gender as gender,\\n            p.tongue as tongue,\\n            p.employee as employee,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM\\n            res_partner p\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE)\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE)\\n\\n        WHERE p.active = TRUE\\n        AND p.is_assembly = FALSE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n        )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_instance')\n    cr.execute(\"\\n        create or replace view virtual_partner_instance as (\\n        SELECT\\n            concat(pc.id, '/', e.id) as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            p.id as partner_id,\\n            p.int_instance_id as int_instance_id,\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            p.is_company as is_company,\\n            p.identifier as identifier,\\n            p.birth_date as birth_date,\\n            p.gender as gender,\\n            p.tongue as tongue,\\n            p.employee as employee,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM\\n            res_partner p\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE)\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE)\\n\\n        WHERE p.active = TRUE\\n        AND p.is_assembly = FALSE\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n        )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_involvement')\n    cr.execute(\"\\n        create or replace view virtual_partner_involvement as (\\n        SELECT\\n            pi.id as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            pi.partner_id as partner_id,\\n            pic.id as involvement_category_id,\\n            p.int_instance_id as int_instance_id,\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            p.is_company as is_company,\\n            p.birth_date as birth_date,\\n            p.display_name as display_name,\\n            p.gender as gender,\\n            p.tongue as tongue,\\n            p.employee as employee,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM\\n            partner_involvement pi\\n\\n        JOIN\\n            res_partner p\\n        ON (p.id = pi.partner_id\\n        AND p.active = TRUE)\\n\\n        JOIN\\n            partner_involvement_category pic\\n        ON (pic.id = pi.partner_involvement_category_id\\n        AND pic.active = TRUE)\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE\\n        AND pc.is_main = TRUE)\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE\\n        AND e.is_main = TRUE)\\n\\n        WHERE pi.active = TRUE\\n        AND (pc.id IS NOT NULL\\n        OR e.id IS NOT NULL)\\n        )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_involvement')\n    cr.execute(\"\\n        create or replace view virtual_partner_involvement as (\\n        SELECT\\n            pi.id as id,\\n            concat(pc.id, '/', e.id) as common_id,\\n            pi.partner_id as partner_id,\\n            pic.id as involvement_category_id,\\n            p.int_instance_id as int_instance_id,\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n            p.is_company as is_company,\\n            p.identifier as identifier,\\n            p.birth_date as birth_date,\\n            p.gender as gender,\\n            p.tongue as tongue,\\n            p.employee as employee,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM\\n            partner_involvement pi\\n\\n        JOIN res_partner p\\n            ON (p.id = pi.partner_id\\n            AND p.active = TRUE\\n            AND p.is_assembly = FALSE)\\n\\n        JOIN\\n            partner_involvement_category pic\\n        ON (pic.id = pi.partner_involvement_category_id\\n        AND pic.active = TRUE)\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE\\n        AND pc.is_main = TRUE)\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE\\n        AND e.is_main = TRUE)\\n\\n        WHERE pi.active = TRUE\\n        AND (pc.id IS NOT NULL\\n        OR e.id IS NOT NULL)\\n        )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_mandate')\n    cr.execute(\"\\n        create or replace view virtual_partner_mandate as (\\n        SELECT 'int.mandate' AS model,\\n            concat(\\n                CASE\\n                    WHEN mandate.postal_coordinate_id IS NULL\\n                    THEN pc.id\\n                    ELSE mandate.postal_coordinate_id\\n                END,\\n                '/',\\n                CASE\\n                    WHEN mandate.email_coordinate_id IS NULL\\n                    THEN e.id\\n                    ELSE mandate.email_coordinate_id\\n                END) as common_id,\\n             mandate.id + 1000000 as id,\\n             NULL::int as sta_mandate_id,\\n             NULL::int as ext_mandate_id,\\n             mandate.mandate_category_id,\\n             mandate.partner_id,\\n             mandate.start_date,\\n             mandate.deadline_date,\\n             partner_assembly.id as assembly_id,\\n             partner.is_company as is_company,\\n             partner.birth_date as birth_date,\\n             partner.identifier as identifier,\\n             partner.display_name as display_name,\\n             partner.gender as gender,\\n             partner.tongue as tongue,\\n             partner.employee as employee,\\n             partner.int_instance_id as int_instance_id,\\n             CASE\\n                 WHEN mandate.email_coordinate_id IS NULL\\n                 THEN e.id\\n                 ELSE mandate.email_coordinate_id\\n             END\\n             AS email_coordinate_id,\\n             CASE\\n                 WHEN mandate.postal_coordinate_id IS NULL\\n                 THEN pc.id\\n                 ELSE mandate.postal_coordinate_id\\n             END\\n             AS postal_coordinate_id,\\n             pc.unauthorized as postal_unauthorized,\\n             pc.vip as postal_vip,\\n             e.vip as email_vip,\\n             e.unauthorized as email_unauthorized\\n         FROM int_mandate  AS mandate\\n         JOIN\\n             int_assembly AS assembly\\n             ON assembly.id = mandate.int_assembly_id\\n\\n     JOIN res_partner AS partner_assembly\\n         ON partner_assembly.id = assembly.partner_id\\n         JOIN res_partner AS partner\\n             ON partner.id = mandate.partner_id\\n         LEFT OUTER JOIN postal_coordinate pc\\n             ON pc.partner_id = mandate.partner_id\\n             and pc.is_main = TRUE\\n         LEFT OUTER JOIN email_coordinate e\\n             ON e.partner_id = mandate.partner_id\\n             and e.is_main = TRUE\\n         WHERE mandate.active = True\\n         AND (e.id IS NOT NULL\\n         OR pc.id IS NOT NULL)\\n\\n         UNION\\n\\n        SELECT 'sta.mandate' AS model,\\n            concat(\\n                CASE\\n                    WHEN mandate.postal_coordinate_id IS NULL\\n                    THEN pc.id\\n                    ELSE mandate.postal_coordinate_id\\n                END,\\n                '/',\\n                CASE\\n                    WHEN mandate.email_coordinate_id IS NULL\\n                    THEN e.id\\n                    ELSE mandate.email_coordinate_id\\n                END) as common_id,\\n            mandate.id + 2000000 as id,\\n            mandate.id as sta_mandate_id,\\n            NULL::int as ext_mandate_id,\\n            mandate.mandate_category_id,\\n            mandate.partner_id,\\n            mandate.start_date,\\n            mandate.deadline_date,\\n            partner_assembly.id as assembly_id,\\n            partner.is_company as is_company,\\n            partner.birth_date as birth_date,\\n            partner.identifier as identifier,\\n            partner.display_name as display_name,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            CASE\\n                WHEN mandate.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE mandate.email_coordinate_id\\n            END\\n            AS email_coordinate_id,\\n            CASE\\n                WHEN mandate.postal_coordinate_id IS NULL\\n                THEN pc.id\\n                ELSE mandate.postal_coordinate_id\\n            END\\n            AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM sta_mandate  AS mandate\\n        JOIN sta_assembly AS assembly\\n            ON assembly.id = mandate.sta_assembly_id\\n\\n        JOIN res_partner AS partner_assembly\\n        ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner AS partner\\n            ON partner.id = mandate.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = mandate.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = mandate.partner_id\\n            and e.is_main = TRUE\\n        WHERE mandate.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT 'ext.mandate' AS model,\\n            concat(\\n                CASE\\n                    WHEN mandate.postal_coordinate_id IS NULL\\n                    THEN pc.id\\n                    ELSE mandate.postal_coordinate_id\\n                END,\\n                '/',\\n                CASE\\n                WHEN mandate.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE mandate.email_coordinate_id\\n                END) as common_id,\\n            mandate.id + 3000000 as id,\\n            NULL::int as sta_mandate_id,\\n            mandate.id as ext_mandate_id,\\n            mandate.mandate_category_id,\\n            mandate.partner_id,\\n            mandate.start_date,\\n            mandate.deadline_date,\\n            partner_assembly.id as assembly_id,\\n            partner.is_company as is_company,\\n            partner.birth_date as birth_date,\\n            partner.identifier as identifier,\\n            partner.display_name as display_name,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            CASE\\n                WHEN mandate.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE mandate.email_coordinate_id\\n            END\\n            AS email_coordinate_id,\\n            CASE\\n                WHEN mandate.postal_coordinate_id IS NULL\\n                THEN pc.id\\n                ELSE mandate.postal_coordinate_id\\n            END\\n            AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM ext_mandate  AS mandate\\n        JOIN ext_assembly AS assembly\\n            ON assembly.id = mandate.ext_assembly_id\\n        JOIN res_partner AS partner_assembly\\n        ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner  AS partner\\n            ON partner.id = mandate.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = mandate.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = mandate.partner_id\\n            and e.is_main = TRUE\\n        WHERE mandate.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n                )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_mandate')\n    cr.execute(\"\\n        create or replace view virtual_partner_mandate as (\\n        SELECT 'int.mandate' AS model,\\n            concat(\\n                CASE\\n                    WHEN mandate.postal_coordinate_id IS NULL\\n                    THEN pc.id\\n                    ELSE mandate.postal_coordinate_id\\n                END,\\n                '/',\\n                CASE\\n                    WHEN mandate.email_coordinate_id IS NULL\\n                    THEN e.id\\n                    ELSE mandate.email_coordinate_id\\n                END) as common_id,\\n            mandate.id as id,\\n            NULL::int as sta_mandate_id,\\n            NULL::int as ext_mandate_id,\\n            mandate.mandate_category_id,\\n            mandate.partner_id,\\n            mandate.start_date,\\n            mandate.deadline_date,\\n            partner_assembly.id as assembly_id,\\n            partner.identifier as identifier,\\n            partner.birth_date as birth_date,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            CASE\\n                WHEN mandate.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE mandate.email_coordinate_id\\n            END\\n            AS email_coordinate_id,\\n            CASE\\n                WHEN mandate.postal_coordinate_id IS NULL\\n                THEN pc.id\\n                ELSE mandate.postal_coordinate_id\\n            END\\n            AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM int_mandate  AS mandate\\n        JOIN int_assembly AS assembly\\n            ON assembly.id = mandate.int_assembly_id\\n        JOIN res_partner AS partner_assembly\\n        ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner AS partner\\n            ON partner.id = mandate.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = mandate.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = mandate.partner_id\\n            and e.is_main = TRUE\\n        WHERE mandate.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT 'sta.mandate' AS model,\\n            concat(\\n                CASE\\n                    WHEN mandate.postal_coordinate_id IS NULL\\n                    THEN pc.id\\n                    ELSE mandate.postal_coordinate_id\\n                END,\\n                '/',\\n                CASE\\n                    WHEN mandate.email_coordinate_id IS NULL\\n                    THEN e.id\\n                    ELSE mandate.email_coordinate_id\\n                END) as common_id,\\n            mandate.id + 2000000 as id,\\n            mandate.id as sta_mandate_id,\\n            NULL::int as ext_mandate_id,\\n            mandate.mandate_category_id,\\n            mandate.partner_id,\\n            mandate.start_date,\\n            mandate.deadline_date,\\n            partner_assembly.id as assembly_id,\\n            partner.identifier as identifier,\\n            partner.birth_date as birth_date,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            CASE\\n                WHEN mandate.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE mandate.email_coordinate_id\\n            END\\n            AS email_coordinate_id,\\n            CASE\\n                WHEN mandate.postal_coordinate_id IS NULL\\n                THEN pc.id\\n                ELSE mandate.postal_coordinate_id\\n            END\\n            AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM sta_mandate  AS mandate\\n        JOIN sta_assembly AS assembly\\n            ON assembly.id = mandate.sta_assembly_id\\n        JOIN res_partner AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner AS partner\\n            ON partner.id = mandate.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = mandate.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = mandate.partner_id\\n            and e.is_main = TRUE\\n        WHERE mandate.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT 'ext.mandate' AS model,\\n            concat(\\n                CASE\\n                    WHEN mandate.postal_coordinate_id IS NULL\\n                    THEN pc.id\\n                    ELSE mandate.postal_coordinate_id\\n                END,\\n                '/',\\n                CASE\\n                    WHEN mandate.email_coordinate_id IS NULL\\n                    THEN e.id\\n                    ELSE mandate.email_coordinate_id\\n                END) as common_id,\\n            mandate.id + 4000000 as id,\\n            NULL::int as sta_mandate_id,\\n            mandate.id as ext_mandate_id,\\n            mandate.mandate_category_id,\\n            mandate.partner_id,\\n            mandate.start_date,\\n            mandate.deadline_date,\\n            partner_assembly.id as assembly_id,\\n            partner.identifier as identifier,\\n            partner.birth_date as birth_date,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            CASE\\n                WHEN mandate.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE mandate.email_coordinate_id\\n            END\\n            AS email_coordinate_id,\\n            CASE\\n                WHEN mandate.postal_coordinate_id IS NULL\\n                THEN pc.id\\n                ELSE mandate.postal_coordinate_id\\n            END\\n            AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM ext_mandate  AS mandate\\n        JOIN ext_assembly AS assembly\\n            ON assembly.id = mandate.ext_assembly_id\\n        JOIN res_partner AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner  AS partner\\n            ON partner.id = mandate.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = mandate.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = mandate.partner_id\\n            and e.is_main = TRUE\\n        WHERE mandate.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n                )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_target')\n    cr.execute(\"\\n        create or replace view virtual_target as (\\n        SELECT\\n            concat(pc.id, '/' ,e.id) as id,\\n            p.id as partner_id,\\n            p.display_name as display_name,\\n            p.identifier as identification_number,\\n\\n            e.bounce_counter as email_bounce_counter,\\n            pc.bounce_counter as postal_bounce_coutner,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n\\n            adr.zip as zip,\\n\\n            e.unauthorized as email_unauthorized,\\n            pc.unauthorized as postal_unauthorized,\\n\\n            i.id as int_instance_id,\\n\\n            CASE\\n                WHEN pc.vip is TRUE\\n                THEN 'VIP'\\n                ELSE adr.name\\n            END as postal,\\n            CASE\\n                WHEN e.vip is TRUE\\n                THEN 'VIP'\\n                ELSE e.email\\n            END as email\\n        FROM\\n            res_partner p\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active IS TRUE)\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active IS TRUE)\\n\\n        LEFT OUTER JOIN\\n            address_address adr\\n        ON (adr.id = pc.address_id)\\n\\n        LEFT OUTER JOIN\\n            int_instance i\\n        ON (i.id = p.int_instance_id)\\n\\n        WHERE pc.id IS NOT NULL\\n        OR e.id IS NOT NULL\\n            )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_target')\n    cr.execute(\"\\n        create or replace view virtual_target as (\\n        SELECT\\n            concat(pc.id, '/' , e.id) as id,\\n            p.id as partner_id,\\n            p.display_name as display_name,\\n            p.identifier as identification_number,\\n\\n            e.bounce_counter as email_bounce_counter,\\n            pc.bounce_counter as postal_bounce_coutner,\\n\\n            e.id as email_coordinate_id,\\n            pc.id as postal_coordinate_id,\\n\\n            adr.zip as zip,\\n\\n            e.unauthorized as email_unauthorized,\\n            pc.unauthorized as postal_unauthorized,\\n\\n            i.id as int_instance_id,\\n\\n            CASE\\n                WHEN pc.vip is TRUE\\n                THEN 'VIP'\\n                ELSE adr.name\\n            END as postal,\\n            CASE\\n                WHEN e.vip is TRUE\\n                THEN 'VIP'\\n                ELSE e.email\\n            END as email\\n        FROM\\n            res_partner p\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active IS TRUE)\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active IS TRUE)\\n\\n        LEFT OUTER JOIN\\n            address_address adr\\n        ON (adr.id = pc.address_id)\\n\\n        LEFT OUTER JOIN\\n            int_instance i\\n        ON (i.id = p.int_instance_id)\\n\\n        WHERE pc.id IS NOT NULL\\n        OR e.id IS NOT NULL\\n            )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_relation')\n    cr.execute(\"\\n        create or replace view virtual_partner_relation as (\\n        SELECT\\n            r.id as id,\\n            concat(CASE\\n                   WHEN r.postal_coordinate_id IS NULL\\n                   THEN pc.id\\n                   ELSE r.postal_coordinate_id\\n                   END,\\n                   '/',\\n                   CASE\\n                   WHEN r.email_coordinate_id IS NULL\\n                   THEN e.id\\n                   ELSE r.email_coordinate_id\\n                   END) as common_id,\\n            r.subject_partner_id as partner_id,\\n            rc.id as relation_category_id,\\n            r.object_partner_id as object_partner_id,\\n            p.int_instance_id as int_instance_id,\\n            p.is_company as is_company,\\n            p.is_assembly as is_assembly,\\n            p.birth_date as birth_date,\\n            p.display_name as display_name,\\n            p.gender as gender,\\n            p.tongue as tongue,\\n            p.employee as employee,\\n            CASE\\n                WHEN r.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE r.email_coordinate_id\\n            END\\n            AS email_coordinate_id,\\n            CASE\\n                WHEN r.postal_coordinate_id IS NULL\\n                THEN pc.id\\n                ELSE r.postal_coordinate_id\\n            END\\n            AS postal_coordinate_id\\n        FROM\\n            partner_relation r\\n\\n        JOIN\\n            res_partner p\\n        ON (p.id = r.subject_partner_id\\n        AND p.active = TRUE)\\n\\n        JOIN\\n            partner_relation_category rc\\n        ON (rc.id = r.partner_relation_category_id\\n        AND rc.active = TRUE)\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE\\n        AND pc.is_main = TRUE)\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE\\n        AND e.is_main = TRUE)\\n\\n        WHERE r.active = TRUE\\n        AND (pc.id IS NOT NULL\\n        OR e.id IS NOT NULL\\n        OR r.email_coordinate_id IS NOT NULL\\n        OR r.postal_coordinate_id IS NOT NULL)\\n        )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_relation')\n    cr.execute(\"\\n        create or replace view virtual_partner_relation as (\\n        SELECT\\n            r.id as id,\\n            concat(CASE\\n                       WHEN r.postal_coordinate_id IS NULL\\n                       THEN pc.id\\n                       ELSE r.postal_coordinate_id\\n                   END,\\n                   '/',\\n                   CASE\\n                       WHEN r.email_coordinate_id IS NULL\\n                       THEN e.id\\n                       ELSE r.email_coordinate_id\\n                   END) as common_id,\\n            r.subject_partner_id as partner_id,\\n            rc.id as relation_category_id,\\n            r.object_partner_id as object_partner_id,\\n            p.int_instance_id as int_instance_id,\\n            p.is_assembly as is_assembly,\\n            p.is_company as is_company,\\n            p.identifier as identifier,\\n            p.birth_date as birth_date,\\n            p.gender as gender,\\n            p.tongue as tongue,\\n            p.employee as employee,\\n            CASE\\n                WHEN r.email_coordinate_id IS NULL\\n                THEN e.id\\n                ELSE r.email_coordinate_id\\n            END\\n            AS email_coordinate_id,\\n            CASE\\n                WHEN r.postal_coordinate_id IS NULL\\n                THEN pc.id\\n                ELSE r.postal_coordinate_id\\n            END\\n            AS postal_coordinate_id\\n        FROM\\n            partner_relation r\\n\\n        JOIN\\n            res_partner p\\n        ON (p.id = r.subject_partner_id\\n        AND p.active = TRUE)\\n\\n        JOIN\\n            partner_relation_category rc\\n        ON (rc.id = r.partner_relation_category_id\\n        AND rc.active = TRUE)\\n\\n        LEFT OUTER JOIN\\n            postal_coordinate pc\\n        ON (pc.partner_id = p.id\\n        AND pc.active = TRUE\\n        AND pc.is_main = TRUE)\\n\\n        LEFT OUTER JOIN\\n            email_coordinate e\\n        ON (e.partner_id = p.id\\n        AND e.active = TRUE\\n        AND e.is_main = TRUE)\\n\\n        WHERE r.active = TRUE\\n        AND (pc.id IS NOT NULL\\n        OR e.id IS NOT NULL\\n        OR r.email_coordinate_id IS NOT NULL\\n        OR r.postal_coordinate_id IS NOT NULL)\\n        )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_candidature')\n    cr.execute(\"\\n        create or replace view virtual_partner_candidature as (\\n        SELECT 'int.candidature' AS model,\\n             concat(pc.id,\\n                '/',\\n                e.id) as common_id,\\n             candidature.id + 1000000 as id,\\n             candidature.id as candidature_id,\\n             candidature.mandate_category_id,\\n             candidature.partner_id,\\n             candidature.create_date,\\n             partner_assembly.id as assembly_id,\\n             partner.birth_date as birth_date,\\n             partner.identifier as identifier,\\n             partner.display_name as display_name,\\n             partner.gender as gender,\\n             partner.tongue as tongue,\\n             partner.employee as employee,\\n             partner.int_instance_id as int_instance_id,\\n             e.id AS email_coordinate_id,\\n             pc.id AS postal_coordinate_id,\\n             pc.unauthorized as postal_unauthorized,\\n             pc.vip as postal_vip,\\n             e.vip as email_vip,\\n             e.unauthorized as email_unauthorized\\n         FROM int_candidature  AS candidature\\n         JOIN\\n             int_assembly AS assembly\\n             ON assembly.id = candidature.int_assembly_id\\n         JOIN res_partner  AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n         JOIN res_partner  AS partner\\n            ON partner.id = candidature.partner_id\\n         LEFT OUTER JOIN postal_coordinate pc\\n             ON pc.partner_id = candidature.partner_id\\n             and pc.is_main = TRUE\\n         LEFT OUTER JOIN email_coordinate e\\n             ON e.partner_id = candidature.partner_id\\n             and e.is_main = TRUE\\n         WHERE candidature.active = True\\n         AND (e.id IS NOT NULL\\n         OR pc.id IS NOT NULL)\\n\\n         UNION\\n\\n        SELECT 'sta.candidature' AS model,\\n            concat(pc.id,\\n                '/',\\n                e.id) as common_id,\\n            candidature.id + 2000000 as id,\\n            candidature.id as candidature_id,\\n            candidature.mandate_category_id,\\n            candidature.partner_id,\\n            candidature.create_date,\\n            partner_assembly.id as assembly_id,\\n            partner.birth_date as birth_date,\\n            partner.identifier as identifier,\\n            partner.display_name as display_name,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            e.id AS email_coordinate_id,\\n            pc.id AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM sta_candidature  AS candidature\\n        JOIN sta_assembly AS assembly\\n            ON assembly.id = candidature.sta_assembly_id\\n        JOIN res_partner  AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner  AS partner\\n            ON partner.id = candidature.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = candidature.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = candidature.partner_id\\n            and e.is_main = TRUE\\n        WHERE candidature.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT 'ext.candidature' AS model,\\n            concat(pc.id,\\n                '/',\\n                e.id) as common_id,\\n            candidature.id + 3000000 as id,\\n            candidature.id as candidature_id,\\n            candidature.mandate_category_id,\\n            candidature.partner_id,\\n            candidature.create_date,\\n            partner_assembly.id as assembly_id,\\n            partner.birth_date as birth_date,\\n            partner.identifier as identifier,\\n            partner.display_name as display_name,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            e.id AS email_coordinate_id,\\n            pc.id postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM ext_candidature  AS candidature\\n        JOIN ext_assembly AS assembly\\n            ON assembly.id = candidature.ext_assembly_id\\n        JOIN res_partner  AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner  AS partner\\n            ON partner.id = candidature.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = candidature.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = candidature.partner_id\\n            and e.is_main = TRUE\\n        WHERE candidature.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n                )\")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'virtual_partner_candidature')\n    cr.execute(\"\\n        create or replace view virtual_partner_candidature as (\\n        SELECT 'int.candidature' AS model,\\n            concat(pc.id,\\n                '/',\\n                e.id) as common_id,\\n            candidature.id as id,\\n            candidature.mandate_category_id,\\n            candidature.partner_id,\\n            candidature.create_date,\\n            partner_assembly.id as assembly_id,\\n            partner.identifier as identifier,\\n            partner.birth_date as birth_date,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            e.id AS email_coordinate_id,\\n            pc.id AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM int_candidature  AS candidature\\n        JOIN int_assembly AS assembly\\n            ON assembly.id = candidature.int_assembly_id\\n        JOIN res_partner  AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner  AS partner\\n            ON partner.id = candidature.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = candidature.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = candidature.partner_id\\n            and e.is_main = TRUE\\n        WHERE candidature.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT 'sta.candidature' AS model,\\n            concat(pc.id,\\n                '/',\\n                e.id) as common_id,\\n            candidature.id + 2000000 as id,\\n            candidature.mandate_category_id,\\n            candidature.partner_id,\\n            candidature.create_date,\\n            partner_assembly.id as assembly_id,\\n            partner.identifier as identifier,\\n            partner.birth_date as birth_date,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            e.id AS email_coordinate_id,\\n            pc.id AS postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM sta_candidature  AS candidature\\n        JOIN sta_assembly AS assembly\\n            ON assembly.id = candidature.sta_assembly_id\\n        JOIN res_partner  AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner  AS partner\\n            ON partner.id = candidature.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = candidature.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = candidature.partner_id\\n            and e.is_main = TRUE\\n        WHERE candidature.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n\\n        UNION\\n\\n        SELECT 'ext.candidature' AS model,\\n            concat(pc.id,\\n                '/',\\n                e.id) as common_id,\\n            candidature.id + 4000000 as id,\\n            candidature.mandate_category_id,\\n            candidature.partner_id,\\n            candidature.create_date,\\n            partner_assembly.id as assembly_id,\\n            partner.identifier as identifier,\\n            partner.birth_date as birth_date,\\n            partner.gender as gender,\\n            partner.tongue as tongue,\\n            partner.employee as employee,\\n            partner.int_instance_id as int_instance_id,\\n            e.id AS email_coordinate_id,\\n            pc.id postal_coordinate_id,\\n            pc.unauthorized as postal_unauthorized,\\n            pc.vip as postal_vip,\\n            e.vip as email_vip,\\n            e.unauthorized as email_unauthorized\\n        FROM ext_candidature  AS candidature\\n        JOIN ext_assembly AS assembly\\n            ON assembly.id = candidature.ext_assembly_id\\n        JOIN res_partner  AS partner_assembly\\n            ON partner_assembly.id = assembly.partner_id\\n        JOIN res_partner  AS partner\\n            ON partner.id = candidature.partner_id\\n        LEFT OUTER JOIN postal_coordinate pc\\n            ON pc.partner_id = candidature.partner_id\\n            and pc.is_main = TRUE\\n        LEFT OUTER JOIN email_coordinate e\\n            ON e.partner_id = candidature.partner_id\\n            and e.is_main = TRUE\\n        WHERE candidature.active = True\\n        AND (e.id IS NOT NULL\\n        OR pc.id IS NOT NULL)\\n                )\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def update(self, column, txt):\n    item = QtGui.QTreeWidgetItem(self.tree)\n    self.tree.setCurrentItem(item)\n    item.setText(column, txt.decode('utf8'))", "buggy_source_code": "def update(self, column, txt):\n    item = QtGui.QTreeWidgetItem(self.tree)\n    self.tree.setCurrentItem(item)\n    item.setText(column, utf8_decode(txt))", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def release_shift(self, *vals):\n    key_code = vals[1]\n    if key_code == 304:\n        self.shift = False\n    if key_code == 306:\n        self.control = False", "buggy_source_code": "def release_shift(self, *vals):\n    key_code = vals[1]\n    if key_code == 304:\n        self.shift = False\n    if key_code == 305:\n        self.control = False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def keyboard_listen(self, *vals):\n    key_code = vals[1]\n    if key_code == 304:\n        self.shift = True\n    if key_code == 306:\n        self.control = True", "buggy_source_code": "def keyboard_listen(self, *vals):\n    key_code = vals[1]\n    if key_code == 304:\n        self.shift = True\n    if key_code == 305:\n        self.control = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def glob_config(pattern):\n    patterns = config_search_paths(pattern, check_exists=False)\n    for pattern in patterns:\n        for path in glob.iglob(pattern):\n            yield path", "buggy_source_code": "def glob_config(pattern):\n    patterns = config_search_paths(pattern, check_exists=False)\n    for pattern_fn in patterns:\n        for path in glob.iglob(pattern_fn):\n            yield path", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_dataset(self, key, info):\n    raise NotImplementedError('Writer {} has not implemented get_dataset'.format(self.name))", "buggy_source_code": "def get_dataset(self, key, info):\n    raise NotImplementedError('Reader {} has not implemented get_dataset'.format(self.name))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def send(self, *args, **kwargs):\n    kwargs['timeout'] = kwargs.get('timeout', self.default_timeout)\n    return super(HTTPAdapterWithTimeout, self).send(*args, **kwargs)", "buggy_source_code": "def send(self, *args, **kwargs):\n    kwargs['timeout'] = kwargs.get('timeout') or self._default_timeout\n    return super(HTTPAdapterWithTimeout, self).send(*args, **kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testSamplerRev(self):\n    testSampler2x2(self.sampler_rev, self.C, self.nsample, self.errtol)", "buggy_source_code": "def testSamplerRev(self):\n    assertSampler2x2(self.sampler_rev, self.C, self.nsample, self.errtol)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testSamplerNonRev(self):\n    testSampler2x2(self.sampler_nonrev, self.C, self.nsample, self.errtol)", "buggy_source_code": "def testSamplerNonRev(self):\n    assertSampler2x2(self.sampler_nonrev, self.C, self.nsample, self.errtol)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '{}({!r},{!r},{!r})'.format(self.mol, self.__class__.__name__, self._values, self._descriptors)", "buggy_source_code": "def __repr__(self):\n    return '{}({!r},{!r},{!r})'.format(self.__class__.__name__, self.mol, self._values, self._descriptors)", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def choices_for_values(self):\n    assert self.choices is not None, 'choices should be a queryset'\n    return self.order_choices(self.choices.filter(pk__in=self.values or []))", "buggy_source_code": "def choices_for_values(self):\n    assert self.choices is not None, 'choices should be a queryset'\n    return self.order_choices(self.choices.filter(pk__in=[x for x in self.values if x]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_contribs_count(self, obj):\n    return MetricField(True, 'Number of contributrs', 6, None, self._contribs_count)", "buggy_source_code": "def get_contribs_count(self, obj):\n    return MetricField(True, 'Number of contributors', 6, None, self._contribs_count)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def update_row(self, c2, k, c1, v):\n    return \"UPDATE {0} SET {1} = '{2}' WHERE {3} LIKE '%{4}%'\".format(self.name, c1, v, c2, k)", "buggy_source_code": "def update_row(self, c2, k, c1, v):\n    return \"UPDATE {0} SET {1} = '{2}' WHERE {3} LIKE '%{4}%'\".format(self.name, c1, k, c2, v)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def check_for_problems(m):\n    intersections = check_for_intersections(m)\n    slivers = check_for_slivers(m)\n    short_tris = check_tris_tall_enough(m)\n    sharp_angles = check_min_adj_angle(m)\n    return (intersections, sliver, short_tris, sharp_angles)", "buggy_source_code": "def check_for_problems(m):\n    intersections = check_for_intersections(m)\n    slivers = check_for_slivers(m)\n    short_tris = check_tris_tall_enough(m)\n    sharp_angles = check_min_adj_angle(m)\n    return (intersections, slivers, short_tris, sharp_angles)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, cursor, connection):\n    self.cursor = cursor\n    self.connection = connection", "buggy_source_code": "def __init__(self, cursor, db):\n    self.cursor = cursor\n    self.db = db", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def verify_group(app_token, group_id):\n    return verify_group(app_token, group_id)", "buggy_source_code": "def verify_group(app_token, group_id):\n    return verify_user(app_token, group_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@cleanData('institution')\ndef readInstitution(self, instGuid):\n    url = 'institutions/{}'.format(instGuid)\n    return self._makeRequest(url, 'GET')", "buggy_source_code": "@cleanData('institution')\ndef readInstitution(self, instCode):\n    url = 'institutions/{}'.format(instCode)\n    return self._makeRequest(url, 'GET')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@cleanData('credentials')\ndef getCredentials(self, instGuid):\n    url = 'institutions/{}/credentials'.format(instGuid)\n    return self._makeRequest(url, 'GET')", "buggy_source_code": "@cleanData('credentials')\ndef getCredentials(self, instCode):\n    url = 'institutions/{}/credentials'.format(instCode)\n    return self._makeRequest(url, 'GET')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_prototype(self, formationenergy):\n    if formationenergy.calculation.output:\n        return formationenergy.entry.prototype.name\n    else:\n        return", "buggy_source_code": "def get_prototype(self, formationenergy):\n    if formationenergy.entry.prototype:\n        return formationenergy.entry.prototype.name\n    else:\n        return", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def guess_media_type(path):\n    (_, ext) = os.path.splitext(path)\n    return types_map.get(ext, f'application/x-ext-{ext}')", "buggy_source_code": "def guess_media_type(path):\n    (_, ext) = os.path.splitext(path)\n    default = f'application/x-ext-{ext}' if ext else 'application/octet-stream'\n    return types_map.get(ext, default)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_avatar_url(self, user_id, avatar_url):\n    content = {'avatar_url': avatar_url}\n    self._send('PUT', '/profile/%s/displayname' % user_id, content)", "buggy_source_code": "def set_avatar_url(self, user_id, avatar_url):\n    content = {'avatar_url': avatar_url}\n    self._send('PUT', '/profile/%s/avatar_url' % user_id, content)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def submit(self, job):\n    self.submit(job)", "buggy_source_code": "def submit(self, job):\n    self.job_q.put(job)", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return \"<Task('{1}','{2}')>\".format(self.id, self.target)", "buggy_source_code": "def __repr__(self):\n    return \"<Task('{0}','{1}')>\".format(self.id, self.target)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef default_frequency(cls):\n    return 'one_time'", "buggy_source_code": "@classmethod\ndef default_frequency(cls):\n    return 'one time'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    (self.admin, created) = User.objects.get_or_create(username='admin', password='admin', is_superuser=True)\n    self.url = 'http://www.google.com/'", "buggy_source_code": "def setUp(self):\n    (self.admin, created) = User.objects.get_or_create(username='admin', password='admin', is_superuser=True)\n    self.url = TEST_URL", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef location(self) -> Optinal[Location]:\n    return _wrap_data(self._data, 'location', Location)", "buggy_source_code": "@property\ndef location(self) -> Optional[Location]:\n    return _wrap_data(self._data, 'location', Location)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop_py(pid):\n    os.popen('kill %d' % (pid,))\n    return True", "buggy_source_code": "def stop_py(pid):\n    os.popen('kill %s' % (pid,))\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return repr('{cid} receipt: {fn} ({t}, {d})'.format(cid=self.committee_id, fn=self.file_num, t=self.tran_id, d=self.receipt_date))", "buggy_source_code": "def __str__(self):\n    return repr('{cid} receipt: {fn} ({t}, {d})'.format(cid=self.committee_id, fn=self.file_number, t=self.tran_id, d=self.receipt_date))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return repr('{cid} receipt: {fn} ({t}, {d})'.format(cid=self.committee_id, fn=self.file_num, t=self.tran_id, d=self.disbursement_date))", "buggy_source_code": "def __str__(self):\n    return repr('{cid} receipt: {fn} ({t}, {d})'.format(cid=self.committee_id, fn=self.file_number, t=self.tran_id, d=self.disbursement_date))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_assets_by_fullname_list(hostname_list):\n    return Asset.objects.get_queryset_by_fullname_list(hostname_list)", "buggy_source_code": "def get_assets_by_fullname_list(hostname_list):\n    return Asset.get_queryset_by_fullname_list(hostname_list)", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "@with_setup(mock, unmock)\ndef test_get_application_access_token_raises_error():\n    mock_request.return_value.content = 'An unknown error occurred'\n    with assert_raises(GraphAPI.FacebookError):\n        get_application_access_token('<application id>', '<application secret key>')", "buggy_source_code": "@with_setup(mock, unmock)\ndef test_get_application_access_token_raises_error():\n    mock_request.return_value.content = 'An unknown error occurred'\n    assert_raises(GraphAPI.FacebookError, get_application_access_token, '<application id>', '<application secret key>')", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@register.filter\ndef has_unpublishable_modules(project):\n    return project.is_draft and project.published_modules.count() <= 1", "buggy_source_code": "@register.filter\ndef has_unpublishable_modules(project):\n    return project.is_draft and project.published_modules.count() > 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_view_with_scss_file(client, assert_precompiled):\n    response = client.get(reverse('scss-file'))\n    assert response.status_code == 200\n    assert_precompiled('app/layout.scss', 'css', '.title {\\n  margin: 0;\\n  padding: 0;\\n  font: bold 30px Arial, sans-serif;\\n}\\n')", "buggy_source_code": "def test_view_with_scss_file(client, assert_precompiled):\n    response = client.get(reverse('scss-file'))\n    assert response.status_code == 200\n    assert_precompiled('app/layout.scss', 'css', '.title {\\n  font: bold 30px Arial, sans-serif;\\n}\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def dsplit(ary, indices_or_sections):\n    if len(_nx.shape(ary)) < 3:\n        raise ValueError('vsplit only works on arrays of 3 or more dimensions')\n    return split(ary, indices_or_sections, 2)", "buggy_source_code": "def dsplit(ary, indices_or_sections):\n    if len(_nx.shape(ary)) < 3:\n        raise ValueError('dsplit only works on arrays of 3 or more dimensions')\n    return split(ary, indices_or_sections, 2)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def debug(message):\n    global debug_indent_c\n    if debug_mode:\n        print('    ' * debug_indent_c + message, file=sys.stderr)", "buggy_source_code": "def debug(message):\n    global _debug_indent_c\n    if debug_mode:\n        print('    ' * _debug_indent_c + message, file=sys.stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def debug_indent(num):\n    global debug_indent_c\n    debug_indent_c += num", "buggy_source_code": "def debug_indent(num):\n    global _debug_indent_c\n    _debug_indent_c += num", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def run(self):\n    self.thread.start()\n    self.__subject__ = self.app()", "buggy_source_code": "def run(self):\n    self.thread.start()\n    self.__subject__ = self.app", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def test_sdk_version(self):\n    cloud = Cloud(None, send_host='127.0.0.1', send_port=9999)\n    assert cloud.version == '0.4.0'", "buggy_source_code": "def test_sdk_version(self):\n    cloud = Cloud(None, send_host='127.0.0.1', send_port=9999)\n    assert cloud.version == '0.5.0'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _append_match(self, lst, profiles, fs_info):\n    nivakode = self._normalize_nivakode(fs_info.get('studienivakode', 0))\n    super(SelectMapTag, self)._append_match(lst, profiles, nivakode=nivakode)", "buggy_source_code": "def _append_match(self, lst, profiles, fs_info):\n    nivakode = self._normalize_nivakode(fs_info.get('studienivakode', 0))\n    super(SelectMapAktivtSted, self)._append_match(lst, profiles, nivakode=nivakode)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def about(self):\n    QMessageBox.information(self.iface.mainWindow(), QCoreApplication.translate('SurveyingCalculation', 'About'), QCoreApplication.translate('SurveyingCalculation', 'Surveying Calculation Plugin\\n\\n (c) DigiKom Kft 2014 http://digikom.hu mail (at) digikom.hu\\nVersion 0.1a'))", "buggy_source_code": "def about(self):\n    QMessageBox.information(self.iface.mainWindow(), self.tr('About'), self.tr('Surveying Calculation Plugin\\n\\n (c) DigiKom Kft 2014 http://digikom.hu mail (at) digikom.hu\\nVersion 0.1a'))", "edit_actions": ["update-node", "update-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def number_of_wires_from_face(self, face):\n    cnt = 0\n    for _ in self._loop_topo(TopAbs_WIRE, face):\n        cnt += 1\n    return cnt", "buggy_source_code": "def number_of_wires_from_face(self, face: TopoDS_Face) -> int:\n    cnt = 0\n    for _ in self._loop_topo(TopAbs_WIRE, face):\n        cnt += 1\n    return cnt", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def number_of_faces_from_solids(self, solid):\n    cnt = 0\n    for _ in self._loop_topo(TopAbs_FACE, solid):\n        cnt += 1\n    return cnt", "buggy_source_code": "def number_of_faces_from_solids(self, solid: TopoDS_Solid) -> int:\n    cnt = 0\n    for _ in self._loop_topo(TopAbs_FACE, solid):\n        cnt += 1\n    return cnt", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_vertex(topods_shape):\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_VERTEX", "buggy_source_code": "def is_vertex(topods_shape: TopoDS_Shape) -> bool:\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_VERTEX", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_shell(topods_shape):\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_SHELL", "buggy_source_code": "def is_shell(topods_shape: TopoDS_Shape) -> bool:\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_SHELL", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def number_of_vertices_from_face(self, face):\n    cnt = 0\n    for _ in self._loop_topo(TopAbs_VERTEX, face):\n        cnt += 1\n    return cnt", "buggy_source_code": "def number_of_vertices_from_face(self, face: TopoDS_Face) -> int:\n    cnt = 0\n    for _ in self._loop_topo(TopAbs_VERTEX, face):\n        cnt += 1\n    return cnt", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def is_wire(topods_shape):\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_WIRE", "buggy_source_code": "def is_wire(topods_shape: TopoDS_Shape) -> bool:\n    if not hasattr(topods_shape, 'ShapeType'):\n        return False\n    return topods_shape.ShapeType() == TopAbs_WIRE", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def grid(self, N=None):\n    if not self.bounded:\n        self.grid_reflexion(N)\n    return self._grid_eval(N)", "buggy_source_code": "def grid(self, N=None):\n    if not self.bounded:\n        return self.grid_reflexion(N)\n    return self._grid_eval(N)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def postTypeInit(self):\n    self.regex = None\n    restr = self.opts.get('regex')\n    if restr is not None:\n        self.regex = re.compile(restr)", "buggy_source_code": "def postTypeInit(self):\n    self.regex = None\n    restr = self.opts.get('regex')\n    if restr is not None:\n        self.regex = regex.compile(restr)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _create_vg(self, pv_list):\n    cinder.privsep.lvm.create_volume(self.vg_name, pv_list)", "buggy_source_code": "def _create_vg(self, pv_list):\n    cinder.privsep.lvm.create_vg(self.vg_name, pv_list)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sys_pipes_forever(encoding=_default_encoding):\n    global _mighty_wurlitzer\n    if _mighty_wurlitzer is None:\n        _mighty_wurlitzer = sys_pipes(encoding)\n    _mighty_wurlitzer.__enter__()", "buggy_source_code": "def sys_pipes_forever(encoding=_default_encoding):\n    global _mighty_wurlitzer\n    with _mighty_lock:\n        if _mighty_wurlitzer is None:\n            _mighty_wurlitzer = sys_pipes(encoding)\n            _mighty_wurlitzer.__enter__()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def get_all_articles():\n    articles = db.query('SELECT * FROM articles;')\n    return articles", "buggy_source_code": "def get_all_articles():\n    articles = db.query('SELECT * FROM articles ORDER BY id DESC;')\n    return articles", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, rest, condition, stationname):\n    self.rest = rest\n    self._condition = condition\n    self.stationname = stationname", "buggy_source_code": "def __init__(self, bom_data, condition, stationname):\n    self.bom_data = bom_data\n    self._condition = condition\n    self.stationname = stationname", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@property\ndef state(self):\n    if self.rest.data and self._condition in self.rest.data:\n        return self.rest.data[self._condition]\n    return STATE_UNKNOWN", "buggy_source_code": "@property\ndef state(self):\n    if self.bom_data.data and self._condition in self.bom_data.data:\n        return self.bom_data.data[self._condition]\n    return STATE_UNKNOWN", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def update(self):\n    self.rest.update()", "buggy_source_code": "def update(self):\n    self.bom_data.update()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def raise_exc(self, exctype):\n    tid = self._get_my_tid()\n    if tid != -1:\n        _async_raise(tid, exctype)", "buggy_source_code": "def raise_exc(self, exctype):\n    tid = self._get_my_tid()\n    if tid != -1:\n        thread2._async_raise(tid, exctype)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, dims):\n    super(Permute, self).__init__()\n    self.dims = dims", "buggy_source_code": "def __init__(self, dims):\n    super(Permute, self).__init__()\n    self.dims = tuple(dims)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _conentpage(self, data):\n    return re.search('\"ContentPageProgramStore\":({.*}), \"StartPageStore', data)", "buggy_source_code": "def _conentpage(self, data):\n    return re.search('\"ContentPageProgramStore\":({.*}),[ ]*\"StartPageStore', data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main():\n    global soup\n    url = 'http://www.hurricanesports.com/SportSelect.dbml?&DB_OEM_ID=28700&SPID=103766&SPSID=658391'\n    get_html(url)\n    list_of_dict = scrape(soup)\n    csv_file = list_to_csv(list_of_dict)", "buggy_source_code": "def main():\n    global soup\n    url = 'http://www.hurricanesports.com/SportSelect.dbml?&DB_OEM_ID=28700&SPID=103777&SPSID=658436'\n    get_html(url)\n    list_of_dict = scrape(soup)\n    csv_file = list_to_csv(list_of_dict)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __call__(self, string):\n    canonical_value = self._find_canonical_value(string)\n    if canonical_value is None:\n        return string\n    return canonical_value", "buggy_source_code": "def __call__(self, s):\n    assert isinstance(s, str)\n    canonical_value = self._find_canonical_value(s)\n    if canonical_value is None:\n        return s\n    return canonical_value", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getText(self):\n    return self.text.encode('utf-8')", "buggy_source_code": "def getText(self):\n    return six.ensure_str(self.text)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def resource_get_model(resource):\n    return models.get(resource, BaseItem)", "buggy_source_code": "def resource_get_model(resource):\n    return models.get(resource, BaseModel)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def render_to_response(self):\n    return SQRLHttpResponse(self.nut, self.get_server_data(data))", "buggy_source_code": "def render_to_response(self):\n    return SQRLHttpResponse(self.nut, self.get_server_data())", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@property\ndef view_url(self):\n    return reverse('xgds_sample_view', kwargs={'pk': self.pk})", "buggy_source_code": "@property\ndef view_url(self):\n    return reverse('search_map_single_object', kwargs={'modelPK': self.pk, 'modelName': 'Sample'})", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_fmt_data(self, ax):\n    value = 1234567890.123\n    assert ax.format_xdata(value) == str(LIGOTimeGPS(value))", "buggy_source_code": "def test_fmt_data(self, ax):\n    value = 1234567890.123\n    assert ax.format_xdata(value) == str(to_gps(value))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def load_conf(path):\n    return json.loads(open(CAMLISTORE_CLIENT_CONFIG, 'rb').read())", "buggy_source_code": "def load_conf(path):\n    return json.loads(open(path, 'rb').read())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def calculate_leadership(forks=0, top_answers=0):\n    return float(0.1 * forks + 2.0 * top_answers)", "buggy_source_code": "def calculate_leadership(forks=0, top_answers=0):\n    return float(1 * forks + 0.5 * top_answers)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def calculate_popularity(followers=0, reputation=0):\n    return float(followers + 0.5 * reputation)", "buggy_source_code": "def calculate_popularity(followers=0, reputation=0):\n    return float(followers + 0.01 * reputation)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def calculate_strength(lines=0, answers=0, badges=0):\n    return float(0.01 * (lines / 1000) + 0.5 * answers + 2 * badges)", "buggy_source_code": "def calculate_strength(lines=0, answers=0, badges=0):\n    return float(lines / 100000 + 0.05 * answers + 2 * badges)", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef gateway_alive():\n    return Message.serialize({'type': 'gateway', 'data': 'alive'})", "buggy_source_code": "@staticmethod\ndef gateway_alive():\n    return Message.serialize({'type': 'update', 'uid': 'alive'})", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def remove_map_path(self, source_key):\n    self.ids.track.remove_path(str(source_key))\n    self.sources.remove(source_key)", "buggy_source_code": "def remove_map_path(self, source_key):\n    self.ids.track.remove_path(str(source_key))\n    self.sources.pop(str(source_key), None)", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@read_decorator\ndef get_all(self):\n    cnx = self._cnx()\n    return cnx.hgetall(self._name)", "buggy_source_code": "def get_all(self):\n    all_dict = dict(self._default_values)\n    all_dict.update(self._get_all())\n    return all_dict", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@isolated_logging\ndef test_logger_not_occupied(self):\n    self.assertEqual(0, len(logging.getLogger().handlers))", "buggy_source_code": "def test_logger_not_occupied(self):\n    script = \"if True:\\n            import logging\\n\\n            import grpc\\n\\n            if len(logging.getLogger().handlers) != 0:\\n                raise Exception('expected 0 logging handlers')\\n\\n        \"\n    self._verifyScriptSucceeds(script)", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_subject(self, prefix='Re: '):\n    subject = self.object.subject\n    return get_formatted_reply_email_subject(prefix, subject)", "buggy_source_code": "def get_subject(self, prefix='Re: '):\n    return get_formatted_reply_email_subject(self.object.subject, prefix)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def command_lightning(_):\n    global lightning_column\n    lightning_column = randint(0, MATRIX_WIDTH)\n    animation_start(animation_lightning, randint(fps // 3, fps))", "buggy_source_code": "def command_lightning(_):\n    global lightning_column\n    lightning_column = randint(0, MATRIX_WIDTH)\n    animation_start(animation_lightning, randint(animation_fps // 3, animation_fps))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def animation_lightning():\n    global animation_frames, lightning_column\n    draw_image(animation_image_backup, calibrate=(64, 64, 64))\n    draw_lightning(lightning_column)", "buggy_source_code": "def animation_lightning():\n    global lightning_column, animation_image_backup\n    draw_image(animation_image_backup, calibrate=(64, 64, 64))\n    draw_lightning(lightning_column)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@route('/<filepath:path>')\ndef server_static(filepath):\n    return static_file(filepath, root='/home/amit/dc.js/web')", "buggy_source_code": "@route('/<filepath:path>')\ndef server_static(filepath):\n    return static_file(filepath, root='./')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef _parse_end_datetime(self, value):\n    if value is None:\n        return int(time())\n    return self._parse_date_time(value)", "buggy_source_code": "@classmethod\ndef _parse_end_datetime(cls, value):\n    if value is None:\n        return int(time())\n    return cls._parse_date_time(value)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef decode_token(self, t):\n    p = jwt_decode(t)\n    return int(p['user'])", "buggy_source_code": "@classmethod\ndef decode_token(cls, t):\n    p = jwt_decode(t)\n    return int(p['user'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ops_uuid(uuid):\n    return 'ops.{0}'.format(uuid.replace('-', '%2D'))", "buggy_source_code": "def ops_uuid(share_uuid):\n    return 'ops.{0}'.format(share_uuid.replace('-', '%2D'))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_remove_filter(self, monitor):\n    with pytest.raises(ValueError):\n        monitor.remove_filter()", "buggy_source_code": "def test_remove_filter(self, monitor):\n    with pytest.raises(Exception):\n        monitor.remove_filter()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _cambiar_editor(self):\n    indice = self.navegador.row(self.navegador.currentItem())\n    principal = EDIS.componente('principal')\n    principal.cambiar_widget(indice)", "buggy_source_code": "def _cambiar_editor(self):\n    indice = self.navegador.row(self.navegador.currentItem())\n    principal = EDIS.componente('principal')\n    principal.change_widget(indice)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def commit_notice_destination(repo, branch, commit):\n    if branch in ['master', 'prod', 'post-receive-test']:\n        return dict(stream='commits', subject=u'deploy ⇒ %s' % (branch,))\n    return None", "buggy_source_code": "def commit_notice_destination(repo, branch, commit):\n    if branch in ['master', 'prod', 'test-post-receive']:\n        return dict(stream='commits', subject=u'deploy ⇒ %s' % (branch,))\n    return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "@unittest.expectedFailure\ndef test_leading_citekey_space(self):\n    cmds = ['pubs init', 'pubs add /data/leadingspace.bib', 'pubs rename LeadingSpace NoLeadingSpace']\n    self.execute_cmds(cmds)", "buggy_source_code": "@unittest.skip\ndef test_leading_citekey_space(self):\n    cmds = ['pubs init', 'pubs add /data/leadingspace.bib', 'pubs rename LeadingSpace NoLeadingSpace']\n    self.execute_cmds(cmds)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@ns.declare\ndef hsla_(color, a=None):\n    return rgba2(color, a)", "buggy_source_code": "@ns.declare\ndef hsla_(color, a=None):\n    return rgba_(color, a)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@ns.declare\ndef hsl_(color):\n    return rgba2(color, a=Number(1))", "buggy_source_code": "@ns.declare\ndef hsl_(color):\n    return rgba_(color, a=Number(1))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@ns.declare\ndef rgb_(color):\n    return rgba2(color, a=Number(1))", "buggy_source_code": "@ns.declare\ndef rgb_(color):\n    return rgba_(color, a=Number(1))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, content=''):\n    super(MatrixRequestError, self).__init__(content)\n    self.content = content", "buggy_source_code": "def __init__(self, content=''):\n    super(MatrixError, self).__init__(content)\n    self.content = content", "edit_actions": ["update-node"]}
{"fixed_source_code": "def align(offset, alignment):\n    if offset % alignment == 0:\n        return offset\n        return offset + (alignment - offset % alignment)", "buggy_source_code": "def align(offset, alignment):\n    if offset % alignment == 0:\n        return offset\n    return offset + (alignment - offset % alignment)", "edit_actions": ["move-tree", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def _loadhistory(self, data):\n    history = data.split('\\n')\n    self.interpretereditor.history = history", "buggy_source_code": "def _loadhistory(self, data):\n    history = str(data).split('\\n')\n    self.interpretereditor.history = history", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@pytest.fixture\ndef bigip():\n    LOG.debug(pytest.symbols)\n    LOG.debug(pytest.symbols.bigip_mgmt_ip)\n    return ManagementRoot(pytest.symbols.bigip_mgmt_ip, 'admin', 'admin')", "buggy_source_code": "@pytest.fixture\ndef bigip():\n    LOG.debug(pytest.symbols)\n    LOG.debug(pytest.symbols.bigip_mgmt_ip_public)\n    return ManagementRoot(pytest.symbols.bigip_mgmt_ip_public, 'admin', 'admin')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef premium_signup(sender, **kwargs):\n    import logging\n    logging.warning('premium_signup: %s', sender)\n    logging.warning('premium_signup: %s', str(kwargs))", "buggy_source_code": "@staticmethod\ndef premium_signup(sender, **kwargs):\n    import logging\n    logging.warning('premium_signup: %s', sender)\n    logging.warning('premium_signup: %s', str(kwargs))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, buffer, externalVars):\n    self.buffer = buffer\n    self.externalVars = externalVars", "buggy_source_code": "def __init__(self, buffer, externalVars):\n    self.buffer = ensureNotUnicode(buffer)\n    self.externalVars = externalVars", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def explain_prediction_keras_not_supported(model, doc):\n    return Explanation(model.name, error='model \"{}\" is not supported, try passing the \"image\" argument if explaning an image model.'.format(model.name))", "buggy_source_code": "def explain_prediction_keras_not_supported(model, doc):\n    return Explanation(model.name, error='model \"{}\" is not supported, try passing the \"image\" argument if explaining an image model.'.format(model.name))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def configitems(orig, self, section, untrusted=False):\n    r = orig(self, section, untrusted)\n    if section == 'paths':\n        r += getzcpaths()\n    return r", "buggy_source_code": "def configitems(orig, self, section, untrusted=False):\n    repos = orig(self, section, untrusted)\n    if section == 'paths':\n        repos += getzcpaths()\n    return repos", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@property\ndef value_in_usdt(self):\n    if self.status in self.OPEN_STATUSES:\n        return self.token_value_in_usdt_now\n    else:\n        return self.value_in_usdt_then", "buggy_source_code": "@property\ndef value_in_usdt(self):\n    if self.status in self.OPEN_STATUSES:\n        return self.value_in_usdt_now\n    else:\n        return self.value_in_usdt_then", "edit_actions": ["update-node"]}
{"fixed_source_code": "def lookup_allowed(self, lookup):\n    if lookup in self.advanced_search_form.fields.keys():\n        return True\n    return super(SubjectAdmin, self).lookup_allowed(lookup)", "buggy_source_code": "def lookup_allowed(self, key, value):\n    if key in self.advanced_search_form.fields.keys():\n        return True\n    return super(SubjectAdmin, self).lookup_allowed(key, value)", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def tearDown(self):\n    FreeCAD.closeDocument('PathPostTest')", "buggy_source_code": "def tearDown(self):\n    FreeCAD.closeDocument('boxtest')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, attrs=None):\n    widgets = (forms.TextInput(), forms.TextInput())\n    super(GeopositionWidget, self).__init__(widgets, attrs)", "buggy_source_code": "def __init__(self, attrs=None):\n    widgets = (forms.TextInput(), forms.TextInput())\n    super(GeopositionMapOnlyWidget, self).__init__(widgets, attrs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_vcr_config(testdir):\n    testdir.makepyfile('\\n        import pytest\\n\\n        @pytest.fixture\\n        def vcr_config():\\n            return {\\'record_mode\\': \\'none\\'}\\n\\n        @pytest.mark.vcr()\\n        def test_method(self, vcr_cassette):\\n            print(\"Cassette record mode: {}\".format(vcr_cassette.record_mode))\\n    ')\n    result = testdir.runpytest('-s')\n    result.stdout.fnmatch_lines(['Cassette record mode: none'])", "buggy_source_code": "def test_vcr_config(testdir):\n    testdir.makepyfile('\\n        import pytest\\n\\n        @pytest.fixture\\n        def vcr_config():\\n            return {\\'record_mode\\': \\'none\\'}\\n\\n        @pytest.mark.vcr()\\n        def test_method(vcr_cassette):\\n            print(\"Cassette record mode: {}\".format(vcr_cassette.record_mode))\\n    ')\n    result = testdir.runpytest('-s')\n    result.stdout.fnmatch_lines(['Cassette record mode: none'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __submitpilots(self, nsub):\n    self.log.debug('[%s] Would be submitting jobs for this queue.' % self.siteid)\n    self.batchsubmit.submit(self.siteid, nsub, self.fcl, self.qcl)", "buggy_source_code": "def __submitpilots(self, nsub):\n    self.log.debug('[%s] Would be submitting jobs for this queue.' % self.siteid)\n    self.batchsubmit.submitPilots(self.siteid, nsub, self.fcl, self.qcl)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __call__(self, value):\n    if value > self.value:\n        raise ValidationError('Must be less than or equal to {0}.'.format(value))", "buggy_source_code": "def __call__(self, value):\n    if value > self.value:\n        raise ValidationError('Must be less than or equal to {0}.'.format(self.value))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def bowtie2_build(infile, outfile, offrate=3, shell=False):\n    cmd = ['bowtie2', '-f', '-o', offrate, infile, outfile]\n    return run_command(cmd, shell=shell)", "buggy_source_code": "def bowtie2_build(infile, outfile, offrate=3, shell=False):\n    cmd = ['bowtie2', '-f', '-o', str(offrate), infile, outfile]\n    return run_command(cmd, shell=shell)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_random_image_for_drug():\n    drug_images_nums = ['000840105', '023280101', '038260201', '041670301', '093360302', '099880107', '175990402']\n    drug_number = random.choice(drug_images_nums)\n    return drug_number + '.png'", "buggy_source_code": "def get_random_image_for_drug():\n    drug_images_nums = ['900840105', '923280101', '938260201', '941670301', '993360302', '999880107', '175990402']\n    drug_number = random.choice(drug_images_nums)\n    return drug_number + '.png'", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def index_primary(self):\n    return np.s_[..., 0:-self.cri.C]", "buggy_source_code": "def index_primary(self):\n    return np.s_[..., 0:-self.cri.Cd]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def index_addmsk(self):\n    return np.s_[..., -self.cri.C:]", "buggy_source_code": "def index_addmsk(self):\n    return np.s_[..., -self.cri.Cd:]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def toggle_change(self):\n    self.show_change = not self.show_change\n    self.set_change_button_text()\n    self.on_update()", "buggy_source_code": "def toggle_change(self):\n    self.show_change = not self.show_change\n    self.set_change_button_text()\n    self.update()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def toggle_used(self):\n    self.show_used = (self.show_used + 1) % 4\n    self.set_used_button_text()\n    self.on_update()", "buggy_source_code": "def toggle_used(self):\n    self.show_used = (self.show_used + 1) % 4\n    self.set_used_button_text()\n    self.update()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_about(self):\n    response = self.client.get('/about', follow_redirects=True)\n    self.assertEqual(response.status_code, 200)\n    self.assertIn(b'Aboot', response.data)", "buggy_source_code": "def test_about(self):\n    response = self.client.get('/about', follow_redirects=True)\n    self.assertEqual(response.status_code, 200)\n    self.assertIn(b'About', response.data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, fmt):\n    self.struct = struct.Struct(fmt)\n    self.size = self.struct.size\n    self.format = self.struct.format", "buggy_source_code": "def __init__(self, fmt):\n    self._fmt = fmt\n    st = struct.Struct(fmt.format(1))\n    self.size = st.size\n    self.format = st.format", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def S3_ServeVideoVersionMap(self, S3_File_MNID, expiresin=10800):\n    s3file = AWS.S3_File(S3_File_MNID)\n    return self.S3_ServeVideoVersionMap(s3file)", "buggy_source_code": "def S3_ServeVideoVersionMap(self, S3_File_MNID, expiresin=10800):\n    s3file = AWS.S3_File(S3_File_MNID)\n    return self.S3_ServeVideoVersionMapForS3File(s3file)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_field_number(field):\n    return True if re.match('\\\\d+\\\\.?\\\\d*', field) else False", "buggy_source_code": "def is_field_number(field):\n    return re.match('\\\\d+\\\\.?\\\\d*', field)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def get_function_definition(self, name):\n    if name in self._unavailables_functions:\n        raise KeyError()\n    else:\n        return self.parent.get_function_definition(name)", "buggy_source_code": "def get_function_definition(self, name):\n    if name in self._unavailables_functions:\n        raise KeyError('This function definition is not available here')\n    else:\n        return self.parent.get_function_definition(name)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def define_variable(self, name, tiger_type, readonly=False):\n    self.parent.define_variable(name, tiger_type, readonly)", "buggy_source_code": "def define_variable(self, name, tiger_type, read_only=False):\n    self.parent.define_variable(name, tiger_type, read_only)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_transaction():\n    return __transaction", "buggy_source_code": "def get_transaction():\n    return DBTransaction(__pool)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def commit_version_string(self):\n    raise NotImplementedErrora", "buggy_source_code": "def commit_version_string(self):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef type(self):\n    raise NotImplementedErrora", "buggy_source_code": "@classmethod\ndef type(self):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate_tarball(self, name, version, outdir):\n    raise NotImplementedErrora", "buggy_source_code": "def generate_tarball(self, name, version, outdir):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def commit_short(self):\n    raise NotImplementedErrora", "buggy_source_code": "def commit_short(self):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def transform(self):\n    return {'width': int(self.width * self.scale), 'height': int(self.width * self.scale)}", "buggy_source_code": "def transform(self):\n    return {'width': int(self.width * self.scale), 'height': int(self.height * self.scale)}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def remove_newlines(self, str):\n    return re.sub('\\\\n\\\\s*', '', str.group(1))", "buggy_source_code": "def remove_newlines(self, ch=''):\n    return lambda str: re.sub('\\\\n\\\\s*', ch, str.group(0))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def create_vocab(self):\n    print('CLI not implemented yet')", "buggy_source_code": "def create_vocab(self):\n    print('CLI for vocabulary routines not implemented yet')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testCopyFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'copy_from_empty_register.asm', './sample/asm/static_analysis_errors/copy_from_empty_register.asm:21:13: error: copy from empty local register \"0\"')", "buggy_source_code": "def testCopyFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'copy_from_empty_register.asm', './sample/asm/static_analysis_errors/copy_from_empty_register.asm:21:19: error: copy from empty local register \"0\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testJoinFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'join_from_empty_register.asm', './sample/asm/static_analysis_errors/join_from_empty_register.asm:21:13: error: use of empty local register \"1\"')", "buggy_source_code": "def testJoinFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'join_from_empty_register.asm', './sample/asm/static_analysis_errors/join_from_empty_register.asm:21:19: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testMoveFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'move_from_empty_register.asm', './sample/asm/static_analysis_errors/move_from_empty_register.asm:21:13: error: move from empty local register \"0\"')", "buggy_source_code": "def testMoveFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'move_from_empty_register.asm', './sample/asm/static_analysis_errors/move_from_empty_register.asm:21:19: error: move from empty local register \"0\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testUseOfEmptySecondOperandInIadd(self):\n    runTestFailsToAssembleDetailed(self, 'use_of_empty_second_operand_in_iadd.asm', ['24:37: error: use of empty local register \"2\" (named \"second\")', '20:12: error: in function main/0'])", "buggy_source_code": "def testUseOfEmptySecondOperandInIadd(self):\n    runTestFailsToAssembleDetailed(self, 'use_of_empty_second_operand_in_iadd.asm', ['24:49: error: use of empty local register \"2\" (named \"second\")', '20:12: error: in function main/0'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testVpopFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vpop_from_empty_register.asm', './sample/asm/static_analysis_errors/vpop_from_empty_register.asm:21:13: error: use of empty local register \"1\"')", "buggy_source_code": "def testVpopFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vpop_from_empty_register.asm', './sample/asm/static_analysis_errors/vpop_from_empty_register.asm:21:19: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testVinsertOfEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vinsert_of_empty_register.asm', './sample/asm/static_analysis_errors/vinsert_of_empty_register.asm:21:25: error: use of empty local register \"1\"')", "buggy_source_code": "def testVinsertOfEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vinsert_of_empty_register.asm', './sample/asm/static_analysis_errors/vinsert_of_empty_register.asm:21:37: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testUseOfEmptySecondRegisterInOr(self):\n    runTestFailsToAssemble(self, 'or_use_of_empty_register_2nd.asm', './sample/asm/static_analysis_errors/or_use_of_empty_register_2nd.asm:22:14: error: use of empty local register \"2\"')", "buggy_source_code": "def testUseOfEmptySecondRegisterInOr(self):\n    runTestFailsToAssemble(self, 'or_use_of_empty_register_2nd.asm', './sample/asm/static_analysis_errors/or_use_of_empty_register_2nd.asm:22:26: error: use of empty local register \"2\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testIaddOfEmptyRegisters(self):\n    runTestFailsToAssemble(self, 'iadd_of_empty_registers.asm', './sample/asm/static_analysis_errors/iadd_of_empty_registers.asm:21:12: error: use of empty local register \"1\"')", "buggy_source_code": "def testIaddOfEmptyRegisters(self):\n    runTestFailsToAssemble(self, 'iadd_of_empty_registers.asm', './sample/asm/static_analysis_errors/iadd_of_empty_registers.asm:21:18: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testCastOfEmptyRegistersStoi(self):\n    runTestFailsToAssemble(self, 'cast_of_empty_register_stoi.asm', './sample/asm/static_analysis_errors/cast_of_empty_register_stoi.asm:21:13: error: use of empty local register \"1\"')", "buggy_source_code": "def testCastOfEmptyRegistersStoi(self):\n    runTestFailsToAssemble(self, 'cast_of_empty_register_stoi.asm', './sample/asm/static_analysis_errors/cast_of_empty_register_stoi.asm:21:19: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testSendFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'send_from_empty_register.asm', './sample/asm/static_analysis_errors/send_from_empty_register.asm:27:13: error: send from empty local register \"2\"')", "buggy_source_code": "def testSendFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'send_from_empty_register.asm', './sample/asm/static_analysis_errors/send_from_empty_register.asm:27:19: error: send from empty local register \"2\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testVatOnEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vat_on_empty_register.asm', './sample/asm/static_analysis_errors/vat_on_empty_register.asm:21:12: error: use of empty local register \"1\"')", "buggy_source_code": "def testVatOnEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vat_on_empty_register.asm', './sample/asm/static_analysis_errors/vat_on_empty_register.asm:21:18: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testUseOfEmptyFirstOperandInIadd(self):\n    runTestFailsToAssembleDetailed(self, 'use_of_empty_first_operand_in_iadd.asm', ['24:30: error: use of empty local register \"1\" (named \"first\")', '20:12: error: in function main/0'])", "buggy_source_code": "def testUseOfEmptyFirstOperandInIadd(self):\n    runTestFailsToAssembleDetailed(self, 'use_of_empty_first_operand_in_iadd.asm', ['24:36: error: use of empty local register \"1\" (named \"first\")', '20:12: error: in function main/0'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testUseOfEmptyFirstRegisterInOr(self):\n    runTestFailsToAssemble(self, 'or_use_of_empty_register_1st.asm', './sample/asm/static_analysis_errors/or_use_of_empty_register_1st.asm:21:11: error: use of empty local register \"1\"')", "buggy_source_code": "def testUseOfEmptyFirstRegisterInOr(self):\n    runTestFailsToAssemble(self, 'or_use_of_empty_register_1st.asm', './sample/asm/static_analysis_errors/or_use_of_empty_register_1st.asm:21:17: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testPointerFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'pointer_from_empty_register.asm', './sample/asm/static_analysis_errors/pointer_from_empty_register.asm:21:12: error: pointer from empty local register \"1\"')", "buggy_source_code": "def testPointerFromEmptyRegister(self):\n    runTestFailsToAssemble(self, 'pointer_from_empty_register.asm', './sample/asm/static_analysis_errors/pointer_from_empty_register.asm:21:18: error: pointer from empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testVpushOfEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vpush_of_empty_register.asm', './sample/asm/static_analysis_errors/vpush_of_empty_register.asm:21:23: error: use of empty local register \"1\"')", "buggy_source_code": "def testVpushOfEmptyRegister(self):\n    runTestFailsToAssemble(self, 'vpush_of_empty_register.asm', './sample/asm/static_analysis_errors/vpush_of_empty_register.asm:21:35: error: use of empty local register \"1\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testIsnullFailsOnNonemptyRegisters(self):\n    runTestFailsToAssemble(self, 'isnull_fails_on_nonempty_registers.asm', './sample/asm/static_analysis_errors/isnull_fails_on_nonempty_registers.asm:22:22: error: useless check, register will always be defined')", "buggy_source_code": "def testIsnullFailsOnNonemptyRegisters(self):\n    runTestFailsToAssemble(self, 'isnull_fails_on_nonempty_registers.asm', './sample/asm/static_analysis_errors/isnull_fails_on_nonempty_registers.asm:22:28: error: useless check, register will always be defined')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testSwapWithEmptySecondRegister(self):\n    runTestFailsToAssemble(self, 'swap_with_empty_second_register.asm', './sample/asm/static_analysis_errors/swap_with_empty_second_register.asm:22:13: error: swap with empty local register \"2\"')", "buggy_source_code": "def testSwapWithEmptySecondRegister(self):\n    runTestFailsToAssemble(self, 'swap_with_empty_second_register.asm', './sample/asm/static_analysis_errors/swap_with_empty_second_register.asm:22:19: error: swap with empty local register \"2\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@Route.get('/upload', description='Placeholder page for the old /upload')\ndef upload(request, response):\n    response.template('upload.html')", "buggy_source_code": "@Route.get('/debug', description='Old index page')\ndef upload(request, response):\n    response.template('index.html')", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __str_keyword_arguments__(self):\n    return '(externals = %s, headonly = %s)' % str(self.externals, self.headonly)", "buggy_source_code": "def __str_keyword_arguments__(self):\n    return '(externals = %s, headonly = %s)' % (repr(self.externals), repr(self.headonly))", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.mp = StubProvisioner()", "buggy_source_code": "def setUp(self):\n    self.mp = MockProvisioner()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_init(self):\n    StubProvisioner()", "buggy_source_code": "def test_init(self):\n    MockProvisioner()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@task\ndef pencil():\n    checkup_git_repo(url='git@github.com:prikhi/pencil.git')\n    run('cd ~/repos/pencil/build && ./build.sh  linux')\n    install_user_command('pencil')", "buggy_source_code": "@task\ndef pencil():\n    checkup_git_repo(url='https://github.com/prikhi/pencil.git')\n    run('cd ~/repos/pencil/build && ./build.sh  linux')\n    install_user_command('pencil')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def author_preview_view(self, context):\n    return self.author_edit_view(context)", "buggy_source_code": "def author_preview_view(self, context):\n    return self.fallback_view('mentoring_view', context)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def format_excepthook(etype, evaule, tb):\n    traceback.print_exception(etype, evalue, tb)\n    print(dedent('\\n        If you suspect this is a nbgrader bug, please report it at:\\n            https://github.com/jupyter/nbgrader/issues\\n        '), file=sys.stderr)", "buggy_source_code": "def format_excepthook(etype, evalue, tb):\n    traceback.print_exception(etype, evalue, tb)\n    print(dedent('\\n        If you suspect this is a nbgrader bug, please report it at:\\n            https://github.com/jupyter/nbgrader/issues\\n        '), file=sys.stderr)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def excepthook(self, etype, evalue, tb):\n    format_excepthook(etype, evaule, tb)", "buggy_source_code": "def excepthook(self, etype, evalue, tb):\n    format_excepthook(etype, evalue, tb)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init_about(self):\n    self.__page_about.show()\n    self.__name_version = self.__builder.get_object('NameVersion')\n    self.__name_version.set_markup(_('<big><b>Intelligent Pinyin %s</b></big>') % version.get_version())", "buggy_source_code": "def __init_about(self):\n    self.__page_about.show()\n    self.__name_version = self.__builder.get_object('NameVersion')\n    self.__name_version.set_markup(_('<big><b>Intelligent Pinyin %s</b></big>') % config.get_version())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_json_defaults_to_application_json_for_dynamic_json():\n    expected = 'application/json'\n    actual = check(\"[---]\\nresponse.body = {'Greetings': 'program!'}\", filename='foo.json', body=False).headers['Content-Type']\n    assert actual == expected, actual", "buggy_source_code": "def test_json_defaults_to_application_json_for_dynamic_json():\n    expected = 'application/json'\n    actual = check(\"[---]\\nresponse.body = {'Greetings': 'program!'}\", filename='foo.json.spt', body=False).headers['Content-Type']\n    assert actual == expected, actual", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_region_creation(self):\n    r = self.create_region()\n    self.assertTrue(isinstance, (r, Region))\n    self.assertEqual(r.__unicode__(), r.short_name)", "buggy_source_code": "def test_region_creation(self):\n    r = self.create_region()\n    self.assertTrue(isinstance, (r, Region))\n    self.assertEqual(r.__unicode__(), r.full_name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def title(self, obj):\n    return 'Code review - Issue (%d): %s' % (obj.key().id(), obj.subject)", "buggy_source_code": "def title(self, obj):\n    return 'Code review - Issue %d: %s' % (obj.key().id(), obj.subject)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def gen_salt(length):\n    if length <= 0:\n        raise ValueError('requested salt of length <= 0')\n    return ''.join((_sys_rng.choice(SALT_CHARS) for _ in range_type(length)))", "buggy_source_code": "def gen_salt(length):\n    if length <= 0:\n        raise ValueError('Salt length must be positive')\n    return ''.join((_sys_rng.choice(SALT_CHARS) for _ in range_type(length)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<ref %s %s#%x>' % (self.jni, chr(self.tag), self.tid)", "buggy_source_code": "def __repr__(self):\n    return '<type %s %s#%x>' % (self.jni, chr(self.tag), self.tid)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@skip('NI')\ndef test_new_state(self):\n    pass", "buggy_source_code": "def test_new_state(self):\n    debug_cmd = self.get_instance()\n    debug_cmd.do_debug('--new-state')\n    self.assertTrue(self.mock_engine.new_game.called)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, max_heading=3):\n    if not etree:\n        raise DependencyException('To use the HeadingAnchors hook, you must install the library lxml.')\n    self.max_heading = max_heading\n    logging.info('Loaded hook HeadingAnchors')", "buggy_source_code": "def __init__(self, max_heading=3):\n    if not etree:\n        logging.warning('To use the HeadingAnchors hook, you must install the library lxml.')\n        return\n    self.max_heading = max_heading\n    logging.info('Loaded hook HeadingAnchors')", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def name(self):\n    return 'createframe'", "buggy_source_code": "def name(self):\n    return 'gridzonegenerator'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def displayName(self):\n    return self.tr('Create Frame')", "buggy_source_code": "def displayName(self):\n    return self.tr('Generate Systematic Grid')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@when('I sum them µŴ')\ndef sum_numbers(step):\n    step.context.result = sum(step.context.numbers)", "buggy_source_code": "@when('I sum them 🎉')\ndef sum_numbers(step):\n    step.context.result = sum(step.context.numbers)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_response(self, environ=None):\n    response = flask.jsonify(self.to_dict())\n    response.code = self.code\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response", "buggy_source_code": "def get_response(self, environ=None):\n    response = flask.jsonify(self.to_dict())\n    response.status_code = self.code\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_navigation_items(self, req):\n    if not req.perm.has_permission('REPORT_VIEW'):\n        return\n    yield ('mainnav', 'milestones', Markup('<a href=\"%s/3\">Tickets by Milestone</a>', self.env.href.report()))", "buggy_source_code": "def get_navigation_items(self, req):\n    if not req.perm.has_permission('REPORT_VIEW'):\n        return\n    yield ('mainnav', 'milestones', Markup('<a href=\"%s\">Tickets by Milestone</a>', self.env.href.milestones()))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def getISolverData(self, weeks):\n    sql = 'select init_time, preset, romFileName\\nfrom isolver\\nwhere init_time > DATE_SUB(CURDATE(), INTERVAL %d WEEK)\\norder by init_time;'\n    header = ['initTime', 'preset', 'romFileName']\n    return (header, self.execSelect(sql, (weeks,)))", "buggy_source_code": "def getISolverData(self, weeks):\n    sql = 'select 0, init_time, preset, romFileName\\nfrom isolver\\nwhere init_time > DATE_SUB(CURDATE(), INTERVAL %d WEEK)\\norder by init_time;'\n    header = ['initTime', 'preset', 'romFileName']\n    return (header, self.execSelect(sql, (weeks,)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getq(name):\n    return request.forms.get(name, '')[0:64]", "buggy_source_code": "def getq(name):\n    return request.query.get(name, '')[0:64]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_flemish(self):\n    post_replace = expectation.FISHY.replace('Spanish', 'Flemish', 1)\n    self.assertEqual(expectation.FLEMISH, post_replace)", "buggy_source_code": "def test_flemish(self):\n    post_replace = flemish.FISHY.replace('Spanish', 'Flemish', 1)\n    self.assertEqual(flemish.FLEMISH, post_replace)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_y_span(self):\n    return self.y_span", "buggy_source_code": "def get_y_span(self):\n    return self.y_span_default", "edit_actions": ["update-node"]}
{"fixed_source_code": "def tearDown(self):\n    os.chmod(os.path.join(REPOS_PATH, 'format'), stat.S_IRWXU)", "buggy_source_code": "def tearDown(self):\n    os.chmod(os.path.join(REPOS_PATH, 'format'), stat.S_IRWXU)\n    shutil.rmtree(REPOS_PATH)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    self.realName = None\n    imageURL = None", "buggy_source_code": "def __init__(self):\n    self.realName = None\n    self.imageURL = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_datacube_metadata(self, platform, product):\n    return self.get_query_metadata(platform, product)", "buggy_source_code": "def get_datacube_metadata(self, platform, product):\n    return self.get_query_metadata(product, platform=platform)", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_cumsum():\n    result = cumsum(list(range(4)))\n    assert [0, 1, 3, 6] == result", "buggy_source_code": "def test_cumsum():\n    data = Int64List()\n    data.extend(range(4))\n    result = cumsum(data)\n    assert [0, 1, 3, 6] == result", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _controls(what):\n    makefunc = lambda action: lambda : _exec_command(ac)\n    return (makefunc(action) for action in ('on', 'off', 'toggle'))", "buggy_source_code": "def _controls(what):\n    makefunc = lambda action: lambda : _exec_command(action)\n    return (makefunc(action) for action in ('on', 'off', 'toggle'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<Submission %s>' % filename", "buggy_source_code": "def __repr__(self):\n    return '<Submission %d>' % self.id if self.id else '<New Submission>'", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def GetLoopVariable(self):\n    for character in 'ικλμνξπρςστυφχψωαβγδεζηθ':\n        if not character in self.scope:\n            return character", "buggy_source_code": "def GetLoopVariable(self):\n    for character in 'ικλμνξπρσςτυφχψωαβγδεζηθ':\n        if not character in self.scope:\n            return character", "edit_actions": ["update-node"]}
{"fixed_source_code": "def CleanExecute(function, args):\n    try:\n        return function(*args)\n    except (KeyboardInterrupt, EOFError):\n        sys.exit()", "buggy_source_code": "def CleanExecute(function, *args):\n    try:\n        return function(*args)\n    except (KeyboardInterrupt, EOFError):\n        sys.exit()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def get_info(self, sm_id):\n    sm = self.source_models[sm_id]\n    return self.__class__(self.gsim_lt, self.seed, self.num_samples, [sm], self.tot_weight)", "buggy_source_code": "def get_info(self, sm_id):\n    sm = self.source_models[sm_id]\n    return self.__class__(self.gsim_lt, self.seed, sm.samples, [sm], self.tot_weight)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'TautomerTransform({!r}, {!r}, {!r}, {!r}, {!r})'.format(self.name, self.tautomer_str, self.bonds, self.charges)", "buggy_source_code": "def __repr__(self):\n    return 'TautomerTransform({!r}, {!r}, {!r}, {!r})'.format(self.name, self.tautomer_str, self.bonds, self.charges)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get(self, parameter_id):\n    return self._parameteres[parameter_id]", "buggy_source_code": "def get(self, parameter_id):\n    return self._parameters[parameter_id]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return ''.join([str(potcar) for potcar in self])", "buggy_source_code": "def __str__(self):\n    return '\\n'.join([str(potcar) for potcar in self])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_minishard_indices(self, filename, index, minishard_nos, path=''):\n    res = self.get_minishard_indices_for_files(((filename, index, minishard_nos),), path)\n    return res[filename]", "buggy_source_code": "def get_minishard_indices(self, filename, index, minishard_nos, path=''):\n    res = self.get_minishard_indices_for_files(((filename, index, minishard_nos),), path)\n    return res[basename(filename)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def __call__(self, estimator, X, y, sample_weight=None):\n    if self._deprecation_msg is not None:\n        warnings.warn(self._deprecation_msg, category=DeprecationWarning, stacklevel=13)", "buggy_source_code": "def __call__(self, estimator, X, y, sample_weight=None):\n    if self._deprecation_msg is not None:\n        warnings.warn(self._deprecation_msg, category=DeprecationWarning, stacklevel=2)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def heartbeat(self):\n    with self._exclusive_access:\n        if self.acquired:\n            with _translate_failures():\n                self._lock.reacquire()\n                return True\n    return False", "buggy_source_code": "@_handle_failures\ndef heartbeat(self):\n    with self._exclusive_access:\n        if self.acquired:\n            self._lock.reacquire()\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _read_integer(self, regno):\n    result = self._modbusclient.read_holding_registers(regno, 1)[0]\n    if result is None:\n        raise CommunicationError('Error reading integer from register #%d' % regno)\n    return result", "buggy_source_code": "def _read_integer(self, regno):\n    result = self._modbusclient.read_holding_registers(regno, 1)\n    if result is None:\n        raise CommunicationError('Error reading integer from register #%d' % regno)\n    return result[0]", "edit_actions": ["insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self.lightOnLevel = StateChangeSignal()\n    self.register_command_handler(COMMAND_LIGHT_ON, _light_on_command_received)", "buggy_source_code": "def __init__(self):\n    self.lightOnLevel = StateChangeSignal()\n    self.register_command_handler(COMMAND_LIGHT_ON, self._light_on_command_received)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def fetchCurrentFile(self, file_folder):\n    self.fetchAfterStateFile(file_folder)", "buggy_source_code": "def fetchCurrentFile(self, file_folder):\n    return self.fetchAfterStateFile(file_folder)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def as_dot(self):\n    ...", "buggy_source_code": "def as_dot(self):\n    pass", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def get_access_token(self, sess):\n    if not self._access_token:\n        return self.create_access_token(sess)\n    return self._access_token", "buggy_source_code": "def get_access_token(self, flow):\n    if not self._access_token:\n        return self.create_access_token(flow)\n    return self._access_token", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef is_error(self):\n    return self.edit1 == self.edit2", "buggy_source_code": "@property\ndef is_error(self):\n    return self.edit1 != self.edit2", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_gentoo(self):\n    data = self._run_test('gentoo', 'example')\n    self.assertEqual(data, '# Automatically generated, do not edit\\n' + 'HOSTNAME=\"example\"\\n')", "buggy_source_code": "def test_gentoo(self):\n    data = self._run_test('gentoo', 'example')\n    regex_hostname = re.compile('.*HOSTNAME=\"example\"\\n$', re.MULTILINE)\n    self.assertRegex(data, regex_hostname)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _send_secret_jsons():\n    put(TASKRUNNER_CRED_PATH, path.join(source_folder, TASKRUNNER_CRED_PATH))\n    put(SECRET_PATH, path.join(source_folder, SECRET_PATH))", "buggy_source_code": "def _send_secret_jsons():\n    put(TASKRUNNER_CRED_PATH, os.path.join(source_folder, TASKRUNNER_CRED_PATH))\n    put(SECRET_PATH, os.path.join(source_folder, SECRET_PATH))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    super(TestTransactionAPI, self).setUp()\n    TestCase.assertIsNotNone(test_auth_key, 'PAYSTACK_AUTHORIZATION_KEY not Found')\n    self.transaction = Transaction(authorization_key=test_auth_key)", "buggy_source_code": "def setUp(self):\n    super(TestTransactionAPI, self).setUp()\n    TestCase.assertIsNotNone(test_auth_key, 'PAYSTACK_AUTH_KEY not Found')\n    self.transaction = Transaction(authorization_key=test_auth_key)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def usage():\n    print('Usage: convertor <in_docbook_file> [<out_docx_file>] [<docx_template_file>]')", "buggy_source_code": "def usage():\n    print('Usage: docbook2docx.py <in_docbook_file> [<out_docx_file>] [<docx_template_file>]')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __enter__(self):\n    for (i, l) in self.values.iterrows():\n        self.cfg.set_option(l['k1'], l['k2'], l['new_value'])", "buggy_source_code": "def __enter__(self):\n    for (_, l) in self.values.iterrows():\n        self.cfg.set_option(l['k1'], l['k2'], l['new_value'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _cleanup_vxlan_if(self):\n    if self._is_vxlan_if_on_bridge():\n        self._unplug_from_bridge(self.vxlan_if_name)\n        self._remove_vxlan_if()", "buggy_source_code": "def _cleanup_vxlan_if(self):\n    if self._is_vxlan_if_on_bridge():\n        self._unplug_from_bridge(self.vxlan_if_name)\n    self._remove_vxlan_if()", "edit_actions": ["move-tree", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def dummy_for_rule_validation(rule_constraints):\n\n    def dummy(self, constraint, field, value):\n        raise RuntimeError('Dummy method called. Its purpose is to hold justvalidation constraints for a rule.')\n    f = dummy\n    f.__doc__ = rule_constraints\n    return f", "buggy_source_code": "def dummy_for_rule_validation(rule_constraints):\n\n    def dummy(self, constraint, field, value):\n        raise RuntimeError('Dummy method called. Its purpose is to hold justvalidation constraints for a rule in its docstring.')\n    f = dummy\n    f.__doc__ = rule_constraints\n    return f", "edit_actions": ["update-node"]}
{"fixed_source_code": "def find_module(self, mod_name, pth):\n    if pth:\n        return\n    if mod_name == self.__forbidden:\n        return self", "buggy_source_code": "def find_module(self, fullname, path=None):\n    if path:\n        return\n    if fullname == self.__forbidden:\n        return self", "edit_actions": ["update-node", "update-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def load_module(self, mod_name):\n    raise ImportError('\\n    Importing %s disabled by IPython, which has\\n    already imported an Incompatible QT Binding: %s\\n    ' % (mod_name, loaded_api()))", "buggy_source_code": "def load_module(self, fullname):\n    raise ImportError('\\n    Importing %s disabled by IPython, which has\\n    already imported an Incompatible QT Binding: %s\\n    ' % (fullname, loaded_api()))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_get_live_events(self):\n    client = YouTube()\n    json_data = client.get_live_events(event_type='active')\n    pass", "buggy_source_code": "def test_get_live_events(self):\n    client = YouTube()\n    json_data = client.get_live_events(event_type='live')\n    pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "def refresh_lines(self):\n    self.tableModel.reset()\n    self.fieldSeparatorEdit.setText(self.model.field_separator)", "buggy_source_code": "def refresh_lines(self):\n    self.tableModel.beginResetModel()\n    self.tableModel.endResetModel()\n    self.fieldSeparatorEdit.setText(self.model.field_separator)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_floating_point(self, prompt_message):\n    self.send_message(prompt_message)\n    return self.get_response_message('float')", "buggy_source_code": "def get_floating_point(self, prompt_message):\n    self.send_message(prompt_message)\n    return self._get_response_message('float')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_string(self, prompt_message):\n    self.send_message(prompt_message)\n    return self.get_response_message('string')", "buggy_source_code": "def get_string(self, prompt_message):\n    self.send_message(prompt_message)\n    return self._get_response_message('string')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_integer(self, prompt_message):\n    self.send_message(prompt_message)\n    return self.get_response_message('int')", "buggy_source_code": "def get_integer(self, prompt_message):\n    self.send_message(prompt_message)\n    return self._get_response_message('int')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_picture(self, prompt_message):\n    self.send_message(prompt_message)\n    picture_code = self.get_response_message('picture')\n    return Picture(self.conversation_code, picture_code)", "buggy_source_code": "def get_picture(self, prompt_message):\n    self.send_message(prompt_message)\n    picture_code = self._get_response_message('picture')\n    return Picture(self.conversation_code, picture_code)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_version_less_than_14(self):\n    version = self.client.api.tmos_version\n    if LooseVersion(version) < LooseVersion('18.0.0'):\n        return True\n    else:\n        return False", "buggy_source_code": "def is_version_less_than_14(self):\n    version = self.client.api.tmos_version\n    if LooseVersion(version) < LooseVersion('14.0.0'):\n        return True\n    else:\n        return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self) -> str:\n    return '<WidgetContainer id={} z={} key={}>'.format(self.id, self.z, self.key)", "buggy_source_code": "def __repr__(self) -> str:\n    return '<WidgetContainer z={} key={}>'.format(self.z, self.key)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def iter_importer_series(self):\n    return self.client.list_iter_all('odata/importer_series', params=dict(importer=self.get_cleaner_data()['related_importer']))", "buggy_source_code": "def iter_importer_series(self):\n    return self.client.list_iter_all('odata/importer_series', params=dict(generator=self.get_cleaner_data()['related_importer']))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_non_configured_series(self):\n    not_configured_series = []\n    for s in self.iter_importer_series():\n        if not s['unitcleaner']:\n            not_configured_series.append(s)\n    return not_configured_series", "buggy_source_code": "def get_non_configured_series(self):\n    not_configured_series = []\n    for s in self.iter_importer_series():\n        if s['unitcleaner'] is None:\n            not_configured_series.append(s)\n    return not_configured_series", "edit_actions": ["insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@abc.abstractmethod\nasync def watch(self, request_update) -> None:\n    while True:\n        await asyncio.sleep(1)\n        await request_update()", "buggy_source_code": "@abc.abstractmethod\nasync def watch(self, request_update) -> None:\n    while True:\n        await request_update()\n        await asyncio.sleep(1)", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def execute_xori(s, inst):\n    s.rf[inst.rd] = inst.i_imm ^ s.rf[inst.rs2]\n    s.pc += 4", "buggy_source_code": "def execute_xori(s, inst):\n    s.rf[inst.rd] = inst.i_imm ^ s.rf[inst.rs1]\n    s.pc += 4", "edit_actions": ["update-node"]}
{"fixed_source_code": "def execute_ori(s, inst):\n    s.rf[inst.rd] = inst.i_imm | s.rf[inst.rs2]\n    s.pc += 4", "buggy_source_code": "def execute_ori(s, inst):\n    s.rf[inst.rd] = inst.i_imm | s.rf[inst.rs1]\n    s.pc += 4", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_user(self, username):\n    return USER_DATA if username == 'bilbo' else None", "buggy_source_code": "def get_user(self, username):\n    return USER_DATA if username == LOGIN['username'] else None", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def check_user(self, username, password):\n    if username == 'bilbo':\n        if password == 'baggins':\n            return USER_DATA\n        raise IncorrectPasswordError()\n    raise InvalidUsername()", "buggy_source_code": "def check_user(self, username, password):\n    if username == LOGIN['username']:\n        if password == LOGIN['password']:\n            return USER_DATA\n        raise IncorrectPasswordError()\n    raise InvalidUsername()", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def long_description():\n    with open('README.md', 'r') as f:\n        return f.read()", "buggy_source_code": "def long_description():\n    with codecs.open('README.md', 'r') as f:\n        return f.read()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_get_args(self):\n    git.get_changed_files = MagicMock(return_value=['foo.mxd', 'bar.txt', 'baz.MXD'])\n    self.assertEqual(git.build_args(), '-i foo.mxd -i baz.MXD')", "buggy_source_code": "def test_get_args(self, get_changed_files_mock):\n    get_changed_files_mock.return_value = ['foo.mxd', 'bar.txt', 'baz.MXD']\n    self.assertEqual(git.build_args(), '-i foo.mxd -i baz.MXD')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_can_filter_mxds(self):\n    git.get_changed_files = MagicMock(return_value=['foo.mxd', 'bar.txt', 'baz.MXD'])\n    self.assertEqual(git.get_changed_mxds(), ['foo.mxd', 'baz.MXD'])", "buggy_source_code": "def test_can_filter_mxds(self, get_changed_files_mock):\n    get_changed_files_mock.return_value = ['foo.mxd', 'bar.txt', 'baz.MXD']\n    self.assertEqual(git.get_changed_mxds(), ['foo.mxd', 'baz.MXD'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def scriptpath(self, code):\n    if code == 'uk':\n        return ''\n    return super(Family, self).scriptpath(code)", "buggy_source_code": "def scriptpath(self, code):\n    if code == 'es':\n        return ''\n    return super(Family, self).scriptpath(code)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classproperty\ndef domains(cls):\n    return [cls.domain, 'worldofwarcraft.fandom.com', 'warcraft.wikia.com']", "buggy_source_code": "@classproperty\ndef domains(cls):\n    return [cls.domain, 'wow-es.gamepedia.com', 'worldofwarcraft.fandom.com', 'warcraft.fandom.com']", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def wrap(self, aW, aH):\n    return (self.imageWidth, self.imageHeight)", "buggy_source_code": "def wrap(self, aW, aH):\n    return (self.drawWidth, self.drawHeight)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, pins, open_times, close_times):\n    self.__curr_state = 'off'\n    self.pins = pins\n    self.open_times = open_times\n    self.close_times = close_times", "buggy_source_code": "def __init__(self, pins, open_times, close_times):\n    self.curr_state = 'off'\n    self.pins = pins\n    self.open_times = open_times\n    self.close_times = close_times", "edit_actions": ["update-node"]}
{"fixed_source_code": "def with_current_context(func):\n    span_impl_type = settings.tracing_implementation()\n    if span_impl_type is not None:\n        return func\n    return span_impl_type.with_current_context(func)", "buggy_source_code": "def with_current_context(func):\n    span_impl_type = settings.tracing_implementation()\n    if span_impl_type is None:\n        return func\n    return span_impl_type.with_current_context(func)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def get_running_loop() -> asyncio.AbstractEventLoop:\n    loop = asyncio.get_event_loop()\n    if not loop.is_running():\n        raise RuntimeError('The object should be created from async function')\n    return loop", "buggy_source_code": "def get_running_loop() -> asyncio.AbstractEventLoop:\n    loop = asyncio.get_event_loop()\n    if not loop.is_running():\n        raise RuntimeError('The object should be created within an async function')\n    return loop", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_set_ids(self):\n    for record in self.records.select(self.records.c.is_set == True).execute():\n        yield record.id", "buggy_source_code": "def _get_set_ids(self):\n    for record in self.records.select(self.records.c.is_set == True).execute():\n        yield record.name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Registration information for %s' % self.user", "buggy_source_code": "def __str__(self):\n    return 'Registration information for %s' % smart_unicode(self.user)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def create_preauthcode(self):\n    return self._post('/component/api_create_preauthcode', data={'component_appid': self.component_appid})", "buggy_source_code": "def create_preauthcode(self):\n    return self.post('/component/api_create_preauthcode', data={'component_appid': self.component_appid})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def query_auth(self, authorization_code):\n    return self._post('/component/api_query_auth', data={'component_appid': self.component_appid, 'authorization_code': authorization_code})", "buggy_source_code": "def query_auth(self, authorization_code):\n    return self.post('/component/api_query_auth', data={'component_appid': self.component_appid, 'authorization_code': authorization_code})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_authorizer_info(self, authorizer_appid):\n    return self._post('/component/api_get_authorizer_info', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid})", "buggy_source_code": "def get_authorizer_info(self, authorizer_appid):\n    return self.post('/component/api_get_authorizer_info', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_authorizer_option(self, authorizer_appid, option_name):\n    return self._post('/component/api_get_authorizer_option', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid, 'option_name': option_name})", "buggy_source_code": "def get_authorizer_option(self, authorizer_appid, option_name):\n    return self.post('/component/api_get_authorizer_option', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid, 'option_name': option_name})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def refresh_authorizer_token(self, authorizer_appid, authorizer_refresh_token):\n    return self._post('/component/api_authorizer_token', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid, 'authorizer_refresh_token': authorizer_refresh_token})", "buggy_source_code": "def refresh_authorizer_token(self, authorizer_appid, authorizer_refresh_token):\n    return self.post('/component/api_authorizer_token', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid, 'authorizer_refresh_token': authorizer_refresh_token})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_authorizer_option(self, authorizer_appid, option_name, option_value):\n    return self._post('/component/api_set_authorizer_option', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid, 'option_name': option_name, 'option_value': option_value})", "buggy_source_code": "def set_authorizer_option(self, authorizer_appid, option_name, option_value):\n    return self.post('/component/api_set_authorizer_option', data={'component_appid': self.component_appid, 'authorizer_appid': authorizer_appid, 'option_name': option_name, 'option_value': option_value})", "edit_actions": ["update-node"]}
{"fixed_source_code": "@manager.command\ndef runserver(host=HOST, port=PORT, debug=DEBUG):\n    app.run(host=host, port=port, debug=debug)", "buggy_source_code": "@manager.command\ndef runserver(host=HOST, port=PORT, debug=DEBUG):\n    app.run(host=host, port=int(port), debug=debug)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def close_keyword(self, line):\n    keyword = self.open_keywords.pop()\n    if keyword != InputFileReader.get_keyword(line):\n        raise DMRGException('Bad input file')", "buggy_source_code": "def close_keyword(self, keyword):\n    tmp = self.open_keywords.pop()\n    if keyword != tmp:\n        raise DMRGException('Bad input file')", "edit_actions": ["update-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef authorized_src_roles(self):\n    return RuntimeInstance.FEDERATION.authorized_dst_roles(self.name)", "buggy_source_code": "@property\ndef authorized_src_roles(self):\n    return RuntimeInstance.FEDERATION.authorized_src_roles(self.name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    super(ReviseDeliveryService, self).__init__()\n    self.revision_runner = RevisionRunnerService()", "buggy_source_code": "def __init__(self):\n    super(RevisionBatchService, self).__init__()\n    self.revision_runner = RevisionRunnerService()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testParseBadIdentifer(self):\n    self.CheckError('{int32Value: 1}', 'Failed to load JSON: Expecting property name enclosed in double quotes: line 1')\n    self.CheckError('{\"unknownName\": 1}', 'Message type \"proto3.TestMessage\" has no field named \"unknownName\".')", "buggy_source_code": "def testParseBadIdentifer(self):\n    self.CheckError('{int32Value: 1}', 'Failed to load JSON: Expecting property name( enclosed in double quotes)?: line 1')\n    self.CheckError('{\"unknownName\": 1}', 'Message type \"proto3.TestMessage\" has no field named \"unknownName\".')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _choose_image(self, *args):\n    if self.separator_image:\n        return self.separator_image\n    if self._main_above:\n        return 'navigationdrawer_gradient_rtol.png'\n    else:\n        return 'navigationdrawer_gradient_ltor.png'", "buggy_source_code": "def _choose_image(self, *args):\n    if self.separator_image:\n        return self.separator_image\n    if self._main_above:\n        return 'installfix_garden_navigationdrawer/navigationdrawer_gradient_rtol.png'\n    else:\n        return 'installfix_garden_navigationdrawer/navigationdrawer_gradient_ltor.png'", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def forward_expected(self, inputs):\n    (x,) = inputs\n    y = utils.force_array(x.clip(0, self.z))\n    return (y,)", "buggy_source_code": "def forward_expected(self, inputs):\n    (x,) = inputs\n    y = utils.force_array(x.clip(0, self.z), x.dtype)\n    return (y,)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getReactionRates(self):\n    return self.model.getNumReactions()", "buggy_source_code": "def getReactionRates(self):\n    return self.model.getReactionRates()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getNumEvents(self):\n    return self.model.getNumReactions()", "buggy_source_code": "def getNumEvents(self):\n    return self.model.getNumEvents()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getReactionIds(self):\n    return self.model.getNumReactions()", "buggy_source_code": "def getReactionIds(self):\n    return self.model.getReactionIds()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get(self, **kw):\n    assert len(kw) == 1, 'Only one criteria may be given.'\n    (field, value) = kw.items()[0]\n    return self.indices[field][value]", "buggy_source_code": "def get(self, **kw):\n    assert len(kw) == 1, 'Only one criteria may be given.'\n    (field, value) = kw.popitem()\n    return self.indices[field][value]", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def compute_score(self, entity):\n    return entity[__key__]", "buggy_source_code": "def compute_score(self, entity):\n    return entity[self.__key__]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def __init__(self, data_source):\n    self.data_source = data_source\n    __verify_sufficient_data__(data_source)", "buggy_source_code": "def __init__(self, data_source):\n    self.data_source = data_source\n    self.__verify_sufficient_data__(data_source)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'WorkflowTypeName': task.task_family, 'WorkflowTypeVersion': 'unspecified'}, 'metric': 'WorkflowsFailed', 'comparison': 'GreaterThanOrEqualToThreshold', 'threshold': self.min_failures}", "buggy_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'WorkflowTypeName': task.task_family, 'WorkflowTypeVersion': 'unspecified'}, 'metric': 'WorkflowsFailed', 'comparison': '>=', 'threshold': self.min_failures}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'ActivityTypeName': task.task_family, 'ActivityTypeVersion': 'unspecified'}, 'metric': 'ActivityTasksTimedOut', 'comparison': 'GreaterThanOrEqualToThreshold', 'threshold': self.min_timeouts}", "buggy_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'ActivityTypeName': task.task_family, 'ActivityTypeVersion': 'unspecified'}, 'metric': 'ActivityTasksTimedOut', 'comparison': '>=', 'threshold': self.min_timeouts}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'ActivityTypeName': task.task_family, 'ActivityTypeVersion': 'unspecified'}, 'metric': 'ActivityTasksFailed', 'comparison': 'GreaterThanOrEqualToThreshold', 'threshold': self.min_failures}", "buggy_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'ActivityTypeName': task.task_family, 'ActivityTypeVersion': 'unspecified'}, 'metric': 'ActivityTasksFailed', 'comparison': '>=', 'threshold': self.min_failures}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'WorkflowTypeName': task.task_family, 'WorkflowTypeVersion': 'unspecified'}, 'metric': 'WorkflowsTimedOut', 'comparison': 'GreaterThanOrEqualToThreshold', 'threshold': self.min_timeouts}", "buggy_source_code": "def alarm_params(self, task, domain):\n    return {'dimensions': {'Domain': domain, 'WorkflowTypeName': task.task_family, 'WorkflowTypeVersion': 'unspecified'}, 'metric': 'WorkflowsTimedOut', 'comparison': '>=', 'threshold': self.min_timeouts}", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef sensor_supports_humidity(self):\n    return self.is_sensor_present() and self.sensor_type.find('Humid') > -1", "buggy_source_code": "@property\ndef sensor_supports_humidity(self):\n    return self.is_sensor_present and self.sensor_type.find('Humid') > -1", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def CorrectWord(word):\n    s = word.title()\n    return urllib2.quote(s.encode('utf-8'))", "buggy_source_code": "def CorrectWord(word):\n    s = word.title()\n    return urllib.quote(s.encode('utf-8'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cancel(self, btn):\n    self.controller.cancel()", "buggy_source_code": "def cancel(self, btn=None):\n    self.controller.cancel()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def cancel(self, btn):\n    self.controller.default()", "buggy_source_code": "def cancel(self, btn=None):\n    self.controller.default()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def calc_staterror(self, data):\n    return _statfcts.calc_chi2gehrels_errors(data)", "buggy_source_code": "@staticmethod\ndef calc_staterror(data):\n    return _statfcts.calc_chi2gehrels_errors(data)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def calc_staterror(self, data):\n    return _statfcts.calc_chi2xspecvar_errors(data)", "buggy_source_code": "@staticmethod\ndef calc_staterror(data):\n    return _statfcts.calc_chi2xspecvar_errors(data)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def compare_path_file_name(file_path_a, file_path_b):\n    file_name_a = os.path.basename(file_path_a)\n    file_name_b = os.path.basename(file_path_b)\n    return cmp(file_name_a, file_name_b)", "buggy_source_code": "def compare_path_file_name(file_path_a, file_path_b):\n    file_name_a = os.path.basename(file_path_a)\n    file_name_b = os.path.basename(file_path_b)\n    return (file_name_a > file_name_b) - (file_name_a < file_name_b)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@collate(buildFeatureCounts, regex('feature_counts.dir/(.+)-(.+)-(.+)_vs_(.+).tsv.gz'), 'feature_counts.dir/\\\\1-\\\\2-feature_counts.tsv.gz')\ndef aggregatePlateFeatureCounts(infiles, outfile):\n    infiles = ' '.join(infiles)\n    statement = \"\\n    python %(cgat_scripts)s/combine_tables.py\\n    --columns=1\\n    --take=7\\n    --use-file-prefix\\n    --regex-filename='(.+)_vs.+.tsv.gz'\\n    --log=%(outfile)s.log\\n    %(infiles)s\\n    | sed 's/Geneid/gene_id/'\\n    | sed 's/\\\\-/\\\\./g'\\n    | tee %(outfile)s.table.tsv\\n    | gzip > %(outfile)s \"\n    P.run()", "buggy_source_code": "@collate(buildFeatureCounts, regex('feature_counts.dir/(.+)_(.+)_(.+)_vs_(.+).tsv.gz'), 'feature_counts.dir/\\\\1-\\\\2-feature_counts.tsv.gz')\ndef aggregatePlateFeatureCounts(infiles, outfile):\n    infiles = ' '.join(infiles)\n    statement = \"\\n    cgat combine_tables\\n    --columns=1\\n    --take=7\\n    --use-file-prefix\\n    --regex-filename='(.+)_vs.+.tsv.gz'\\n    --log=%(outfile)s.log\\n    %(infiles)s\\n    | sed 's/Geneid/gene_id/'\\n    | sed 's/\\\\-/\\\\./g'\\n    | tee %(outfile)s.table.tsv\\n    | gzip > %(outfile)s \"\n    P.run()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@follows(aggregatePlateFeatureCounts)\n@collate(buildFeatureCounts, regex('feature_counts.dir/(.+)-(.+)-(.+)_vs_(.+).tsv.gz'), 'feature_counts.dir/\\\\1-feature_counts.tsv.gz')\ndef aggregateAllFeatureCounts(infiles, outfile):\n    infiles = ' '.join(infiles)\n    statement = \"\\n    python %(cgat_scripts)s/combine_tables.py\\n    --columns=1\\n    --take=7\\n    --use-file-prefix\\n    --regex-filename='(.+)_vs.+.tsv.gz'\\n    --log=%(outfile)s.log\\n    %(infiles)s\\n    | sed 's/Geneid/gene_id/'\\n    | sed 's/\\\\-/\\\\./g'\\n    | tee %(outfile)s.table.tsv\\n    | gzip > %(outfile)s \"\n    P.run()", "buggy_source_code": "@follows(aggregatePlateFeatureCounts)\n@collate(buildFeatureCounts, regex('feature_counts.dir/(.+)_(.+)_(.+)_vs_(.+).tsv.gz'), 'feature_counts.dir/\\\\1-feature_counts.tsv.gz')\ndef aggregateAllFeatureCounts(infiles, outfile):\n    infiles = ' '.join(infiles)\n    statement = \"\\n    cgat combine_tables\\n    --columns=1\\n    --take=7\\n    --use-file-prefix\\n    --regex-filename='(.+)_vs.+.tsv.gz'\\n    --log=%(outfile)s.log\\n    %(infiles)s\\n    | sed 's/Geneid/gene_id/'\\n    | sed 's/\\\\-/\\\\./g'\\n    | tee %(outfile)s.table.tsv\\n    | gzip > %(outfile)s \"\n    P.run()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef by_id(cls, ident):\n    return dbsession.query(cls).filter_by(id=ident).first()", "buggy_source_code": "@classmethod\ndef by_id(cls, _id):\n    return dbsession.query(cls).filter_by(id=_id).first()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def repr_stream(self, stream_id):\n    s = repr(self.state.id2def[stream_id])\n    return s", "buggy_source_code": "def repr_stream(self, stream_id):\n    s = repr(self.state.stream_id_to_definition_mapping[stream_id])\n    return s", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef iter_substitutions(self):\n    return ds_mtb.dictionarize_attributes(self, 'iter_substitutions_')", "buggy_source_code": "@property\ndef iter_substitutions(self):\n    return dictionarize_attributes(self, 'iter_substitutions_')", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __len__(self):\n    return len(range(*self.__indices))", "buggy_source_code": "def __len__(self):\n    return len(range(*self.indices))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def svc(ir, instr, a):\n    e = [ExprAff(ExprId(exception_flags), ExprInt32(EXCEPT_PRIV_INSN))]\n    return (None, e)", "buggy_source_code": "def svc(ir, instr, a):\n    e = [ExprAff(exception_flags, ExprInt32(EXCEPT_PRIV_INSN))]\n    return (None, e)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def kafka_prefix(self):\n    return self._args.kafka_prefix", "buggy_source_code": "def kafka_prefix(self):\n    return self._args.cluster_id", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_create_msg_passing_options_overriding_default(self):\n    options = {'id': 1234}\n    message = ob.create_msg(options=options)\n    assert 'id' in message\n    assert message['id'] == 1234", "buggy_source_code": "def test_create_msg_passing_options_overriding_default(self):\n    options = {'id': 1234}\n    message = ob.create_msg(options=options)\n    assert 'id' in message\n    assert_equal(message['id'], 1234)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_offer_empty(self):\n    offer = ob.get_offer(1, 1)\n    assert offer is None, 'Expected None, got {}'.format(offer)", "buggy_source_code": "def test_get_offer_empty(self):\n    offer = ob.get_offer(1, 1)\n    assert_is_none(offer, None)", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_create_msg(self):\n    message = ob.create_msg()\n    assert type(message) == dict\n    assert message['id'] == public_id\n    assert message['message-id'] == 0", "buggy_source_code": "def test_create_msg(self):\n    message = ob.create_msg()\n    assert_equal(type(message), dict)\n    assert_equal(message['id'], public_id)\n    assert_equal(message['message-id'], 0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_asks_empty(self):\n    asks = ob.get_asks()\n    assert asks == []", "buggy_source_code": "def test_get_asks_empty(self):\n    asks = ob.get_asks()\n    assert_equal(asks, [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_create_greeting(self):\n    greeting = ob.create_greeting()\n    assert greeting['type'] == 'greeting'", "buggy_source_code": "def test_create_greeting(self):\n    greeting = ob.create_greeting()\n    assert_equal(greeting['type'], 'greeting')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_create_msg_passing_options(self):\n    options = {'hello': 'world'}\n    message = ob.create_msg(options=options)\n    assert 'hello' in message\n    assert message['hello'] == 'world'", "buggy_source_code": "def test_create_msg_passing_options(self):\n    options = {'hello': 'world'}\n    message = ob.create_msg(options=options)\n    assert 'hello' in message\n    assert_equal(message['hello'], 'world')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_create_greeting_response(self):\n    greeting_response = ob.create_greeting_response(['abcd', 'efgh'])\n    assert greeting_response['type'] == 'greeting_response'\n    assert greeting_response['peerlist'] == ['abcd', 'efgh']", "buggy_source_code": "def test_create_greeting_response(self):\n    greeting_response = ob.create_greeting_response(['abcd', 'efgh'])\n    assert_equal(greeting_response['type'], 'greeting_response')\n    assert_equal(greeting_response['peerlist'], ['abcd', 'efgh'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Collection(%r, %r)' % (self._database, str(self))", "buggy_source_code": "def __repr__(self):\n    return 'Collection(%s, %s)' % (self._database, self._collection_name)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def no_translate_debug_logs(logical_line, filename):\n    if _directory_to_check_translation(filename):\n        if logical_line.startswith('LOG.debug(_('):\n            yield (0, \"N319 Don't translate debug level logs\")", "buggy_source_code": "def no_translate_debug_logs(logical_line, filename):\n    if _directory_to_check_translation(filename):\n        for hint in _all_hints:\n            if logical_line.startswith('LOG.debug(%s(' % hint):\n                yield (0, \"N319 Don't translate debug level logs\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Empty'", "buggy_source_code": "def __str__(self):\n    return ''", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, input_win, relevant_win):\n    self._iwin = input_win\n    self._rwin = relevant_win\n    (self._rmaxx, self._rmaxy) = relevant_win.getmaxyx()", "buggy_source_code": "def __init__(self, input_win, relevant_win):\n    self._iwin = input_win\n    self._rwin = relevant_win\n    (self._rmaxy, self._rmaxx) = relevant_win.getmaxyx()", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def _apply_to_df(func, df, x_name, weights_name, *args, **kwargs):\n    return func(df[x_name], df[w_name], *args, **kwargs)", "buggy_source_code": "def _apply_to_df(func, df, x, weights, *args, **kwargs):\n    return func(df[x], df[weights], *args, **kwargs)", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def createSummary(self, cmd):\n    WarningCountingShellCommand.createSummary(self, cmd)\n    pass", "buggy_source_code": "def createSummary(self, log):\n    WarningCountingShellCommand.createSummary(self, log)", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'report_checkin')\n    cr.execute('\\n        CREATE OR REPLACE VIEW report_checkin AS (\\n        SELECT\\n        MIN(id) AS id,\\n        partner_id,\\n        partner_group,\\n        count(check_id) as quantity_checkin,\\n        count(membership_id) as quantity_members,\\n        membership_state,\\n        associate_member_id,\\n        membership_id,\\n        date_check_in,\\n        date_check_out\\n        FROM\\n        (SELECT\\n            MIN(p.id) AS id,\\n            p.id AS partner_id,\\n            p.partner_group AS partner_group,\\n            p.membership_state AS membership_state,\\n            p.associate_member AS associate_member_id,\\n            ml.membership_id AS membership_id,\\n            mc.id AS check_id,\\n            mc.date_check_in AS date_check_in,\\n            mc.date_check_out AS date_check_out\\n            FROM res_partner p\\n            LEFT JOIN membership_membership_line ml ON (ml.partner = p.id)\\n            LEFT JOIN members_checkin mc ON (mc.partner = p.id)\\n            GROUP BY\\n              p.id,\\n              p.user_id,\\n              p.membership_state,\\n              p.associate_member,\\n              p.membership_start,\\n              p.partner_group\\n              ml.membership_id,\\n              ml.state,\\n              ml.id,\\n              mc.id,\\n              mc.date_check_in,\\n              mc.date_check_out\\n        ) AS foo\\n        GROUP BY\\n            partner_id,\\n            partner_group,\\n            membership_id,\\n            membership_state,\\n            associate_member_id,\\n            check_id,\\n            date_check_in,\\n            date_check_out\\n        )')", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'report_checkin')\n    cr.execute('\\n        CREATE OR REPLACE VIEW report_checkin AS (\\n        SELECT\\n        MIN(id) AS id,\\n        partner_id,\\n        partner_group,\\n        count(check_id) as quantity_checkin,\\n        count(membership_id) as quantity_members,\\n        membership_state,\\n        associate_member_id,\\n        membership_id,\\n        date_check_in,\\n        date_check_out\\n        FROM\\n        (SELECT\\n            MIN(p.id) AS id,\\n            p.id AS partner_id,\\n            p.partner_group AS partner_group,\\n            p.membership_state AS membership_state,\\n            p.associate_member AS associate_member_id,\\n            ml.membership_id AS membership_id,\\n            mc.id AS check_id,\\n            mc.date_check_in AS date_check_in,\\n            mc.date_check_out AS date_check_out\\n            FROM res_partner p\\n            LEFT JOIN membership_membership_line ml ON (ml.partner = p.id)\\n            LEFT JOIN members_checkin mc ON (mc.partner = p.id)\\n            GROUP BY\\n              p.id,\\n              p.user_id,\\n              p.membership_state,\\n              p.associate_member,\\n              p.membership_start,\\n              p.partner_group,\\n              ml.membership_id,\\n              ml.state,\\n              ml.id,\\n              mc.id,\\n              mc.date_check_in,\\n              mc.date_check_out\\n        ) AS foo\\n        GROUP BY\\n            partner_id,\\n            partner_group,\\n            membership_id,\\n            membership_state,\\n            associate_member_id,\\n            check_id,\\n            date_check_in,\\n            date_check_out\\n        )')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def search(request, type_):\n    q = request.GET.get('q')\n    data = _query(q, type_, user=request.user)\n    return render(request, 'search/filtered.html', data)", "buggy_source_code": "def search(request, type_):\n    q = request.GET.get('q')\n    data = _query(q, type_, user=request.user)\n    return render(request, 'results.html', data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@APP.errorhandler(404)\ndef not_found(error):\n    return make_response(jsonify({'error': 'Not found'}), 404)", "buggy_source_code": "@APP.errorhandler(404)\ndef not_found(error):\n    return error_gen(404, 100, 'Requested page does not exist')", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test2(self):\n    textAccum1()", "buggy_source_code": "def test2(self):\n    textAccum2()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def readme():\n    with open('README.rst') as f:\n        return f.read()", "buggy_source_code": "def readme():\n    with open('README.md') as f:\n        return f.read()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_valid_contentlength(content_lenght):\n    if cl > 0 and cl < 1024 * 1024:\n        return True\n    return False", "buggy_source_code": "def is_valid_contentlength(self, content_lenght):\n    if content_lenght > 0 and content_lenght < 1024 * 1024:\n        return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def shortest_prefix(self, key):\n    for ret in self.prefixes(key):\n        return ret\n    return (None, None)", "buggy_source_code": "def shortest_prefix(self, key):\n    return next(self.prefixes(key), (None, None))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def error_404():\n    return '404'\n    response = flask.render_template('404.html')\n    response.status_code = 404\n    return response", "buggy_source_code": "@app.errorhandler(404)\ndef error_404(e):\n    response = flask.jsonify(error='invalid route', route=request.path)\n    response.status_code = 404\n    return response", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_script(self):\n    if self.style == PARENT_STYLE:\n        return False\n    else:\n        return self.style.get('position') is not None", "buggy_source_code": "def is_script(self):\n    if self.style != PARENT_STYLE and 'position' in self.style:\n        return self.style.position is not None\n    return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef reset_cache(cls):\n    for obj in [BaseRule, ExplicitTargetRule] + self.searchorder:\n        obj.reset_cache()", "buggy_source_code": "@classmethod\ndef reset_cache(cls):\n    for obj in [BaseRule, ExplicitTargetRule] + cls.searchorder:\n        obj.reset_cache()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def content(self, request, cxt):\n    if 'reload' not in request.args:\n        request.args['reload'] = ['0']\n    return ConsoleStatusResource.content(self, request, cxt)", "buggy_source_code": "def content(self, request, cxt):\n    if 'reload' not in request.args:\n        request.args['reload'] = ['0']\n    return console.ConsoleStatusResource.content(self, request, cxt)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test__load_board(self):\n    board = [\"'X', 'X'\", \"'O', 'O'\"]\n    self.assertEqual([['X', 'X'], ['O', 'O']], self.board._Board__load_board(board))", "buggy_source_code": "def test__load_board(self):\n    board = ['X,X', 'O,O']\n    self.assertEqual([['X', 'X'], ['O', 'O']], self.board._Board__load_board(board))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test__set_board_for_loaded_board(self):\n    loaded_board = [\"'X', 'O'\", \"'O', 'X'\"]\n    self.assertEqual([['X', 'O'], ['O', 'X']], self.board._Board__set_board(loaded_board))", "buggy_source_code": "def test__set_board_for_loaded_board(self):\n    loaded_board = ['X,O', 'O,X']\n    self.assertEqual([['X', 'O'], ['O', 'X']], self.board._Board__set_board(loaded_board))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test__is_possible_move_out_of_field_range(self):\n    self.assertFalse(self.board._Board__is_possible_move(3, 1, 1, 2))", "buggy_source_code": "def test__is_possible_move_out_of_field_range(self):\n    self.assertFalse(self.board._Board__is_possible_move(3, 0, 1, 3))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test__str__method(self):\n    self.assertEqual('    0  1  2  3 \\n' + '0   X  X  X  X \\n' + '1   _  _  _  _ \\n' + '2   _  _  _  _ \\n' + '3   O  O  O  O \\n', str(self.board))", "buggy_source_code": "def test__str__method(self):\n    output = '    0  1  2  3  \\n\\n' + '0   X  X  X  X \\n' + '1   _  _  _  _ \\n' + '2   _  _  _  _ \\n' + '3   O  O  O  O \\n'\n    self.assertEqual(output, str(self.board))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node"]}
{"fixed_source_code": "def writebr(text):\n    write(text + '\\\\n')", "buggy_source_code": "def writebr(text):\n    write(text + '\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fullDeviceNames(self):\n    pools = self.__getPools()\n    return json.dumps(Utils.getDeviceNames(pools))", "buggy_source_code": "def fullDeviceNames(self):\n    pools = self.__getPools()\n    return json.dumps(Utils.getFullDeviceNames(pools))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sequence_stopped(self):\n    self.stop()\n    level = 'defaultArnoldRenderOptions.progressive_initial_level'\n    cmds.setAttr(level, self.default_level)\n    cmds.progressBar(self.gMainProgressBar, edit=True, endProgress=True)", "buggy_source_code": "def sequence_stopped(self):\n    self.stop()\n    cmds.setAttr('defaultArnoldRenderOptions.progressive_rendering', self.defaultRefinement)\n    cmds.progressBar(self.gMainProgressBar, edit=True, endProgress=True)", "edit_actions": ["insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_index_non_indexable_model(self):\n    group = mommy.make(Group)\n    self.assertIsNone(index_instance('auth', 'Group', group.id))", "buggy_source_code": "def test_index_non_indexable_model(self):\n    job_title = mommy.make(JobTitle)\n    self.assertFalse(index_instance('users', 'JobTitle', job_title.id))", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def regex(self):\n    return '(?:in|over)? ?(?:the )?(this|last|past)? ?(\\\\d+)? ((?:to)?day|week|month|year)s?'", "buggy_source_code": "def regex(self):\n    return '(?:in|over)? ?(?:the )?(this|last|past)? ?(\\\\d+)? ?((?:to)?day|week|month|year)s?'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    config.Database().load('../mamba/test/application/config/database.json')\n    self.database = Database(self.get_pool(), True)", "buggy_source_code": "def setUp(self):\n    config.Database('../mamba/test/application/config/database.json')\n    config.Database().uri = 'sqlite:///db/dummy.db'\n    self.database = Database(self.get_pool(), True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node"]}
{"fixed_source_code": "def upload_callback(total_size, finished_size):\n    assert total_size > 0\n    sys.stdout.write('%2.4f%%\\r' % (finished_size * 100 / float(total_size)))\n    sys.stdout.flush()", "buggy_source_code": "def upload_callback(total_size, finished_size):\n    assert total_size > 0\n    sys.stdout.write('\\r%2.2f%%' % (finished_size * 100 / float(total_size)))\n    sys.stdout.flush()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def send_rest(self):\n    if len(self.data_buffer) > 0:\n        (data, self.data_buffer) = (self.data_buffer, [])\n        self.send_collected_data(data)", "buggy_source_code": "def send_rest(self):\n    data = self.yasm_receiver.get_buffered_data()\n    if len(data) > 0:\n        self.send_collected_data(data)", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def compile(self, csdl):\n    return self.request.post('compile', data=dict(csdl=csdl))", "buggy_source_code": "def compile(self, csdl):\n    return self.request.json('compile', data=dict(csdl=csdl))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate(self, csdl):\n    return self.request.post('validate', data=dict(csdl=csdl))", "buggy_source_code": "def validate(self, csdl):\n    return self.request.json('validate', data=dict(csdl=csdl))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.before_request\ndef before_request():\n    g.json_data = import_json()", "buggy_source_code": "@application.before_request\ndef before_request():\n    g.json_data = import_json()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('/')\ndef index():\n    return render_template('index.html', json=g.json_data, generated=time.strftime('%a, %d %b %Y %H:%M:%S PST'))", "buggy_source_code": "@application.route('/')\ndef index():\n    return render_template('index.html', json=g.json_data, generated=time.strftime('%a, %d %b %Y %H:%M:%S PST'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('/download/xml')\ndef download_xml():\n    response = make_response(json2xml(g.json_data))\n    response.headers['Content-Disposition'] = 'attachment; filename=resume.xml'\n    return response", "buggy_source_code": "@application.route('/download/xml')\ndef download_xml():\n    response = make_response(json2xml(g.json_data))\n    response.headers['Content-Disposition'] = 'attachment; filename=resume.xml'\n    return response", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('/xml')\ndef xml():\n    return render_template('xml.html', xml=json2xml(g.json_data), obj=g.json_data)", "buggy_source_code": "@application.route('/xml')\ndef xml():\n    return render_template('xml.html', xml=json2xml(g.json_data), obj=g.json_data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('/pdf')\ndef pdf():\n    html = render_template('pdf.html', json=g.json_data, generated=time.strftime('%a, %d %b %Y %H:%M:%S AEST'))\n    return render_pdf(HTML(string=html))", "buggy_source_code": "@application.route('/pdf')\ndef pdf():\n    html = render_template('pdf.html', json=g.json_data, generated=time.strftime('%a, %d %b %Y %H:%M:%S PST'))\n    return render_pdf(HTML(string=html))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _disable_linecache():\n    import linecache\n\n    def fake_getline(filename, lineno):\n        return ''\n    linecache.orig_getline = linecache.getline\n    linecache.getline = fake_getline", "buggy_source_code": "def _disable_linecache():\n    import linecache\n\n    def fake_getline(*args, **kwargs):\n        return ''\n    linecache.orig_getline = linecache.getline\n    linecache.getline = fake_getline", "edit_actions": ["insert-node", "update-node", "insert-node", "update-node"]}
{"fixed_source_code": "def _flip(array, axis):\n    indices = [slice(None)] * array.ndim\n    indices[axis] = slice(None, None, -1)\n    return array[indices]", "buggy_source_code": "def _flip(array, axis):\n    indices = [slice(None)] * array.ndim\n    indices[axis] = slice(None, None, -1)\n    return array[tuple(indices)]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def __len__(self):\n    return self._columns.values()[0].shape[0] if len(self._columns) else 0", "buggy_source_code": "def __len__(self):\n    return list(self._columns.values())[0].shape[0] if len(self._columns) else 0", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def _do_unload(self):\n    self.log.debug('Sound %s unloading from memory', self.name)\n    self.stop(0)\n    self.machine.sound_system.audio_interface.unload_sound_chunk(self._container)\n    del self._container", "buggy_source_code": "def _do_unload(self):\n    self.log.debug('Sound %s unloading from memory', self.name)\n    self.stop(0)\n    self.machine.sound_system.audio_interface.unload_sound_file_from_memory(self._container)\n    del self._container", "edit_actions": ["update-node"]}
{"fixed_source_code": "@flaky\ndef test_e2e(cloud_config):\n    output = create_cluster_and_submit_job.main(cloud_config.project, ZONE, CLUSTER_NAME, cloud_config.storage_bucket)\n    assert \"['Hello,', 'dog', 'elephant', 'panther', 'world!']\" in output", "buggy_source_code": "@flaky\ndef test_e2e(cloud_config):\n    output = create_cluster_and_submit_job.main(cloud_config.project, ZONE, CLUSTER_NAME, cloud_config.storage_bucket)\n    assert b\"['Hello,', 'dog', 'elephant', 'panther', 'world!']\" in output", "edit_actions": ["update-node"]}
{"fixed_source_code": "def usage():\n    print('Gallica.py -u <url> [-o <outputfile>]')", "buggy_source_code": "def usage():\n    print('Gallica_fetcher.py -u <url> [-o <outputfile>]')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_draw(self):\n    self.bg.on_draw()\n    super(PauseScene, self).on_draw()", "buggy_source_code": "def on_draw(self):\n    self.bg.visit()\n    super(PauseScene, self).on_draw()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def default_pause_scene():\n    return PauseScene(director.scene, ColorLayer(0.1, 0.1, 0.1, 0.8), PauseLayer())", "buggy_source_code": "def default_pause_scene():\n    return PauseScene(director.scene, ColorLayer(25, 25, 25, 205), PauseLayer())", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@command('w')\nasync def import_channel_backup(self, encrypted, wallet: Abstract_Wallet=None):\n    return wallet.lnworker.import_channel_backup(encrypted)", "buggy_source_code": "@command('w')\nasync def import_channel_backup(self, encrypted, wallet: Abstract_Wallet=None):\n    return wallet.lnbackups.import_channel_backup(encrypted)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def nrml_schema_file():\n    return os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', 'docs', 'schema', NRML_SCHEMA_FILE)", "buggy_source_code": "def nrml_schema_file():\n    return os.path.join(os.path.abspath(os.path.dirname(__file__)), 'openquake', 'nrml', 'schema', NRML_SCHEMA_FILE)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def parse_for_web(self):\n    list = []\n    for (alias, command) in self.data.items():\n        parse_command_for_web(alias, command, list)\n    return list", "buggy_source_code": "def parse_for_web(self):\n    command_list = []\n    for (alias, command) in self.data.items():\n        parse_command_for_web(alias, command, command_list)\n    return command_list", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def warn(self, message):\n    self.log(LOG_WARN, message)", "buggy_source_code": "def warn(self, message):\n    self.log(LOG_WARNING, message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error(self, message):\n    self.log(LOG_ERROR, message)", "buggy_source_code": "def error(self, message):\n    self.log(LOG_ERR, message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<{!s}: {!r}>'.format(self.__class__.__name__, self.body)", "buggy_source_code": "def __repr__(self):\n    return \"<{0}: '{1}'>\".format(self.__class__.__name__, self.body)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def release():\n    ret = _lib.switch_release()\n    if ret < 0:\n        raise Exception('switch release failed')", "buggy_source_code": "def release():\n    ret = _LIB.switch_release()\n    if ret < 0:\n        raise Exception('switch release failed')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def remove_callback(callback_id):\n    ret = _lib.switch_remove_callback(callback_id)\n    if ret < 0:\n        raise Exception('switch remove callback failed')\n    del callbacks[callback_id]", "buggy_source_code": "def remove_callback(callback_id):\n    ret = _LIB.switch_remove_callback(callback_id)\n    if ret < 0:\n        raise Exception('switch remove callback failed')\n    del _CALLBACKS[callback_id]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def init():\n    global callbacks\n    ret = _lib.switch_init()\n    if ret < 0:\n        raise Exception('switch init failed')\n    callbacks = {}", "buggy_source_code": "def init():\n    global _CALLBACKS\n    ret = _LIB.switch_init()\n    if ret < 0:\n        raise Exception('switch init failed')\n    _CALLBACKS = {}", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, meta):\n    super(GeoFeatureSerializerOptions, self).__init__(meta)\n    self.geo_field = getattr(meta, 'geo_field', None)", "buggy_source_code": "def __init__(self, meta):\n    super(GeoFeatureModelSerializerOptions, self).__init__(meta)\n    self.geo_field = getattr(meta, 'geo_field', None)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_fails_nonzero_with_bad_exec(both_debug_modes, both_setsid_modes):\n    proc = Popen(('dumb-init', '/doesnotexist'), stderr=PIPE)\n    proc.wait()\n    assert proc.returncode != 0\n    assert 'dumb-init: /doesnotexist: No such file or directory\\n' in proc.stderr", "buggy_source_code": "def test_fails_nonzero_with_bad_exec(both_debug_modes, both_setsid_modes):\n    proc = Popen(('dumb-init', '/doesnotexist'), stderr=PIPE)\n    proc.wait()\n    assert proc.returncode != 0\n    assert b'dumb-init: /doesnotexist: No such file or directory\\n' in proc.stderr", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_hgnc_from_rat(rgd_id):\n    if not rgd_id.startswith('RGD:'):\n        rgd_id = 'RGD:' + rgd_id\n    return rat_map.get(rgd_id)", "buggy_source_code": "def get_hgnc_from_rat(rgd_id):\n    if rgd_id.startswith('RGD:'):\n        rgd_id = rgd_id[4:]\n    return rat_map.get(rgd_id)", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cmd_line(self):\n    config_path = self._port.path_from_webkit_base('Tools', 'gtk', 'jhbuildrc')\n    return ['jhbuild', '-f', config_path, 'run'] + WebKitDriver.cmd_line(self)", "buggy_source_code": "def cmd_line(self):\n    wrapper_path = self._port.path_from_webkit_base('Tools', 'gtk', 'run-with-jhbuild')\n    return [wrapper_path] + WebKitDriver.cmd_line(self)", "edit_actions": ["update-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def Prepare(benchmark_spec):\n    vm = benchmark_spec.vms[0]\n    exec_path = fio.GetFioExec(vm)\n    return linux_fio.PrepareWithExec(benchmark_spec, exec_path)", "buggy_source_code": "def Prepare(benchmark_spec):\n    vm = benchmark_spec.vms[0]\n    exec_path = fio.GetFioExec(vm)\n    linux_fio.PrepareWithExec(benchmark_spec, exec_path)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def run(self):\n    for (directory, file_list) in self.files.items():\n        prt.print_files(ddirectory, file_list)", "buggy_source_code": "def run(self):\n    for (directory, file_list) in self.files.items():\n        prt.print_files(directory, file_list)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return static_data.TEXT_CLUB_ROW.format(self.club, self.tag, self.owner, self.region)", "buggy_source_code": "def __str__(self):\n    return static_data.TEXT_CLUB_ROW.format(self.club, self.tag, self.owner, self.permalink)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.mark.parametrize('name', ('foo', 'bar'))\ndef test_get_action_name(name):\n    assert swtask.get_action_name({'extra': {'action': {'name': name}}}) == name", "buggy_source_code": "@pytest.mark.parametrize('name', ('foo', 'bar'))\ndef test_get_action_name(name):\n    assert swtask.get_action_name({'payload': {'env': {'ACTION_CALLBACK': name}}}) == name", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def tearDown(self):\n    shutil.rmtree(SECRETS_PATH, ignore_errors=True)", "buggy_source_code": "def tearDown(self):\n    shutil.rmtree(REFS_PATH, ignore_errors=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def obj_amount(self):\n    return CleanDecimal(default=NotAvailable).filter(CleanBalance(str(Dict('montant/montant')(self)), Dict('montant/nb_dec')(self)))", "buggy_source_code": "def obj_amount(self):\n    return Eval(lambda x, y: x / 10 ** y, CleanDecimal(Dict('montant/montant')), CleanDecimal(Dict('montant/nb_dec')))(self)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def obj_amount(self):\n    return CleanDecimal(default=NotAvailable).filter(CleanBalance(str(Dict('montantMvmt/montant')(self)), Dict('montantMvmt/nb_dec')(self)))", "buggy_source_code": "def obj_amount(self):\n    return Eval(lambda x, y: x / 10 ** y, CleanDecimal(Dict('montantMvmt/montant')), CleanDecimal(Dict('montantMvmt/nb_dec')))(self)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def obj_coming(self):\n    return CleanDecimal(default=NotAvailable).filter(CleanBalance(str(Env('soldePrevisionnel')(self)), Env('decSoldePrevisionnel')(self)))", "buggy_source_code": "def obj_coming(self):\n    return Eval(lambda x, y: x / 10 ** y, CleanDecimal(Dict('soldePrevisionnel')), CleanDecimal(Dict('decSoldePrevisionnel')))(self)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def obj_balance(self):\n    return CleanDecimal(default=NotAvailable).filter(CleanBalance(str(Env('soldeComptable')(self)), Env('decSoldeComptable')(self)))", "buggy_source_code": "def obj_balance(self):\n    return Eval(lambda x, y: x / 10 ** y, CleanDecimal(Dict('soldeComptable')), CleanDecimal(Dict('decSoldeComptable')))(self)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _Downloaded(self):\n    installPath = self.GetInstallPath()\n    incfile = os.path.join(installPath, 'include', 'SFML', 'System.hpp')\n    return os.path.isfile(incfile)", "buggy_source_code": "def _Downloaded(self):\n    tarball = os.path.join(PackageUtil.kCachePath, self._TarName)\n    return os.path.isfile(tarball)", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_graphics_path_builder(config, graphics, version=None):\n    selected_version = version and version or graphics.version\n    if graphics.name == 'cocos':\n        return CocosPathBuilder(config, version)\n    return None", "buggy_source_code": "def get_graphics_path_builder(config, graphics, version=None):\n    selected_version = version and version or graphics.version\n    if graphics.name == 'cocos':\n        return CocosPathBuilder(config, selected_version)\n    return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, config, version):\n    self.name = 'Cocos'\n    self.config = config\n    self.version = version", "buggy_source_code": "def __init__(self, config, version):\n    self.name = 'Cocos2d-x'\n    self.config = config\n    self.version = version", "edit_actions": ["update-node"]}
{"fixed_source_code": "def info(self):\n    return [r.decode('latin1') for r in self.send_request(['CONTROL', 'info'], timeout=10000)]", "buggy_source_code": "def info(self):\n    return [r.decode('latin1') for r in self.send_request(['CONTROL', 'info'], timeout=2000)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def apply(self, U, mu={}):\n    return matrix(mu).dot(U)", "buggy_source_code": "def apply(self, U, mu={}):\n    return self.matrix(mu).dot(U)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _is_within_tuple(self, tup, timestep):\n    return tup[0] <= timestep <= tup[1]", "buggy_source_code": "def _is_within_tuple(self, tup, timestep):\n    return tup[0] <= timestep < tup[1]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_unicode_warning(self):\n    import run_update\n    import warnings\n    warnings.filterwarnings('error')\n    self.setup_mock_rss_response()\n    with HTTMock(self.response_content):\n        run_update.main(org_sources='test_org_sources.csv')", "buggy_source_code": "def test_unicode_warning(self):\n    self.setup_mock_rss_response()\n    import run_update\n    import warnings\n    warnings.filterwarnings('error')\n    with HTTMock(self.response_content):\n        run_update.main(org_sources='test_org_sources.csv')", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def test_hdf5(self):\n    try:\n        self.train.main_loop()\n    except ValueError as e:\n        msg = str(e) + '\\nMake sure that the model and dataset have been initialized with correct values. Both are definedin datasets/tests/test_hdf5.py'\n        raise ValueError(msg)", "buggy_source_code": "def test_hdf5(self):\n    try:\n        self.train.main_loop()\n    except ValueError as e:\n        msg = str(e) + '\\nMake sure that the model and dataset have been initialized with correct values. Both are defined in datasets/tests/test_hdf5.py'\n        raise ValueError(msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_report_content(self, ids, name, value):\n    self.write(ids, {'%s_data' % name: value})", "buggy_source_code": "def set_report_content(self, ids, name, value):\n    self.write(ids, {'%s_custom' % name: value})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def evaluate(self, u, v):\n    point_on_curve = self.curve.evaluate(u)\n    dv = point_on_curve - self.point\n    return rotate_vector_around_vector_np(dv, self.direction, v)", "buggy_source_code": "def evaluate(self, u, v):\n    point_on_curve = self.curve.evaluate(u)\n    dv = point_on_curve - self.point\n    return np.array(rotate_vector_around_vector(dv, self.direction, v))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def run(self):\n    import Cython\n    from Cython.Build import cythonize\n    cythonize(define_extensions('.pyx'))", "buggy_source_code": "def run(self):\n    import Cython\n    from Cython.Build import cythonize\n    cythonize(define_extensions())", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def handleTODO(self, content):\n    content = content.replace('!todo ', '')\n    return '<font class=\"todo\">TODO: ' + content + '</font>'", "buggy_source_code": "def handleTODO(self, content):\n    content = content.replace('!todo ', '')\n    return '<font class=\"todo dontprint\">TODO: ' + content + '</font>'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _tokens_db(self):\n    dbname = self._tokens_dbname()\n    with self._server as server:\n        db = server[dbname]\n    return db", "buggy_source_code": "def _tokens_db(self):\n    dbname = self._tokens_dbname()\n    with self._get_server() as server:\n        db = server[dbname]\n    return db", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def __init__(self, json_hash):\n    assert 'time' in json_hash\n    self.time = json_hash['time']\n    super(WaitTime, self).__init__(json_hash)", "buggy_source_code": "def __init__(self, json_hash):\n    assert 'wait_time' in json_hash\n    self.wait_time = json_hash['wait_time']\n    super(WaitTime, self).__init__(json_hash)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def proceed(self, simulation):\n    log.info('WaitTime: pausing simulation for %f seconds' % self.time)\n    time.sleep(self.time)\n    return True", "buggy_source_code": "def proceed(self, simulation):\n    log.info('WaitTime: pausing simulation for %f seconds' % self.wait_time)\n    time.sleep(self.wait_time)\n    return True", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_where_invalid_key(self):\n    payload = PayloadBuilder().WHERE(['bla', '=', 'invalid']).payload()\n    result = store.query_tbl_with_payload('statistics', payload)\n    assert 'ERROR' in result['message']", "buggy_source_code": "def test_where_invalid_key(self):\n    payload = PayloadBuilder().WHERE(['bla', '=', 'invalid']).payload()\n    result = storage_client.query_tbl_with_payload('statistics', payload)\n    assert 'ERROR' in result['message']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getGender(self):\n    return self.gender.rstrip()", "buggy_source_code": "def getGender(self):\n    return self._convert_string(self.gender.rstrip())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def convert_to_Python(command):\n    return functions_regexp.sub('finfuns.\\\\1(variables, ', variables_regexp.sub(\"\\\\1variables['\\\\2']\\\\3\", command))", "buggy_source_code": "def convert_to_Python(command):\n    return functions_regexp.sub('finfuns.\\\\1(variables, ', variables_regexp.sub(\"\\\\1variables['\\\\2']\", command))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_bond_without_slaves(self):\n    with bond_device() as bond:\n        assert not iface(bond.master).is_up()", "buggy_source_code": "def test_bond_without_slaves(self, bond0):\n    assert not iface(bond0.master).is_up()", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_users_json(self):\n    res = self.testapp.get('/users.json', status=200)\n    self.assertEqual(len(res.json), 5)", "buggy_source_code": "def test_users_json(self):\n    res = self.testapp.get('/users.json', status=200)\n    self.assertEqual(len(res.json), 6)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef source_text(self):\n    if hasattr(self.source, 'text'):\n        return self.source_haiku.text\n    else:\n        return None", "buggy_source_code": "@property\ndef source_text(self):\n    if hasattr(self.source, 'text'):\n        return self.source.text\n    else:\n        return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def LLVM_BUILD_DIRS():\n    return {'Debug': 'Ninja-RelWithDebInfoAssert' + build_dir_asan_suffix(), 'DebugClang': 'Ninja-DebugAssert' + build_dir_asan_suffix(), 'Release': 'Ninja-RelWithDebInfoAssert' + build_dir_asan_suffix()}", "buggy_source_code": "def LLVM_BUILD_DIRS():\n    return {'Debug': 'Ninja-RelWithDebInfoAssert' + build_dir_san_suffix(), 'DebugClang': 'Ninja-DebugAssert' + build_dir_san_suffix(), 'Release': 'Ninja-RelWithDebInfoAssert' + build_dir_san_suffix()}", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def validate(self, value, path):\n    super(Object, self).validate(value, path)\n    self._mapping.validate(value, path)", "buggy_source_code": "def validate(self, value, path):\n    super(Object, self).validate(value, path)\n    self._mapping.validate(value, path=path)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, msg):\n    self.message = 'Urecoverable error at %s: %s' % (name, msg)", "buggy_source_code": "def __init__(self, name, msg):\n    self.message = 'Unrecoverable error at %s: %s' % (name, msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return self.user", "buggy_source_code": "def __str__(self):\n    return self.first_name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_user_details(self, response):\n    return {'username': response.get('login'), 'email': response.get('email') or '', 'first_name': response.get('name')}", "buggy_source_code": "def get_user_details(self, response):\n    return {'username': response.get('login'), 'email': response.get('email') or '', 'first_name': response.get('name') or ''}", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __copy__(self):\n    return self.__deepcopy__()", "buggy_source_code": "def __copy__(self):\n    return self.__deepcopy__(None)", "edit_actions": []}
{"fixed_source_code": "def __str__(self):\n    return '\\n'.join(['result: %s' % repr(self.result), 'countGuestPassesToGive: %d' % self.countGuestPassesToGive, 'countGuestPassesToRedeem: %d' % self.countGuestPassesToRedeem])", "buggy_source_code": "def __str__(self):\n    return '\\n'.join(['eresult: %s' % repr(self.eresult), 'countGuestPassesToGive: %d' % self.countGuestPassesToGive, 'countGuestPassesToRedeem: %d' % self.countGuestPassesToRedeem])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def load(self, data):\n    (result, self.countGuestPassesToGive, self.countGuestPassesToRedeem) = struct.unpack_from('<III', data)\n    self.result = EResult(result)", "buggy_source_code": "def load(self, data):\n    (eresult, self.countGuestPassesToGive, self.countGuestPassesToRedeem) = struct.unpack_from('<III', data)\n    self.eresult = EResult(eresult)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@property\ndef tl(self):\n    return (self.l, self.t)", "buggy_source_code": "@property\ndef tl(self):\n    return (self.left, self.t)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef lr(self):\n    return (self.l + self.w, self.t + self.h)", "buggy_source_code": "@property\ndef lr(self):\n    return (self.left + self.w, self.t + self.h)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, stream, field, endl='\\n'):\n    super(FixedWidthWriter, self).__init__(stream, field, '', endl)\n    return", "buggy_source_code": "def __init__(self, stream, fields, endl='\\n'):\n    super(FixedWidthWriter, self).__init__(stream, fields, '', endl)\n    return", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, require_tld=True, message=None):\n    tld_part = require_tld and '\\\\.[a-z]{2,10}' or ''\n    regex = '^([a-z]+://){0,1}?([^/:]+%s|([0-9]{1,3}\\\\.){3}[0-9]{1,3})(:[0-9]+)?(\\\\/.*)?$' % tld_part\n    super(URLOptionalScheme, self).__init__(regex, re.IGNORECASE, message)", "buggy_source_code": "def __init__(self, require_tld=True, message=None):\n    tld_part = require_tld and '\\\\.[a-z]{2,63}' or ''\n    regex = '^([a-z]+://){0,1}?([^/:]+%s|([0-9]{1,3}\\\\.){3}[0-9]{1,3})(:[0-9]+)?(\\\\/.*)?$' % tld_part\n    super(URLOptionalScheme, self).__init__(regex, re.IGNORECASE, message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def print_status(self, status, path):\n    logger.info('%1s %s', status, remove_surrogates(path))", "buggy_source_code": "def print_status(self, status, path):\n    logger.debug('%1s %s', status, remove_surrogates(path))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def change_view(self, *l):\n    self.sm.current = 'test2' if self.sm.current == 'test1' else 'test1'", "buggy_source_code": "def change_view(self, *l):\n    self.sm.current = self.sm.next()", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_scene(self, label):\n    return self._scenes[label]", "buggy_source_code": "def get_scene(self, label):\n    return self._get_resource(label, self._scenes, 'scene')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_posix_args(rawargs):\n    lexer = shlex.shlex(' '.join(rawargs), posix=True)\n    lexer.commenters = ''\n    lexer.wordchars += '!@#$%^&*():/.<>?[]-,'\n    posix_args = list(lexer)\n    return posix_args", "buggy_source_code": "def get_posix_args(rawargs):\n    lexer = shlex.shlex(' '.join(rawargs), posix=True)\n    lexer.commenters = ''\n    lexer.wordchars += '!@#$%^&*():/.<>?[]-,='\n    posix_args = list(lexer)\n    return posix_args", "edit_actions": ["update-node"]}
{"fixed_source_code": "def nu_b(B, q=e, m=m_e):\n    return q * B / (2.0 * math.pi * m * c)", "buggy_source_code": "def nu_b(B, q=q_e, m=m_e):\n    return q * B / (2.0 * math.pi * m * c)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def nu_plasma(n, q=e, m=m_e):\n    return math.sqrt(n * q ** 2.0 / (math.pi * m))", "buggy_source_code": "def nu_plasma(n, q=q_e, m=m_e):\n    return math.sqrt(n * q ** 2.0 / (math.pi * m))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_option(self):\n    self.assertEqual(len(self.command.options), 1)\n    self.assertEqual('--type', self.command.options[0].name)", "buggy_source_code": "def test_option(self):\n    self.assertEqual(len(self.command.options), 2)\n    self.assertEqual('--type', self.command.options[0].name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _validate_configuration(self):\n    logging.debug('Validating configuration')\n    self._validate_setting_existence_and_type()\n    self._validate_values()", "buggy_source_code": "def _validate_configuration(self):\n    logging.debug('Validating configuration')\n    self._validate_settings_exist_type()\n    self._validate_values()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef supported_privileges(self):\n    return self.privilege_to_response_function().keys()", "buggy_source_code": "@classmethod\ndef supported_privileges(cls):\n    return cls.privilege_to_response_function().keys()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_submit_obj(ctx):\n    study = Study('test_alias', 1, 'Short study name', 'Study title', 'Study abstract', None, [], [], None)\n    submit_obj(ctx, study, 'study')", "buggy_source_code": "def test_submit_obj(ctx):\n    study = Study('test_alias', 1, 'Short study name', 'Study title', 'Study abstract', None, [], [], None)\n    object_submission(ctx, study, 'study')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def server_static(self, filepath):\n    return static_file(filepath, root='./static')", "buggy_source_code": "def server_static(self, filepath):\n    return static_file(filepath, root=self.www_path + '/static')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_expected_properties(self):\n    expected_properties = set(['x', 'y', 'angle'])\n    actual_properties = get_prop_set(type(self.test_imageuri))\n    self.assertTrue(expected_properties.issubset(actual_properties))", "buggy_source_code": "def test_expected_properties(self):\n    expected_properties = set(['url', 'x', 'y', 'angle'])\n    actual_properties = get_prop_set(type(self.test_image_url))\n    self.assertTrue(expected_properties.issubset(actual_properties))", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def setUp(self):\n    from bokeh.glyphs import ImageURL\n    self.test_imageuri = ImageURL()", "buggy_source_code": "def setUp(self):\n    from bokeh.glyphs import ImageURL\n    self.test_image_url = ImageURL()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, value=None, left=None, right=None):\n    self.value = value\n    self.left = left\n    self.right = right", "buggy_source_code": "def __init__(self, value, left=None, right=None):\n    self.value = value\n    self.left = left\n    self.right = right", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def visitedNodes(self):\n    return self.lastSearchDepth", "buggy_source_code": "def visitedNodes(self):\n    return self.lastDepth", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_song_number(text):\n    res = re.search('^([ 0-9]+)', text).group()\n    if res:\n        return int(res)", "buggy_source_code": "def get_song_number(text):\n    res = re.search('^([0-9]+)', text)\n    if res:\n        return int(res.group())", "edit_actions": ["update-node", "insert-node", "move-tree", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_contains_my_manga(self):\n    my_anime = list(self.animes)[0]\n    self.assertIn(my_anime, self.animes)", "buggy_source_code": "def test_contains_my_manga(self):\n    my_anime = MyAnime.MyAnime(ANIME_ID, 0, self.account)\n    self.assertIn(my_anime, self.animes)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __get_session(self):\n    session = self.local.__dict__.get('session')\n    if not session:\n        session = requests.session()\n        self.local.session = session\n    return session", "buggy_source_code": "def __get_session(self):\n    session = self.local.__dict__.get('session')\n    if not session:\n        session = self.__create_session()\n        self.local.session = session\n    return session", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef poll(cls, context):\n    return bpy.types.Scene.tachy.connected and len(context.scene.tachy.stationPoint) > 1", "buggy_source_code": "@classmethod\ndef poll(cls, context):\n    return bpy.types.Scene.tachy.connected and len(context.scene.tachy.stationPoint) > 2", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    str = 'Translated Model File: ' + self.py_model_file\n    if hasattr(self, 'mdl_file'):\n        str += '\\n Original Model File: ' + self.mdl_file\n    return str", "buggy_source_code": "def __str__(self):\n    string = 'Translated Model File: ' + self.py_model_file\n    if hasattr(self, 'mdl_file'):\n        string += '\\n Original Model File: ' + self.mdl_file\n    return string", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef match_header(cls, header):\n    card = header.cards[0]\n    return card.keyword == 'SIMPLE' and ('GROUPS' not in header or not header['GROUPS']) and card.value", "buggy_source_code": "@classmethod\ndef match_header(cls, header):\n    card = header.cards[0]\n    return card.keyword == 'SIMPLE' and ('GROUPS' not in header or header['GROUPS'] != True) and card.value", "edit_actions": ["insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "@pytest.mark.network\ndef test_search(script):\n    output = script.pip('search', 'pip')\n    assert 'A tool for installing and managing Python packages' in output.stdout", "buggy_source_code": "@pytest.mark.network\ndef test_search(script):\n    output = script.pip('search', 'pip')\n    assert 'The PyPA recommended tool for installing Python packages.' in output.stdout", "edit_actions": ["update-node"]}
{"fixed_source_code": "def exclude_orgs_from_template(orgs):\n    orgs = [org for org in orgs if not is_excluded(org['display_name'])]\n    return orgs", "buggy_source_code": "def exclude_orgs_from_template(orgs):\n    orgs = [org for org in orgs if not is_excluded(org['name'])]\n    return orgs", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _put_number8(self, nr):\n    d = struct.pack('Q', nr)\n    self.struct_data += d", "buggy_source_code": "def _put_number8(self, nr):\n    d = struct.pack('>Q', nr)\n    self.struct_data += d", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_number1(self):\n    num = struct.unpack_from('b', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('b')\n    return num[0]", "buggy_source_code": "def _get_number1(self):\n    num = struct.unpack_from('>b', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('>b')\n    return num[0]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _put_number2(self, nr):\n    d = struct.pack('H', nr)\n    self.struct_data += d", "buggy_source_code": "def _put_number2(self, nr):\n    d = struct.pack('>H', nr)\n    self.struct_data += d", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_number4(self):\n    num = struct.unpack_from('I', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('I')\n    return num[0]", "buggy_source_code": "def _get_number4(self):\n    num = struct.unpack_from('>I', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('>I')\n    return num[0]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _put_number4(self, nr):\n    d = struct.pack('I', nr)\n    self.struct_data += d", "buggy_source_code": "def _put_number4(self, nr):\n    d = struct.pack('>I', nr)\n    self.struct_data += d", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_number2(self):\n    num = struct.unpack_from('H', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('H')\n    return num[0]", "buggy_source_code": "def _get_number2(self):\n    num = struct.unpack_from('>H', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('>H')\n    return num[0]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _get_number8(self):\n    num = struct.unpack_from('Q', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('Q')\n    return num[0]", "buggy_source_code": "def _get_number8(self):\n    num = struct.unpack_from('>Q', self.struct_data, offset=self._needle)\n    self._needle += struct.calcsize('>Q')\n    return num[0]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _put_number1(self, nr):\n    d = struct.pack('b', nr)\n    self.struct_data += d", "buggy_source_code": "def _put_number1(self, nr):\n    d = struct.pack('>b', nr)\n    self.struct_data += d", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_create_interface_pattern(self):\n    obj = ztpserver.topology.InterfacePattern('Ethernet', 'any', 'any')\n    reprobj = 'InterfacePattern(interface=Ethernet, node=any, port=any)'\n    self.assertEqual(repr(obj), reprobj)", "buggy_source_code": "def test_create_interface_pattern(self):\n    obj = ztpserver.topology.InterfacePattern('Ethernet', 'any', 'any')\n    reprobj = 'InterfacePattern(interface=Ethernet, device=any, port=any)'\n    self.assertEqual(repr(obj), reprobj)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_verbose_3(self):\n    self.assertIs(None, main(['-v', '-v', '-v']))", "buggy_source_code": "def test_verbose_3(self):\n    self.assertIs(0, main(['-v', '-v', '-v']))", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def __str__(self):\n    return '%s - %s (%s)' % (self.client, self.user.email, self.expires_at)", "buggy_source_code": "def __str__(self):\n    return u'%s - %s (%s)'.format(self.client, self.user.email, self.expires_at)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def write_header_includes(f, skel):\n    f.write('#include <Python.h>\\n#include \"%s.h\"\\n\\n' % skel.name)", "buggy_source_code": "def write_header_includes(f, skel):\n    f.write('#include <Python.h>\\n#include <structmember.h>\\n#include \"%s.h\"\\n\\n' % skel.name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_sort_order():\n    return {'embedded.date_created': {'order': 'desc', 'ignore_unmapped': True}}", "buggy_source_code": "def get_sort_order():\n    return {'embedded.dateTime': {'order': 'desc', 'ignore_unmapped': True}}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def playraw(self, audio):\n    try:\n        play(np.tile(audio, (2, 1)) * 0.6)\n    except KeyboardInterrupt:\n        pass", "buggy_source_code": "def playraw(self, audio):\n    try:\n        play(np.tile(audio, (2, 1)) * 0.2)\n    except KeyboardInterrupt:\n        pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "def api_call(self, method, **kwargs):\n    reply = self.api_requester.do(self.token, method, kwargs)\n    return reply.read()", "buggy_source_code": "def api_call(self, method, **kwargs):\n    reply = self.api_requester.do(self.token, method, **kwargs)\n    return reply.read()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def isCoinbase(self):\n    return len(self.inputs) == 1 and self.inputs[0][1] == 4294967295 and (self.input[0][0] == _nullprev)", "buggy_source_code": "def isCoinbase(self):\n    return len(self.inputs) == 1 and self.inputs[0][1] == 4294967295 and (self.inputs[0][0] == _nullprev)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def play(self, music_sheet, baton):\n    self.music_sheet = music_sheet\n    self.instrument.tune(baton, self)\n    self.instrument.start()", "buggy_source_code": "def play(self, player_checkpoints, baton):\n    self.music_sheet = player_checkpoints\n    self.instrument.tune(baton, player_checkpoints)\n    self.instrument.start()", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def format_also_in(self, parents, language):\n    return ' (also in: {})'.format(', '.join(sorted(parents)))", "buggy_source_code": "def format_also_in(self, parents, language):\n    return ' (also in {})'.format(', '.join(sorted(parents)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_image(self, url):\n    return re.match('\\\\.jpg$|\\\\.png$|\\\\.ico$|\\\\.gif$|\\\\.tiff$|\\\\.jpeg$|\\\\.bmp$|\\\\.svg$|\\\\.tga$', url, re.IGNORECASE)", "buggy_source_code": "def is_image(self, url):\n    return re.match('\\\\.jpg|\\\\.png|\\\\.ico|\\\\.gif|\\\\.tiff|\\\\.jpeg|\\\\.bmp|\\\\.svg|\\\\.tga：', url, re.IGNORECASE)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_latest_unit_cost(self, technology, priority_area):\n    technology_access = models.FacilityAccess.objects.filter(priority_area=priority_area, technology=technology).order_by('-year__end_year', '-year__end_year').first()\n    return technology_access.unit_cost", "buggy_source_code": "def get_latest_unit_cost(self, technology, priority_area):\n    technology_access = models.FacilityAccess.objects.filter(priority_area=priority_area, technology=technology).order_by('-year__end_year', '-year__start_year').first()\n    return technology_access.unit_cost", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_latest_government_contribution(self, technology, priority_area):\n    technology_access = models.FacilityAccess.objects.filter(priority_area=priority_area, technology=technology).order_by('-year__end_year', '-year__end_year').first()\n    return technology_access.government_contribution", "buggy_source_code": "def get_latest_government_contribution(self, technology, priority_area):\n    technology_access = models.FacilityAccess.objects.filter(priority_area=priority_area, technology=technology).order_by('-year__end_year', '-year__start_year').first()\n    return technology_access.government_contribution", "edit_actions": ["update-node"]}
{"fixed_source_code": "def toVariant(value):\n    if vartype(value) != 'QUrl' and value.find('://') > 0:\n        value = QUrl(value)\n    return Nepomuk.Variant(value)", "buggy_source_code": "def toVariant(value):\n    if vartype(value) != 'QUrl' and toUnicode(value).find('://') > 0:\n        value = QUrl(value)\n    return Nepomuk.Variant(value)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def to_iri(self):\n    return IRI(wkz_urls.uri_to_iri(self))", "buggy_source_code": "def to_iri(self):\n    return IRI(urls.uri_to_iri(self))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def to_uri(self):\n    return URI(wkz_urls.iri_to_uri(self), encoding='idna')", "buggy_source_code": "def to_uri(self):\n    return URI(urls.iri_to_uri(self), encoding='idna')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_guess_pattern():\n    brute_force.guess_pattern()\n    assert len(brute_force.guessed) != 0\n    assert isinstance(brute_force.guessed, list)\n    assert isinstance(brute_force.guessed[0], tuple)", "buggy_source_code": "def test_guess_pattern():\n    brute_force.guess_pattern()\n    assert len(brute_force.guessed) != 0\n    assert isinstance(brute_force.guessed, list)\n    assert isinstance(brute_force.guessed[0], list)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_nologin():\n    eso = Eso()\n    with pytest.raises(ValueError) as exc:\n        eso.data_retrieval('AMBER.2006-03-14T07:40:19.830')\n    assert exc.value.args[0] == 'Not logged in.  You must be logged in to download data.'", "buggy_source_code": "def test_nologin(self):\n    eso = Eso()\n    with pytest.raises(LoginError) as exc:\n        eso.data_retrieval('AMBER.2006-03-14T07:40:19.830')\n    assert exc.value.args[0] == 'Not logged in.  You must be logged in to download data.'", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __contains__(self, key):\n    return not self.dryrun and int(key) in self.get_data()", "buggy_source_code": "def __contains__(self, key):\n    return not self.dryrun and str(key) in self.get_data()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_template_path(self, template_path):\n    LOGGER.debug(\"Adding template path: '%s'\", template_path)\n    self.template_mananger.add_template_path(template_path)", "buggy_source_code": "def add_template_path(self, template_path):\n    LOGGER.debug(\"Adding template path: '%s'\", template_path)\n    self.template_manager.add_template_path(template_path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def evaluator(feature_file):\n    (X, Y) = load_data(feature_file)\n    evalator = NetEvaluator(X, Y)\n    evalator.baseline_svm()\n    evalator.cross_validation(FC4Net.build_model)", "buggy_source_code": "def evaluator(feature_file):\n    (X, Y) = load_data(feature_file)\n    evaluator = NetEvaluator(X, Y)\n    evaluator.baseline_svm()\n    evaluator.cross_validation(FC4Net.build_model)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def set_key(self, servicename, key, value, **kwargs):\n    self._set_password(servicename, key, value, **kwargs)", "buggy_source_code": "def set_key(self, servicename, key, value, **kwargs):\n    self._set_key(servicename, key, value, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_key(self, servicename, key, **kwargs):\n    return self._get_password(servicename, username)", "buggy_source_code": "def get_key(self, servicename, key, **kwargs):\n    return self._get_key(servicename, key)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def sign(self, *args):\n    tx_hash = self.hash()\n    for kp in args:\n        sig = kp.signDecorated(tx_hash)\n        self.signatures.append(sig)", "buggy_source_code": "def sign(self, *args):\n    tx_hash = self.hash()\n    for kp in args:\n        sig = kp.sign_decorated(tx_hash)\n        self.signatures.append(sig)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def make_url(r, path):\n    url = urlparse.urlparser(r.url)\n    host = urlparse.urlunparse(url[0:2])\n    return urlparse.urljoin(host, path)", "buggy_source_code": "def make_url(r, path):\n    url = urlparse.urlsplit(r.url)\n    url = url._replace(path=path)\n    return urlparse.urlunsplit(url)", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "move-tree", "update-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, username, password):\n    self.username = username\n    self.password = password\n    self.access_token = None\n    self.exchange_token = None", "buggy_source_code": "def __init__(self, username, password):\n    self.username = username\n    self.password = password\n    self.access_token = None\n    self.refresh_token = None", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture\ndef gcm_fixture():\n\n    class GCMMock:\n\n        def json_request(self, reg_ids, notification_data):\n            return {}\n    return GCMMock()", "buggy_source_code": "@pytest.fixture\ndef gcm_fixture():\n\n    class GCMMock:\n\n        def json_request(self, registration_ids, notification_data):\n            return {}\n    return GCMMock()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def install(self):\n    pkgs = self.options.get('pkgs', '')\n    return install_pkgs(self.anaconda_home, pkgs, self.conda_channels)", "buggy_source_code": "def install(self):\n    pkgs = self.options.get('pkgs', '')\n    return install_pkgs(self.prefix, pkgs, self.conda_channels)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def find(self, htype, hvalu):\n    return self.core.getTufosByProp('axon:blob:hash:%s' % htype, valu=hvalu)", "buggy_source_code": "def find(self, htype, hvalu):\n    return self.core.getTufosByProp('axon:blob:%s' % htype, valu=hvalu)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def has(self, htype, hvalu):\n    tufo = self.core.getTufoByProp('axon:blob:hash:%s' % htype, hvalu)\n    return tufo != None", "buggy_source_code": "def has(self, htype, hvalu):\n    tufo = self.core.getTufoByProp('axon:blob:%s' % htype, hvalu)\n    return tufo != None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def bytes(self, htype, hvalu):\n    blob = self.core.getTufoByProp('axon:blob:hash:%s' % htype, valu=hvalu)\n    return self.iterblob(blob)", "buggy_source_code": "def bytes(self, htype, hvalu):\n    blob = self.core.getTufoByProp('axon:blob:%s' % htype, valu=hvalu)\n    return self.iterblob(blob)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.url = 'http://www.boards.ie/search/submit/?forum=1204&subforums=1&sort=newest&date_to=&date_from=&query=casuals'", "buggy_source_code": "def __init__(self):\n    self.url = 'http://www.boards.ie/vbulletin/forumdisplay.php?f=1204'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def kill(self, task):\n    import drmaa\n    if task.drm_jobID is not None:\n        self.session.control(str(task.drm_jobID), drmaa.JobControlAction.TERMINATE)", "buggy_source_code": "def kill(self, task):\n    import drmaa\n    if task.drm_jobID is not None:\n        get_drmaa_session().control(str(task.drm_jobID), drmaa.JobControlAction.TERMINATE)", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def note(self, msg):\n    self.log += textwrap.wrap(msg, MapState.padding_right - 1)", "buggy_source_code": "def note(self, msg):\n    self.log += textwrap.wrap(msg, states.MapState.padding_right - 1)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _sold_invoice_name(self, seq_number, count):\n    if count > 0:\n        name = u'Facture de solde'\n    else:\n        name = u'Facture {0}'.format(seq_number)\n    return name", "buggy_source_code": "def _sold_invoice_name(self, seq_number, count):\n    if count > 0:\n        sold = True\n    else:\n        sold = False\n    return Invoice.get_name(seq_number, sold=sold)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_name(self, seq_number):\n    taskname_tmpl = u'Devis {0}'\n    return taskname_tmpl.format(seq_number)", "buggy_source_code": "@classmethod\ndef get_name(cls, seq_number):\n    taskname_tmpl = u'Devis {0}'\n    return taskname_tmpl.format(seq_number)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef register_color_scheme_handler(cls):\n    if not cls.COLOR_SCHEME_HANDLER_REGISTERED:\n        PREFERENCES.add_on_change(S_COLOR_SCHEME, cls.on_color_scheme_changed)\n        cls.COLOR_SCHEME_HANDLER_REGISTERED = True", "buggy_source_code": "@classmethod\ndef register_color_scheme_handler(cls):\n    if not cls.COLOR_SCHEME_HANDLER_REGISTERED:\n        register_preference_handler(S_COLOR_SCHEME, cls.on_color_scheme_changed)\n        cls.COLOR_SCHEME_HANDLER_REGISTERED = True", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef update_color_scheme(cls):\n    cls.COLOR_SCHEME = PREFERENCES.get(S_COLOR_SCHEME, DEFAULT_COLOR_SCHEME)", "buggy_source_code": "@classmethod\ndef update_color_scheme(cls):\n    cls.COLOR_SCHEME = get_preference(S_COLOR_SCHEME, DEFAULT_COLOR_SCHEME)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_timeout_delay():\n    result = SETTINGS.get(S_TIMEOUT_DELAY, DEFAULT_TIMEOUT_DELAY)\n    return result", "buggy_source_code": "@staticmethod\ndef get_timeout_delay():\n    result = get_setting(S_TIMEOUT_DELAY, DEFAULT_TIMEOUT_DELAY)\n    return result", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_default_file_regex():\n    result = SETTINGS.get(S_DEFAULT_FILE_REGEX, DEFAULT_FILE_REGEX)\n    return result", "buggy_source_code": "def get_default_file_regex():\n    result = get_setting(S_DEFAULT_FILE_REGEX, DEFAULT_FILE_REGEX)\n    return result", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def debugCallback(source, type, id, severity, length, message, userParam):\n    dprintf('GL Error: %s\\n', message)", "buggy_source_code": "def debugCallback(source, type_arg, id_arg, severity, length, message, userParam):\n    dprintf('GL Error: %s\\n' % message)", "edit_actions": ["update-node", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def remove_user(self, user, role):\n    user = self.get_user(user, role)\n    if user is not None:\n        user.delete()", "buggy_source_code": "def remove_user(self, user, role):\n    user = self.get_user(user, role)\n    QuestionnaireMembership.objects.filter(questionnaire=self, user=user, role=role).delete()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _flock_process(path):\n    proc = subprocess.Popen(['flock', path, 'bash', '-c', 'echo -n ok && sleep infinity'], stdout=subprocess.PIPE)\n    assert proc.stdout.read(2) == 'ok'\n    return proc", "buggy_source_code": "def _flock_process(path):\n    proc = subprocess.Popen(['flock', path, 'bash', '-c', 'echo -n ok && sleep infinity'], stdout=subprocess.PIPE)\n    assert proc.stdout.read(2) == b'ok'\n    return proc", "edit_actions": ["update-node"]}
{"fixed_source_code": "def project_singleton(self, key):\n    if key in self.feature_map:\n        return self.feature[self.feature_map[key]]\n    else:\n        return 'no_map_found'", "buggy_source_code": "def project_singleton(self, key):\n    if key in self.feature_map:\n        return self.features[self.feature_map[key]]\n    else:\n        return 'no_map_found'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _gtk_thread(self):\n    try:\n        Gtk.main()\n    except Exception:\n        logger.error('Gui has crashed!')", "buggy_source_code": "def _gtk_thread(self):\n    try:\n        Gtk.main()\n    except Exception:\n        self.logger.error('Gui has crashed!')", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, repo_id: str):\n    super().__init__()\n    self.job = None\n    self.repo_id = repo_id\n    self.repo_fk = None", "buggy_source_code": "def __init__(self, repo_id: int):\n    super().__init__()\n    self.job = None\n    self.repo_id = repo_id\n    self.repo_fk = None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return json.dumps(self.toJson(), sort_keys=True, indent=4)", "buggy_source_code": "def __str__(self):\n    return json.dumps(ComputingActivityIpfJson.toJson(self), sort_keys=True, indent=4)", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def is_pgsql():\n    return settings.DATABASES['default']['ENGINE'] == 'django.db.backends.postgresql'", "buggy_source_code": "def is_pgsql():\n    return settings.DATABASES['default']['ENGINE'].startswith('django.db.backends.postgresql')", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def serialize(self):\n    return {'type': 'dateTime', **super().serialize()}", "buggy_source_code": "def serialize(self):\n    return {'type': 'string', 'format': 'date-time', **super().serialize()}", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef parse_yaml(cls, config: str) -> dict:\n    try:\n        return yaml.load(config)\n    except yaml.YAMLError as e:\n        raise cls.ParsingError(e)", "buggy_source_code": "@classmethod\ndef parse_yaml(cls, config: str) -> dict:\n    try:\n        return yaml.safe_load(config)\n    except yaml.YAMLError as e:\n        raise cls.ParsingError(e)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_twitter(self):\n    template = Template('{% load social_share %} {% post_to_twitter text url %}')\n    result = template.render(self.context)\n    expected = ' <div class=\"tweet-this\">\\n  <a href=\"http://twitter.com/intent/tweet?text=example%20http%3A//example.com\" class=\"meta-act-link meta-tweet\" target=\"_blank\">Post to Twitter</a>\\n</div>'\n    self.assertEqual(result, expected)", "buggy_source_code": "def test_twitter(self):\n    template = Template('{% load social_share %} {% post_to_twitter text url %}')\n    result = template.render(self.context)\n    expected = ' <div class=\"tweet-this\">\\n    <a href=\"http://twitter.com/intent/tweet?text=example%20http%3A//example.com\" class=\"meta-act-link meta-tweet\" target=\"_blank\">Post to Twitter</a>\\n</div>\\n'\n    self.assertEqual(result, expected)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def showdown(self):\n    print(self.game_state)", "buggy_source_code": "def showdown(self):\n    print('showdown {}'.format(self.game_state))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def wait_for_db(self, timeout=600):\n    wait_for(func=lambda : self.is_db_ready, message='appliance.is_db_ready', delay=20, numsec=timeout)", "buggy_source_code": "def wait_for_db(self, timeout=600):\n    wait_for(func=lambda : self.is_db_ready, message='appliance.is_db_ready', delay=20, num_sec=timeout)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def wait_for_ssh(self, timeout=300):\n    wait_for(func=lambda : self.is_ssh_running, message='appliance.is_ssh_running', delay=5, numsec=timeout)", "buggy_source_code": "def wait_for_ssh(self, timeout=300):\n    wait_for(func=lambda : self.is_ssh_running, message='appliance.is_ssh_running', delay=5, num_sec=timeout)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _validate_access_policies(identifiers):\n    if len(identifiers) > 5:\n        raise AzureException(_ERROR_TOO_MANY_ACCESS_POLICIES)", "buggy_source_code": "def _validate_access_policies(identifiers):\n    if identifiers and len(identifiers) > 5:\n        raise AzureException(_ERROR_TOO_MANY_ACCESS_POLICIES)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def register():\n    signals.initialized.coonect(add_all_filters)", "buggy_source_code": "def register():\n    signals.initialized.connect(add_all_filters)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def BernoulliNBClassifier(*args, **kwargs):\n    raise DeprecationWarning('This function is renamed. Use NaiveBayesClassifier instead of BernoulliNBClassifier.')", "buggy_source_code": "def BernoulliNBClassifier(*args, **kwargs):\n    raise DeprecationWarning('This class is renamed. Use NaiveBayesClassifier instead of BernoulliNBClassifier.')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pyqtSlot(unicode)\ndef setNameFilter(self, pattern):\n    if self._namefilter == pattern:\n        return\n    self._namefilter = pattern and unicode(pattern) or None\n    self._buildrootentry()", "buggy_source_code": "@pyqtSlot(unicode)\ndef setNameFilter(self, pattern):\n    if self._namefilter == pattern:\n        return\n    self._namefilter = pattern and unicode(pattern) or None\n    self._rebuildrootentry()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@task(help={'aws-account': 'We use different aws accounts for development and production. Please select e.g. `dev` or `prod`'})\ndef once_organization_wide(ctx, aws_account):\n    ctx.run(\"ansible-playbook organization-once/configure-once.playbook.yaml -vv --extra-vars='credentials_store={} aws_account={}'\".format(credentials_store(), aws_account), pty=True, echo=True)", "buggy_source_code": "@task(help={'aws-account': 'We use different AWS accounts for development and production. Please select e.g. `dev` or `prod`'})\ndef once_organization_wide(ctx, aws_account):\n    ctx.run(\"ansible-playbook organization-once/configure-once.playbook.yaml -vv --extra-vars='credentials_store={} aws_account={}'\".format(credentials_store(), aws_account), pty=True, echo=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_generate_report(self):\n    self._smoke(BETRPT(in_file=os.path.join(MNI_DIR, 'MNI152_T1_2mm.nii.gz'), generate_report=True, mask=True))", "buggy_source_code": "@unittest.skip\ndef test_generate_report(self):\n    self._smoke(BETRPT(in_file=self.in_file, generate_report=True, mask=True))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def bytes_to_str(b):\n    if isinstance(b, bytes):\n        return b.decode(sys.getfilesystemencoding())\n    else:\n        return b", "buggy_source_code": "def bytes_to_str(b):\n    if isinstance(b, bytes):\n        return b.decode(sys.getdefaultencoding())\n    else:\n        return b", "edit_actions": ["update-node"]}
{"fixed_source_code": "def str_to_bytes(s):\n    if isinstance(s, str):\n        return bytes(s, sys.getfilesystemencoding())\n    else:\n        return s", "buggy_source_code": "def str_to_bytes(s):\n    if isinstance(s, str):\n        return bytes(s, sys.getdefaultencoding())\n    else:\n        return s", "edit_actions": ["update-node"]}
{"fixed_source_code": "def extract(self, tweet):\n    return ('followers_count', tweet.user.friends_count)", "buggy_source_code": "def extract(self, tweet):\n    return ('friends_count', tweet.user.friends_count)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def check_ipv6():\n    hosts = ['www.6rank.edu.cn', 'v6.testmyipv6.com']\n    for host in hosts:\n        if _check_ipv6_host(host):\n            return True\n    return False", "buggy_source_code": "def check_ipv6():\n    hosts = ['bt.neu6.edu.cn', 'v6.ipv6-test.com', 'ipv6.test-ipv6.jp']\n    for host in hosts:\n        if _check_ipv6_host(host):\n            return True\n    return False", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def explicit():\n    from google.cloud import bigquery\n    bigquery_client = bigquery.Client.from_service_account_json('service_account.json')\n    buckets = list(bigquery_client.list_datasets())\n    print(buckets)", "buggy_source_code": "def explicit():\n    from google.cloud import bigquery\n    bigquery_client = bigquery.Client.from_service_account_json('service_account.json')\n    datasets = list(bigquery_client.list_datasets())\n    print(datasets)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def filter_queryset(self, request, queryset, view):\n    query_tags = self._get_tags_queryparams(request.QUERY_PARAMS)\n    if tags:\n        queryset = tags.filter(queryset, contains=query_tags)\n    return queryset", "buggy_source_code": "def filter_queryset(self, request, queryset, view):\n    query_tags = self._get_tags_queryparams(request.QUERY_PARAMS)\n    if query_tags:\n        queryset = tags.filter(queryset, contains=query_tags)\n    return queryset", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_interpret_output_unknown(self):\n    (exit_code, message) = ceph_health.interpret_output('message')\n    self.assertEquals(exit_code, 3)\n    self.assertEquals(message, 'CEPH UNKNOWN: message')", "buggy_source_code": "def test_interpret_output_unknown(self):\n    (exit_code, message) = ceph_health.interpret_output('strange message')\n    self.assertEquals(exit_code, 3)\n    self.assertEquals(message, 'CEPH UNKNOWN: strange message')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_buttons(chat_id, note_name):\n    return SESSION.query(Buttons).filter(Notes.chat_id == str(chat_id), Buttons.note_name == note_name).all()", "buggy_source_code": "def get_buttons(chat_id, note_name):\n    return SESSION.query(Buttons).filter(Buttons.chat_id == str(chat_id), Buttons.note_name == note_name).all()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setTargetHotendTemperature(self, printer: 'PrinterOutputModel', extruder: 'ExtruderOuputModel', temperature: int):\n    Logger.log('w', 'Set target hotend temperature not implemented in controller')", "buggy_source_code": "def setTargetHotendTemperature(self, printer: 'PrinterOutputModel', extruder: 'ExtruderOutputModel', temperature: int):\n    Logger.log('w', 'Set target hotend temperature not implemented in controller')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_edit_url(self):\n    return self._lookup_url('entry_edit', {'pk': self.id, 'phase': self.phase_slug})", "buggy_source_code": "def get_edit_url(self):\n    return self._lookup_url('entry_edit', {'pk': self.parent_slug, 'phase': self.phase_slug})", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef prev_patch(self):\n    return None if len(self._PPD.applied_patches_data) < 2 else PathcMgr(self._PPD.applied_patches_data[-2], self)", "buggy_source_code": "@property\ndef prev_patch(self):\n    return None if len(self._PPD.applied_patches_data) < 2 else Patch(self._PPD.applied_patches_data[-2], self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_argument(func):\n\n    @functools.wraps(func)\n    def wrapped(self, **kwargs):\n        return func(self, **kwargs, **self.request.GET)\n    return wrapped", "buggy_source_code": "def get_argument(func):\n\n    @functools.wraps(func)\n    def wrapped(self, **kwargs):\n        return func(self, **kwargs, **self.request.query)\n    return wrapped", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef engine_migration(self):\n    engine_migration = DatabaseMigrateEngine.objects.filter(database=self.database).last()\n    if engine_migration and engine_migration.is_running:\n        return engine_migration", "buggy_source_code": "@property\ndef engine_migration(self):\n    engine_migration = self.database.engine_migrations.last()\n    if engine_migration and engine_migration.is_running:\n        return engine_migration", "edit_actions": ["update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_os_version():\n    dist = OSCheck._dist[3]\n    if dist:\n        return dist\n    else:\n        raise Exception('Cannot detect os version. Exiting...')", "buggy_source_code": "@staticmethod\ndef get_os_version():\n    dist = get_os_distribution()[3]\n    if dist:\n        return dist\n    else:\n        raise Exception('Cannot detect os version. Exiting...')", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_os_os():\n    os_os = OSCheck._dist[0].lower()\n    return os_os", "buggy_source_code": "@staticmethod\ndef get_os_os():\n    os_os = get_os_distribution()[0].lower()\n    return os_os", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef get_os_release_name():\n    dist = OSCheck._dist[4].lower()\n    if dist:\n        return dist\n    else:\n        raise Exception('Cannot detect os release name. Exiting...')", "buggy_source_code": "@staticmethod\ndef get_os_release_name():\n    dist = get_os_distribution()[4].lower()\n    if dist:\n        return dist\n    else:\n        raise Exception('Cannot detect os release name. Exiting...')", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def _select(self, *fields, **attributes):\n    return self._getset()._select(*field, **attributes)", "buggy_source_code": "def _select(self, *fields, **attributes):\n    return self._getset()._select(*fields, **attributes)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def glyph_to_unicode(self, glyph_code):\n    return self.GLYPH_LIST[self.get_glyph_name(glyph_code)]", "buggy_source_code": "def glyph_to_unicode(self, glyph_code):\n    return GLYPH_LIST[self.get_glyph_name(glyph_code)]", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_fixtures2(minitestdata2, testapp):\n    res = testapp.get('/organisms/')\n    items = res.json['@graph']\n    assert len(items) == 1", "buggy_source_code": "def test_fixtures2(minitestdata2, testapp):\n    res = testapp.get('/awards/')\n    items = res.json['@graph']\n    assert len(items) == 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_val_i(self, rs):\n    return self.c[:, self._get_nearest_cell_ids(rs)].value.T", "buggy_source_code": "def _get_val_i(self, rs):\n    return self.c[self._get_nearest_cell_ids(rs)].value.T", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def _wait_all(self):\n    log.info('Blocking until all messages are sent')\n    while self._messages_are_inflight():\n        time.sleep(0.3)\n        if self._exception is not None:\n            raise self._exception", "buggy_source_code": "def _wait_all(self):\n    log.info('Blocking until all messages are sent')\n    while self._messages_are_inflight():\n        time.sleep(0.3)\n        if self._worker_exception is not None:\n            raise self._worker_exception", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def setup(bot):\n    check_folders()\n    check_files()\n    n = Hangman(bot)\n    bot.add_cog(n)\n    bot.add_listener(n._on_react, 'on_raw_reaction_add')", "buggy_source_code": "def setup(bot):\n    check_folders()\n    check_files()\n    n = Hangman(bot)\n    bot.add_cog(n)\n    bot.add_listener(n._on_react, 'on_reaction_add')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_write_Element(self):\n    with etree.xmlfile(self._file) as xf:\n        xf.write(etree.Element('test'))\n    self.assertXml(_bytes('<test/>'))", "buggy_source_code": "def test_write_Element(self):\n    with etree.xmlfile(self._file) as xf:\n        xf.write(etree.Element('test'))\n    self.assertXml('<test/>')", "edit_actions": ["move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_element(self):\n    with etree.xmlfile(self._file) as xf:\n        with xf.element('test'):\n            pass\n    self.assertXml(_bytes('<test></test>'))", "buggy_source_code": "def test_element(self):\n    with etree.xmlfile(self._file) as xf:\n        with xf.element('test'):\n            pass\n    self.assertXml('<test></test>')", "edit_actions": ["move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return '\\r\\n'.join((': '.join(key, val) for (key, val) in self.iteritems()))", "buggy_source_code": "def __str__(self):\n    return '\\r\\n'.join((': '.join((key, value)) for (key, value) in self.iteritems()))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def delete_user(user_id):\n    try:\n        User.query.get(user_id).delete()\n    except NoResultFound:\n        raise UserDoesnotExistsException(user_id)\n    return True", "buggy_source_code": "def delete_user(user_id):\n    try:\n        User.query.get(user_id).delete()\n    except NoResultFound:\n        raise UserDoesNotExistsException(user_id)\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_user_by_id(user_id=None):\n    try:\n        user = User.query.get(user_id)\n    except NoResultFound:\n        raise UserDoesnotExistsException(user_id)\n    return user", "buggy_source_code": "def get_user_by_id(user_id=None):\n    try:\n        user = User.query.get(user_id)\n    except NoResultFound:\n        raise UserDoesNotExistsException(user_id)\n    return user", "edit_actions": ["update-node"]}
{"fixed_source_code": "def disable(self, _exaile):\n    self.teardown(exaile)\n    self.__exaile = None", "buggy_source_code": "def disable(self, exaile):\n    self.teardown(exaile)\n    self.__exaile = None", "edit_actions": ["update-node"]}
{"fixed_source_code": "@step(u'And the question numbering should be updated')\ndef and_the_question_numbering_should_be_updated(step):\n    world.page.is_text_present('0. 1. 2. %s' % world.question5.text)", "buggy_source_code": "@step(u'And the question numbering should be updated')\ndef and_the_question_numbering_should_be_updated(step):\n    world.page.is_text_present('0.1.2.%s' % world.question5.text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@step(u'And the regional question numbers should be prefixed with the region name')\ndef and_the_regional_question_numbers_should_be_prefixed_with_the_region_name(step):\n    sleep(2)\n    world.page.is_text_present('%s - 0. 4. %s' % (world.region.name, world.not_assigned_question1.text))", "buggy_source_code": "@step(u'And the regional question numbers should be prefixed with the region name')\ndef and_the_regional_question_numbers_should_be_prefixed_with_the_region_name(step):\n    sleep(2)\n    world.page.is_text_present('%s - 0.4.%s' % (world.region.name, world.not_assigned_question1.text))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_reset_config_file(self):\n    tools.reset_config_file()\n    config = tools.get_config_file()\n    self.assertEqual(config['plotly_domain'], 'https://plot.ly')\n    self.assertEqual(config['plotly_streaming_domain'], 'stream.plot.ly')", "buggy_source_code": "def test_reset_config_file(self):\n    tools.reset_config_file()\n    config = tools.get_config_file()\n    self.assertEqual(config['plotly_domain'], 'https://plotly.com')\n    self.assertEqual(config['plotly_streaming_domain'], 'stream.plotly.com')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def run(self):\n    super(PeakQueryThroughputTest, self).run()\n    self.reporter.post_to_sf(self.metric_helper.calc_avg_couch_views_ops())", "buggy_source_code": "def run(self):\n    super(QueryThroughputTest, self).run()\n    self.reporter.post_to_sf(self.metric_helper.calc_avg_couch_views_ops())", "edit_actions": ["update-node"]}
{"fixed_source_code": "@gen.coroutine\ndef _cleanup(self):\n    log.warn('Shutdown: cleaning up')\n    self._executor.shutdown(wait=False)\n    self._clients.clear()", "buggy_source_code": "@gen.coroutine\ndef _cleanup(self):\n    log.debug('Shutdown: cleaning up')\n    self._executor.shutdown(wait=False)\n    self._clients.clear()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_kbd_export_as_list(self):\n    kbpage = CFG_SITE_URL + '/kb/export?kbname=' + self.dyn_kbname\n    errs = test_web_page_content(kbpage, expected_text=['Charles Darwin', 'Witten, Edward'])\n    self.assertEqual([], errs)", "buggy_source_code": "def test_kbd_export_as_list(self):\n    kbpage = CFG_SITE_URL + '/kb/export?kbname=' + self.dyn_kbname\n    errs = test_web_page_content(kbpage, expected_text=['Charles Darwin', '李白'])\n    self.assertEqual([], errs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cldrData(what):\n    return os.path.join(root(), 'data', 'cldr', what)", "buggy_source_code": "def cldrData(what):\n    return os.path.join(root(), 'external', 'cldr', what)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def metaStringsByBitfieldGroup(group):\n    return 'const std::unordered_map<%s, std::string> Meta_StringsBy%s \\n{\\n    %s\\n};\\n    ' % (group.name, group.name, ',\\n\\t'.join([metaEnumToString(e, group.name) for e in sorted(group.enums)]))", "buggy_source_code": "def metaStringsByBitfieldGroup(group):\n    return 'const std::unordered_map<%s, std::string> Meta_StringsBy%s \\n{ {\\n    %s\\n} };\\n    ' % (group.name, group.name, ',\\n\\t'.join([metaEnumToString(e, group.name) for e in sorted(group.enums)]))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def metaExtensionsByStringGroup(extensions, key):\n    postfix = '_' + key\n    return 'const std::unordered_map<std::string, GLextension> Meta_ExtensionsByString%s \\n{\\n%s%s\\n};\\n    ' % (postfix, tab, (',\\n' + tab).join(['{ \"%s\", GLextension::%s }' % (e, e) for e in extensions]))", "buggy_source_code": "def metaExtensionsByStringGroup(extensions, key):\n    postfix = '_' + key\n    return 'const std::unordered_map<std::string, GLextension> Meta_ExtensionsByString%s \\n{ {\\n%s%s\\n} };\\n    ' % (postfix, tab, (',\\n' + tab).join(['{ \"%s\", GLextension::%s }' % (e, e) for e in extensions]))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, path):\n    self.filePath = path\n    self.tempFile = tempfile.TemporaryFile(mode='rw+b')", "buggy_source_code": "def __init__(self, path):\n    self.filePath = path\n    self.tempFile = tempfile.TemporaryFile(mode='r+b')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    self.openstack_tenant_fixture = fixtures.OpenStackTenantFixture()\n    self.openstack_tenant_settings = self.openstack_tenant_fixture.openstack_tenant_service_settings\n    self.spl = self.openstack_tenant_fixture.openstack_tenant_spl\n    self.tenant = self.openstack_tenant_fixture.openstack_tenant", "buggy_source_code": "def setUp(self):\n    self.openstack_tenant_fixture = fixtures.OpenStackTenantFixture()\n    self.openstack_tenant_settings = self.openstack_tenant_fixture.openstack_tenant_service_settings\n    self.spl = self.openstack_tenant_fixture.openstack_tenant_spl\n    self.tenant = self.openstack_tenant_fixture.tenant", "edit_actions": ["update-node"]}
{"fixed_source_code": "def info(msg):\n    __write('INFO  :: %s' % msg)", "buggy_source_code": "def info(msg):\n    if INFO:\n        __write('INFO  :: %s' % msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_doc_classes():\n    return ['GDFunctionState', 'GDNativeClass', 'GDScript']", "buggy_source_code": "def get_doc_classes():\n    return ['GDScript', 'GDScriptFunctionState', 'GDScriptNativeClass']", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def testcheck(self):\n    PamCheck.check.check(self.pkg)\n    self.assertEqual(Testing.getOutput(), ['E: PamCheck use-old-pam-stack /etc/pam.d/PamCheck (line 1)'])", "buggy_source_code": "def testcheck(self):\n    PamCheck.check.check(self.pkg)\n    self.assertEqual(Testing.getOutput(), ['PamCheck.i586: E: use-old-pam-stack /etc/pam.d/PamCheck (line 1)'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def warning(s):\n    print('{0} {1}'.format(yellow('[ WARNING ]'), s))", "buggy_source_code": "def warning(s):\n    print('{0} {1}'.format(yellow('[!]WARNING '), s))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def success(s):\n    print('{0} {1}'.format(green('[ SUCCESS ]'), s))", "buggy_source_code": "def success(s):\n    print('{0} {1}'.format(green('[+]SUCCESS '), s))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error(s):\n    print('{0} {1}'.format(red('[ ERROR   ]'), s))", "buggy_source_code": "def error(s):\n    print('{0} {1}'.format(red('[-]ERROR   '), s))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def debug(s):\n    if config.get('is_debug'):\n        print('{0} {1}'.format(purple('[ DEBUG   ]'), s))", "buggy_source_code": "def debug(s):\n    if config.get('is_debug'):\n        print('{0} {1}'.format(purple('[ ]DEBUG   '), s))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _safe_concat(values, axis):\n    return tf.concat([t for t in values if t.shape.rank is not None], axis=axis)", "buggy_source_code": "def _safe_concat(values, axis):\n    return tf.concat([t for t in values if tf.equal(tf.size(t), 0) is None], axis=axis)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='class')\ndef vm_name():\n    return 'test_pwrctl_' + generate_random_string()", "buggy_source_code": "@pytest.fixture(scope='module')\ndef vm_name():\n    return 'test_repl_pwrctl_' + generate_random_string()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@command()\n@raid_checks.raid_channel()\nasync def timerset(self, ctx, time: int):\n    pass", "buggy_source_code": "@command()\n@raid_checks.raid_channel()\nasync def timerset(self, ctx, *, time):\n    pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef querystring(self):\n    return construct_querystring(self.form.data, **{self.param: '.'.join(map(str, self.get_sorts_with_header()))})", "buggy_source_code": "@property\ndef querystring(self):\n    return construct_querystring(self.form.data, **{self.param: '.'.join(map(str, self.add_to_sorts()))})", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef remove_querystring(self):\n    return construct_querystring(self.form.data, **{self.param: '.'.join(map(str, self.get_sorts_with_header()[1:]))})", "buggy_source_code": "@property\ndef remove_querystring(self):\n    return construct_querystring(self.form.data, **{self.param: '.'.join(map(str, self.add_to_sorts()[1:]))})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _validate_selection(self, selection):\n    if selection not in self.choices:\n        raise ValidationException('Invalid value: \"{0}\"'.format(selection))", "buggy_source_code": "def _validate_selection(self, data):\n    if data != '' and data not in self.choices:\n        raise ValidationException('Invalid default value: {0}'.format(data))", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _validate_selections(self, selections):\n    for item in selections:\n        if item not in self.choices:\n            raise ValidationException('Invalid value: \"{0}\"'.format(selections))", "buggy_source_code": "def _validate_selections(self, items):\n    for item in items:\n        if item not in self.choices:\n            raise ValidationException('Invalid choice: {0}'.format(self.value))", "edit_actions": ["update-node", "update-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    renderer.__init__(self)\n    self.name = 'FY'\n    self.icon_path = 'images/pompelyts.png'", "buggy_source_code": "def __init__(self):\n    renderer.__init__(self)\n    self.name = 'FY'\n    self.icon_path = '/images/pompelyts.png'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_running(self):\n    return self.get_power_state() != 'Halted'", "buggy_source_code": "def is_running(self):\n    return self.get_power_state() not in ('Halted', 'NA')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree"]}
{"fixed_source_code": "def __call__(self, *test_indices):\n    if self.filter_atoms is None:\n        return True\n    return len(self.filter_atoms.intersection(test_indices)) > 0", "buggy_source_code": "def __call__(self, *test_indexes):\n    if self.filter_atoms is None:\n        return True\n    return len(self.filter_atoms.intersection(test_indexes)) > 0", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def save(self, *args, **kwards):\n    self.slug = nameunify(self.slug, True)\n    return super(GenProductText, self).save(*args, **kwards)", "buggy_source_code": "def save(self, *args, **kwards):\n    self.slug = nameunify(self.slug, True)\n    return super(GenProductBrandText, self).save(*args, **kwards)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, tz=8):\n    try:\n        self.TimeZone = int(tz)\n    except:\n        self.TimeZone = 8", "buggy_source_code": "def __init__(self, tz=8):\n    try:\n        self.TimeZone = float(tz)\n    except:\n        self.TimeZone = 8", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_icommands_installed(self):\n    response = self._run(command='ienv', environment={'DEBUG': 1}, stderr=False)\n    self.assertIn('Release Version = rods', response)", "buggy_source_code": "def test_icommands_installed(self):\n    response = self._run(command='ienv', environment={'DEBUG': 1}, stderr=True)\n    self.assertIn('Release Version = rods', response)", "edit_actions": []}
{"fixed_source_code": "def __str__(self):\n    W = self.W\n    if W == None:\n        return 'CSP (untrained)'\n    return 'CSP (%dD -> %dD)' % (W.shape[0], m)", "buggy_source_code": "def __str__(self):\n    W = self.W\n    if W == None:\n        return 'CSP (untrained)'\n    return 'CSP (%dD -> %dD)' % (W.shape[0], W.shape[1])", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_hosts_file(File):\n    f = File('/usr/local/bin/ovftool/ovftool')\n    assert f.exists\n    assert f.user == 'root'\n    assert f.group == 'root'", "buggy_source_code": "def test_hosts_file(File):\n    f = File('/usr/bin/ovftool')\n    assert f.exists\n    assert f.user == 'root'\n    assert f.group == 'root'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@translator_blueprint.route('/api/default-language')\n@public\n@cross_origin()\n@api\ndef guess_default_language():\n    return jsonify(language=_guess_default_language())", "buggy_source_code": "@translator_blueprint.route('/api/user/default_language')\n@public\n@cross_origin()\n@api\ndef guess_default_language():\n    return jsonify(language=_guess_default_language())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setGraphComponent(self, graphComponent):\n    self.__graphComponent = graphComponent\n    self.__nameChangedConnection = self.__graphComponent.nameChangedSignal().connect(lambda x: self.__setText())\n    self.__setText()", "buggy_source_code": "def setGraphComponent(self, graphComponent):\n    self.__graphComponent = graphComponent\n    self.__nameChangedConnection = self.__graphComponent.nameChangedSignal().connect(Gaffer.WeakMethod(self.__setText))\n    self.__setText()", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getToken(self):\n    result = Regex('%\\\\s*?\\n                           (?:\\n                             (?:thumb\\\\s+)?\\n                             (?:width\\\\s*?=\\\\s*?(?P<width>\\\\d+(?:\\\\.\\\\d+)?)\\n                               (?P<unit2>px|in|[cm]m|p[tc]|e[mx]|ch|rem|v[wh]|vmin|vmax|%)?\\n                               (\\n                                 \\\\s+height\\\\s*?=\\\\s*?(?P<height2>\\\\d+(?:\\\\.\\\\d+)?)\\n                               )?\\n                             |height\\\\s*?=\\\\s*?(?P<height>\\\\d+(?:\\\\.\\\\d+)?)\\n                             |maxsize\\\\s*?=\\\\s*?(?P<maxsize>\\\\d+(?:\\\\.\\\\d+)?))\\\\s*?\\n                             (?P<unit>px|in|[cm]m|p[tc]|e[mx]|ch|rem|v[wh]|vmin|vmax|%)?\\n                             |thumb\\\\s*?\\n                           )\\n                           (?P<soft>\\\\s+?soft)?\\n                           (?P<nolink>\\\\s+?nolink)?\\n                           \\\\s*?\\n                           %\\\\s*?\\n                           Attach:(?P<fname>.*?\\\\.(?:jpe?g|bmp|gif|tiff?|png|svg))\\\\s*?%%', re.IGNORECASE | re.VERBOSE)\n    result = result.setParseAction(self.__convertThumb)('thumbnail')\n    return result", "buggy_source_code": "def getToken(self):\n    result = Regex('%\\\\s*?\\n                           (?:\\n                             (?:thumb\\\\s+)?\\n                             (?:\\n                               width\\\\s*=\\\\s*(?P<width>\\\\d+(?:\\\\.\\\\d+)?)\\n                               (?P<unit_w>px|in|[cm]m|p[tc]|e[mx]|ch|rem|v[wh]|vmin|vmax|%)?\\n                               (\\\\s+height\\\\s*=\\\\s*(?P<height_w>\\\\d+(?:\\\\.\\\\d+)?))?\\n                               |height\\\\s*=\\\\s*(?P<height>\\\\d+(?:\\\\.\\\\d+)?)\\n                               |maxsize\\\\s*=\\\\s*(?P<maxsize>\\\\d+(?:\\\\.\\\\d+)?)\\n                             )\\\\s*\\n                             (?P<unit>px|in|[cm]m|p[tc]|e[mx]|ch|rem|v[wh]|vmin|vmax|%)?\\n                             |thumb\\\\s*\\n                           )\\n                           (?P<soft>\\\\s+soft)?\\n                           (?P<nolink>\\\\s+nolink)?\\n                           \\\\s*%\\\\s*\\n                           Attach:(?P<fname>.*?\\\\.(?:jpe?g|bmp|gif|tiff?|png|svg))\\\\s*%%', re.IGNORECASE | re.VERBOSE)\n    result = result.setParseAction(self.__convertThumb)('thumbnail')\n    return result", "edit_actions": ["update-node"]}
{"fixed_source_code": "def process_scss(cont):\n    if SCSS_SUPPORT:\n        return scssdecoder.complie(cont)\n    else:\n        return cont", "buggy_source_code": "def process_scss(cont):\n    if SCSS_SUPPORT:\n        return scssdecoder.compile(cont)\n    else:\n        return cont", "edit_actions": ["update-node"]}
{"fixed_source_code": "@synchronized\ndef remove_all_load_callbacks(self):\n    for item in self.__callbacks.itervalues():\n        self.remove_load_callback(item['callback'])", "buggy_source_code": "def remove_all_load_callbacks(self):\n    for key in self.__callbacks.keys():\n        self.remove_load_callback(self.__callbacks[key]['callback'])", "edit_actions": ["move-tree", "update-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _flush(self):\n    data = self._data\n    if data and self._whitespace or not isspace(data):\n        self.append(('#text', data))\n    self._data = u''", "buggy_source_code": "def _flush(self):\n    data = self._data\n    if data:\n        self.append('#text: ' + repr(data))\n        self._data = u''", "edit_actions": ["insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'account_invoice_report')\n    cr.execute(\"\\n            create or replace view account_invoice_report as (\\n                 select min(ail.id) as id,\\n                    ai.date_invoice as date,\\n                    to_char(ai.date_invoice, 'YYYY') as year,\\n                    to_char(ai.date_invoice, 'MM') as month,\\n                    to_char(ai.date_invoice, 'YYYY-MM-DD') as day,\\n                    ail.product_id,\\n                    ai.partner_id as partner_id,\\n                    ai.payment_term as payment_term,\\n                    ai.period_id as period_id,\\n                    (case when u.uom_type not in ('reference') then\\n                        (select name from product_uom where uom_type='reference' and category_id=u.category_id)\\n                    else\\n                        u.name\\n                    end) as uom_name,\\n                    ai.currency_id as currency_id,\\n                    ai.journal_id as journal_id,\\n                    ai.fiscal_position as fiscal_position,\\n                    ai.user_id as user_id,\\n                    ai.company_id as company_id,\\n                    count(ail.*) as nbr,\\n                    ai.type as type,\\n                    ai.state,\\n                    pt.categ_id,\\n                    ai.date_due as date_due,\\n                    ai.address_contact_id as address_contact_id,\\n                    ai.address_invoice_id as address_invoice_id,\\n                    ai.account_id as account_id,\\n                    ai.partner_bank_id as partner_bank_id,\\n                    sum(case when ai.type in ('out_refund','in_invoice') then\\n                         ail.quantity / u.factor * -1\\n                        else\\n                         ail.quantity / u.factor\\n                        end) as product_qty,\\n                    sum(case when ai.type in ('out_refund','in_invoice') then\\n                         ail.quantity*ail.price_unit * -1\\n                        else\\n                         ail.quantity*ail.price_unit\\n                        end) / cr.rate as price_total,\\n                    sum(case when ai.type in ('out_refund','in_invoice') then\\n                         ai.amount_total * -1\\n                        else\\n                         ai.amount_total\\n                         end) / (CASE WHEN \\n                              (select count(l.id) from account_invoice_line as l\\n                               left join account_invoice as a ON (a.id=l.invoice_id)\\n                               where a.id=ai.id) <> 0 \\n                            THEN \\n                              (select count(l.id) from account_invoice_line as l\\n                               left join account_invoice as a ON (a.id=l.invoice_id)\\n                               where a.id=ai.id) \\n                            ELSE 1 \\n                            END) / cr.rate as price_total_tax,\\n                    (case when ai.type in ('out_refund','in_invoice') then\\n                      sum(ail.quantity*ail.price_unit*-1)\\n                    else\\n                      sum(ail.quantity*ail.price_unit)\\n                    end) / (CASE WHEN\\n                         (case when ai.type in ('out_refund','in_invoice') \\n                          then sum(ail.quantity/u.factor*-1)\\n                          else sum(ail.quantity/u.factor) end) <> 0 \\n                       THEN \\n                         (case when ai.type in ('out_refund','in_invoice') \\n                          then sum(ail.quantity/u.factor*-1)\\n                          else sum(ail.quantity/u.factor) end) \\n                       ELSE 1 \\n                       END)\\n                     / cr.rate as price_average,\\n\\n                    cr.rate as currency_rate,\\n                    sum((select extract(epoch from avg(date_trunc('day',aml.date_created)-date_trunc('day',l.create_date)))/(24*60*60)::decimal(16,2)\\n                        from account_move_line as aml\\n                        left join account_invoice as a ON (a.move_id=aml.move_id)\\n                        left join account_invoice_line as l ON (a.id=l.invoice_id)\\n                        where a.id=ai.id)) as delay_to_pay,\\n                    sum((select extract(epoch from avg(date_trunc('day',a.date_due)-date_trunc('day',a.date_invoice)))/(24*60*60)::decimal(16,2)\\n                        from account_move_line as aml\\n                        left join account_invoice as a ON (a.move_id=aml.move_id)\\n                        left join account_invoice_line as l ON (a.id=l.invoice_id)\\n                        where a.id=ai.id)) as due_delay,\\n                    (case when ai.type in ('out_refund','in_invoice') then\\n                      ai.residual * -1\\n                    else\\n                      ai.residual\\n                    end)/ (CASE WHEN \\n                        (select count(l.id) from account_invoice_line as l\\n                         left join account_invoice as a ON (a.id=l.invoice_id)\\n                         where a.id=ai.id) <> 0 \\n                       THEN\\n                        (select count(l.id) from account_invoice_line as l\\n                         left join account_invoice as a ON (a.id=l.invoice_id)\\n                         where a.id=ai.id) \\n                       ELSE 1 \\n                       END) / cr.rate as residual\\n                from account_invoice_line as ail\\n                left join account_invoice as ai ON (ai.id=ail.invoice_id)\\n                left join product_template pt on (pt.id=ail.product_id)\\n                left join product_uom u on (u.id=ail.uos_id),\\n                res_currency_rate cr\\n                where cr.id in (select id from res_currency_rate cr2  where (cr2.currency_id = ai.currency_id)\\n                and ((ai.date_invoice is not null and cr.name <= ai.date_invoice) or (ai.date_invoice is null and cr.name <= NOW())) limit 1)\\n                group by ail.product_id,\\n                    ai.date_invoice,\\n                    ai.id,\\n                    cr.rate,\\n                    to_char(ai.date_invoice, 'YYYY'),\\n                    to_char(ai.date_invoice, 'MM'),\\n                    to_char(ai.date_invoice, 'YYYY-MM-DD'),\\n                    ai.partner_id,\\n                    ai.payment_term,\\n                    ai.period_id,\\n                    u.name,\\n                    ai.currency_id,\\n                    ai.journal_id,\\n                    ai.fiscal_position,\\n                    ai.user_id,\\n                    ai.company_id,\\n                    ai.type,\\n                    ai.state,\\n                    pt.categ_id,\\n                    ai.date_due,\\n                    ai.address_contact_id,\\n                    ai.address_invoice_id,\\n                    ai.account_id,\\n                    ai.partner_bank_id,\\n                    ai.residual,\\n                    ai.amount_total,\\n                    u.uom_type,\\n                    u.category_id\\n            )\\n        \")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'account_invoice_report')\n    cr.execute(\"\\n            create or replace view account_invoice_report as (\\n                 select min(ail.id) as id,\\n                    ai.date_invoice as date,\\n                    to_char(ai.date_invoice, 'YYYY') as year,\\n                    to_char(ai.date_invoice, 'MM') as month,\\n                    to_char(ai.date_invoice, 'YYYY-MM-DD') as day,\\n                    ail.product_id,\\n                    ai.partner_id as partner_id,\\n                    ai.payment_term as payment_term,\\n                    ai.period_id as period_id,\\n                    (case when u.uom_type not in ('reference') then\\n                        (select name from product_uom where uom_type='reference' and active and category_id=u.category_id LIMIT 1)\\n                    else\\n                        u.name\\n                    end) as uom_name,\\n                    ai.currency_id as currency_id,\\n                    ai.journal_id as journal_id,\\n                    ai.fiscal_position as fiscal_position,\\n                    ai.user_id as user_id,\\n                    ai.company_id as company_id,\\n                    count(ail.*) as nbr,\\n                    ai.type as type,\\n                    ai.state,\\n                    pt.categ_id,\\n                    ai.date_due as date_due,\\n                    ai.address_contact_id as address_contact_id,\\n                    ai.address_invoice_id as address_invoice_id,\\n                    ai.account_id as account_id,\\n                    ai.partner_bank_id as partner_bank_id,\\n                    sum(case when ai.type in ('out_refund','in_invoice') then\\n                         ail.quantity / u.factor * -1\\n                        else\\n                         ail.quantity / u.factor\\n                        end) as product_qty,\\n                    sum(case when ai.type in ('out_refund','in_invoice') then\\n                         ail.quantity*ail.price_unit * -1\\n                        else\\n                         ail.quantity*ail.price_unit\\n                        end) / cr.rate as price_total,\\n                    sum(case when ai.type in ('out_refund','in_invoice') then\\n                         ai.amount_total * -1\\n                        else\\n                         ai.amount_total\\n                         end) / (CASE WHEN \\n                              (select count(l.id) from account_invoice_line as l\\n                               left join account_invoice as a ON (a.id=l.invoice_id)\\n                               where a.id=ai.id) <> 0 \\n                            THEN \\n                              (select count(l.id) from account_invoice_line as l\\n                               left join account_invoice as a ON (a.id=l.invoice_id)\\n                               where a.id=ai.id) \\n                            ELSE 1 \\n                            END) / cr.rate as price_total_tax,\\n                    (case when ai.type in ('out_refund','in_invoice') then\\n                      sum(ail.quantity*ail.price_unit*-1)\\n                    else\\n                      sum(ail.quantity*ail.price_unit)\\n                    end) / (CASE WHEN\\n                         (case when ai.type in ('out_refund','in_invoice') \\n                          then sum(ail.quantity/u.factor*-1)\\n                          else sum(ail.quantity/u.factor) end) <> 0 \\n                       THEN \\n                         (case when ai.type in ('out_refund','in_invoice') \\n                          then sum(ail.quantity/u.factor*-1)\\n                          else sum(ail.quantity/u.factor) end) \\n                       ELSE 1 \\n                       END)\\n                     / cr.rate as price_average,\\n\\n                    cr.rate as currency_rate,\\n                    sum((select extract(epoch from avg(date_trunc('day',aml.date_created)-date_trunc('day',l.create_date)))/(24*60*60)::decimal(16,2)\\n                        from account_move_line as aml\\n                        left join account_invoice as a ON (a.move_id=aml.move_id)\\n                        left join account_invoice_line as l ON (a.id=l.invoice_id)\\n                        where a.id=ai.id)) as delay_to_pay,\\n                    sum((select extract(epoch from avg(date_trunc('day',a.date_due)-date_trunc('day',a.date_invoice)))/(24*60*60)::decimal(16,2)\\n                        from account_move_line as aml\\n                        left join account_invoice as a ON (a.move_id=aml.move_id)\\n                        left join account_invoice_line as l ON (a.id=l.invoice_id)\\n                        where a.id=ai.id)) as due_delay,\\n                    (case when ai.type in ('out_refund','in_invoice') then\\n                      ai.residual * -1\\n                    else\\n                      ai.residual\\n                    end)/ (CASE WHEN \\n                        (select count(l.id) from account_invoice_line as l\\n                         left join account_invoice as a ON (a.id=l.invoice_id)\\n                         where a.id=ai.id) <> 0 \\n                       THEN\\n                        (select count(l.id) from account_invoice_line as l\\n                         left join account_invoice as a ON (a.id=l.invoice_id)\\n                         where a.id=ai.id) \\n                       ELSE 1 \\n                       END) / cr.rate as residual\\n                from account_invoice_line as ail\\n                left join account_invoice as ai ON (ai.id=ail.invoice_id)\\n                left join product_template pt on (pt.id=ail.product_id)\\n                left join product_uom u on (u.id=ail.uos_id),\\n                res_currency_rate cr\\n                where cr.id in (select id from res_currency_rate cr2  where (cr2.currency_id = ai.currency_id)\\n                and ((ai.date_invoice is not null and cr.name <= ai.date_invoice) or (ai.date_invoice is null and cr.name <= NOW())) limit 1)\\n                group by ail.product_id,\\n                    ai.date_invoice,\\n                    ai.id,\\n                    cr.rate,\\n                    to_char(ai.date_invoice, 'YYYY'),\\n                    to_char(ai.date_invoice, 'MM'),\\n                    to_char(ai.date_invoice, 'YYYY-MM-DD'),\\n                    ai.partner_id,\\n                    ai.payment_term,\\n                    ai.period_id,\\n                    u.name,\\n                    ai.currency_id,\\n                    ai.journal_id,\\n                    ai.fiscal_position,\\n                    ai.user_id,\\n                    ai.company_id,\\n                    ai.type,\\n                    ai.state,\\n                    pt.categ_id,\\n                    ai.date_due,\\n                    ai.address_contact_id,\\n                    ai.address_invoice_id,\\n                    ai.account_id,\\n                    ai.partner_bank_id,\\n                    ai.residual,\\n                    ai.amount_total,\\n                    u.uom_type,\\n                    u.category_id\\n            )\\n        \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def canSell(postion, bid):\n    for i in xrange(bid.size):\n        if position[i] + bid[1] < 0:\n            return False\n    return True", "buggy_source_code": "def canSell(position, bid):\n    for i in xrange(bid.size):\n        if position[i] + bid[i] < 0:\n            return False\n    return True", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@property\ndef active_deadline_seconds(self):\n    return 100", "buggy_source_code": "@property\ndef active_deadline_seconds(self):\n    return None", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __len__(self):\n    type_signature = _unfederated(self.type_signature)\n    if not type_signature.is_struct():\n        raise TypeError('Operator len() is only supported for (possibly federated) structuretypes, but the object on which it has been invoked is of type {}.'.format(self.type_signature))\n    return len(type_signature)", "buggy_source_code": "def __len__(self):\n    type_signature = _unfederated(self.type_signature)\n    if not type_signature.is_struct():\n        raise TypeError('Operator len() is only supported for (possibly federated) structure types, but the object on which it has been invoked is of type {}.'.format(self.type_signature))\n    return len(type_signature)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def find_stemming_output_product(self, site_id):\n    return self._find_stemming(site_id, PRED.hasMode, RT.DataProduct)", "buggy_source_code": "def find_stemming_output_product(self, site_id):\n    return self._find_stemming(site_id, PRED.hasModel, RT.DataProduct)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def dateStringToTimeValue(date):\n    try:\n        t = calendar.timegm(date, '%Y/%m/%d %H:%M:%S')\n        return long(time.mktime(t))\n    except OverflowError:\n        return long(0)", "buggy_source_code": "def dateStringToTimeValue(date):\n    try:\n        t = time.strptime(date, '%Y/%m/%d %H:%M:%S')\n        return long(calendar.timegm(t))\n    except ValueError:\n        return long(0)", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_flowcell_id(string):\n    return util.matchdefault('(?<=(_(A|B|D)))([A-Z]|[0-9])*XX', string)", "buggy_source_code": "def get_flowcell_id(string):\n    return util.matchdefault('(?<=(_(A|B|D)))([A-Z]|[0-9])*X(X|Y)', string)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def streak_celebration_is_active(course_key):\n    return courseware_mfe_is_active(course_key) and COURSEWARE_MICROFRONTEND_PROGRESS_MILESTONES_STREAK_CELEBRATION.is_enabled(course_key)", "buggy_source_code": "def streak_celebration_is_active(course_key):\n    return courseware_mfe_progress_milestones_are_active(course_key) and COURSEWARE_MICROFRONTEND_PROGRESS_MILESTONES_STREAK_CELEBRATION.is_enabled(course_key)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, filename, mode):\n    super(TftpFileReader, self).__init__(mode)\n    self._file = open(filename, mode='wb')", "buggy_source_code": "def __init__(self, filename, mode):\n    super(TftpFileWriter, self).__init__(mode)\n    self._file = open(filename, mode='wb')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _reportFailedTransfers(self, reportRequest):\n    return self.__reportTransfers(reportRequest, 'Failed', ('Suceeded', 1))", "buggy_source_code": "def _reportFailedTransfers(self, reportRequest):\n    return self.__reportTransfers(reportRequest, 'Failed', ('Succeeded', 1))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _plotFailedTransfers(self, reportRequest, plotInfo, filename):\n    return self.__plotTransfers(reportRequest, plotInfo, filename, 'Failed', ('Suceeded', 1))", "buggy_source_code": "def _plotFailedTransfers(self, reportRequest, plotInfo, filename):\n    return self.__plotTransfers(reportRequest, plotInfo, filename, 'Failed', ('Succeeded', 1))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _plotSuceededTransfers(self, reportRequest, plotInfo, filename):\n    return self.__plotTransfers(reportRequest, plotInfo, filename, 'Suceeded', ('Failed', 0))", "buggy_source_code": "def _plotSuceededTransfers(self, reportRequest, plotInfo, filename):\n    return self.__plotTransfers(reportRequest, plotInfo, filename, 'Succeeded', ('Failed', 0))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _reportSuceededTransfers(self, reportRequest):\n    return self.__reportTransfers(reportRequest, 'Suceeded', ('Failed', 0))", "buggy_source_code": "def _reportSuceededTransfers(self, reportRequest):\n    return self.__reportTransfers(reportRequest, 'Succeeded', ('Failed', 0))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    super(HProfCpuSamples, self).__init__(outputs=self.outputs, start_marker='SITES BEGIN', end_marker='SITES END', skip=2, data_re=HProfHeapSites._DATA_RE)", "buggy_source_code": "def __init__(self):\n    super(HProfHeapSites, self).__init__(outputs=self.outputs, start_marker='SITES BEGIN', end_marker='SITES END', skip=2, data_re=HProfHeapSites._DATA_RE)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def onchange_date_to(self, cr, uid, ids, date_from, date_to):\n    return onchange_date_from(cr, uid, ids, date_to, date_from)", "buggy_source_code": "def onchange_date_to(self, cr, uid, ids, date_from, date_to):\n    return self.onchange_date_from(cr, uid, ids, date_to, date_from)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _get_explicit_uris_from_generic_uri(self, fileobject, generic_uri):\n    if fileobject in self._generic_to_explicit_uri_map:\n        return self._generic_to_explicit_uri_map[fileobject].get(generic_uri)\n    return set()", "buggy_source_code": "def _get_explicit_uris_from_generic_uri(self, fileobject, generic_uri):\n    if fileobject not in self._generic_to_explicit_uri_map:\n        return set()\n    return self._generic_to_explicit_uri_map[fileobject].get(generic_uri)", "edit_actions": ["move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def WaitForEvent(self, tab, selector, event_name, timeout):\n    util.WaitFor(lambda : self.HasEventCompleted(tab, selector, event_name), timeout=timeout)", "buggy_source_code": "def WaitForEvent(self, tab, selector, event_name, timeout):\n    util.WaitFor(lambda : self.HasEventCompletedOrError(tab, selector, event_name), timeout=timeout)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.before_first_request\ndef initialize_workflow_cache():\n    global WorkflowCache\n    logger.debug(id(WorkflowCache))\n    logger.debug('Initializing workflow cache')\n    WorkflowCache = get_all_workflows()", "buggy_source_code": "@app.before_first_request\ndef initialize_workflow_cache():\n    global WorkflowCache\n    logger.debug(id(WorkflowCache))\n    logger.info('Initializing workflow cache')\n    WorkflowCache = get_all_workflows()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def usage(self):\n    helpmsg = 'Usage: %s -c /path/to/config.ini -- <command> [<arguments>]\\n\\nCommand:\\n\\thelp \\t\\t\\tPrint this message\\n\\n\\tstart\\t\\t\\tStarts the server\\n\\tstop\\t\\t\\tStops the server\\n\\tstatus\\t\\t\\tShows the status of the server\\n\\trestart\\t\\t\\tRestarts the Server\\n\\n\\tsay <msg>\\t\\tSay <msg> ingame\\n\\tcontrol <cmd>\\t\\tSends a raw command to the server\\n\\tupdate <version>\\tPerform backup and change to <version> (eg. 1.5.6)\\n\\twhitelist <user> \\tPerform backup and add <user> to whitelist\\n\\ttracer\\t\\t\\tLogs the players positions\\n\\ttracer-client\\tView and filter the tracer positions\\n\\tbackup <reason>\\t\\tBackups the server\\n\\t-restore [backup]\\tRestore a specific backup\\n\\toverviewer\\t\\tRenders the overviewer map\\n\\tirc <start|stop|restart|status>\\tControls the irc-bridge\\n\\n\\t-log\\t\\t\\tOpen the logfile with less\\n\\t-shell\\t\\t\\tShow the tail of the logfile and starts the minecraft shell\\n\\t\\t' % os.path.basename(__file__)\n    helpmsg = '%%HELPTEXT%%'\n    print(helpmsg)\n    exit(1)", "buggy_source_code": "def usage(self):\n    helpmsg = 'Usage: %s -c /path/to/config.ini -- <command> [<arguments>]\\n\\nCommand:\\n\\thelp \\t\\t\\tPrint this message\\n\\n\\tstart\\t\\t\\tStarts the server\\n\\tstop\\t\\t\\tStops the server\\n\\tstatus\\t\\t\\tShows the status of the server\\n\\trestart\\t\\t\\tRestarts the Server\\n\\n\\tsay <msg>\\t\\tSay <msg> ingame\\n\\tcontrol <cmd>\\t\\tSends a raw command to the server\\n\\tupdate <version>\\tPerform backup and change to <version> (eg. 1.5.6)\\n\\twhitelist <user> \\tPerform backup and add <user> to whitelist\\n\\ttracer\\t\\t\\tLogs the players positions\\n\\ttracer-client\\tView and filter the tracer positions\\n\\tbackup <reason>\\t\\tBackups the server\\n\\t(restore [backup]\\tRestore a specific backup)\\n\\toverviewer\\t\\tRenders the overviewer map\\n\\tirc <start|stop|restart|status>\\tControls the irc-bridge\\n\\n\\tlog\\t\\t\\tOpen the logfile with less\\n\\tshell\\t\\t\\tShow the tail of the logfile and starts the minecraft shell\\n\\t\\t' % os.path.basename(__file__)\n    helpmsg = '%%HELPTEXT%%'\n    print(helpmsg)\n    exit(1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _parse_plagiabot_result(turnitin_api_result):\n    result_data = []\n    for item in turnitin_api_result:\n        reports_data.append(_parse_report(item['report']))\n    return result_data", "buggy_source_code": "def _parse_plagiabot_result(turnitin_api_result):\n    result_data = []\n    for item in turnitin_api_result:\n        result_data.append(_parse_report(item['report']))\n    return result_data", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sendpushresponse(self, rsp):\n    self.sendresponse('')\n    self.sendresponse(str(rsp.res))", "buggy_source_code": "def sendpushresponse(self, rsp):\n    self.sendresponse(b'')\n    self.sendresponse(bytes(rsp.res))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, param_name='grnn.w', hidden_size=128):\n    self.param_name = param_name\n    self.hidden_size = hidden_size", "buggy_source_code": "def __init__(self, param_name='grnn', hidden_size=128):\n    self.param_name = param_name\n    self.hidden_size = hidden_size", "edit_actions": ["update-node"]}
{"fixed_source_code": "def has_option(self, opt):\n    return self.cf.has_option(self.main_section)", "buggy_source_code": "def has_option(self, opt):\n    return self.cf.has_option(self.main_section, opt)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef pip_notes():\n    os.system('cls' if sys.platform == 'win32' else 'clear')\n    pydoc.pager(\"\\n    If installing via PyPi (Python Pip) on Linux then you need to know that VidCutter\\n    depends on the following packages, grouped by distro. Install using your\\n    Linux software packager for a noticeably better integrated experience. \\n    \\n        ---[Ubuntu/Debian/Mint/etc]----------------------\\n            \\n            python3-dev libmpv1 libmpv-dev python3-pyqt5\\n            python3-pyqt5.qtopengl python3-opengl ffmpeg\\n            mediainfo\\n    \\n        ---[Arch Linux]----------------------------------\\n    \\n            python mpv python-pyqt5 python-opengl\\n            ffmpeg mediainfo\\n    \\n        ---[Fedora]--------------------------------------\\n        \\n            python3-devel mpv-libs mpv-libs-devel python3-qt5\\n            python3-pyopengl ffmpeg mediainfo\\n        \\n        ---[openSUSE]------------------------------------\\n            \\n            python3-devel libmpv1 mpv-devel python3-qt5\\n            python3-opengl ffmpeg mediainfo \\n\\n    You need to build a Python extension module before you can run the\\n    app directly from source code. This is done for you automatically by\\n    the package installers but if you wish to simply run the app direct\\n    from source without having to install it (i.e. python3 setup.py install)\\n    you can do so by building the extension module with the following\\n    setuptools command, run from the top-most extracted source code folder:\\n\\n        $ python3 setup.py build_ext -i\\n        \\n    And to then run the app directly from source, from the same top-most\\n    source code folder:\\n    \\n        $ python3 -m vidcutter (append --debug if needed)\\n        \\n    Make sure you build the extension module AFTER installing the\\n    dependencies covered above, in particular libmpv and the mpv + python3\\n    dev headers are all needed for it to compile successfully. Compiled\\n    extension modules under vidcutter/libs will similar to:\\n\\n        mpv.cpython-36m-x86_64-linux-gnu.so [linux]\\n        mpv.cp36-win_amd64.pyd              [win32]\\n        \\n    Windows users must do all this within a Visual Studio 2015/2017 Native x64/x86\\n    Developer Command Prompt accessible from your Visual Studio program group\\n    in the start menu. Much easier to just grab what I've already built for\\n    you direct from here:\\n\\n        https://github.com/ozmartian/vidcutter/releases/latest       \\n\")", "buggy_source_code": "@staticmethod\ndef pip_notes():\n    os.system('cls' if sys.platform == 'win32' else 'clear')\n    pydoc.pager(\"\\n    If installing via PyPi (Python Pip) on Linux then you need to know that VidCutter\\n    depends on the following packages, grouped by distro. Install using your\\n    Linux software packager for a noticeably better integrated experience.\\n    \\n        ---[Ubuntu/Debian/Mint/etc]----------------------\\n            \\n            python3-dev libmpv1 libmpv-dev python3-pyqt5\\n            python3-pyqt5.qtopengl python3-opengl ffmpeg\\n            mediainfo\\n    \\n        ---[Arch Linux]----------------------------------\\n    \\n            python mpv python-pyqt5 python-opengl\\n            ffmpeg mediainfo\\n    \\n        ---[Fedora]--------------------------------------\\n        \\n            python3-devel mpv-libs mpv-libs-devel python3-qt5\\n            python3-pyopengl ffmpeg mediainfo\\n        \\n        ---[openSUSE]------------------------------------\\n            \\n            python3-devel libmpv1 mpv-devel python3-qt5\\n            python3-opengl ffmpeg mediainfo \\n\\n    You need to build a Python extension module before you can run the\\n    app directly from source code. This is done for you automatically by\\n    the package installers but if you wish to simply run the app direct\\n    from source without having to install it (i.e. python3 setup.py install)\\n    you can do so by building the extension module with the following\\n    setuptools command, run from the top-most extracted source code folder:\\n\\n        $ python3 setup.py build_ext -i\\n        \\n    And to then run the app directly from source, from the same top-most\\n    source code folder:\\n    \\n        $ python3 -m vidcutter (append --debug if needed)\\n        \\n    Make sure you build the extension module AFTER installing the\\n    dependencies covered above, in particular libmpv and the mpv + python3\\n    dev headers are all needed for it to compile successfully. Compiled\\n    extension modules under vidcutter/libs will similar to:\\n\\n        mpv.cpython-36m-x86_64-linux-gnu.so [linux]\\n        mpv.cp36-win_amd64.pyd              [win32]\\n        \\n    Windows users must do all this within a Visual Studio 2015/2017 Native x64/x86\\n    Developer Command Prompt accessible from your Visual Studio program group\\n    in the start menu. Much easier to just grab what I've already built for\\n    you direct from here:\\n\\n        https://github.com/ozmartian/vidcutter/releases/latest\\n\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def full_name(self, obj):\n    return obj.first + ' ' + obj.last", "buggy_source_code": "def full_name(self, author):\n    return '{}, {}'.format(author.last, author.first)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __call__(self, *args, **kwargs):\n    self.func(self.agent, *self.args, **self.kwargs)", "buggy_source_code": "def __call__(self, *args, **kwargs):\n    return self.func(self.agent, *self.args, **self.kwargs)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def start(self):\n    assert not self.is_started()\n    self._active = _Active(self)\n    self._queue = _Queue.Queue()", "buggy_source_code": "def start(self):\n    assert not self.is_started()\n    self._active = _Active()\n    self._queue = _Queue.Queue()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def include_partition(self, partname):\n    return False", "buggy_source_code": "def include_partition(self, part_name):\n    return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def map_drive_name(self, partname):\n    return partname", "buggy_source_code": "def map_drive_name(self, part_name):\n    return part_name", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def create_runscript(cmd, base_dir):\n    runscript = '%s/singularity' % base_dir\n    content = '!#/bin/sh\\n\\n%s' % cmd\n    output_file = write_file(runscript, content)\n    return output_file", "buggy_source_code": "def create_runscript(cmd, base_dir):\n    runscript = '%s/singularity' % base_dir\n    content = '#!/bin/sh\\n\\n%s' % cmd\n    output_file = write_file(runscript, content)\n    return output_file", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main():\n    config = Config('config.yml')\n    print(gather_rules(config.firewall_hostname, config.firewall_api_key))", "buggy_source_code": "def main():\n    config = Config('config.yml')\n    print(retrieve_firewall_configuration(config.firewall_hostname, config.firewall_api_key))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef too_long(cls, **kwargs):\n    time.sleep(2)", "buggy_source_code": "@classmethod\ndef too_long(cls, **kwargs):\n    time.sleep(0.1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ytHTML(match):\n    uid = match.group('uid')\n    return '\\n        <iframe width=\"500\" height=\"218\" \\n                src=\"//www.youtube.com/embed/%s\" frameborder=\"0\" \\n                allowfullscreen></iframe>\\n           ' % uid", "buggy_source_code": "def ytHTML(match):\n    uid = match.group('uid')\n    return '\\n        <iframe width=\"500\" height=\"281\" \\n                src=\"//www.youtube.com/embed/%s\" frameborder=\"0\" \\n                allowfullscreen></iframe>\\n           ' % uid", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testDefaultInArg(self):\n    runTest(self, 'arg.asm', 'Hello default World!')", "buggy_source_code": "def testDefaultInArg(self):\n    runTestFailsToAssembleDetailed(self, 'arg.asm', ['21:16: error: use of void as input register:', '20:12: error: in function foo/1'])", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def symbol_to_path(symbol, base_dir='../data'):\n    return os.path.join(base_dir, '{}.csv'.format(str(symbol)))", "buggy_source_code": "def symbol_to_path(symbol, base_dir='..\\\\data'):\n    return os.path.join(base_dir, '{}.csv'.format(str(symbol)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_as_cancel(voucher_type, voucher_no):\n    frappe.db.sql('update `tabGL Entry` set is_cancelled = 1,\\n\\t\\tmodified=%s, modified_by=%s\\n\\t\\twhere voucher_type=%s and voucher_no=%s and is_cancelled = 0', (now(), frappe.session.user, voucher_type, voucher_no))", "buggy_source_code": "def set_as_cancel(voucher_type, voucher_no):\n    frappe.db.sql('UPDATE `tabGL Entry` SET is_cancelled = 1,\\n\\t\\tmodified=%s, modified_by=%s\\n\\t\\twhere voucher_type=%s and voucher_no=%s and is_cancelled = 0', (now(), frappe.session.user, voucher_type, voucher_no))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_client_script(tunnel):\n    return '#!/bin/bash\\n\\nset -ex\\n\\ninstall_pkg() {\\n    echo \"Searching for apt-get, yum, or zypper..\"\\n    if which apt-get > /dev/null; then\\n        apt-get update && apt-get install -y $1\\n    elif which yum > /dev/null; then\\n        yum update && yum install -y $1\\n    elif which zypper > /dev/null; then\\n        zypper refresh && zypper install $1\\n    else\\n        echo \"Could not find a package management tool\"\\n        exit 1\\n    fi\\n}\\n\\nif ! which openvpn > /dev/null; then\\n    install_pkg openvpn\\nfi\\n\\ncat > %(key_path)s << EOF\\n%(key)s\\nEOF\\n\\ncat > %(conf_path)s << EOF\\n%(conf)s\\nEOF\\n\\nif which systemctl > /dev/null; then\\n    systemctl restart openvpn@%(name)s\\nelse\\n    service openvpn restart %(name)s\\nfi\\n\\necho 1 > /proc/sys/net/ipv4/ip_forward\\n\\nifaces=`ip link show | grep \\'^[0-9]*:\\' | awk \\'{print $2}\\' | sed \\'s/:$//\\' |     grep -v ^lo$`\\nfor iface in $ifaces; do\\n    iptables -t nat -A POSTROUTING -o $iface -j MASQUERADE\\ndone\\n' % {'key_path': tunnel.key_path, 'conf_path': tunnel.conf_path, 'key': tunnel.key, 'conf': get_client_conf(tunnel), 'name': tunnel.name}", "buggy_source_code": "def get_client_script(tunnel):\n    return '#!/bin/bash\\n\\nset -ex\\n\\ninstall_pkg() {\\n    echo \"Searching for apt-get, yum, or zypper..\"\\n    if which apt-get > /dev/null; then\\n        apt-get update && apt-get install -y $1\\n    elif which yum > /dev/null; then\\n        yum update -y && yum install -y $1\\n    elif which zypper > /dev/null; then\\n        zypper refresh && zypper install $1\\n    else\\n        echo \"Could not find a package management tool\"\\n        exit 1\\n    fi\\n}\\n\\nif ! which openvpn > /dev/null; then\\n    install_pkg openvpn\\nfi\\n\\ncat > %(key_path)s << EOF\\n%(key)s\\nEOF\\n\\ncat > %(conf_path)s << EOF\\n%(conf)s\\nEOF\\n\\nif which systemctl > /dev/null; then\\n    systemctl restart openvpn@%(name)s\\nelse\\n    service openvpn restart %(name)s\\nfi\\n\\necho 1 > /proc/sys/net/ipv4/ip_forward\\n\\nifaces=`ip link show | grep \\'^[0-9]*:\\' | awk \\'{print $2}\\' | sed \\'s/:$//\\' |     grep -v ^lo$`\\nfor iface in $ifaces; do\\n    iptables -t nat -A POSTROUTING -o $iface -j MASQUERADE\\ndone\\n' % {'key_path': tunnel.key_path, 'conf_path': tunnel.conf_path, 'key': tunnel.key, 'conf': get_client_conf(tunnel), 'name': tunnel.name}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getCurrent(self):\n    l = self.l.getCurrentSelection()\n    return l or l[0]", "buggy_source_code": "def getCurrent(self):\n    l = self.l.getCurrentSelection()\n    return l and l[0]", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def get_item_code(order_item):\n    asin = order_item.ASIN\n    item_code = frappe.db.get_value('Item', {'amazon_item_code': asin}, 'item_code')\n    if item_code:\n        return item_code", "buggy_source_code": "def get_item_code(order_item):\n    sku = order_item.SellerSKU\n    item_code = frappe.db.get_value('Item', {'item_code': sku}, 'item_code')\n    if item_code:\n        return item_code", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __ge__(self, other):\n    return self.compare_to(other) > 0", "buggy_source_code": "def __ge__(self, other):\n    return self.compare_to(other) >= 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def execute_install(self, deployment_id, verbose=False, include_logs=True, execute_timeout=DEFAULT_EXECUTE_TIMEOUT):\n    self._execute_workflow('install', deployment_id=deployment_id, execute_timeout=execute_timeout, verbose=verbose, include_logs=include_logs)", "buggy_source_code": "def execute_install(self, deployment_id, verbose=False, include_logs=True, execute_timeout=DEFAULT_EXECUTE_TIMEOUT):\n    self._execute_workflow(workflow='install', deployment_id=deployment_id, execute_timeout=execute_timeout, verbose=verbose, include_logs=include_logs)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_provider_context(self):\n    with self.workdir:\n        settings = _load_cosmo_working_dir_settings()\n        return settings.get_provider_context()", "buggy_source_code": "def get_provider_context(self):\n    with self.workdir:\n        settings = load_cloudify_working_dir_settings()\n        return settings.get_provider_context()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_management_ip(self):\n    with self.workdir:\n        settings = _load_cosmo_working_dir_settings()\n        return settings.get_management_server()", "buggy_source_code": "def get_management_ip(self):\n    with self.workdir:\n        settings = load_cloudify_working_dir_settings()\n        return settings.get_management_server()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def upload_blueprint(self, blueprint_id, blueprint_path, verbose=False):\n    with self.workdir:\n        cfy.blueprints.upload(blueprint_path, blueprint_id=blueprint_id, verbosity=verbose).wait()", "buggy_source_code": "def upload_blueprint(self, blueprint_id, blueprint_path, verbose=False):\n    with self.workdir:\n        cfy.blueprints.upload(blueprint_path=blueprint_path, blueprint_id=blueprint_id, verbosity=verbose).wait()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def run(self):\n    output = shellout('LC_ALL=C grep \"doi.org\" <(unpigz -c {input}) |\\n                             LC_ALL=C sed -e \\'s@<ee>http://dx.doi.org/@@g\\' |\\n                             LC_ALL=C sed -e \\'s@</ee>@@g\\' |\\n                             LC_ALL=C grep ^10 |\\n                             LC_ALL=C sort -S50% > {output}', input=self.input().path)\n    luigi.LocalTarget(output).move(self.output().path)", "buggy_source_code": "def run(self):\n    output = shellout('LC_ALL=C grep \"doi.org\" <(unpigz -c {input}) |\\n                             LC_ALL=C sed -e \\'s@<ee>https://doi.org/@@g;s@</ee>@@g\\' |\\n                             LC_ALL=C grep ^10 |\\n                             LC_ALL=C sort -S50% > {output}', input=self.input().path)\n    luigi.LocalTarget(output).move(self.output().path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _is_valid_src(self, state, index):\n    return not state.is_empty_at_index(index)", "buggy_source_code": "def _is_valid_src(self, state, index):\n    try:\n        return not state.is_empty_at_index(index)\n    except:\n        return False", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, rate, burst_size, experimenter):\n    super(OFPMeterBandDscpRemark, self).__init__()\n    self.rate = rate\n    self.burst_size = burst_size\n    self.experimenter = experimenter", "buggy_source_code": "def __init__(self, rate, burst_size, experimenter):\n    super(OFPMeterBandExperimenter, self).__init__()\n    self.rate = rate\n    self.burst_size = burst_size\n    self.experimenter = experimenter", "edit_actions": ["update-node"]}
{"fixed_source_code": "def save_twitter_token(self, access_token, access_token_secret):\n    db.execute('INSERT INTO twitter_accounts(user_id, access_token_key, access_token_secret) VALUES(?, ?, ?);', (id, access_token, access_token_secret))\n    db.commit()", "buggy_source_code": "def save_twitter_token(self, access_token, access_token_secret):\n    db.execute('INSERT INTO twitter_accounts(user_id, access_token_key, access_token_secret) VALUES(?, ?, ?);', (self.uid, access_token, access_token_secret))\n    db.commit()", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def main():\n    app = App(c_width=400, c_height=400)\n    app.mainloop()", "buggy_source_code": "def main():\n    app = App(c_width=800, c_height=800)\n    app.mainloop()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def save_and_exit(self, args):\n    if self.save():\n        self.parent.refreshScreen()\n        time.sleep(1.5)\n        self.parent.exit_program()", "buggy_source_code": "def save_and_exit(self, args):\n    if self.save():\n        self.parent.refreshScreen()\n        time.sleep(1.5)\n        self.parent.exit_program(None)", "edit_actions": []}
{"fixed_source_code": "def getFormat(self):\n    return 'nxs'", "buggy_source_code": "def getFormat(self):\n    return '.nxs'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def includeme(config):\n    config.add_directory('set_sqlalchemy_session_factory', set_sqlalchemy_session_factory)", "buggy_source_code": "def includeme(config):\n    config.add_directive('set_sqlalchemy_session_factory', set_sqlalchemy_session_factory)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_last_updated_str(self, last_update):\n    timedelta = datetime.datetime.now() - last_update\n    return '%d seconds ago' % timedelta.total_seconds()", "buggy_source_code": "def get_last_updated_str(self, last_update):\n    now_datetime = datetime.datetime.now()\n    return '@ %s' % now_datetime.strftime('%H:%M:%S')", "edit_actions": ["update-node", "move-tree", "update-node", "update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef from_rep(d):\n    return long(d)", "buggy_source_code": "@staticmethod\ndef from_rep(d):\n    return int(d)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def backward(self, indexes, grad_outputs):\n    (x,) = self.get_retained_inputs()\n    (gy,) = grad_outputs\n    return (gy * x ** (-1.5) * -0.5,)", "buggy_source_code": "def backward(self, indexes, grad_outputs):\n    (y,) = self.get_retained_outputs()\n    (gy,) = grad_outputs\n    return (gy * y ** 3 * -0.5,)", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@app.route('/alchemy')\ndef ConfirmConnection():\n    key = json.loads(os.getenv('alchemyKey'))[0]\n    return key", "buggy_source_code": "@app.route('/alchemy')\ndef ConfirmConnection():\n    key = os.environ.get('alchemyKey')\n    return key", "edit_actions": ["update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def case_open_send_note(self, cr, uid, ids, context=None):\n    return self.message_post(cr, uid, ids, body=_('Task <b>started</b>.'), subtype='project_issue.mt_issue_started', context=context)", "buggy_source_code": "def case_open_send_note(self, cr, uid, ids, context=None):\n    return self.message_post(cr, uid, ids, body=_('Issue <b>started</b>.'), subtype='project_issue.mt_issue_started', context=context)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _apply_recipe(self, x):\n    self._recipe.apply(x)", "buggy_source_code": "def _apply_recipe(self, x):\n    return self._recipe.apply(x)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _apply_recipe(self, x):\n    self._recipe.apply(x)", "buggy_source_code": "def _apply_recipe(self, x):\n    return self._recipe.apply(x)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def attributeMap(self):\n    return dict(self._props['attributeMap'])", "buggy_source_code": "def attributeMap(self):\n    return copy.deepcopy(self._props['attributeMap'])", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def __ne__(self, other, skipSet=None):\n    return self.__eq__(other, skipSet=skipSet)", "buggy_source_code": "def __ne__(self, other, skipSet=None):\n    return not self.__eq__(other, skipSet=skipSet)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def sign(num):\n    return num / ans(num)", "buggy_source_code": "def sign(num):\n    return num / abs(num)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __eq__(self, obj):\n    try:\n        return self._args == obj._args and self._kwargs == self._kwargs\n    except AttributeError:\n        return False", "buggy_source_code": "def __eq__(self, obj):\n    try:\n        return self._args == obj._args and self._kwargs == obj._kwargs\n    except AttributeError:\n        return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_archives_url(self, year):\n    format = self._get_url_format(self.config['tags_url'].endswith('/'))\n    return format.format(self.config['archives_url'], year)", "buggy_source_code": "def _get_archives_url(self, year):\n    format = self._get_url_format(self.config['archives_url'].endswith('/'))\n    return format.format(self.config['archives_url'], year)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mousePressEvent(self, event):\n    if self._mouse_over_line:\n        block = self.editor.document().findBlockByNumber(self._mouse_over_line)\n        self.toggle_fold_trigger(block)", "buggy_source_code": "def mousePressEvent(self, event):\n    if self._mouse_over_line is not None:\n        block = self.editor.document().findBlockByNumber(self._mouse_over_line)\n        self.toggle_fold_trigger(block)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _choose_diecase(self):\n    self.diecase = matrix_data.Diecase()\n    self.wedge = self.diecase.wedge", "buggy_source_code": "def _choose_diecase(self):\n    self.diecase = matrix_data.choose_diecase()\n    self.wedge = self.diecase.wedge", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _choose_ribbon(self):\n    self.ribbon = typesetting_data.Ribbon()\n    self.diecase = self.ribbon.diecase\n    self.wedge = self.diecase.wedge", "buggy_source_code": "def _choose_ribbon(self):\n    self.ribbon = typesetting_data.choose_ribbon()\n    self.diecase = self.ribbon.diecase\n    self.wedge = self.diecase.wedge", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _choose_wedge(self):\n    self.wedge = wedge_data.Wedge(0)", "buggy_source_code": "def _choose_wedge(self):\n    self.wedge = wedge_data.choose_wedge()", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def __handle_notify_start(self, data=None):\n    provider = self._parent._application.get_provider_by_path(self._parent._entry_path.get_text())\n    self._provider = provider(self._parent._application)", "buggy_source_code": "def __handle_notify_start(self, data=None):\n    Provider = self._parent._application.get_provider_by_path(self._parent._entry_path.get_text())\n    self._provider = Provider(self._parent._application)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def command_admin_add(self, nick, host, channel, this_command, argstr):\n    (admin_nick, admin_host) = parse_admin_arg(argstr)\n    self.admins.add((admin_nick, admin_host))", "buggy_source_code": "def command_admin_add(self, nick, host, channel, this_command, argstr):\n    (admin_nick, admin_host) = self.parse_admin_arg(argstr)\n    self.admins.add((admin_nick, admin_host))", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def command_admin_remove(self, nick, host, channel, this_command, argstr):\n    (admin_nick, admin_host) = parse_admin_arg(argstr)\n    self.admins.discard((admin_nick, admin_host))", "buggy_source_code": "def command_admin_remove(self, nick, host, channel, this_command, argstr):\n    (admin_nick, admin_host) = self.parse_admin_arg(argstr)\n    self.admins.discard((admin_nick, admin_host))", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    super(Application, self).__init__()", "buggy_source_code": "def __init__(self):\n    super(PrinterApplication, self).__init__()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '({}, {})'.format(self.name, self.event_type)", "buggy_source_code": "def __str__(self):\n    base_str = 'qasm_event: \"{:10s}\", params={}, duration={}'\n    repr = base_str.format(self.name, self.params, self.duration)\n    return repr", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def insertFrameIntoTable(self, wkb):\n    sql = 'INSERT INTO aux_moldura_a(geom) VALUES(ST_GeomFromText(' + wkt + '))'\n    return sql", "buggy_source_code": "def insertFrameIntoTable(self, wkt):\n    sql = 'INSERT INTO aux_moldura_a(GEOMETRY) VALUES(geomfromtext(' + wkt + '))'\n    return sql", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef hsv(self):\n    raise NotImplemented", "buggy_source_code": "@property\ndef hsv(self):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef rgb(self):\n    raise NotImplemented", "buggy_source_code": "@property\ndef rgb(self):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '%s' % getattr(self, 'value', '')", "buggy_source_code": "def __repr__(self):\n    return '%s' % self.value", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def sort(self, reverse=False):\n    self.proxy('sort')(desc=reverse, store=self.key)", "buggy_source_code": "def sort(self, reverse=False):\n    self._proxy('sort')(desc=reverse, store=self.key)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test__getattr__(self):\n    d1 = slovar()\n    with pytest.raises(AttributeError):\n        d1.NOTTHERE\n    d1['a'] = 1", "buggy_source_code": "def test__getattr__(self):\n    d1 = slovar()\n    with pytest.raises(DKeyError):\n        d1.NOTTHERE\n    d1['a'] = 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testAddPermitsNotExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.removePermits('TestUser9'), True)", "buggy_source_code": "def testAddPermitsNotExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.addPermits('TestUser9'), True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testGetPermitsNotExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.getPermits('TestUser11'), None)", "buggy_source_code": "def testGetPermitsNotExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.getPermit('TestUser11'), None)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testGetPermitsExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.getPermits('TestUser4'), '2009-06-11 08:55:36')", "buggy_source_code": "def testGetPermitsExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.getPermit('TestUser4'), '2009-06-11 08:55:36')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testIsPermittedNotExpired(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    ganon.addPermit('PCarton')\n    self.assertEqual(ganon.isPermitted('PCarton'), True)", "buggy_source_code": "def testIsPermittedNotExpired(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    ganon.addPermits('PCarton')\n    self.assertEqual(ganon.isPermitted('PCarton'), True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testRemovePermitsNotExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.addPermits('TestUser0'), False)", "buggy_source_code": "def testRemovePermitsNotExisting(self):\n    ganon.loadConfig(self.CONFIG_PATH)\n    self.assertEqual(ganon.removePermits('TestUser0'), False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def adiabatic_bulk_modulus(self, pressure, temperature, volume, params):\n    return bulk_bulk_modulus(pressure, params)", "buggy_source_code": "def adiabatic_bulk_modulus(self, pressure, temperature, volume, params):\n    return bulk_modulus(pressure, params)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def apply(self, aggregate: 'Cargo') -> None:\n    aggregate.projection(self)", "buggy_source_code": "def apply(self, aggregate: 'Cargo') -> None:\n    aggregate.apply(self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@contextmanager\ndef enter_directory(dir, val=None):\n    original_dir = os.getcwd()\n    os.chdir(dir)\n    yield val\n    os.chdir(original_dir)", "buggy_source_code": "@contextmanager\ndef enter_directory(dir, val=None):\n    while True:\n        original_dir = os.getcwd()\n        os.chdir(dir)\n        yield val\n        os.chdir(original_dir)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _compute_prediction(self, xhatminus):\n    return dot(self.C, xhatminus)", "buggy_source_code": "def _compute_prediction(self, xhatminus):\n    return numpy.dot(self.C, xhatminus)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def lookup_pandora_track(self, uri):\n    try:\n        return self._pandora_history[uri]\n    except KeyError:\n        logger.error(\"Failed to lookup '%s' in uri translation map.\", uri)\n        return None", "buggy_source_code": "def lookup_pandora_track(self, uri):\n    try:\n        return self._pandora_history[uri]\n    except KeyError:\n        logger.error(\"Failed to lookup '%s' in Pandora track history.\", uri)\n        return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, client):\n    self.nova_client = client\n    LOG.info(_LI('Initialized %s with novaclient %s'), self.__class__.__name__, self.nova_client)", "buggy_source_code": "def __init__(self, client):\n    self.nova_client = client\n    LOG.debug(_LI('Initialized %s with novaclient %s'), self.__class__.__name__, self.nova_client)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_attrs(self, attrs, username):\n    pass", "buggy_source_code": "def set_attrs(self, username, attrs):\n    pass", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_get_dusty_images(self):\n    self.assertEqual(get_dusty_images(), set(['app/a:latest', 'app/b:latest']))", "buggy_source_code": "def test_get_dusty_images(self):\n    self.assertEqual(get_dusty_images(), set(['app/a:latest', 'app/b:latest', 'service/a:latest']))", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_expected(file):\n    return 'requests/expected/{}.json'.format(file)", "buggy_source_code": "def get_expected(file):\n    return '{}/requests/expected/{}.json'.format(get_current_directory(), file)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_input(file):\n    return 'requests/input/{}.json'.format(file)", "buggy_source_code": "def get_input(file):\n    return '{}/requests/input/{}.json'.format(get_current_directory(), file)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_output(file):\n    return 'requests/output/{}.json'.format(file)", "buggy_source_code": "def get_output(file):\n    return '{}/requests/output/{}.json'.format(get_current_directory(), file)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, url, periods):\n    super(MountainForecast, self).__init__(url, periods)\n    self.xml = BeautifulSoup(urllib2.urlopen(url))\n    self.periodPattern = '{date}{time} {sybmol} {rain}mm {wind}m/s {temp1}-{temp2}C '", "buggy_source_code": "def __init__(self, url, periods):\n    super(MountainForecast, self).__init__(url, periods)\n    self.xml = BeautifulSoup(urllib2.urlopen(url))\n    self.periodPattern = '{date}{time} {sybmol} {rain}mm {wind}km/h {temp1}-{temp2}C '", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture\ndef core_config(tmpdir):\n    tmpdir = Path(tmpdir)\n    return CoreConfig(config_dir=tmpdir / 'config', cache_dir=tmpdir / 'cache', data_dir=tmpdir / 'data', mountpoint_base_dir=tmpdir / 'mnt')", "buggy_source_code": "@pytest.fixture\ndef core_config(tmpdir):\n    tmpdir = Path(tmpdir)\n    return CoreConfig(config_dir=tmpdir / 'config', cache_base_dir=tmpdir / 'cache', data_base_dir=tmpdir / 'data', mountpoint_base_dir=tmpdir / 'mnt')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def has_quotation(self):\n    return frappe.db.get_value('Quotation', {'lead': self.name, 'docstatus': 1, 'status': ['!=', 'Lost']})", "buggy_source_code": "def has_quotation(self):\n    return frappe.db.get_value('Quotation', {'customer_lead': self.name, 'docstatus': 1, 'status': ['!=', 'Lost']})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def before_all(context):\n    context.data_path = '/data/users/kkolman/test_data'\n    context.p2g_path = 'POLAR2GRID_HOME/test_swbundle/bin'", "buggy_source_code": "def before_all(context):\n    context.data_path = '/data/users/kkolman/test_data'\n    context.p2g_path = '$POLAR2GRID_HOME/test_swbundle/bin'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def addFriend(self, personRef):\n    self.attemptAddAsURI(self.me, URIRef(foafp + 'knows'), personRef)", "buggy_source_code": "def addFriend(self, personRef):\n    self.graph.add((self.me, URIRef(foafp + 'knows'), personRef))", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return (\"<AircraftModel: id=%d tzid='%s'>\" % (self.id, self.tzid)).encode('unicode_escape')", "buggy_source_code": "def __repr__(self):\n    return (\"<TimeZone: id=%d tzid='%s'>\" % (self.id, self.tzid)).encode('unicode_escape')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, species_map, supercell_dim, valences=None, radii=None):\n    self._species_map = specie_map\n    self.supercell_dim = supercell_dim\n    self.valences = valences\n    self.radii = radii", "buggy_source_code": "def __init__(self, species_map, supercell_dim, valences=None, radii=None):\n    self._species_map = species_map\n    self.supercell_dim = supercell_dim\n    self.valences = valences\n    self.radii = radii", "edit_actions": ["update-node"]}
{"fixed_source_code": "def to_json(self):\n    template = Template('{\\n        \"AllocatedStorage\": 10,\\n        \"AutoMinorVersionUpgrade\": \"{{ database.auto_minor_version_upgrade }}\",\\n        \"AvailabilityZone\": \"{{ database.availability_zone }}\",\\n        \"BackupRetentionPeriod\": \"{{ database.backup_retention_period }}\",\\n        \"CharacterSetName\": {%- if database.character_set_name -%}{{ database.character_set_name }}{%- else %} null{%- endif -%},\\n        \"DBInstanceClass\": \"{{ database.db_instance_class }}\",\\n        \"DBInstanceIdentifier\": \"{{ database.db_instance_identifier }}\",\\n        \"DBInstanceStatus\": \"{{ database.status }}\",\\n        \"DBName\": {%- if database.db_name -%}{{ database.db_name }}{%- else %} null{%- endif -%},\\n        {% if database.db_parameter_group_name -%}\"DBParameterGroups\": {\\n            \"DBParameterGroup\": {\\n            \"ParameterApplyStatus\": \"in-sync\",\\n            \"DBParameterGroupName\": \"{{ database.db_parameter_group_name }}\"\\n          }\\n        },{%- endif %}\\n        \"DBSecurityGroups\": [\\n          {% for security_group in database.security_groups -%}{%- if loop.index != 1 -%},{%- endif -%}\\n          {\"DBSecurityGroup\": {\\n            \"Status\": \"active\",\\n            \"DBSecurityGroupName\": \"{{ security_group }}\"\\n          }}{% endfor %}\\n        ],\\n        {%- if database.db_subnet_group -%}{{ database.db_subnet_group.to_json() }},{%- endif %}\\n        \"Engine\": \"{{ database.engine }}\",\\n        \"EngineVersion\": \"{{ database.engine_version }}\",\\n        \"LatestRestorableTime\": null,\\n        \"LicenseModel\": \"{{ database.license_model }}\",\\n        \"MasterUsername\": \"{{ database.master_username }}\",\\n        \"MultiAZ\": \"{{ database.multi_az }}\",{% if database.option_group_name %}\\n        \"OptionGroupMemberships\": [{\\n          \"OptionGroupMembership\": {\\n            \"OptionGroupName\": \"{{ database.option_group_name }}\",\\n            \"Status\": \"in-sync\"\\n          }\\n        }],{%- endif %}\\n        \"PendingModifiedValues\": { \"MasterUserPassword\": \"****\" },\\n        \"PreferredBackupWindow\": \"{{ database.preferred_backup_window }}\",\\n        \"PreferredMaintenanceWindow\": \"{{ database.preferred_maintenance_window }}\",\\n        \"PubliclyAccessible\": \"{{ database.publicly_accessible }}\",\\n        \"AllocatedStorage\": \"{{ database.allocated_storage }}\",\\n        \"Endpoint\": {\\n            \"Address\": \"{{ database.address }}\",\\n            \"Port\": \"{{ database.port }}\"\\n        },\\n        \"InstanceCreateTime\": null,\\n        \"Iops\": null,\\n        \"ReadReplicaDBInstanceIdentifiers\": [{%- for replica in database.replicas -%}\\n            {%- if not loop.first -%},{%- endif -%}\\n            \"{{ replica }}\"\\n        {%- endfor -%}\\n        ],\\n        {%- if database.source_db_identifier -%}\\n        \"ReadReplicaSourceDBInstanceIdentifier\": \"{{ database.source_db_identifier }}\",\\n        {%- else -%}\\n        \"ReadReplicaSourceDBInstanceIdentifier\": null,\\n        {%- endif -%}\\n        \"SecondaryAvailabilityZone\": null,\\n        \"StatusInfos\": null,\\n        \"VpcSecurityGroups\": [\\n            {\\n                \"Status\": \"active\",\\n                \"VpcSecurityGroupId\": \"sg-123456\"\\n            }\\n        ]\\n      }')\n    return template.render(database=self)", "buggy_source_code": "def to_json(self):\n    template = Template('{\\n        \"AllocatedStorage\": 10,\\n        \"AutoMinorVersionUpgrade\": \"{{ database.auto_minor_version_upgrade }}\",\\n        \"AvailabilityZone\": \"{{ database.availability_zone }}\",\\n        \"BackupRetentionPeriod\": \"{{ database.backup_retention_period }}\",\\n        \"CharacterSetName\": {%- if database.character_set_name -%}{{ database.character_set_name }}{%- else %} null{%- endif -%},\\n        \"DBInstanceClass\": \"{{ database.db_instance_class }}\",\\n        \"DBInstanceIdentifier\": \"{{ database.db_instance_identifier }}\",\\n        \"DBInstanceStatus\": \"{{ database.status }}\",\\n        \"DBName\": {%- if database.db_name -%}\"{{ database.db_name }}\"{%- else %} null{%- endif -%},\\n        {% if database.db_parameter_group_name -%}\"DBParameterGroups\": {\\n            \"DBParameterGroup\": {\\n            \"ParameterApplyStatus\": \"in-sync\",\\n            \"DBParameterGroupName\": \"{{ database.db_parameter_group_name }}\"\\n          }\\n        },{%- endif %}\\n        \"DBSecurityGroups\": [\\n          {% for security_group in database.security_groups -%}{%- if loop.index != 1 -%},{%- endif -%}\\n          {\"DBSecurityGroup\": {\\n            \"Status\": \"active\",\\n            \"DBSecurityGroupName\": \"{{ security_group }}\"\\n          }}{% endfor %}\\n        ],\\n        {%- if database.db_subnet_group -%}{{ database.db_subnet_group.to_json() }},{%- endif %}\\n        \"Engine\": \"{{ database.engine }}\",\\n        \"EngineVersion\": \"{{ database.engine_version }}\",\\n        \"LatestRestorableTime\": null,\\n        \"LicenseModel\": \"{{ database.license_model }}\",\\n        \"MasterUsername\": \"{{ database.master_username }}\",\\n        \"MultiAZ\": \"{{ database.multi_az }}\",{% if database.option_group_name %}\\n        \"OptionGroupMemberships\": [{\\n          \"OptionGroupMembership\": {\\n            \"OptionGroupName\": \"{{ database.option_group_name }}\",\\n            \"Status\": \"in-sync\"\\n          }\\n        }],{%- endif %}\\n        \"PendingModifiedValues\": { \"MasterUserPassword\": \"****\" },\\n        \"PreferredBackupWindow\": \"{{ database.preferred_backup_window }}\",\\n        \"PreferredMaintenanceWindow\": \"{{ database.preferred_maintenance_window }}\",\\n        \"PubliclyAccessible\": \"{{ database.publicly_accessible }}\",\\n        \"AllocatedStorage\": \"{{ database.allocated_storage }}\",\\n        \"Endpoint\": {\\n            \"Address\": \"{{ database.address }}\",\\n            \"Port\": \"{{ database.port }}\"\\n        },\\n        \"InstanceCreateTime\": null,\\n        \"Iops\": null,\\n        \"ReadReplicaDBInstanceIdentifiers\": [{%- for replica in database.replicas -%}\\n            {%- if not loop.first -%},{%- endif -%}\\n            \"{{ replica }}\"\\n        {%- endfor -%}\\n        ],\\n        {%- if database.source_db_identifier -%}\\n        \"ReadReplicaSourceDBInstanceIdentifier\": \"{{ database.source_db_identifier }}\",\\n        {%- else -%}\\n        \"ReadReplicaSourceDBInstanceIdentifier\": null,\\n        {%- endif -%}\\n        \"SecondaryAvailabilityZone\": null,\\n        \"StatusInfos\": null,\\n        \"VpcSecurityGroups\": [\\n            {\\n                \"Status\": \"active\",\\n                \"VpcSecurityGroupId\": \"sg-123456\"\\n            }\\n        ]\\n      }')\n    return template.render(database=self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@_np.deprecate(message='scipy.constants.C2K is deprecated in scipy 0.18.0. Use scipy.constants.convert_teperature instead. Note that the new function has a different signature.')\ndef C2K(C):\n    return _np.asanyarray(C) + zero_Celsius", "buggy_source_code": "@_np.deprecate(message='scipy.constants.C2K is deprecated in scipy 0.18.0. Use scipy.constants.convert_temperature instead. Note that the new function has a different signature.')\ndef C2K(C):\n    return _np.asanyarray(C) + zero_Celsius", "edit_actions": ["update-node"]}
{"fixed_source_code": "@_np.deprecate(message='scipy.constants.F2C is deprecated in scipy 0.18.0. Use scipy.constants.convert_teperature instead. Note that the new function has a different signature.')\ndef F2C(F):\n    return (_np.asanyarray(F) - 32) / 1.8", "buggy_source_code": "@_np.deprecate(message='scipy.constants.F2C is deprecated in scipy 0.18.0. Use scipy.constants.convert_temperature instead. Note that the new function has a different signature.')\ndef F2C(F):\n    return (_np.asanyarray(F) - 32) / 1.8", "edit_actions": ["update-node"]}
{"fixed_source_code": "@_np.deprecate(message='scipy.constants.C2F is deprecated in scipy 0.18.0. Use scipy.constants.convert_teperature instead. Note that the new function has a different signature.')\ndef C2F(C):\n    return 1.8 * _np.asanyarray(C) + 32", "buggy_source_code": "@_np.deprecate(message='scipy.constants.C2F is deprecated in scipy 0.18.0. Use scipy.constants.convert_temperature instead. Note that the new function has a different signature.')\ndef C2F(C):\n    return 1.8 * _np.asanyarray(C) + 32", "edit_actions": ["update-node"]}
{"fixed_source_code": "@_np.deprecate(message='scipy.constants.K2F is deprecated in scipy 0.18.0. Use scipy.constants.convert_teperature instead. Note that the new function has a different signature.')\ndef K2F(K):\n    return C2F(K2C(_np.asanyarray(K)))", "buggy_source_code": "@_np.deprecate(message='scipy.constants.K2F is deprecated in scipy 0.18.0. Use scipy.constants.convert_temperature instead. Note that the new function has a different signature.')\ndef K2F(K):\n    return C2F(K2C(_np.asanyarray(K)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@_np.deprecate(message='scipy.constants.F2K is deprecated in scipy 0.18.0. Use scipy.constants.convert_teperature instead. Note that the new function has a different signature.')\ndef F2K(F):\n    return C2K(F2C(_np.asanyarray(F)))", "buggy_source_code": "@_np.deprecate(message='scipy.constants.F2K is deprecated in scipy 0.18.0. Use scipy.constants.convert_temperature instead. Note that the new function has a different signature.')\ndef F2K(F):\n    return C2K(F2C(_np.asanyarray(F)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@_np.deprecate(message='scipy.constants.K2C is deprecated in scipy 0.18.0. Use scipy.constants.convert_teperature instead. Note that the new function has a different signature.')\ndef K2C(K):\n    return _np.asanyarray(K) - zero_Celsius", "buggy_source_code": "@_np.deprecate(message='scipy.constants.K2C is deprecated in scipy 0.18.0. Use scipy.constants.convert_temperature instead. Note that the new function has a different signature.')\ndef K2C(K):\n    return _np.asanyarray(K) - zero_Celsius", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.queue = queue.PriorityQueue()", "buggy_source_code": "def __init__(self):\n    self.queue: List[PItem] = []\n    self.dirty = False", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def amount_from_string(token, amount_str):\n    precision_mult = pow(10, token.decimals)\n    amount = float(amount_str) * precision_mult\n    return int(amount)", "buggy_source_code": "def amount_from_string(token, amount_str):\n    precision_mult = pow(10, token.decimals)\n    amount = Decimal(amount_str) * precision_mult\n    return int(amount)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args, raise_error=False, **kwargs):\n    self.raise_error = raise_error\n    super(HoneypotForm, self).__init__(*args, **kwargs)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    self.raise_error = kwargs.pop('raise_error', False)\n    super(HoneypotForm, self).__init__(*args, **kwargs)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def make_key(function, *args, **kwargs):\n    name_and_args = (function.__name__,) + tuple((a for a in args))\n    return functools._make_key(name_and_args, kwargs, False)", "buggy_source_code": "def make_key(function, *args, **kwargs):\n    name_and_args = (function.__qualname__,) + tuple((a for a in args))\n    return functools._make_key(name_and_args, kwargs, False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_autolink_trailing_slash():\n    result = util.autolink('http://hel.lo/world/')\n    assert result == '<a href=\"http://hel.lo/world/\">hel.lo/world/</a>'", "buggy_source_code": "def test_autolink_trailing_slash():\n    result = util.autolink('http://hel.lo/world/')\n    assert result == '<a href=\"http://hel.lo/world/\">hel.lo/world</a>'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __nonzero__(self):\n    return bool(self)", "buggy_source_code": "def __nonzero__(self):\n    return self.__bool__()", "edit_actions": ["update-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_queryset(self):\n    cursor = connection.cursor()\n    cursor.execute(\"\\nSELECT\\n    (DATE_TRUNC('day', legalaid_case.created)) AS created_day,\\n    legalaid_case.created_by_id AS operator,\\n    COUNT(legalaid_case.reference) AS num_cases,\\n    ROUND(SUM(\\n        CASE\\n            WHEN timer_timer.stopped IS NOT NULL THEN\\n                EXTRACT(EPOCH FROM (timer_timer.stopped - timer_timer.created))\\n            WHEN timer_timer.created IS NOT NULL THEN\\n                EXTRACT(EPOCH FROM (now() - timer_timer.created))\\n            ELSE\\n                0\\n        END\\n    ) / COUNT(timer_timer.id)) AS avg_duration\\nFROM\\n    legalaid_case\\n    LEFT OUTER JOIN timer_timer ON\\n        (legalaid_case.id = timer_timer.linked_case_id)\\nWHERE\\n    legalaid_case.created BETWEEN %s AND %s\\nGROUP BY\\n    DATE_TRUNC('day', legalaid_case.created),\\n    operator;\\n        \", self.date_range)\n    return cursor.fetchall()", "buggy_source_code": "def get_queryset(self):\n    cursor = connection.cursor()\n    cursor.execute(\"\\nSELECT\\n    (DATE_TRUNC('day', legalaid_case.created)) AS created_day,\\n    legalaid_case.created_by_id AS operator,\\n    COUNT(legalaid_case.reference) AS num_cases,\\n    CASE\\n        WHEN COUNT(timer_timer.id) = 0 THEN\\n            0\\n        ELSE\\n            ROUND(SUM(\\n                CASE\\n                    WHEN timer_timer.stopped IS NOT NULL THEN\\n                        EXTRACT(EPOCH FROM (timer_timer.stopped - timer_timer.created))\\n                    WHEN timer_timer.created IS NOT NULL THEN\\n                        EXTRACT(EPOCH FROM (now() - timer_timer.created))\\n                    ELSE\\n                        0\\n                END\\n            ) / COUNT(timer_timer.id)) AS avg_duration\\n    END\\nFROM\\n    legalaid_case\\n    LEFT OUTER JOIN timer_timer ON\\n        (legalaid_case.id = timer_timer.linked_case_id)\\nWHERE\\n    legalaid_case.created BETWEEN %s AND %s\\nGROUP BY\\n    DATE_TRUNC('day', legalaid_case.created),\\n    operator;\\n        \", self.date_range)\n    return cursor.fetchall()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@authorize(h.auth.has_organiser_role)\ndef linux_australia_signup(self):\n    c.text = '<p>People who ticked \"I want to sign up for (free) Linux\\n        Australia membership!\" (whether or not they then went on to pay for\\n        the conference).</p>'\n    query = \"SELECT person.firstname, person.lastname,\\n                    person.address1, person.address2, person.city, person.state, person.postcode, person.country,\\n                    person.phone, person.mobile, person.company,\\n                    registration.creation_timestamp\\n                   FROM person\\n                   LEFT JOIN registration ON (person.id = registration.person_id)\\n                   WHERE registration.signup LIKE '%linuxaustralia%'\\n                \"\n    return sql_response(query)", "buggy_source_code": "@authorize(h.auth.has_organiser_role)\ndef linux_australia_signup(self):\n    c.text = '<p>People who ticked \"I want to sign up for (free) Linux\\n        Australia membership!\" (whether or not they then went on to pay for\\n        the conference).</p>'\n    query = \"SELECT person.firstname, person.lastname, person.email_address,\\n                    person.address1, person.address2, person.city, person.state, person.postcode, person.country,\\n                    person.phone, person.mobile, person.company,\\n                    registration.creation_timestamp\\n                   FROM person\\n                   LEFT JOIN registration ON (person.id = registration.person_id)\\n                   WHERE registration.signup LIKE '%linuxaustralia%'\\n                \"\n    return sql_response(query)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@authorize(h.auth.has_organiser_role)\ndef internetnz_signup(self):\n    c.text = '<p>People who ticked \"I want to sign up for (free) Linux\\n        Australia membership!\" (whether or not they then went on to pay for\\n        the conference).</p>'\n    query = \"SELECT person.firstname, person.lastname,\\n                    person.address1, person.address2, person.city, person.state, person.postcode, person.country,\\n                    person.phone, person.mobile, person.company,\\n                    registration.creation_timestamp\\n                   FROM person\\n                   LEFT JOIN registration ON (person.id = registration.person_id)\\n                   WHERE registration.signup LIKE '%internetnz%'\\n                \"\n    return sql_response(query)", "buggy_source_code": "@authorize(h.auth.has_organiser_role)\ndef internetnz_signup(self):\n    c.text = '<p>People who ticked \"I want to sign up for Internet NZ membership!\" \\n        (whether or not they then went on to pay for the conference).</p>'\n    query = \"SELECT person.firstname, person.lastname, person.email_address,\\n                    person.address1, person.address2, person.city, person.state, person.postcode, person.country,\\n                    person.phone, person.mobile, person.company,\\n                    registration.creation_timestamp\\n                   FROM person\\n                   LEFT JOIN registration ON (person.id = registration.person_id)\\n                   WHERE registration.signup LIKE '%internetnz%'\\n                \"\n    return sql_response(query)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@authorize(h.auth.has_organiser_role)\ndef nzoss_signup(self):\n    c.text = '<p>People who ticked \"I want to sign up for (free) Linux\\n        Australia membership!\" (whether or not they then went on to pay for\\n        the conference).</p>'\n    query = \"SELECT person.firstname, person.lastname,\\n                    person.address1, person.address2, person.city, person.state, person.postcode, person.country,\\n                    person.phone, person.mobile, person.company,\\n                    registration.creation_timestamp\\n                   FROM person\\n                   LEFT JOIN registration ON (person.id = registration.person_id)\\n                   WHERE registration.signup LIKE '%nzoss%'\\n                \"\n    return sql_response(query)", "buggy_source_code": "@authorize(h.auth.has_organiser_role)\ndef nzoss_signup(self):\n    c.text = '<p>People who ticked \"I want to sign up for NZOSS membership!\"\\n        (whether or not they then went on to pay for the conference).</p>'\n    query = \"SELECT person.firstname, person.lastname, person.email_address,\\n                    person.address1, person.address2, person.city, person.state, person.postcode, person.country,\\n                    person.phone, person.mobile, person.company,\\n                    registration.creation_timestamp\\n                   FROM person\\n                   LEFT JOIN registration ON (person.id = registration.person_id)\\n                   WHERE registration.signup LIKE '%nzoss%'\\n                \"\n    return sql_response(query)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def make_correlation_plot(self, hist, plot_config):\n    canvas = pt.plot_hist(hist, plot_config)\n    self.output_handle.register_object(canvas)", "buggy_source_code": "def make_correlation_plot(self, hist, plot_config):\n    canvas = pt.plot_obj(hist, plot_config)\n    self.output_handle.register_object(canvas)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def v2_runner_on_ok(self, result):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: runner ok on host %s' % host)", "buggy_source_code": "def v2_runner_on_ok(self, result):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: v2_runner_on_ok runner ok on host %s' % host)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def v2_playbook_on_task_start(self, task, is_conditional):\n    self._display.display('hgi_per_host_lock: task start %s' % task)\n    self.task = task", "buggy_source_code": "def v2_playbook_on_task_start(self, task, is_conditional):\n    self._display.display('hgi_per_host_lock: v2_playbook_on_task_start task start %s' % task)\n    self.task = task", "edit_actions": ["update-node"]}
{"fixed_source_code": "def v2_runner_on_skipped(self, result):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: runner skipped on host %s' % host)", "buggy_source_code": "def v2_runner_on_skipped(self, result):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: v2_runner_on_skipped runner skipped on host %s' % host)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def v2_runner_on_failed(self, result, ignore_errors=False):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: runner failed on host %s' % host)", "buggy_source_code": "def v2_runner_on_failed(self, result, ignore_errors=False):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: v2_runner_on_failed runner failed on host %s' % host)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def v2_runner_on_unreachable(self, result):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: runner unreachable on host %s' % host)", "buggy_source_code": "def v2_runner_on_unreachable(self, result):\n    host = result._host.get_name()\n    self._display.display('hgi_per_host_lock: v2_runner_on_unreachable runner unreachable on host %s' % host)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef get_image_urls(page):\n    images = text.extract(page, 'var wpm_mng_rdr_img_lst = ', ';')[0]\n    return json.loads(images)", "buggy_source_code": "@staticmethod\ndef get_image_urls(page):\n    images = text.extract(page, 'var rff_imageList = ', ';')[0]\n    return json.loads(images)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '\\n\\nThe program file contains an invalid region\\nstarting from line: {} :\\n\\n{}\\n\\n'.format(self.line_number, self.contents)", "buggy_source_code": "def __repr__(self):\n    return '\\n\\nThe program file contains an invalid region\\nstarting from line: {}:\\n\\n{}\\n\\n'.format(self.line_number, self.contents)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_user as (\\n                 select\\n                     min(f.id) as id,\\n                     f.user_id as user_id,\\n                     u.name as user,\\n                     count(*) as nbr,\\n                     to_char(f.create_date,'YYYY-MM')||'-'||'01' as name,\\n                     d.name as directory,\\n                     f.create_date as create_date,\\n                     f.file_size as file_size,\\n                     min(f.title) as file_title,\\n                     min(d.type) as type,\\n                     min(EXTRACT(MONTH FROM f.create_date)||'-'||substring(to_char(f.create_date,'YY-Month-DD') from 4 for 9)) as month,\\n                     f.write_date as change_date\\n                 from ir_attachment f\\n                     left join document_directory d on (f.parent_id=d.id and d.name<>'')\\n                     inner join res_users u on (f.user_id=u.id)\\n                 group by d.name,f.parent_id,d.type,f.create_date,f.user_id,f.file_size,u.name,d.type,f.write_date\\n             )\\n         \")", "buggy_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_user as (\\n                 select\\n                     min(f.id) as id,\\n                     f.user_id as user_id,\\n                     u.name as user,\\n                     count(*) as nbr,\\n                     to_char(f.create_date,'YYYY-MM')||'-'||'01' as name,\\n                     d.name as directory,\\n                     f.create_date as create_date,\\n                     f.file_size as file_size,\\n                     min(f.title) as file_title,\\n                     min(d.type) as type,\\n                     min(EXTRACT(MONTH FROM f.create_date)||'-'||to_char(f.create_date,'Month')) as month,\\n                     f.write_date as change_date\\n                 from ir_attachment f\\n                     left join document_directory d on (f.parent_id=d.id and d.name<>'')\\n                     inner join res_users u on (f.user_id=u.id)\\n                 group by d.name,f.parent_id,d.type,f.create_date,f.user_id,f.file_size,u.name,d.type,f.write_date\\n             )\\n         \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_file as (\\n                select min(f.id) as id,count(*) as nbr,\\n                min(EXTRACT(MONTH FROM f.create_date)||'-'||substring(to_char(f.create_date,'YY-Month-DD') from 4 for 9)) as month,\\n                sum(f.file_size) as file_size  \\n                from ir_attachment f \\n                group by EXTRACT(MONTH FROM f.create_date) \\n             )\\n         \")", "buggy_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_file as (\\n                select min(f.id) as id,\\n                       count(*) as nbr,\\n                       min(EXTRACT(MONTH FROM f.create_date)||'-'||to_char(f.create_date,'Month')) as month,\\n                       sum(f.file_size) as file_size  \\n                from ir_attachment f \\n                group by EXTRACT(MONTH FROM f.create_date) \\n             )\\n         \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_wall as (\\n               select max(f.id) as id,\\n               min(title) as file_name,\\n               to_char(min(f.create_date),'YYYY-MM-DD HH24:MI:SS') as last,\\n               f.user_id as user_id,f.user_id as user,\\n               substring(to_char(f.create_date,'YY-Month-DD') from 4 for 9) as month \\n               from ir_attachment f \\n               where create_date in (\\n                   select max(create_date) \\n                   from ir_attachment i \\n                   inner join res_users u on (i.user_id=u.id) \\n                   group by i.user_id) group by f.user_id,f.create_date \\n                   having (to_date(substring(CURRENT_DATE for 10),'YYYY-MM-DD') - to_date(substring(f.create_date for 10),'YYYY-MM-DD')) > 30\\n             )\\n         \")", "buggy_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_wall as (\\n               select max(f.id) as id,\\n               min(title) as file_name,\\n               to_char(min(f.create_date),'YYYY-MM-DD HH24:MI:SS') as last,\\n               f.user_id as user_id, f.user_id as user,\\n               to_char(f.create_date,'Month') as month \\n               from ir_attachment f \\n               where create_date in (\\n                   select max(create_date) \\n                   from ir_attachment i \\n                   inner join res_users u on (i.user_id=u.id) \\n                   group by i.user_id) group by f.user_id,f.create_date \\n                   having (CURRENT_DATE - to_date(to_char(f.create_date,'YYYY-MM-DD'),'YYYY-MM-DD')) > 30\\n             )\\n         \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(Config, self).__init__(*args, **kwargs)\n    self.temp = Bunch()\n    self.temp.config_path = '.mgns.config'", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(ConfigBase, self).__init__(*args, **kwargs)\n    self.temp = Bunch()\n    self.temp.config_path = '.mgns.config'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef name(self):\n    return self._name", "buggy_source_code": "@property\ndef name(self):\n    return self._scene.name", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def process(self, part):\n    if part.get_filename() == self._heat_user_data_filename:\n        userdatautils.execute_user_data_script(part.get_payload())", "buggy_source_code": "def process(self, part):\n    if part.get_filename() == self._heat_user_data_filename:\n        return userdatautils.execute_user_data_script(part.get_payload())", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def as_wires(val):\n    if isinstance(val, int):\n        return Const(val)\n    else:\n        assert isinstance(val, WireVector)\n        return val", "buggy_source_code": "def as_wires(val):\n    if isinstance(val, int):\n        return Const(val)\n    if not isinstance(val, WireVector):\n        raise PyrtlError\n    return val", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef docker_image(self):\n    return 'arpheno/rails-skeleton'", "buggy_source_code": "@property\ndef docker_image(self):\n    return 'django'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _recover_ids(self, vms):\n    for vm in vms:\n        self.power_off(vm)", "buggy_source_code": "def _recover_ids(self, nodenames):\n    for nodename in nodenames:\n        self.power_off(nodename)", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def unload_plugin(name: str):\n    if name in plugins:\n        del plugins[name]\n        logging.debug('UNLOADED PLUGIN ' + name)", "buggy_source_code": "def unload_plugin(name: str):\n    if name in plugins:\n        del plugins[name]\n        logging.debug('Unloaded plugin ' + name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sign(path, key):\n    return sig2ascii(key.sign(sha256_file(path), '')[0])", "buggy_source_code": "def sign(path, key):\n    return sig2ascii(key.sign(hash_file(path), '')[0])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def printProfile(self):\n    logging.debug(str(self.file_type_dict))\n    print(pytoml.dumps(self.file_type_dict))", "buggy_source_code": "def printProfile(self):\n    logging.debug(str(self.file_type_dict))\n    Ui.print(pytoml.dumps(self.file_type_dict))", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def supports_av():\n    h = Popen('ldconfig -p | grep toxav', shell=True, stdout=PIPE)\n    (out, err) = h.communicate()\n    return 'toxav' in str(out)", "buggy_source_code": "def supports_av():\n    h = Popen('ld -ltoxav', shell=True, stderr=PIPE)\n    (out, err) = h.communicate()\n    return 'toxav' not in str(err)", "edit_actions": ["insert-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def scheme(self):\n    if self.body:\n        return self.body.scheme()\n    else:\n        return scheme.EmptyScheme()", "buggy_source_code": "def scheme(self):\n    if self.body:\n        return self.body.scheme()\n    else:\n        raise RecursionError('No Scheme defined yet for fixpoint')", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_info(self, page):\n    needle = '<a href=\"http://www.turboimagehost.com\"><img src=\"'\n    url = text.extract(page, needle, '\"')[0]\n    return (url, url)", "buggy_source_code": "def get_info(self, page):\n    needle = '://www.turboimagehost.com\"><img src=\"'\n    url = text.extract(page, needle, '\"')[0]\n    return (url, url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, kmer, src):\n    self.src = src\n    self.k = kmer", "buggy_source_code": "def __init__(self, kmer, source):\n    self.source = source\n    self.k = kmer", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def createLabelFormat():\n    format = QgsRendererRangeV2LabelFormat()\n    template = '%1 - %2 metres'\n    precision = 5\n    format.setFormat(template)\n    format.setPrecision(precision)\n    format.setTrimTrailingZeroes(True)\n    return format", "buggy_source_code": "def createLabelFormat():\n    format = QgsRendererRangeV2LabelFormat()\n    template = '%1 - %2 meters'\n    precision = 5\n    format.setFormat(template)\n    format.setPrecision(precision)\n    format.setTrimTrailingZeroes(True)\n    return format", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_browser():\n    return workspace.browser_for_cube(model.cube(CUBE_NAME))", "buggy_source_code": "def get_browser():\n    return workspace.browser(model.cube(CUBE_NAME))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def inverse(self, *args):\n    if self.imatrix == None:\n        raise Exception('XU.math.Transform: matrix cannot be inverted - seems to be singular')\n    it = Transform(self.imatrix)\n    return it(args)", "buggy_source_code": "def inverse(self, *args):\n    if self.imatrix == None:\n        raise Exception('XU.math.Transform: matrix cannot be inverted - seems to be singular')\n    it = Transform(self.imatrix)\n    return it(*args)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_paste_deploy_options(self, docconv_env):\n    app = loadapp('config:%s' % (docconv_env / 'paste.ini'))\n    assert isinstance(app, RESTfulDocConverter)\n    assert app.cache_dir == str(docconv_env / 'cache')", "buggy_source_code": "def test_paste_deploy_options(self, conv_env):\n    app = loadapp('config:%s' % (conv_env / 'paste.ini'))\n    assert isinstance(app, RESTfulDocConverter)\n    assert app.cache_dir == str(conv_env / 'cache')", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_paste_deploy_loader(self, docconv_env):\n    app = loadapp('config:%s' % (docconv_env / 'sample1.ini'))\n    assert isinstance(app, RESTfulDocConverter)\n    assert app.cache_dir is None", "buggy_source_code": "def test_paste_deploy_loader(self, conv_env):\n    app = loadapp('config:%s' % (conv_env / 'sample1.ini'))\n    assert isinstance(app, RESTfulDocConverter)\n    assert app.cache_dir is None", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_show_yet_uncached_doc(self, docconv_env):\n    app = RESTfulDocConverter(cache_dir=str(docconv_env / 'cache'))\n    url = 'http://localhost/docs/NOT-A-VALID-DOCID'\n    resp = app(Request.blank(url))\n    assert resp.status == '404 Not Found'", "buggy_source_code": "def test_show_yet_uncached_doc(self, conv_env):\n    app = RESTfulDocConverter(cache_dir=str(conv_env / 'cache'))\n    url = 'http://localhost/docs/NOT-A-VALID-DOCID'\n    resp = app(Request.blank(url))\n    assert resp.status == '404 Not Found'", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef average_latency(self):\n    heartbeat = self._keep_alive\n    average_latency = sum(heartbeat.recent_ack_latencies) / len(heartbeat.recent_ack_latencies)\n    return float('inf') if heartbeat is None else average_latency", "buggy_source_code": "@property\ndef average_latency(self):\n    heartbeat = self._keep_alive\n    if heartbeat is None:\n        return float('inf')\n    return sum(heartbeat.recent_ack_latencies) / len(heartbeat.recent_ack_latencies)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def generate(self):\n    self.generate_floor()\n    self.generate_on_floor(5)", "buggy_source_code": "def generate(self):\n    self.generate_floor()\n    self.generate_on_platform(5)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def jsonescape(s):\n    for (k, v) in _escapes:\n        s = s.replace(k, v)\n    return ''.join((uescape(c) for c in s))", "buggy_source_code": "def jsonescape(s):\n    for (k, v) in _escapes:\n        s = s.replace(k, v)\n    return ''.join((_uescape(c) for c in s))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def subplot_image(Sxx, n_subplot, title):\n    cmap = grayify_cmap('cubehelix_r')\n    plt.subplot(n_subplot)\n    plt.title(title)\n    plt.pcolormesh(Sxx, cmap=cmap)", "buggy_source_code": "def subplot_image(Sxx, n_subplot, title):\n    cmap = plt.cm.get_cmap('jet')\n    plt.subplot(n_subplot)\n    plt.title(title)\n    plt.pcolormesh(Sxx, cmap=cmap)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node"]}
{"fixed_source_code": "@fixture(scope='session')\ndef simulated_reads(sandbox, fasta):\n    return gen_reads(fasta=fasta, output_dir=sandbox, bam_output=True, vcf_output=False, mutation_rate=0)", "buggy_source_code": "@fixture(scope='session')\ndef simulated_reads(sandbox, fasta):\n    return gen_reads(fasta=fasta['fasta'], output_dir=sandbox, bam_output=True, vcf_output=False, mutation_rate=0)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def standbyCounterChanged(configElement):\n    from Screens.Standby import inStandby\n    inStandby.onClose.append(leaveStandby)\n    config.lcd.standby.apply()", "buggy_source_code": "def standbyCounterChanged(dummy):\n    from Screens.Standby import inStandby\n    inStandby.onClose.append(leaveStandby)\n    config.lcd.standby.apply()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@IsSecureFeataure.hook('after_user_whois')\ndef send_whois_secure_if_secure(client, user):\n    if user.is_securely_connected:\n        client.send_reply(WhoIsSecure(user.nickname, '*'))", "buggy_source_code": "@IsSecureFeature.hook('after_user_whois')\ndef send_whois_secure_if_secure(client, user):\n    if user.is_securely_connected:\n        client.send_reply(WhoIsSecure(user.nickname, '*'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_contexts(self):\n    projects_data = os.path.join(config.SITE_DIRECTORY, '_data/_projects.yml')\n    projects_context = {'projects': yaml.load(open(projects_data))}\n    return [('templates/projects/index.html', projects_context)]", "buggy_source_code": "def get_contexts(self):\n    projects_data = os.path.join(config.SITE_DIRECTORY, '_data/_projects.yml')\n    projects_context = {'projects': yaml.load(open(projects_data))}\n    return [('templates/projects/index.pug', projects_context)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def deploy_to_production():\n    path = '/home/hagreve/hagreve.com/hojehatransportes'\n    _deploy(path)", "buggy_source_code": "def deploy_to_production():\n    path = '/home/hagreve/hagreve.com'\n    _deploy(path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def deploy_to_testing():\n    path = '/home/hagreve/test.hagreve.com/hojehatransportes'\n    _deploy(path)", "buggy_source_code": "def deploy_to_testing():\n    path = '/home/hagreve/test.hagreve.com'\n    _deploy(path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def string_to_datetime(value):\n    try:\n        return strftime(strptime_to_utc(value))\n    except Exception as ex:\n        LOGGER.error(ex)\n        return None", "buggy_source_code": "def string_to_datetime(value):\n    try:\n        return strftime(strptime_to_utc(value))\n    except Exception as ex:\n        LOGGER.warning('%s, (%s)', ex, value)\n        return None", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def save(self, *args, **kwargs):\n    super(Requirement, self).save(*args, **kwargs)\n    RequirementDependency.objects.get_or_create(root=self)", "buggy_source_code": "def save(self, *args, **kwargs):\n    super(Requirement, self).save(*args, **kwargs)\n    RequirementDependency.objects.get_or_create(dependencyroot=self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@require_gui_thread\ndef _handle_key(self, key):\n    if key.keyval == Gdk.KEY_Return:\n        self._emit_buffer()", "buggy_source_code": "@require_gui_thread\ndef _handle_key(self, key):\n    if key.keyval in (Gdk.KEY_Return, Gdk.KEY_KP_Enter):\n        self._emit_buffer()", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self):\n    NRF51822.__init__(self)\n    self.extra_labels = ['NORDIC', 'NRF51822']\n    self.macros = ['TARGET_NRF51822']", "buggy_source_code": "def __init__(self):\n    NRF51822.__init__(self)\n    self.extra_labels = ['NORDIC', 'MCU_NRF51822']\n    self.macros = ['TARGET_NRF51822']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    NRF51822.__init__(self)\n    self.extra_labels = ['NORDIC', 'NRF51822']\n    self.macros = ['TARGET_NRF51822']", "buggy_source_code": "def __init__(self):\n    NRF51822.__init__(self)\n    self.extra_labels = ['NORDIC', 'MCU_NRF51822']\n    self.macros = ['TARGET_NRF51822']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    NRF51822.__init__(self)\n    self.extra_labels = ['NORDIC', 'NRF51822']\n    self.macros = ['TARGET_NRF51822']", "buggy_source_code": "def __init__(self):\n    NRF51822.__init__(self)\n    self.extra_labels = ['NORDIC', 'MCU_NRF51822']\n    self.macros = ['TARGET_NRF51822']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def distill_re_path(*a, **k):\n    return distill_url(re_path, *a, **k)", "buggy_source_code": "def distill_re_path(*a, **k):\n    return _distill_url(re_path, *a, **k)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.7.tar.gz', url_subpath='pywebsocket-0.7/src/mod_pywebsocket')", "buggy_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.7.1.tar.gz', url_subpath='pywebsocket-0.7.1/src/mod_pywebsocket')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _gcode_G28(self, data):\n    self._performMove(data)", "buggy_source_code": "def _gcode_G28(self, data):\n    self._home(data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __len__(self):\n    return len(range(*self.__indices))", "buggy_source_code": "def __len__(self):\n    return len(range(*self.indices))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_queryset(self):\n    query = super(ActiveProjectManager, self).get_queryset()\n    return query.filter(is_active=False)", "buggy_source_code": "def get_queryset(self):\n    query = super(DeletedProjectManager, self).get_queryset()\n    return query.filter(is_active=False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_max_blobs_some_of_one_tag(self):\n    expected = {'incoming:data:chunk:2011-11-14': [('b14.1', 'b14.2', 'b14.3'), ('b14.1.a', 'b14.2.a', 'b14.3.a')]}\n    self._assert_max_blobs(expected, max_blobs=2)", "buggy_source_code": "def test_max_blobs_some_of_one_tag(self):\n    expected = {'incoming:data:chunk:2011-11-14': [('/b14.1', '/b14.2', '/b14.3'), ('/b14.1.a', '/b14.2.a', '/b14.3.a')]}\n    self._assert_max_blobs(expected, max_blobs=2)", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _clean_up(self) -> None:\n    if self._file is not None and isfile(self._file):\n        remove(self._file)", "buggy_source_code": "def _clean_up(self) -> None:\n    if self._filename is not None and isfile(self._filename):\n        os.remove(self._filename)", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@staticmethod\ndef _get_udp_header(request_id):\n    return struct.pack('!hhhh', request_id, 0, 1, 0)", "buggy_source_code": "@staticmethod\ndef _get_udp_header(request_id):\n    return struct.pack('!Hhhh', request_id, 0, 1, 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def due(self, review_time=None, order_by=None):\n    due_cards = self.filter(due_at__isnull=False, due_at__lte=review_time or datetime.utcnow())\n    return with_siblings_buried(cards, order_by=order_by)", "buggy_source_code": "def due(self, review_time=None, order_by=None):\n    due_cards = self.filter(due_at__isnull=False, due_at__lte=review_time or datetime.utcnow())\n    return with_siblings_buried(due_cards, order_by=order_by)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _is_retry_valid(self, e):\n    if isinstance(e, MetadataApiError) and ('This package is not yet available' in str(e) or 'InstalledPackage version number' in str(message)):\n        return True", "buggy_source_code": "def _is_retry_valid(self, e):\n    if isinstance(e, MetadataApiError) and ('This package is not yet available' in str(e) or 'InstalledPackage version number' in str(e)):\n        return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get(self, request, *args, **kwargs):\n    return super(Logout, self).get(request, *args, **kwargs)", "buggy_source_code": "def get(self, request, *args, **kwargs):\n    return super(Login, self).get(request, *args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testCanonical(self):\n    canonical_trip_iter = TripIterator(['trips', ['get_canonical']]).__iter__()", "buggy_source_code": "def testCanonical(self):\n    canonical_trip_iter = TripIterator(self.testUUID, ['trips', 'get_canonical']).__iter__()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def join(self):\n    Thread.join(self)\n    try:\n        return self._q.get(block=False)\n    except:\n        raise RuntimeError('Error on thread %s' % self)", "buggy_source_code": "def join(self):\n    Thread.join(self)\n    if self._e is not None:\n        raise RuntimeError('Error on process %s' % self)\n    else:\n        return self._q.get()", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_postfix(project):\n    postfix = main_project_versions[project]\n    extra = release_versions.get(project)\n    if extra is not None:\n        postfix = '{}-{}'.format(postfix, extra)\n    return postfix", "buggy_source_code": "def get_postfix(project):\n    postfix = main_project_versions[project]\n    extra = release_versions.get(project)\n    if extra:\n        postfix = '{}-{}'.format(postfix, extra)\n    return postfix", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_size(self):\n    return self.image.surface.get_buffer().length", "buggy_source_code": "def get_size(self):\n    return self.image.get_memory_usage()", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_r_version(self, exec2):\n    exec2('%r\\nR.version.string', html_pattern='3\\\\.2\\\\.4')", "buggy_source_code": "def test_r_version(self, exec2):\n    exec2('%r\\nR.version.string', html_pattern='\\\\d+\\\\.\\\\d+\\\\.\\\\d+')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init_database():\n    db = SQLAlchemy(app)\n    db.create_all()", "buggy_source_code": "def init_database():\n    db.init_app(app)\n    db.create_all()", "edit_actions": ["move-tree", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def nonzero_test(self):\n    raise \"Warning! there is no 'and' for BVector and RVector use '&' instead\" + 'If you looking for the nonzero test, use len(v) > 0'", "buggy_source_code": "def nonzero_test(self):\n    raise BaseException(\"Warning! there is no 'and' and 'or' for BVector and RVector. \" + \"Use binary operators '&' or '|' instead. \" + 'If you looking for the nonzero test, use len(v) > 0')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def check_categories(app):\n    for categ in app.Categories:\n        if categ not in all_categories:\n            yield _(\"Category '%s' is not valid\" % categ)", "buggy_source_code": "def check_categories(app):\n    for categ in app.Categories:\n        if categ not in all_categories:\n            yield _(\"Categories '%s' is not valid\" % categ)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def isPuffle(self, itemId):\n    return itemId in range(750, 758)", "buggy_source_code": "def isPuffle(self, itemId):\n    return itemId in range(750, 759)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_wifi_presence(self):\n    wlan_ifaces = wifi.get_wlan_ifaces()\n    self.assertEqual(len(wlan_ifaces), 1)", "buggy_source_code": "def test_wifi_presence(self):\n    wlan_ifaces = wifi.get_wlan_ifaces()\n    self.assertGreaterEqual(len(wlan_ifaces), 1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@process_clause_header.register(fastobo.header.DataVersionClause)\ndef _process_clause_header_data_version(clause, meta):\n    meta.format_version = clause.version", "buggy_source_code": "@process_clause_header.register(fastobo.header.DataVersionClause)\ndef _process_clause_header_data_version(clause, meta):\n    meta.data_version = clause.version", "edit_actions": ["update-node"]}
{"fixed_source_code": "def do_everything():\n    make_apex_cubes.do_everything(mergepath=mergepath, h2copath=h2copath, molpath=molpath)", "buggy_source_code": "def do_everything():\n    make_apex_cubes.do_everything(mergepath=make_apex_cubes.mergepath, h2copath=make_apex_cubes.h2copath, molpath=make_apex_cubes.molpath)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def get_po_entries(conditions):\n    return frappe.db.sql('\\n\\t\\tSELECT\\n\\t\\t\\tchild.name,\\n\\t\\t\\tchild.parent,\\n\\t\\t\\tchild.cost_center,\\n\\t\\t\\tchild.project,\\n\\t\\t\\tchild.warehouse,\\n\\t\\t\\tchild.material_request,\\n\\t\\t\\tchild.material_request_item,\\n\\t\\t\\tchild.description,\\n\\t\\t\\tchild.stock_uom,\\n\\t\\t\\tchild.qty,\\n\\t\\t\\tchild.amount,\\n\\t\\t\\tchild.base_amount,\\n\\t\\t\\tchild.schedule_date,\\n\\t\\t\\tpar.transaction_date,\\n\\t\\t\\tpar.supplier,\\n\\t\\t\\tpar.status,\\n\\t\\t\\tpar.owner\\n\\t\\tFROM `tabPurchase Order` par, `tabPurchase Order Item` child\\n\\t\\tWHERE\\n\\t\\t\\tpar.docstatus = 1\\n\\t\\t\\tAND par.name = child.parent\\n\\t\\t\\tAND par.status not in  (\"Closed\",\"Completed\",\"Cancelled\")\\n\\t\\t\\t{conditions}\\n\\t\\tGROUP BY\\n\\t\\t\\tpar.name, child.item_code\\n\\t\\t'.format(conditions=conditions), as_dict=1)", "buggy_source_code": "def get_po_entries(conditions):\n    return frappe.db.sql('\\n\\t\\tSELECT\\n\\t\\t\\tchild.name,\\n\\t\\t\\tchild.parent,\\n\\t\\t\\tchild.cost_center,\\n\\t\\t\\tchild.project,\\n\\t\\t\\tchild.warehouse,\\n\\t\\t\\tchild.material_request,\\n\\t\\t\\tchild.material_request_item,\\n\\t\\t\\tchild.item_code,\\n\\t\\t\\tchild.stock_uom,\\n\\t\\t\\tchild.qty,\\n\\t\\t\\tchild.amount,\\n\\t\\t\\tchild.base_amount,\\n\\t\\t\\tchild.schedule_date,\\n\\t\\t\\tpar.transaction_date,\\n\\t\\t\\tpar.supplier,\\n\\t\\t\\tpar.status,\\n\\t\\t\\tpar.owner\\n\\t\\tFROM `tabPurchase Order` par, `tabPurchase Order Item` child\\n\\t\\tWHERE\\n\\t\\t\\tpar.docstatus = 1\\n\\t\\t\\tAND par.name = child.parent\\n\\t\\t\\tAND par.status not in  (\"Closed\",\"Completed\",\"Cancelled\")\\n\\t\\t\\t{conditions}\\n\\t\\tGROUP BY\\n\\t\\t\\tpar.name, child.item_code\\n\\t\\t'.format(conditions=conditions), as_dict=1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get(self, request):\n    queryset = Service.objects.all()\n    return Response({'services': queryset})", "buggy_source_code": "def get(self, request):\n    queryset = MasterService.objects.all()\n    return Response({'services': queryset})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_schema():\n    with open('schema.json') as f:\n        return f.read()", "buggy_source_code": "def get_schema():\n    with open('../../Infrastructure/Settings/schema.json') as f:\n        return f.read()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def requisition(self):\n    url = reverse('admin:bcvp_bcvplab_subjectrequisition_changelist')\n    return '<a href=\"{0}?q={1}\">{1}</a>'.format(url, self.requisition_identifier)", "buggy_source_code": "def requisition(self):\n    url = reverse('admin:bcvp_lab_subjectrequisition_changelist')\n    return '<a href=\"{0}?q={1}\">{1}</a>'.format(url, self.requisition_identifier)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_shell_error(self):\n    with patch(check_output, side_effect=subprocess.CalledProcessError(1, '')):\n        self.assertEqual(subler_executable(), '')", "buggy_source_code": "def test_shell_error(self):\n    with patch(CHECK_OUTPUT, side_effect=subprocess.CalledProcessError(1, '')):\n        self.assertEqual(subler_executable(), '')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_shell_success(self):\n    out = b'/usr/bin/SublerCLI'\n    with patch(check_output, return_value=out):\n        self.assertEqual(subler_executable(), out.decode('UTF-8'))", "buggy_source_code": "def test_shell_success(self):\n    out = b'/usr/bin/SublerCLI'\n    with patch(CHECK_OUTPUT, return_value=out):\n        self.assertEqual(subler_executable(), out.decode('UTF-8'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_list(self):\n    args = ['date']\n    with patch(check_output, return_value=self.date_output):\n        self.assertEqual(get_output(args), self.expected)", "buggy_source_code": "def test_list(self):\n    args = ['date']\n    with patch(CHECK_OUTPUT, return_value=self.date_output):\n        self.assertEqual(get_output(args), self.expected)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_empty_string(self):\n    with patch(check_output, return_value=b''):\n        self.assertEqual(subler_executable(), 'SublerCLI')", "buggy_source_code": "def test_empty_string(self):\n    with patch(CHECK_OUTPUT, return_value=b''):\n        self.assertEqual(subler_executable(), 'SublerCLI')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_str(self):\n    args = 'date'\n    with patch(check_output, return_value=self.date_output):\n        self.assertEqual(get_output(args), self.expected)", "buggy_source_code": "def test_str(self):\n    args = 'date'\n    with patch(CHECK_OUTPUT, return_value=self.date_output):\n        self.assertEqual(get_output(args), self.expected)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def sectorcolors():\n    return {'Mining': '#333333', 'Oil and Gas': '#7777ff'}", "buggy_source_code": "def sectorcolors():\n    return {'Mining': '#e25020', 'Oil and Gas': '#000000'}", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def check_format(self, t):\n    self.assertEqualDiff('Bazaar Packs Containing Knits With Subtrees Format (bzr 0.92)\\n', t.get('format').read())", "buggy_source_code": "def check_format(self, t):\n    self.assertEqualDiff('Bazaar pack repository format 1 with subtree support (needs bzr 0.92)\\n', t.get('format').read())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def check_format(self, t):\n    self.assertEqualDiff('Bazaar Packs Containing Knits Format (bzr 0.92)\\n', t.get('format').read())", "buggy_source_code": "def check_format(self, t):\n    self.assertEqualDiff('Bazaar pack repository format 1 (needs bzr 0.92)\\n', t.get('format').read())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_ref_sha(repo, ref):\n    branch_name = ref[len('heads/'):] if ref.start('heads/') else ref\n    return repo.branches.get(branch_name).commit['id']", "buggy_source_code": "def get_ref_sha(repo, ref):\n    branch_name = ref[len('heads/'):] if ref.startwiths('heads/') else ref\n    return repo.branches.get(branch_name).commit['id']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_hasLocation(self):\n    if self.easting == None or self.northing == None:\n        return False\n    else:\n        return True", "buggy_source_code": "def get_hasLocation(self):\n    if self.easting in [0, None] or self.northing in [0, None]:\n        return False\n    else:\n        return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def test_get_registration_listeners(self):\n    from rospy.impl.registration import _RegistrationListeners, get_registration_listeners\n    r = get_registration_listeners()\n    self.assert_(isinstance(r, _RegistrationListeners))", "buggy_source_code": "def test_get_registration_listeners(self):\n    from rospy.impl.registration import RegistrationListeners, get_registration_listeners\n    r = get_registration_listeners()\n    self.assert_(isinstance(r, RegistrationListeners))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_notifications_count(self):\n    self.wait_for_element_visibility('.edx-notifications-count-number', 'Notification count not found')\n    return int(self.q(css='.edx-notifications-count-number').text[0])", "buggy_source_code": "def get_notifications_count(self):\n    self.wait_for_element_visibility('.edx-notifications-count-number', 'Notification count not found')\n    count_text = self.q(css='.edx-notifications-count-number').text[0]\n    return int(count_text if count_text else 0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef base(self):\n    return self._dtype", "buggy_source_code": "@property\ndef base(self):\n    return self._buffer", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _set_bytesize(self, bytesize):\n    self._pending_data = []\n    self._bytesize = bytesize\n    self._valid = False", "buggy_source_code": "def _set_bytesize(self, bytesize):\n    self._pending_data = []\n    self._bytesize = bytesize\n    self._need_update = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, device):\n    self.device = device\n    self.url = '/downloadsv2'", "buggy_source_code": "def __init__(self, device):\n    self.device = device\n    self.url = '/downloadsV2'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def create_dungeon(self, new_scene):\n    self.corridor.create_corridor(new_scene)", "buggy_source_code": "def create_dungeon(self, new_scene):\n    self.room.create_room(new_scene)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def less3(x, y):\n    return x[0] < y[0] and x[1] < y[1] and (x[2] < y[2])", "buggy_source_code": "def less3(x, y):\n    return x[0] <= y[0] and x[1] <= y[1] and (x[2] <= y[2])", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def testcheck(self):\n    PamCheck.check.check(self.pkg)\n    self.assertEqual(Testing.getOutput(), ['E: PamCheck use-old-pam-stack /etc/pam.d/PamCheck (line 1)'])", "buggy_source_code": "def testcheck(self):\n    PamCheck.check.check(self.pkg)\n    self.assertEqual(Testing.getOutput(), ['PamCheck.i586: E: use-old-pam-stack /etc/pam.d/PamCheck (line 1)'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_set_rating_invalid(self):\n    tr = track.Track('/bar')\n    with pytest.raises(ValueError):\n        tr.set_rating('foo')", "buggy_source_code": "def test_set_rating_invalid(self):\n    tr = track.Track('/bar')\n    with pytest.raises(TypeError):\n        tr.set_rating('foo')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def view_userpage(request, username):\n    user = get_object_or_404(User, username=username)\n    return render_to_response('user/userpage.html', {'user': user}, context_instance=RequestContext(request))", "buggy_source_code": "def view_userpage(request, username):\n    user = get_object_or_404(User, username=username)\n    return render_to_response('user/userpage.html', {'userpage_user': user}, context_instance=RequestContext(request))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _on_reconnect(self):\n    self.logger.info('Reconnected from the EtherDelta API')", "buggy_source_code": "def _on_reconnect(self):\n    self.logger.info('Reconnected to the EtherDelta API')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_categories(tskpaths, attpaths):\n    yield from tsk.get_categories(tskpaths)\n    yield from att.get_categories(tskpaths)", "buggy_source_code": "def get_categories(tskpaths, attpaths):\n    yield from tsk.get_categories(tskpaths)\n    yield from att.get_categories(attpaths)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _value(self):\n    if self.data:\n        return ', '.join(self.data)\n    else:\n        return ''", "buggy_source_code": "def _value(self):\n    if self.data:\n        return ', '.join(self.data)\n    return ''", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def __init__(self, debug=True):\n    self.debug = debug\n    self.text = []\n    if debug == True:\n        self.banner(' PYTHON DEBUG ')", "buggy_source_code": "def __init__(self, debug=True):\n    self.debug = debug\n    self.text = []\n    if self.debug == True:\n        self.banner(' PYTHON DEBUG ')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _allowed(ctx, param, value):\n    _supported_ansible_version()", "buggy_source_code": "def _allowed(ctx, param, value):\n    _supported_ansible_version()\n    return value", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@span('stmt.branches')\n@api_request\n@log_errors\nasync def stmt_branches(request, vcs, repo_id):\n    return json_response({'branches': vcs.get_known_branches()})", "buggy_source_code": "@span('stmt.branches')\n@log_errors\n@api_request\nasync def stmt_branches(request, vcs, repo_id):\n    return json_response({'branches': vcs.get_known_branches()})", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def quit(self, *arg):\n    self.gamelayout.quit()\n    self.settingsCloseButton.trigger_action()", "buggy_source_code": "def quit(self, *arg):\n    self.gamelayout.quit()\n    self.leaveSettingsPanel()\n    self.close_settings()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "@patch('pxl.weather_api')\ndef test_weather_api_output_type(self, weather_api_call):\n    mocked_api = weather_api.weather_api_call()\n    self.assertEqual(type(TEST_OUTPUT), type(mocked_api))", "buggy_source_code": "@patch('pxl.weather_api.weather_api_call')\ndef test_weather_api_output_type(self, weather_api_call):\n    mocked_api = weather_api_call()\n    mocked_api.return_value = TEST_OUTPUT\n    import pdb\n    pdb.set_trace()\n    pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch('pxl.weather_api')\ndef test_weather_api_response_type(self, weather_api_json):\n    mocked_json = weather_api.weather_api_json()\n    self.assertEqual(type(RESP_DATA), type(mocked_json))", "buggy_source_code": "@patch('pxl.weather_api.weather_api_json')\ndef test_weather_api_response_type(self, weather_api_json):\n    mocked_json = weather_api.weather_api_json()\n    self.assertEqual(type(RESP_DATA), type(mocked_json))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@patch('pxl.weather_api')\ndef test_weather_api_response_length(self, weather_api_json):\n    mocked_json = weather_api.weather_api_json()\n    self.assertEqual(len(RESP_DATA), len(mocked_json))", "buggy_source_code": "@patch('pxl.weather_api.weather_api_json')\ndef test_weather_api_response_length(self, weather_api_json):\n    mocked_json = weather_api_json()\n    self.assertEqual(len(RESP_DATA), len(mocked_json))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch('pxl.weather_api')\ndef test_weather_api_output_length(self, weather_api_call):\n    mocked_api = weather_api.weather_api_call()\n    self.assertEqual(len(TEST_OUTPUT), len(mocked_api))", "buggy_source_code": "@patch('pxl.weather_api.weather_api_call')\ndef test_weather_api_output_length(self, weather_api_call):\n    mocked_api = weather_api_call()\n    self.assertEqual(len(TEST_OUTPUT), len(mocked_api))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@patch('pxl.weather_api')\ndef test_weather_api_expected_location(self, weather_api_call):\n    mocked_api = weather_api.weather_api_call()\n    location = mocked_api['current_observation']['display_location']['full']\n    self.assertEqual(location, 'Seattle, WA')", "buggy_source_code": "@patch('pxl.weather_api.weather_api_call')\ndef test_weather_api_expected_location(self, weather_api_call):\n    mocked_api = weather_api_call()\n    location = mocked_api['current_observation']['display_location']['full']\n    self.assertEqual(location, 'Seattle, WA')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def destroy(self):\n    self.win.hide()\n    return True", "buggy_source_code": "def destroy(self, window, event):\n    window.hide()\n    return True", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_log_prefix(self):\n    return '[%s-%s]' % (self._ext_name_in_log_prefix, self._ext_version)", "buggy_source_code": "def _get_log_prefix(self):\n    return self._log_prefix if self._log_prefix else '[%s-%s] ' % (self._context._name, self._context._version)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "update-node"]}
{"fixed_source_code": "def generate_packet_dis(outf):\n    t.write(outf, '\\n-- dissector function\\nfunction mavlink_proto.dissector(buffer,pinfo,tree)\\n    local offset = 0\\n            \\n    local subtree = tree:add (mavlink_proto, buffer(), \"MAVLink Protocol (\"..buffer:len()..\")\")\\n\\n    -- decode protocol version first\\n    local version = buffer(offset,1):uint()\\n    local protocolString = \"\"\\n    \\n    if (version == 0xfe) then\\n            protocolString = \"MAVLink 1.0\"\\n    elseif (version == 0x55) then\\n            protocolString = \"MAVLink 0.9\"\\n    else\\n            protocolString = \"unknown\"\\n    end\\t\\n\\n    -- some Wireshark decoration\\n    pinfo.cols.protocol = protocolString\\n    local ts = pinfo.abs_ts\\n    local flags = math.floor(((ts - math.floor(ts))*1000000) + 0.5)\\n    \\n    local crc_error = bit.band(flags, 0x01)\\n    local length_error = bit.band(flags, 0x02)\\n    \\n    if length_error > 0 then\\n        pinfo.cols.info:append (\"Invalid message length   \")\\n        subtree:add_expert_info(PI_MALFORMED, PI_ERROR, \"Invalid message length\")\\n    end\\n    if crc_error > 0 then\\n        pinfo.cols.info:append (\"Invalid CRC   \")\\n        subtree:add_expert_info(PI_CHECKSUM, PI_WARN, \"Invalid message CRC\")\\n    end\\n\\n    -- HEADER ----------------------------------------\\n    \\n    local msgid\\n    if (buffer:len() - 2 - offset > 6) then\\n        -- normal header\\n        local header = subtree:add(\"Header\")\\n        header:add(f.magic,version)\\n        offset = offset + 1\\n        \\n        local length = buffer(offset,1)\\n        header:add(f.length, length)\\n        offset = offset + 1\\n        \\n        local sequence = buffer(offset,1)\\n        header:add(f.sequence, sequence)\\n        offset = offset + 1\\n        \\n        local sysid = buffer(offset,1)\\n        header:add(f.sysid, sysid)\\n        offset = offset + 1\\n    \\n        local compid = buffer(offset,1)\\n        header:add(f.compid, compid)\\n        offset = offset + 1\\n        \\n        pinfo.cols.src = \"System: \"..tostring(sysid:uint())..\\', Component: \\'..tostring(compid:uint())\\n    \\n        msgid = buffer(offset,1)\\n        header:add(f.msgid, msgid)\\n        offset = offset + 1\\n    else \\n        -- handle truncated header\\n        local hsize = buffer:len() - 2 - offset\\n        subtree:add(f.rawheader, buffer(offset, hsize))\\n        offset = offset + hsize\\n    end\\n\\n\\n    -- BODY ----------------------------------------\\n    \\n    -- dynamically call the type-specific payload dissector    \\n    local msgnr = msgid:uint()\\n    local dissect_payload_fn = \"payload_\"..tostring(msgnr)\\n    local fn = payload_fns[dissect_payload_fn]\\n    \\n    if (fn == nil) then\\n        pinfo.cols.info:append (\"Unkown message type   \")\\n        subtree:add_expert_info(PI_MALFORMED, PI_ERROR, \"Unkown message type\")\\n    end\\n\\n    -- do not stumble into exceptions while trying to parse junk\\n    if (fn == nil) or (length_error ~= 0) then\\n        size = buffer:len() - 2 - offset\\n        subtree:add(f.rawpayload, buffer(offset,size))\\n        offset = offset + size\\n    else\\n        local payload = subtree:add(f.payload, msgid)\\n        pinfo.cols.dst:set(messageName[msgid:uint()])\\n        pinfo.cols.info = messageName[msgid:uint()]\\n        offset = fn(buffer, payload, msgid, offset)\\n    end\\n\\n    -- CRC ----------------------------------------\\n    local crc = buffer(offset,2)\\n    subtree:add_le(f.crc, crc)\\n    offset = offset + 2\\n\\nend\\n\\n\\n')", "buggy_source_code": "def generate_packet_dis(outf):\n    t.write(outf, '\\n-- dissector function\\nfunction mavlink_proto.dissector(buffer,pinfo,tree)\\n    local offset = 0\\n            \\n    local subtree = tree:add (mavlink_proto, buffer(), \"MAVLink Protocol (\"..buffer:len()..\")\")\\n\\n    -- decode protocol version first\\n    local version = buffer(offset,1):uint()\\n    local protocolString = \"\"\\n    \\n    if (version == 0xfe) then\\n            protocolString = \"MAVLink 1.0\"\\n    elseif (version == 0x55) then\\n            protocolString = \"MAVLink 0.9\"\\n    else\\n            protocolString = \"unknown\"\\n    end\\t\\n\\n    -- some Wireshark decoration\\n    pinfo.cols.protocol = protocolString\\n\\n    -- HEADER ----------------------------------------\\n    \\n    local msgid\\n    if (buffer:len() - 2 - offset > 6) then\\n        -- normal header\\n        local header = subtree:add(\"Header\")\\n        header:add(f.magic,version)\\n        offset = offset + 1\\n        \\n        local length = buffer(offset,1)\\n        header:add(f.length, length)\\n        offset = offset + 1\\n        \\n        local sequence = buffer(offset,1)\\n        header:add(f.sequence, sequence)\\n        offset = offset + 1\\n        \\n        local sysid = buffer(offset,1)\\n        header:add(f.sysid, sysid)\\n        offset = offset + 1\\n    \\n        local compid = buffer(offset,1)\\n        header:add(f.compid, compid)\\n        offset = offset + 1\\n        \\n        pinfo.cols.src = \"System: \"..tostring(sysid:uint())..\\', Component: \\'..tostring(compid:uint())\\n    \\n        msgid = buffer(offset,1)\\n        header:add(f.msgid, msgid)\\n        offset = offset + 1\\n    else \\n        -- handle truncated header\\n        local hsize = buffer:len() - 2 - offset\\n        subtree:add(f.rawheader, buffer(offset, hsize))\\n        offset = offset + hsize\\n    end\\n\\n\\n    -- BODY ----------------------------------------\\n    \\n    -- dynamically call the type-specific payload dissector    \\n    local msgnr = msgid:uint()\\n    local dissect_payload_fn = \"payload_\"..tostring(msgnr)\\n    local fn = payload_fns[dissect_payload_fn]\\n    \\n    if (fn == nil) then\\n        pinfo.cols.info:append (\"Unkown message type   \")\\n        subtree:add_expert_info(PI_MALFORMED, PI_ERROR, \"Unkown message type\")\\n        size = buffer:len() - 2 - offset\\n        subtree:add(f.rawpayload, buffer(offset,size))\\n        offset = offset + size\\n    else\\n        local payload = subtree:add(f.payload, msgid)\\n        pinfo.cols.dst:set(messageName[msgid:uint()])\\n        pinfo.cols.info = messageName[msgid:uint()]\\n        offset = fn(buffer, payload, msgid, offset)\\n    end\\n\\n    -- CRC ----------------------------------------\\n    local crc = buffer(offset,2)\\n    subtree:add_le(f.crc, crc)\\n    offset = offset + 2\\n\\nend\\n\\n\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef is_secret(self):\n    for vote in self.charge_votes:\n        return vote.vote == ChargeVote.VOTES.secret", "buggy_source_code": "@property\ndef is_secret(self):\n    return self.charge_votes.filter(vote=ChargeVote.VOTES.secret).count() > 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__make_location(self):\n    loc = self.report._make_location('location1', 'analyte_a')\n    pdtest.assert_frame_equal(loc._raw_data, self.known_cleandata.query(\"analyte == 'analyte_a' and location == 'location1'\"))", "buggy_source_code": "def test__make_location(self):\n    loc = self.report._make_location('location1', 'analyte_a')\n    pdtest.assert_frame_equal(loc._rawdata, self.known_cleandata.query(\"analyte == 'analyte_a' and location == 'location1'\"))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_toil_defaults(self):\n    parser = Job.Runner.getDefaultArgumentParser()\n    namespace = parser.parse_args([''])\n    namespace.jobStore = None\n    namespace.logLevel = self.log_level\n    return namespace", "buggy_source_code": "def get_toil_defaults(self):\n    parser = Job.Runner.getDefaultArgumentParser()\n    namespace = parser.parse_args([''])\n    namespace.jobStore = None\n    namespace.logLevel = self.logLevel\n    return namespace", "edit_actions": ["update-node"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_dayofyear(x):\n    import pandas as pd\n    return pd.Series(x).dt.dayofyear.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_dayofyear(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.dayofyear.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_weekofyear(x):\n    import pandas as pd\n    return pd.Series(x).dt.weekofyear.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_weekofyear(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.weekofyear.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_year(x):\n    import pandas as pd\n    return pd.Series(x).dt.year.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_year(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.year.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_minute(x):\n    import pandas as pd\n    return pd.Series(x).dt.minute.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_minute(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.minute.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_day(x):\n    import pandas as pd\n    return pd.Series(x).dt.day.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_day(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.day.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_month(x):\n    import pandas as pd\n    return pd.Series(x).dt.month.values", "buggy_source_code": "@register_function(scope='dt', as_property=True)\ndef dt_month(x):\n    import pandas as pd\n    return pd.Series(_pandas_dt_fix(x)).dt.month.values", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self.timer = RaceTimer()", "buggy_source_code": "def __init__(self):\n    self.timer = RaceTimer(True)", "edit_actions": []}
{"fixed_source_code": "def random(value, _):\n    return random.choice(value)", "buggy_source_code": "def random(value, _):\n    return random_module.choice(value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '{} : {} | {}'.format(self.name, self.portrange, self.description)", "buggy_source_code": "def __str__(self):\n    return '{} ({}) : {} | {}'.format(self.name, self.proto, self.portrange, self.description)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def begin_rewrite_storage(self):\n    event = threading.Event()\n    self.queue.put((functools.partial(DbStorageWriter.begin_rewrite, self.storage_writer), event, 'begin_rewrite_storage'))", "buggy_source_code": "def begin_rewrite_storage(self):\n    event = threading.Event()\n    self.queue.put((functools.partial(DbStorageWriter.begin_rewrite_storage, self.storage_writer), event, 'begin_rewrite_storage'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def end_rewrite_storage(self):\n    event = threading.Event()\n    self.queue.put((functools.partial(DbStorageWriter.end_rewrite, self.storage_writer), event, 'end_rewrite_storage'))", "buggy_source_code": "def end_rewrite_storage(self):\n    event = threading.Event()\n    self.queue.put((functools.partial(DbStorageWriter.end_rewrite_storage, self.storage_writer), event, 'end_rewrite_storage'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_notification_service(self):\n    if not hasattr('_ns'):\n        self._ns = activity.getSystemService(PythonActivity.NOTIFICATION_SERVICE)\n    return self._ns", "buggy_source_code": "def _get_notification_service(self):\n    if not hasattr(self, '_ns'):\n        self._ns = activity.getSystemService(PythonActivity.NOTIFICATION_SERVICE)\n    return self._ns", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def render_form(self, error=None):\n    referrer = re.sub('^(.*:)//([A-Za-z0-9\\\\-\\\\.]+)(:[0-9]+)?/', '/', request.referrer)\n    return render_template(self.template, form=self.form, referrer=referrer)", "buggy_source_code": "def render_form(self, error=None):\n    referrer = re.sub('^(.*:)//([A-Za-z0-9\\\\-\\\\.]+)(:[0-9]+)?/', '/', request.referrer or '')\n    return render_template(self.template, form=self.form, referrer=referrer)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def _debug_format_infoset(d):\n    return ', '.join(('%s=%s' % (k[:1], v or '') for (k, v) in sorted(d.iteritems())))", "buggy_source_code": "def _debug_format_infoset(d):\n    return ', '.join(('%s=%s' % (k[:1], v or '') for (k, v) in sorted(d.items())))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_subtype_reference_alignment_filename(subtype='B', format='fasta', refname='HXB2'):\n    filename = 'genomewide.' + subtype + '.nuc.aligned.' + format\n    return reference_folder + 'reference/alignments/pairwise_to_' + refname + '/' + filename", "buggy_source_code": "def get_subtype_reference_alignment_filename(subtype='B', format='fasta', refname='HXB2'):\n    filename = 'genomewide.' + subtype + '.nuc.aligned.' + format\n    return reference_folder + 'alignments/pairwise_to_' + refname + '/' + filename", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_client_id(self, client_id):\n    return self._make_call(lambda conn: conn.set_client_id(client_id))", "buggy_source_code": "def set_client_id(self, client_id):\n    with self._get_connection_from_pool() as conn:\n        return conn.set_client_id(client_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_buckets(self):\n    return self._make_call(lambda conn: conn.get_buckets())", "buggy_source_code": "def get_buckets(self):\n    with self._get_connection_from_pool() as conn:\n        return conn.get_buckets()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_bucket_props(self, bucket):\n    return self._make_call(lambda conn: conn.get_bucket_props(bucket))", "buggy_source_code": "def get_bucket_props(self, bucket):\n    with self._get_connection_from_pool() as conn:\n        return conn.get_bucket_props(bucket)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_bucket_props(self, bucket, props):\n    return self._make_call(lambda conn: conn.set_bucket_props(bucket, props))", "buggy_source_code": "def set_bucket_props(self, bucket, props):\n    with self._get_connection_from_pool() as conn:\n        return conn.set_bucket_props(bucket, props)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self, robj, r=None, vtag=None):\n    return self._make_call(lambda conn: conn.get(robj, r, vtag))", "buggy_source_code": "def get(self, robj, r=None, vtag=None):\n    with self._get_connection_from_pool() as conn:\n        return conn.get(robj, r, vtag)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def put(self, robj, w=None, dw=None, return_body=True):\n    return self._make_call(lambda conn: conn.put(robj, w, dw, return_body))", "buggy_source_code": "def put(self, robj, w=None, dw=None, return_body=True):\n    with self._get_connection_from_pool() as conn:\n        return conn.put(robj, w, dw, return_body)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delete(self, robj, rw=None):\n    return self._make_call(lambda conn: conn.delete(robj, rw))", "buggy_source_code": "def delete(self, robj, rw=None):\n    with self._get_connection_from_pool() as conn:\n        return conn.delete(robj, rw)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def mapred(self, inputs, query, timeout=None):\n    return self._make_call(lambda conn: conn.mapred(inputs, query, timeout))", "buggy_source_code": "def mapred(self, inputs, query, timeout=None):\n    with self._get_connection_from_pool() as conn:\n        return conn.mapred(inputs, query, timeout)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_client_id(self):\n    return self._make_call(lambda conn: conn.get_client_id())", "buggy_source_code": "def get_client_id(self):\n    with self._get_connection_from_pool() as conn:\n        return conn.get_client_id()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def mark_all_read(self, latest_displayed_read=None):\n    if self.unread_articles_count == 0:\n        return\n    subscription_mark_all_read_in_database.delay(self.id, now() if latest_displayed_read is None else latest_displayed_read.date_created)", "buggy_source_code": "def mark_all_read(self, latest_displayed_read=None):\n    if self.unread_articles_count == 0:\n        return\n    subscription_mark_all_read_in_database_task.delay(self.id, now() if latest_displayed_read is None else latest_displayed_read.date_created)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def post_data(self):\n    return {'domain': self.domain.pk, 'server': 'bar'}", "buggy_source_code": "def post_data(self):\n    return {'domain': self.domain.pk, 'server': 'bar2.bar'}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    self.domain = create_zone('foo')\n    test_data = {'server': 'foo'}\n    do_setUp(self, test_data)", "buggy_source_code": "def setUp(self):\n    self.domain = create_zone('foo')\n    test_data = {'server': 'foo2.foo'}\n    do_setUp(self, test_data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Rule %s: %s' % (self.ruleNr, ', '.join(self.names))", "buggy_source_code": "def __repr__(self):\n    return 'Rule %d: %s' % (self.ruleNr, ', '.join(self.names))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('alive')\ndef alive():\n    return True", "buggy_source_code": "@app.route('/alive')\ndef alive():\n    return 'Yes'", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def get_object(self):\n    (customer, created) = Customer.get_or_create(subscriber=subscriber_request_callback(self.request))\n    return customer", "buggy_source_code": "def get_object(self):\n    (customer, _created) = Customer.get_or_create(subscriber=subscriber_request_callback(self.request))\n    return customer", "edit_actions": ["update-node"]}
{"fixed_source_code": "def quit_button(self):\n    print('Quitting interactive rho tuning...')\n    self.master.quit()", "buggy_source_code": "def quit_button(self):\n    print('Quitting interactive cost tuning...')\n    self.master.quit()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_attach_controller(self):\n    roster = FlockRoster.instantiate()\n    controller = Protocol()\n    self.assertEqual(0, roster.attach_controller(controller))", "buggy_source_code": "def test_attach_controller(self):\n    roster = FlockRoster.instantiate()\n    controller = Controller('foo', 'bar', 'prot')\n    self.assertEqual(0, roster.attach_controller(controller))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'hr_expense_report')\n    cr.execute(\"\\n            create or replace view hr_expense_report as (\\n                 select\\n                     min(l.id) as id,\\n                     date_trunc('day',s.date) as date,\\n                     s.employee_id,\\n                     s.journal_id,\\n                     s.currency_id,\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_confirm,\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_valid,\\n                     s.invoice_id,\\n                     count(s.invoice_id) as invoiced,\\n                     s.user_valid as user_id,\\n                     s.department_id,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY') as year,\\n                     to_char(date_trunc('day',s.create_date), 'MM') as month,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD') as day,\\n                     avg(extract('epoch' from age(s.date_valid,s.date)))/(3600*24) as  delay_valid,\\n                     avg(extract('epoch' from age(s.date_valid,s.date_confirm)))/(3600*24) as  delay_confirm,\\n                     l.product_id as product_id,\\n                     l.analytic_account as analytic_account,\\n                     sum(l.unit_quantity * u.factor) as product_qty,\\n                     s.company_id as company_id,\\n                     sum(l.unit_quantity*l.unit_amount) as price_total,\\n                     (sum(l.unit_quantity*l.unit_amount)/sum(l.unit_quantity * u.factor))::decimal(16,2) as price_average,\\n                     count(*) as nbr,\\n                     (select unit_quantity from hr_expense_line where id=l.id and product_id is not null) as no_of_products,\\n                     (select analytic_account from hr_expense_line where id=l.id and analytic_account is not null) as no_of_account,\\n                     s.state\\n                 from hr_expense_line l\\n                 left join hr_expense_expense s on (s.id=l.expense_id)\\n                 left join product_uom u on (u.id=l.uom_id)\\n                 group by\\n                     date_trunc('day',s.date),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY'),\\n                     to_char(date_trunc('day',s.create_date), 'MM'),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD'),\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     l.product_id,\\n                     l.analytic_account,\\n                     s.invoice_id,\\n                     s.currency_id,\\n                     s.user_valid,\\n                     s.department_id,\\n                     l.uom_id,\\n                     l.id,\\n                     s.state,\\n                     s.journal_id,\\n                     s.company_id,\\n                     s.employee_id\\n            )\\n        \")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'hr_expense_report')\n    cr.execute(\"\\n            create or replace view hr_expense_report as (\\n                 select\\n                     min(l.id) as id,\\n                     date_trunc('day',s.date) as date,\\n                     s.employee_id,\\n                     s.journal_id,\\n                     s.currency_id,\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_confirm,\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_valid,\\n                     s.invoice_id,\\n                     count(s.invoice_id) as invoiced,\\n                     s.user_valid as user_id,\\n                     s.department_id,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY') as year,\\n                     to_char(date_trunc('day',s.create_date), 'MM') as month,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD') as day,\\n                     avg(extract('epoch' from age(s.date_valid,s.date)))/(3600*24) as  delay_valid,\\n                     avg(extract('epoch' from age(s.date_valid,s.date_confirm)))/(3600*24) as  delay_confirm,\\n                     l.product_id as product_id,\\n                     l.analytic_account as analytic_account,\\n                     sum(l.unit_quantity * u.factor) as product_qty,\\n                     s.company_id as company_id,\\n                     sum(l.unit_quantity*l.unit_amount) as price_total,\\n                     (sum(l.unit_quantity*l.unit_amount)/sum(case when l.unit_quantity=0 or u.factor=0 then 1 else l.unit_quantity * u.factor end))::decimal(16,2) as price_average,\\n                     count(*) as nbr,\\n                     (select unit_quantity from hr_expense_line where id=l.id and product_id is not null) as no_of_products,\\n                     (select analytic_account from hr_expense_line where id=l.id and analytic_account is not null) as no_of_account,\\n                     s.state\\n                 from hr_expense_line l\\n                 left join hr_expense_expense s on (s.id=l.expense_id)\\n                 left join product_uom u on (u.id=l.uom_id)\\n                 group by\\n                     date_trunc('day',s.date),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY'),\\n                     to_char(date_trunc('day',s.create_date), 'MM'),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD'),\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     l.product_id,\\n                     l.analytic_account,\\n                     s.invoice_id,\\n                     s.currency_id,\\n                     s.user_valid,\\n                     s.department_id,\\n                     l.uom_id,\\n                     l.id,\\n                     s.state,\\n                     s.journal_id,\\n                     s.company_id,\\n                     s.employee_id\\n            )\\n        \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_option(self, option, value):\n    e = c_void_p(0)\n    realsense.rs_set_option(self.handle, option, value, byref(e))\n    check_error(e)", "buggy_source_code": "def set_option(self, option, value):\n    e = c_void_p(0)\n    realsense.rs_set_device_option(self.handle, option, value, byref(e))\n    check_error(e)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_option(self, option):\n    e = c_void_p(0)\n    r = realsense.rs_get_option(self.handle, option, byref(e))\n    check_error(e)\n    return r", "buggy_source_code": "def get_option(self, option):\n    e = c_void_p(0)\n    r = realsense.rs_get_device_option(self.handle, option, byref(e))\n    check_error(e)\n    return r", "edit_actions": ["update-node"]}
{"fixed_source_code": "def read_row_GDAL(filenames, row):\n    global _gdal_stack_reader\n    if _gdal_stack_reader is None or _gdal_stack_reader.filenames != filenames:\n        _gdal_stack_reader = _GDALStackReader(filenames)\n    return _gdal_stack_reader.read_row(row)", "buggy_source_code": "def read_row_GDAL(filenames, row):\n    global _gdal_stack_reader\n    if _gdal_stack_reader is None or np.array_equal(_gdal_stack_reader.filenames, filenames):\n        _gdal_stack_reader = _GDALStackReader(filenames)\n    return _gdal_stack_reader.read_row(row)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def edit_roles_validation(process, context):\n    return has_role(role=('Owner', context))", "buggy_source_code": "def edit_roles_validation(process, context):\n    return has_any_roles(roles=(('Owner', context), 'SiteAdmin'))", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def reclaim_complete(sess):\n    rc_op = op.reclaim_complete(rca_one_fs=False)\n    res = sess.compound([rc_op])\n    check(res, msg='reclaim_complete')", "buggy_source_code": "def reclaim_complete(sess):\n    rc_op = op.reclaim_complete(FALSE)\n    res = sess.compound([rc_op])\n    check(res, msg='reclaim_complete')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef assets_amount(self):\n    return len(self.get_related_assets())", "buggy_source_code": "@property\ndef assets_amount(self):\n    return self.get_related_assets().count()", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def paintEvent(self, event):\n    self._editor.paintLineNumbers(event)", "buggy_source_code": "def paintEvent(self, event):\n    self._editor.paint_line_numbers(event)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@apple_simulator_test('watch')\n@debugserver_test\ndef test_simulator_ostype_watchos(self):\n    self.check_simulator_ostype(sdk='watchsimulator', platform_names=['watchos'], arch='i386')", "buggy_source_code": "@apple_simulator_test('watch')\n@debugserver_test\ndef test_simulator_ostype_watchos(self):\n    self.check_simulator_ostype(sdk='watchsimulator', platform='watchos', arch='i386')", "edit_actions": ["update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@apple_simulator_test('appletv')\n@debugserver_test\ndef test_simulator_ostype_tvos(self):\n    self.check_simulator_ostype(sdk='appletvsimulator', platform_names=['tvos'])", "buggy_source_code": "@apple_simulator_test('appletv')\n@debugserver_test\ndef test_simulator_ostype_tvos(self):\n    self.check_simulator_ostype(sdk='appletvsimulator', platform='tvos')", "edit_actions": ["update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "@apple_simulator_test('iphone')\n@debugserver_test\ndef test_simulator_ostype_ios(self):\n    self.check_simulator_ostype(sdk='iphonesimulator', platform_names=['iphoneos', 'ios'])", "buggy_source_code": "@apple_simulator_test('iphone')\n@debugserver_test\ndef test_simulator_ostype_ios(self):\n    self.check_simulator_ostype(sdk='iphonesimulator', platform='ios')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _fromAmount(self, n):\n    if self.rpcversion == 0:\n        return int(n * 100000000)\n    return int(n)", "buggy_source_code": "def _fromAmount(self, n):\n    if self.rpcversion == 0:\n        return int(round(n * 100000000))\n    return int(n)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def load_job(self, uuid):\n    with open(self._job_filepath(uuid), 'r') as f:\n        html = f.read()\n    return BeautifulSoup(html)", "buggy_source_code": "def load_job(self, uuid):\n    with open(self.job_filepath(uuid), 'r') as f:\n        html = f.read()\n    return BeautifulSoup(html)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def save_job(self, soup, uuid):\n    with open(self._job_filepath(uuid), 'w+') as f:\n        f.write(soup.prettify())", "buggy_source_code": "def save_job(self, soup, uuid):\n    with open(self.job_filepath(uuid), 'w+') as f:\n        f.write(soup.prettify())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_to_project(self, uid, project_id):\n    dn = self.__project_to_dn(project_id)\n    return self.__add_to_group(uid, dn)", "buggy_source_code": "@sanitize\ndef add_to_project(self, uid, project_id):\n    dn = self.__project_to_dn(project_id)\n    return self.__add_to_group(uid, dn)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def delete_project(self, project_id):\n    project_dn = self.__project_to_dn(project_id)\n    self.__delete_roles(project_dn)\n    self.__delete_group(project_dn)", "buggy_source_code": "@sanitize\ndef delete_project(self, project_id):\n    project_dn = self.__project_to_dn(project_id)\n    self.__delete_roles(project_dn)\n    self.__delete_group(project_dn)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _eval_is_even(self):\n    return (self + S.One).is_odd", "buggy_source_code": "def _eval_is_even(self):\n    is_integer = self.is_integer\n    if is_integer:\n        return fuzzy_not(self._eval_is_odd())\n    elif is_integer is False:\n        return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def ALLOW_NULL(self):\n    return ' NULL'", "buggy_source_code": "def ALLOW_NULL(self):\n    return ' %s' % 'NULL'", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def is_whitelisted_host(host):\n    for pattern in config.val.content.host_blocking.whitelist:\n        if fnmatch.fnmatch(host, pattern.lower()):\n            return True\n    return False", "buggy_source_code": "def is_whitelisted_host(url):\n    for pattern in config.val.content.host_blocking.whitelist:\n        if urlmatch.URLPattern(pattern).matches(url):\n            return True\n    return False", "edit_actions": ["update-node", "update-node", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def download_app(self, data):\n    request = '/sys/app-catalogue'\n    return self._post(request)", "buggy_source_code": "def download_app(self, data):\n    request = '/sys/app-catalogue'\n    return self._post(request, data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def update_app_instance(self, slot_id, app_id, data):\n    request = '/slot/{0}/app-inst/{1}'.format(slot_id, app_id)\n    return self._patch(request)", "buggy_source_code": "def update_app_instance(self, slot_id, app_id, data):\n    request = '/slot/{0}/app-inst/{1}'.format(slot_id, app_id)\n    return self._patch(request, data)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_line_reports_with_since_until_value_not_valid(self):\n    (response, code) = self.query_region('line_reports?_current_datetime=20170101T120000&since=20170108T130000&until=20170105T000000', check=False)\n    assert code == 404\n    assert response['error']['message'] == 'invalid filtering period'", "buggy_source_code": "def test_line_reports_with_since_until_value_not_valid(self):\n    (response, code) = self.query_region('line_reports?_current_datetime=20170101T120000&since=20170108T130000&until=20170105T000000', check=False)\n    assert code == 404\n    assert response['error']['message'] == 'invalid filtering period (since > until)'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_sending_form(self):\n    res = self.client.post(reverse('ddcz:password-reset'), {'email': self.valid_email})\n    self.assertEquals(200, res.status_code)", "buggy_source_code": "def test_sending_form(self):\n    res = self.client.post(reverse('ddcz:password-reset'), {'email': self.valid_email})\n    self.assertEquals(302, res.status_code)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __overdue(self, je):\n    log.info('sn:%s timeout detected', je.sn)\n    try:\n        self.__sendreply(je)\n    except:\n        log.exception(str(je))", "buggy_source_code": "def __overdue(self, je):\n    log.info('sn:%s timeout detected', je.sn)\n    try:\n        self.__send_reply(je)\n    except:\n        log.exception(str(je))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def scores(self, G):\n    triangles = ChibaNishizekiTriangleEdgeScore(G).run().scores()\n    a_sj = PrefixJaccardCoefficient(G, triangles).run().scores()\n    return a_sj", "buggy_source_code": "def scores(self, G):\n    triangles = ChibaNishizekiTriangleEdgeScore(G).run().scores()\n    a_sj = PrefixJaccardScore(G, triangles).run().scores()\n    return a_sj", "edit_actions": ["update-node"]}
{"fixed_source_code": "def acc_id(client):\n    obj = client.list_api_key()[0]\n    return obj.account().id", "buggy_source_code": "def acc_id(client):\n    base_url = client.schema.types['schema'].links['collection']\n    r = requests.get(base_url, headers=auth_header_map(client))\n    return r.headers['x-api-account-id']", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def send_wx_msg(content=''):\n    if len(text) == 0:\n        return\n    t = wechat_thread(uid=UID, content=content)\n    t.daemon = False\n    t.start()", "buggy_source_code": "def send_wx_msg(content=''):\n    if len(content) == 0:\n        return\n    t = wechat_thread(uid=UID, content=content)\n    t.daemon = False\n    t.start()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_common_name(self):\n    return self.subject.get('2.5.4.3', 'unknown').decode()", "buggy_source_code": "def get_common_name(self):\n    return self.subject.get('2.5.4.3', b'unknown').decode()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_entry_strand(entry):\n    if check_flag(entry['flag'], 16):\n        return '+'\n    else:\n        return '-'", "buggy_source_code": "def get_entry_strand(entry):\n    if check_flag(entry['flag'], 16):\n        return '-'\n    else:\n        return '+'", "edit_actions": ["move-tree", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def show(secs):\n    _sa.show(secs)", "buggy_source_code": "def show(secs):\n    _sa.showNow(secs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef get_energy(graph, clusters, energy_type):\n    energy = 0.0\n    if energy_type == 'silhoutte':\n        energy = InternalEvaluation.get_silhoutte_index(graph, clusters)\n    return energy", "buggy_source_code": "@staticmethod\ndef get_energy(graph, clusters, energy_type):\n    energy = 0.0\n    if energy_type == 'silhoutte':\n        energy = InternalEvaluation.get_silhoutte_index(clusters, 'graph', graph)\n    return energy", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def figures_styles_post_update(figures_styles, display_options):\n    if figures_styles['h']['show_legend'] is None and (not display_options['separate_figures']):\n        figure_styles['h']['show_legend'] = False", "buggy_source_code": "def figures_styles_post_update(figures_styles, display_options):\n    if figures_styles['h']['show_legend'] is None and (not display_options['separate_figures']):\n        figures_styles['h']['show_legend'] = False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def drawSimulation(self):\n    self.__drawEnvironment()\n    self.__drawPopulation(self.simulation.population)\n    pygame.display.flip()", "buggy_source_code": "def drawSimulation(self):\n    self._draw_environment()\n    self._draw_population(self.simulation.population)\n    pygame.display.flip()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def help(self):\n    text = 'p - pause\\n'\n    text += 'right arrow - next visualization\\n'\n    text += 'left arrow - prior visualization\\n'\n    text += 's - save'\n    text += 'i - current timestep\\n'\n    text += 'left click on circle - information about individual in terminal'\n    return text", "buggy_source_code": "def help(self):\n    text = 'p - pause\\n'\n    text += 'right arrow - next visualization\\n'\n    text += 'left arrow - prior visualization\\n'\n    text += 's - save'\n    text += 'i - current time step\\n'\n    text += 'left click on circle - information about individual in terminal'\n    return text", "edit_actions": ["update-node"]}
{"fixed_source_code": "def initTestCase(self):\n    self.x_shape = (2, 3, 5, 5)\n    self.reduction = 'batchmean'", "buggy_source_code": "def initTestCase(self):\n    self.x_shape = (3, 2, 7, 7)\n    self.reduction = 'none'", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def initTestCase(self):\n    self.x_shape = (3, 7, 7)\n    self.reduction = 'none'", "buggy_source_code": "def initTestCase(self):\n    self.x_shape = (2, 5, 5)\n    self.reduction = 'batchmean'", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def get_online_playernames(self):\n    names = []\n    for player in self.players.itervalues():\n        if player.online:\n            names.append(player.name)\n    return names", "buggy_source_code": "def get_online_playernames(self):\n    names = []\n    for player in self.values():\n        if player.online:\n            names.append(player.name)\n    return names", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef can_handle_url(self, url):\n    match = _url_re.match(url)\n    return match", "buggy_source_code": "@classmethod\ndef can_handle_url(cls, url):\n    return cls._url_re.match(url) is not None", "edit_actions": ["insert-node", "update-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_current_email(self):\n    return self.get_current_user() + '@' + socket.gethostname()", "buggy_source_code": "def get_current_email(self, args):\n    return '%s@%s' % (args.user, socket.gethostname())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute(\"\\n\\t\\t\\tcreate or replace view report_workcenter_load as (\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tmin(wl.id) as id,\\n\\t\\t\\t\\t\\tto_char(create_date,'YYYY:IW') as name,\\n\\t\\t\\t\\t\\tSUM(wl.hour) AS hour,\\n\\t\\t\\t\\t\\tSUM(wl.cycle) AS cycle,\\n\\t\\t\\t\\t\\twl.workcenter_id as workcenter_id\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tmrp_production_workcenter_line wl\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\twl.workcenter_id,\\n\\t\\t\\t\\t\\tto_char(create_date,'YYYY:IW')\\n\\t\\t\\t)\")", "buggy_source_code": "def init(self, cr):\n    cr.execute(\"\\n\\t\\t\\tcreate or replace view report_workcenter_load as (\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tmin(wl.id) as id,\\n\\t\\t\\t\\t\\tto_char(p.date_planned,'YYYY:IW') as name,\\n\\t\\t\\t\\t\\tSUM(wl.hour) AS hour,\\n\\t\\t\\t\\t\\tSUM(wl.cycle) AS cycle,\\n\\t\\t\\t\\t\\twl.workcenter_id as workcenter_id\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tmrp_production_workcenter_line wl\\n\\t\\t\\t\\t\\tLEFT JOIN mrp_production p\\n\\t\\t\\t\\t\\t\\tON p.id = wl.production_id\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\twl.workcenter_id,\\n\\t\\t\\t\\t\\tto_char(p.date_planned,'YYYY:IW')\\n\\t\\t\\t)\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef _next(self):\n    return self.urls[self.pos + 1] if self.length >= self.pos else None", "buggy_source_code": "@property\ndef _next(self):\n    return self.urls[self.pos] if self.length > self.pos else None", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_current_range(self):\n    lower_bound = max((self.number - 5, 1))\n    return range(lower_bound, self.paginator.count)[0:10]", "buggy_source_code": "def get_current_range(self):\n    lower_bound = max((self.number - 5, 1))\n    return range(lower_bound, self.paginator.num_pages + 1)[0:10]", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def load_agroup_script():\n    agroup_script = '\\n        <script>\\n            $(document).ready(function () {{\\n                $(\\'.{0}\\').on(\\'click\\', function (event) {{\\n                    var agroup_id = $(this).data()[\\'id\\'];\\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/associate_group/agroup_summary\\',\\n                        data: \\'id=\"\\' + agroup_id + \\'\"\\',\\n                        success: function (data, status, req) {{\\n                            data = JSON.parse(data)\\n                            $(\\'#label_sum1\\').html(data[\\'total_of_cert\\']);\\n                            $(\\'#label_sum2\\').html(data[\\'total_of_gr\\']);\\n                            $(\\'#label_sum3\\').html(data[\\'total_of_farmer\\']);\\n                            $(\\'#label_sum4\\').html(data[\\'total_of_approved_area\\'] + \\' / \\' + data[\\'total_of_area\\']);\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                    \\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/group/deleted\\',\\n                        data: \\'where={{\"associate_group_id\": \"\\' + agroup_id + \\'\"}}\\',\\n                        success: function (data, status, req) {{\\n                            $(\\'#{1}\\').find(\\'tr:gt(0)\\').remove()\\n                            if(data.length){{\\n                                $(\\'#{2}\\').addClass(\\'hidden\\');\\n                                $(\\'#{1} div\\').removeClass(\\'hidden\\');\\n                                var table_body = $(\\'#{1} table tbody\\');\\n                                for (var i in data) {{\\n                                    var new_row = \\'<tr>\\' +\\n                                        \\'<th scope=\"row\">\\' + (parseInt(i) + 1) + \\'</th>\\' +\\n                                        \\'<td><b>\\' + data[i][\\'group_code\\'] + \\'</b></td>\\' +\\n                                        \\'<td>\\' + data[i][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'village\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'ward\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'district\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'province\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_deleted_at\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_modify_info\\'] + \\'</td>\\' +\\n                                        \\'</tr>\\';\\n                                    table_body.append(new_row);\\n                                }}\\n                            }} else {{\\n                                $(\\'#{1} div\\').addClass(\\'hidden\\');\\n                                $(\\'#{2}\\').removeClass(\\'hidden\\');\\n                            }}\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                        \\n                }});\\n            }});\\n        </script>\\n    \\n    '.format(g.c.BTNVIEW_ID, 'tab_history', 'no_data')\n    return Markup(agroup_script)", "buggy_source_code": "def load_agroup_script():\n    agroup_script = '\\n        <script>\\n            $(document).ready(function () {{\\n                $(\\'.{0}\\').on(\\'click\\', function (event) {{\\n                    var agroup_id = $(this).data()[\\'id\\'];\\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/associate_group/agroup_summary\\',\\n                        data: \\'id=\"\\' + agroup_id + \\'\"\\',\\n                        success: function (data, status, req) {{\\n                            data = JSON.parse(data)\\n                            $(\\'#label_sum0\\').html(data[\\'total_of_cert\\']);\\n                            $(\\'#label_sum1\\').html(data[\\'total_of_gr\\']);\\n                            $(\\'#label_sum2\\').html(data[\\'total_of_farmer\\']);\\n                            $(\\'#label_sum3\\').html(data[\\'total_of_approved_area\\'] + \\' / \\' + data[\\'total_of_area\\']);\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                    \\n                    $.ajax({{\\n                        method: \\'GET\\',\\n                        url: \\'/group/deleted\\',\\n                        data: \\'where={{\"associate_group_id\": \"\\' + agroup_id + \\'\"}}\\',\\n                        success: function (data, status, req) {{\\n                            $(\\'#{1}\\').find(\\'tr:gt(0)\\').remove()\\n                            if(data.length){{\\n                                $(\\'#{2}\\').addClass(\\'hidden\\');\\n                                $(\\'#{1} div\\').removeClass(\\'hidden\\');\\n                                var table_body = $(\\'#{1} table tbody\\');\\n                                for (var i in data) {{\\n                                    var new_row = \\'<tr>\\' +\\n                                        \\'<th scope=\"row\">\\' + (parseInt(i) + 1) + \\'</th>\\' +\\n                                        \\'<td><b>\\' + data[i][\\'group_code\\'] + \\'</b></td>\\' +\\n                                        \\'<td>\\' + data[i][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'village\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'ward\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'district\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'province\\'][\\'name\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_deleted_at\\'] + \\'</td>\\' +\\n                                        \\'<td>\\' + data[i][\\'_modify_info\\'] + \\'</td>\\' +\\n                                        \\'</tr>\\';\\n                                    table_body.append(new_row);\\n                                }}\\n                            }} else {{\\n                                $(\\'#{1} div\\').addClass(\\'hidden\\');\\n                                $(\\'#{2}\\').removeClass(\\'hidden\\');\\n                            }}\\n                        }},\\n                        error: function (request, status, error) {{\\n                            console.log(request);\\n                            console.log(error);\\n                            alert(request.responseText);\\n                        }}\\n                    }})\\n                        \\n                }});\\n            }});\\n        </script>\\n    \\n    '.format(g.c.BTNVIEW_ID, 'tab_history', 'no_data')\n    return Markup(agroup_script)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@after('prepare')\ndef assert_py2dsc_deb_is_available(logger):\n    logger.debug('Checking if py2dsc-deb is available.')\n    assert_can_execute(['py2dsc-deb', '-h'], 'py2dsc-deb', 'plugin python.py2dsc_deb')", "buggy_source_code": "@after('prepare')\ndef assert_py2dsc_deb_is_available(logger):\n    logger.debug('Checking if py2dsc-deb is available.')\n    assert_can_execute(['py2dsc-deb', '-h'], 'py2dsc-deb', 'plugin python.stdeb')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def include_views(config):\n    config.add_route('event', '/event')\n    config.scan('tests.event_listeners')", "buggy_source_code": "def include_views(config):\n    config.add_route('event', '/event')\n    config.scan('tests.views.test_events')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_repair(self):\n    logging.info('MongoViewMakerTest.test_repair')\n    self.repairman.removeModelStartupInvestorAndModelRewardPersonUnnecessaryData()", "buggy_source_code": "def test_repair(self):\n    logging.info('MongoViewMakerTest.test_repair')\n    self.repairman.makeViewStartupAndInvestment()\n    self.repairman.makeViewStartupAndSeries()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def version(self, code):\n    return '1.21wmf10'", "buggy_source_code": "def version(self, code):\n    return '1.21wmf11'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_privkey(self):\n    return ''.join(pack('!H', self.curve), pack('!H', len(self.privkey)), self.privkey)", "buggy_source_code": "def get_privkey(self):\n    return ''.join((pack('!H', self.curve), pack('!H', len(self.privkey)), self.privkey))", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def _get_name(self):\n    return self.userinfo['name']", "buggy_source_code": "def _get_name(self):\n    return self.user_info['name']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_parser(self, prog_name):\n    parser = super(ShowAccessRule, self).get_parser(prog_name)\n    parser.add_argument('access_rule', metavar='<access-rule>', help=_('Application credential to display (name or ID)'))\n    return parser", "buggy_source_code": "def get_parser(self, prog_name):\n    parser = super(ShowAccessRule, self).get_parser(prog_name)\n    parser.add_argument('access_rule', metavar='<access-rule>', help=_('Access rule to display (name or ID)'))\n    return parser", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route(join('/', c.POSTS_PATH, 'feed') + '/')\n@mimetype('application/atom+xml')\ndef posts_feed():\n    return generate_feed(app.latest_postn())", "buggy_source_code": "@app.route(join('/', c.POSTS_PATH, 'feed') + '/')\n@mimetype('application/atom+xml')\ndef posts_feed():\n    return generate_feed(app.latest_post_n())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init_population(pop_size):\n    decks = []\n    for _i in range(0, pop_size):\n        decks.append(create_random_deck())\n    print('population initialized ')\n    return decks", "buggy_source_code": "def init_population(pop_size):\n    decks = []\n    for _i in range(0, pop_size):\n        decks.append(create_random_deck())\n    print('population initialized: %d individuals ' % len(decks))\n    return decks", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __new__(cls, name, bases, dct):\n    rv = type.__new__(cls, name, bases, dct)\n    registry[name] = rv\n    return rv", "buggy_source_code": "def __new__(cls, name, bases, dct):\n    rv = type.__new__(cls, name, bases, dct)\n    cls.registry[name] = rv\n    return rv", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getLayer(self):\n    layer = self\n    while layer.__class__.__name__ != 'Layer':\n        layer = layer.parent\n    return layer", "buggy_source_code": "def getLayer(self):\n    parent = self.getParent()\n    while parent.getKType() != 'Layer' and parent is not None:\n        parent = parent.getParent()\n    return parent", "edit_actions": ["insert-node", "update-node", "update-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "update-node", "update-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def getContainer(self):\n    container = self\n    while container.__class__.__name__ != 'Container':\n        container = container.parent\n    return container", "buggy_source_code": "def getContainer(self):\n    parent = self.getParent()\n    while parent.getKType() != 'Container' and parent is not None:\n        parent = parent.getParent()\n    return parent", "edit_actions": ["insert-node", "update-node", "update-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "update-node", "update-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, fftShape, norm='ortho'):\n    LinTrans.__init__(self)\n    self._FT_AXES = (0, 1)\n    self.fftShape = fftShape\n    self.norm = norm", "buggy_source_code": "def __init__(self, fftShape, norm='ortho'):\n    BaseLinTrans.__init__(self)\n    self._FT_AXES = (0, 1)\n    self.fftShape = fftShape\n    self.norm = norm", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop(self):\n    self.smtpd.close()\n    self.server_thread.join(timeout=0.1)", "buggy_source_code": "def stop(self):\n    self.smtpd.close()\n    self.server_thread.join(timeout=0.5)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_success_url(self):\n    return self.object.post.get_absolute_url()", "buggy_source_code": "def get_success_url(self):\n    return self.object.article.get_absolute_url()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_success_url(self):\n    return self.object.post.get_absolute_url()", "buggy_source_code": "def get_success_url(self):\n    return self.object.article.get_absolute_url()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_success_url(self):\n    self.object.approve()\n    return self.object.post.get_absolute_url()", "buggy_source_code": "def get_success_url(self):\n    self.object.approve()\n    return self.object.article.get_absolute_url()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _installCAs(self):\n    printStep('Installing CAs and VOMS configuration')\n    self.system.installCAs()", "buggy_source_code": "def _installCAs(self):\n    Util.printStep('Installing CAs and VOMS configuration')\n    self.system.installCAs()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@with_setup(prepare_stdout)\ndef test_simple_tables_behave_as_feature():\n    Runner(path_to_feature('2nd_table_steps'), verbosity=3).run()\n    assert_stdout_lines('\\nFeature: Multiplication                            # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:2\\n  In order to avoid silly mistakes                 # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:3\\n  Cashiers must be able to multiplicate numbers :) # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:4\\n\\nScenario: Regular numbers                          # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:6\\n    Given I multiply these numbers:                # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:31\\n      | number |\\n      | 55     |\\n      | 2      |\\n    Then the result should be 110 on the screen    # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:19\\n\\nScenario: Shorter version of the scenario above    # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:13\\n    Given I multiply 55 and 2 into the calculator  # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:23\\n    Then the result should be 110 on the screen    # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:19\\n\\n1 feature (1 passed)\\n2 scenarios (2 passed)\\n4 steps (4 passed)\\n')", "buggy_source_code": "@with_setup(prepare_stdout)\ndef test_simple_tables_behave_as_feature():\n    Runner(path_to_feature('2nd_table_steps'), verbosity=3).run()\n    assert_stdout_lines('\\nFeature: Multiplication                            # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:2\\n  In order to avoid silly mistakes                 # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:3\\n  Cashiers must be able to multiplicate numbers :) # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:4\\n\\n  #1 \\n  Scenario: Regular numbers                        # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:6\\n    Given I multiply these numbers:                # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:31\\n      | number |\\n      | 55     |\\n      | 2      |\\n    Then the result should be 110 on the screen    # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:19\\n\\n  ----------------------------------------------------------------------------\\n\\n  #2 \\n  Scenario: Shorter version of the scenario above  # tests/functional/behave_as_features/2nd_table_steps/2nd_table_steps.feature:13\\n    Given I multiply 55 and 2 into the calculator  # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:23\\n    Then the result should be 110 on the screen    # tests/functional/behave_as_features/2nd_table_steps/simple_tables_step_definitions.py:19\\n\\n  ----------------------------------------------------------------------------\\n\\n1 feature (1 passed)\\n2 scenarios (2 passed)\\n4 steps (4 passed)\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@with_setup(prepare_stdout)\ndef test_simple_behave_as_feature():\n    Runner(path_to_feature('1st_normal_steps'), verbosity=3).run()\n    assert_stdout_lines('\\nFeature: Multiplication                            # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:2\\n  In order to avoid silly mistakes                 # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:3\\n  Cashiers must be able to multiplicate numbers :) # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:4\\n\\nScenario: Regular numbers                          # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:6\\n    Given I have entered 10 into the calculator    # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:11\\n    And I have entered 4 into the calculator       # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:11\\n    When I press multiply                          # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:15\\n    Then the result should be 40 on the screen     # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:19\\n\\nScenario: Shorter version of the scenario above    # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:12\\n    Given I multiply 10 and 4 into the calculator  # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:23\\n    Then the result should be 40 on the screen     # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:19\\n\\n1 feature (1 passed)\\n2 scenarios (2 passed)\\n6 steps (6 passed)\\n')", "buggy_source_code": "@with_setup(prepare_stdout)\ndef test_simple_behave_as_feature():\n    Runner(path_to_feature('1st_normal_steps'), verbosity=3).run()\n    assert_stdout_lines('\\nFeature: Multiplication                            # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:2\\n  In order to avoid silly mistakes                 # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:3\\n  Cashiers must be able to multiplicate numbers :) # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:4\\n\\n  #1 \\n  Scenario: Regular numbers                        # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:6\\n    Given I have entered 10 into the calculator    # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:11\\n    And I have entered 4 into the calculator       # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:11\\n    When I press multiply                          # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:15\\n    Then the result should be 40 on the screen     # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:19\\n\\n  ----------------------------------------------------------------------------\\n\\n  #2 \\n  Scenario: Shorter version of the scenario above  # tests/functional/behave_as_features/1st_normal_steps/1st_normal_steps.feature:12\\n    Given I multiply 10 and 4 into the calculator  # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:23\\n    Then the result should be 40 on the screen     # tests/functional/behave_as_features/1st_normal_steps/simple_step_definitions.py:19\\n\\n  ----------------------------------------------------------------------------\\n\\n1 feature (1 passed)\\n2 scenarios (2 passed)\\n6 steps (6 passed)\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def refresh_plugin_from_path(self, plugin_path):\n    plugin_manager = self.main_window.gui_object.plugins\n    self.plugin_path = plugin_path\n    (self.plugin_metadata, error_code) = plugin_manager.get_metadata_from_external_plugin_zip_file(plugin_path)\n    self.refresh_plugin()", "buggy_source_code": "def refresh_plugin_from_path(self, plugin_path):\n    plugin_manager = self.main_window.gui_object.plugins\n    self.plugin_path = plugin_path\n    (self.plugin_metadata, result_code) = plugin_manager.get_metadata_from_external_plugin_zip_file(plugin_path)\n    self.refresh_plugin()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate_manifest():\n    return textwrap.dedent('\\n        #   Edit this manifest to include information pertaining to each sample to be run.\\n        #   There are 4 tab-separated columns: filetype, paired/unpaired, UUID, URL(s) to sample\\n        #\\n        #   filetype    Filetype of the sample. Options: \"tar\" or \"fq\", for tarball/tarfile or fastq/fastq.gz\\n        #   paired      Indicates whether the data is paired or single-ended. Options:  \"paired\" or \"single\"\\n        #   UUID        This should be a unique identifier for the sample to be processed\\n        #   URL         A URL {scheme} pointing to the sample\\n        #\\n        #   If sample is being submitted as a fastq pair, provide two URLs separated by a comma.\\n        #   Samples must have the same extension - do not mix and match gzip and non-gzipped sample pairs.\\n        #\\n        #   Examples of several combinations are provided below. Lines beginning with # are ignored.\\n        #\\n        #   tar paired  UUID_1  file:///path/to/sample.tar\\n        #   fq  paired  UUID_2  file:///path/to/R1.fq.gz,file:///path/to/R2.fq.gz\\n        #   tar single  UUID_3  http://sample-depot.com/single-end-sample.tar\\n        #   tar paired  UUID_4  s3://my-bucket-name/directory/paired-sample.tar.gz\\n        #   fq  single  UUID_5  s3://my-bucket-name/directory/single-end-file.fq\\n        #\\n        #   Place your samples below, one per line.\\n        '.format(scheme=[x + '://' for x in schemes])[1:])", "buggy_source_code": "def generate_manifest():\n    return textwrap.dedent('\\n        #   Edit this manifest to include information pertaining to each sample to be run.\\n        #   There are 4 tab-separated columns: filetype, paired/unpaired, UUID, URL(s) to sample\\n        #\\n        #   filetype    Filetype of the sample. Options: \"tar\" or \"fq\", for tarball/tarfile or fastq/fastq.gz\\n        #   paired      Indicates whether the data is paired or single-ended. Options:  \"paired\" or \"single\"\\n        #   UUID        This should be a unique identifier for the sample to be processed\\n        #   URL         A URL {scheme} pointing to the sample\\n        #\\n        #   If sample is being submitted as a fastq pair, provide two URLs separated by a comma.\\n        #   Samples must have the same extension - do not mix and match gzip and non-gzipped sample pairs.\\n        #\\n        #   Samples consisting of tarballs with fastq files inside must follow the file name convention of\\n        #   ending in an R1/R2 or _1/_2 followed by one of the 4 extensions: .fastq.gz, .fastq, .fq.gz, .fq\\n        #\\n        #   Examples of several combinations are provided below. Lines beginning with # are ignored.\\n        #\\n        #   tar paired  UUID_1  file:///path/to/sample.tar\\n        #   fq  paired  UUID_2  file:///path/to/R1.fq.gz,file:///path/to/R2.fq.gz\\n        #   tar single  UUID_3  http://sample-depot.com/single-end-sample.tar\\n        #   tar paired  UUID_4  s3://my-bucket-name/directory/paired-sample.tar.gz\\n        #   fq  single  UUID_5  s3://my-bucket-name/directory/single-end-file.fq\\n        #\\n        #   Place your samples below, one per line.\\n        '.format(scheme=[x + '://' for x in schemes])[1:])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, annotated_interactions, seed_links_indices, active_interactions):\n    super(IntraTermsAndLinksState, self).__init__(annotated_interactions, seed_links_indices, active_interactions)", "buggy_source_code": "def __init__(self, annotated_interactions, active_interactions, seed_links_indices=None):\n    super(IntraTermsAndLinksState, self).__init__(annotated_interactions, active_interactions, seed_links_indices=seed_links_indices)", "edit_actions": ["update-node", "update-node", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_return_value(self, document):\n    self._redraw()\n    self._set_return_callable(lambda : document)", "buggy_source_code": "def set_return_value(self, document):\n    self._set_return_callable(lambda : document)\n    self._redraw()", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "@property\ndef left(self):\n    return self.left", "buggy_source_code": "@property\ndef left(self):\n    return self.__left", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef orientation(self):\n    return self.orientation", "buggy_source_code": "@property\ndef orientation(self):\n    return self.__orientation", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef duration(self):\n    return self.duration", "buggy_source_code": "@property\ndef duration(self):\n    return self.__duration", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef left_separated(self):\n    return self.left_separated", "buggy_source_code": "@property\ndef left_separated(self):\n    return self.__left_separated", "edit_actions": ["update-node"]}
{"fixed_source_code": "def subtitle(self):\n    subtitlebit = '\\tsubtitle: {\\n'\n    if self.subtitle_text != '':\n        subtitlebit += '\\t\\ttext: \"%s,\"\\n' % self.subtitle_text\n    subtitlebit += '\\t},\\n'\n    return subtitlebit", "buggy_source_code": "def subtitle(self):\n    subtitlebit = '\\tsubtitle: {\\n'\n    if self.subtitle_text != '':\n        subtitlebit += '\\t\\ttext: \"%s\"\\n' % self.subtitle_text\n    subtitlebit += '\\t},\\n'\n    return subtitlebit", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef project_config(self):\n    cfg = super().project_config\n    cfg.update({'query-comment': None})\n    return cfg", "buggy_source_code": "@property\ndef project_config(self):\n    cfg = super().project_config\n    cfg.update({'query-comment': 'None'})\n    return cfg", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'hr_expense_report')\n    cr.execute(\"\\n            create or replace view hr_expense_report as (\\n                 select\\n                     min(l.id) as id,\\n                     date_trunc('day',s.date) as date,\\n                     s.employee_id,\\n                     s.journal_id,\\n                     s.currency_id,\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_confirm,\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_valid,\\n                     s.invoice_id,\\n                     count(s.invoice_id) as invoiced,\\n                     s.user_valid as user_id,\\n                     s.department_id,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY') as year,\\n                     to_char(date_trunc('day',s.create_date), 'MM') as month,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD') as day,\\n                     avg(extract('epoch' from age(s.date_valid,s.date)))/(3600*24) as  delay_valid,\\n                     avg(extract('epoch' from age(s.date_valid,s.date_confirm)))/(3600*24) as  delay_confirm,\\n                     l.product_id as product_id,\\n                     l.analytic_account as analytic_account,\\n                     sum(l.unit_quantity * u.factor) as product_qty,\\n                     s.company_id as company_id,\\n                     sum(l.unit_quantity*l.unit_amount) as price_total,\\n                     (sum(l.unit_quantity*l.unit_amount)/sum(l.unit_quantity * u.factor))::decimal(16,2) as price_average,\\n                     count(*) as nbr,\\n                     (select unit_quantity from hr_expense_line where id=l.id and product_id is not null) as no_of_products,\\n                     (select analytic_account from hr_expense_line where id=l.id and analytic_account is not null) as no_of_account,\\n                     s.state\\n                 from hr_expense_line l\\n                 left join hr_expense_expense s on (s.id=l.expense_id)\\n                 left join product_uom u on (u.id=l.uom_id)\\n                 group by\\n                     date_trunc('day',s.date),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY'),\\n                     to_char(date_trunc('day',s.create_date), 'MM'),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD'),\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     l.product_id,\\n                     l.analytic_account,\\n                     s.invoice_id,\\n                     s.currency_id,\\n                     s.user_valid,\\n                     s.department_id,\\n                     l.uom_id,\\n                     l.id,\\n                     s.state,\\n                     s.journal_id,\\n                     s.company_id,\\n                     s.employee_id\\n            )\\n        \")", "buggy_source_code": "def init(self, cr):\n    tools.drop_view_if_exists(cr, 'hr_expense_report')\n    cr.execute(\"\\n            create or replace view hr_expense_report as (\\n                 select\\n                     min(l.id) as id,\\n                     date_trunc('day',s.date) as date,\\n                     s.employee_id,\\n                     s.journal_id,\\n                     s.currency_id,\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_confirm,\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY') as date_valid,\\n                     s.invoice_id,\\n                     count(s.invoice_id) as invoiced,\\n                     s.user_valid as user_id,\\n                     s.department_id,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY') as year,\\n                     to_char(date_trunc('day',s.create_date), 'MM') as month,\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD') as day,\\n                     avg(extract('epoch' from age(s.date_valid,s.date)))/(3600*24) as  delay_valid,\\n                     avg(extract('epoch' from age(s.date_valid,s.date_confirm)))/(3600*24) as  delay_confirm,\\n                     l.product_id as product_id,\\n                     l.analytic_account as analytic_account,\\n                     sum(l.unit_quantity * u.factor) as product_qty,\\n                     s.company_id as company_id,\\n                     sum(l.unit_quantity*l.unit_amount) as price_total,\\n                     (sum(l.unit_quantity*l.unit_amount)/sum(case when l.unit_quantity=0 or u.factor=0 then 1 else l.unit_quantity * u.factor end))::decimal(16,2) as price_average,\\n                     count(*) as nbr,\\n                     (select unit_quantity from hr_expense_line where id=l.id and product_id is not null) as no_of_products,\\n                     (select analytic_account from hr_expense_line where id=l.id and analytic_account is not null) as no_of_account,\\n                     s.state\\n                 from hr_expense_line l\\n                 left join hr_expense_expense s on (s.id=l.expense_id)\\n                 left join product_uom u on (u.id=l.uom_id)\\n                 group by\\n                     date_trunc('day',s.date),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY'),\\n                     to_char(date_trunc('day',s.create_date), 'MM'),\\n                     to_char(date_trunc('day',s.create_date), 'YYYY-MM-DD'),\\n                     to_date(to_char(s.date_confirm, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     to_date(to_char(s.date_valid, 'dd-MM-YYYY'),'dd-MM-YYYY'),\\n                     l.product_id,\\n                     l.analytic_account,\\n                     s.invoice_id,\\n                     s.currency_id,\\n                     s.user_valid,\\n                     s.department_id,\\n                     l.uom_id,\\n                     l.id,\\n                     s.state,\\n                     s.journal_id,\\n                     s.company_id,\\n                     s.employee_id\\n            )\\n        \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unidecode(s):\n    if PY3:\n        s = s.decode()\n    elif isinstance(s, str):\n        s = s.decode('utf-8')\n    return s", "buggy_source_code": "def unidecode(s):\n    if PY3:\n        s = s.decode()\n    elif isinstance(s, str):\n        s = s.decode('utf-8', 'ignore')\n    return s", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@database_sync_to_async\nasync def get_client_count(self):\n    return Client.objects.filter(archive=False).count()", "buggy_source_code": "@database_sync_to_async\ndef get_client_count(self):\n    return Client.objects.filter(archive=False).count()", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def __init__(self, path, files):\n    self.files = files\n    self.path = path", "buggy_source_code": "def __init__(self, output_path, kml_file):\n    self.output_path = output_path\n    self.file_path = os.path.dirname(kml_file)\n    self.kml_file = kml_file", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "@fixture(scope='module')\ndef proposals():\n    return create_proposals(user_token=api_login_god(), n=1)", "buggy_source_code": "@fixture(scope='module')\ndef proposals():\n    creds = api_login_god()\n    return create_proposals(creds['user_path'], creds['user_token'], n=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def getDisplayMode(self):\n    return {QtGui.QLineEdit.Normal: self.DisplayMode.Normal, QtGui.QLineEdit.PasswordEchoOnEdit: self.DisplayMode.Password}[self._qtWidget().echoMode()]", "buggy_source_code": "def getDisplayMode(self):\n    return {QtGui.QLineEdit.Normal: self.DisplayMode.Normal, QtGui.QLineEdit.Password: self.DisplayMode.Password}[self._qtWidget().echoMode()]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testShift(self):\n    ayrton.main('a= shift ();\\nprint (a)', argv=['test_script.ay', '42'])\n    self.assertEqual(self.a.buffer.getvalue(), b'42\\n')", "buggy_source_code": "def testShift(self):\n    ayrton.main('a= shift ();\\nprint (a)', argv=['test_script.ay', '42'])\n    os.close(1)\n    self.assertEqual(self.r.read(), b'42\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testUnset(self):\n    ayrton.main('export (TEST_ENV=42)\\nprint (TEST_ENV)\\nunset (\"TEST_ENV\")\\ntry:\\n    TEST_ENV\\nexcept NameError:\\n    print (\"yes\")')\n    self.assertEqual(self.a.buffer.getvalue(), b'42\\nyes\\n')", "buggy_source_code": "def testUnset(self):\n    ayrton.main('export (TEST_ENV=42)\\nprint (TEST_ENV)\\nunset (\"TEST_ENV\")\\ntry:\\n    TEST_ENV\\nexcept NameError:\\n    print (\"yes\")')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'42\\nyes\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDownMockStdout(self):\n    sys.stdout = self.old_stdout", "buggy_source_code": "def tearDownMockStdout(self):\n    os.dup(self.old_stdout)\n    os.close(self.old_stdout)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testExitCodeNOK(self):\n    ayrton.main('if not false ():\\n    print (\"yes!\")')\n    self.assertEqual(self.a.buffer.getvalue(), b'yes!\\n')", "buggy_source_code": "def testExitCodeNOK(self):\n    ayrton.main('if not false ():\\n    print (\"yes!\")')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'yes!\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testStdEqNone(self):\n    ayrton.main('echo (\"foo\", _out=None)')\n    self.assertEqual(self.a.buffer.getvalue(), b'')", "buggy_source_code": "def testStdEqNone(self):\n    ayrton.main('echo (\"foo\", _out=None)')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testEnviron(self):\n    ayrton.main('export (TEST_ENV=42);\\nrun (\"./ayrton/tests/data/test_environ.sh\")')\n    self.assertEqual(self.a.buffer.getvalue(), b'42\\n')", "buggy_source_code": "def testEnviron(self):\n    ayrton.main('export (TEST_ENV=42);\\nrun (\"./ayrton/tests/data/test_environ.sh\")')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'42\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testWithCd(self):\n    ayrton.main('import os.path\\nwith cd (\"bin\"):\\n    print (os.path.split (pwd ())[-1])')\n    self.assertEqual(self.a.buffer.getvalue(), b'bin\\n')", "buggy_source_code": "def testWithCd(self):\n    ayrton.main('import os.path\\nwith cd (\"bin\"):\\n    print (os.path.split (pwd ())[-1])')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'bin\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testEnvVarAsGlobalVar(self):\n    os.environ['testEnvVarAsLocalVar'] = '42'\n    ayrton.main('print (testEnvVarAsLocalVar)')\n    self.assertEqual(self.a.buffer.getvalue(), b'42\\n')", "buggy_source_code": "def testEnvVarAsGlobalVar(self):\n    os.environ['testEnvVarAsLocalVar'] = '42'\n    ayrton.main('print (testEnvVarAsLocalVar)')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'42\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testExitCodeOK(self):\n    ayrton.main('if true ():\\n    print (\"yes!\")')\n    self.assertEqual(self.a.buffer.getvalue(), b'yes!\\n')", "buggy_source_code": "def testExitCodeOK(self):\n    ayrton.main('if true ():\\n    print (\"yes!\")')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'yes!\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testRename(self):\n    ayrton.main('import os.path;\\nprint (os.path.split (pwd ())[-1])')\n    self.assertEqual(self.a.buffer.getvalue(), b'ayrton\\n')", "buggy_source_code": "def testRename(self):\n    ayrton.main('import os.path;\\nprint (os.path.split (pwd ())[-1])')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'ayrton\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testStdEqCapture(self):\n    ayrton.main('f= echo (\"foo\", _out=Capture);\\nprint (\"echo: %s\" % f)')\n    self.assertEqual(self.a.buffer.getvalue(), b'echo: foo\\n\\n')", "buggy_source_code": "def testStdEqCapture(self):\n    ayrton.main('f= echo (\"foo\", _out=Capture);\\nprint (\"echo: %s\" % f)')\n    os.close(1)\n    self.assertEqual(self.r.read(), b'echo: foo\\n\\n')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testPipe(self):\n    ayrton.main('ls () | grep (\"setup\")')\n    self.assertEqual(self.a.buffer.getvalue(), b'setup.py\\n')", "buggy_source_code": "def testPipe(self):\n    ayrton.main('ls () | grep (\"setup\")')\n    self.assertEqual(self.r.read(), b'setup.py\\n')", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def testShifts(self):\n    ayrton.main('a= shift (2);\\nprint (a)', argv=['test_script.ay', '42', '27'])\n    self.assertEqual(self.a.buffer.getvalue(), b\"['42', '27']\\n\")", "buggy_source_code": "def testShifts(self):\n    ayrton.main('a= shift (2);\\nprint (a)', argv=['test_script.ay', '42', '27'])\n    os.close(1)\n    self.assertEqual(self.r.read(), b\"['42', '27']\\n\")", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run_ffmpeg(params):\n    cmd = '%s -y %s' % (get_ffmpeg(), params)\n    if is_dry_run():\n        print(cmd, end='\\n')\n    else:\n        run_os_cmd(cmd)", "buggy_source_code": "def run_ffmpeg(params):\n    cmd = '%s -y %s' % (get_ffmpeg(), params)\n    if is_dry_run():\n        logger.info('DRY RUN %s', cmd)\n    else:\n        run_os_cmd(cmd)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def TemplateRefreshMaterializedView(self):\n    return Template('REFRESH MATERIALIZED VIEW #view_name#\\n--CONCURRENTLY\\n--WITH NO DATA\\n')", "buggy_source_code": "def TemplateRefreshMaterializedView(self):\n    return Template('REFRESH MATERIALIZED VIEW\\n--CONCURRENTLY\\n#view_name#\\n--WITH NO DATA\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@route(PREFIX + '/{channelId}/livestream')\ndef StreamChannel(channelId):\n    url = '%s/stream/channel/%s?profile=pass' % (Dict['stream_url'], channelId)\n    return Redirect(url)", "buggy_source_code": "@route(PREFIX + '/{channelId}/livestream')\ndef StreamChannel(channelId):\n    url = '%s/stream/channel/%s?profile=pass' % (Dict['url'], channelId)\n    return Redirect(url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clean_repo_path(self, path=SCENARIOS_ROOT):\n    shutil.rmtree(path, ignore_errors=True)", "buggy_source_code": "@staticmethod\ndef clean_repo_path(scenarios_root=SCENARIOS_ROOT):\n    shutil.rmtree(scenarios_root, ignore_errors=True)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.target = [splitext(f)[0] for f in listdir(self.TEMPLATE_DIR_TARGET) if isfile(join(self.TEMPLATE_DIR_TARGET, f))]", "buggy_source_code": "def __init__(self):\n    self.targets = [splitext(f)[0] for f in listdir(self.TEMPLATE_DIR_TARGET) if isfile(join(self.TEMPLATE_DIR_TARGET, f))]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def instantiate(self, data):\n    return Item()", "buggy_source_code": "def instantiate(self, data):\n    return Item(data)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def connected(self):\n    return self.controller.connections[slave_id]", "buggy_source_code": "def connected(self):\n    return self.controller.connections[self._slave_id]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def run_button_action(self, tab_ui):\n    if not self.set_inactive({'tabID': tab_ui.tab_id}):\n        self.start_ping(tab_ui)", "buggy_source_code": "def run_button_action(self, tab_ui):\n    if not self._set_inactive({'tabID': tab_ui.tab_id}):\n        self.start_ping(tab_ui)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def js_callback(self, code_string):\n    js_str = '\\n        <script>\\n        // additional js function to select and click on the data\\n        // returns the ids of the selected/clicked feature\\n\\n        var plotly_div = document.getElementById(\\'ReplaceTheDiv\\')\\n        var plotly_data = plotly_div.data\\n\\n        // selecting function\\n        plotly_div.on(\\'plotly_selected\\', function(data){\\n        var dds = {};\\n        dds[\"mode\"] = \\'selection\\'\\n        dds[\"type\"] = data.points[0].data.type\\n\\n        featureIds = [];\\n        featureIdsTernary = [];\\n\\n        data.points.forEach(function(pt){\\n        featureIds.push(parseInt(pt.id))\\n        featureIdsTernary.push(parseInt(pt.pointNumber))\\n        dds[\"id\"] = featureIds\\n        dds[\"tid\"] = featureIdsTernary\\n            })\\n        //console.log(dds)\\n        window.status = JSON.stringify(dds)\\n        })\\n\\n        // clicking function\\n        plotly_div.on(\\'plotly_click\\', function(data){\\n        var featureIds = [];\\n        var dd = {};\\n        dd[\"fidd\"] = data.points[0].id\\n        dd[\"mode\"] = \\'clicking\\'\\n\\n        // pie plot with different js data structure\\n        try {\\n\\n        if(data.points.trace.type == \\'pie\\'){\\n        dd[\"label\"] = data.points[0].label\\n        dd[\"type\"] = data.points.trace.type\\n        dd[\"field\"] = data.points.trace.name\\n            }\\n        }\\n\\n        // all other plots with standard js data structure\\n        catch(err){\\n\\n        for(var i=0; i < data.points.length; i++){\\n\\n        // scatter plot\\n        if(data.points[i].data.type == \\'scatter\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n\\n            data.points.forEach(function(pt){\\n            dd[\"fid\"] = pt.id\\n            })\\n        }\\n\\n        // histogram\\n        else if(data.points[i].data.type == \\'histogram\\'){\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"field\"] = data.points[i].data.name\\n\\n            // correct axis orientation\\n            if(data.points[i].data.orientation == \\'v\\'){\\n                dd[\"id\"] = data.points[i].x\\n                dd[\"bin_step\"] = data.points[i].data.xbins.size\\n            }\\n            else {\\n                dd[\"id\"] = data.points[i].y\\n                dd[\"bin_step\"] = data.points[i].data.ybins.size\\n            }\\n        }\\n\\n        // box plot\\n        else if(data.points[i].data.type == \\'box\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"field\"] = data.points[i].data.customdata\\n\\n                // correct axis orientation\\n                if(data.points[i].data.orientation == \\'v\\'){\\n                    dd[\"id\"] = data.points[i].x\\n                }\\n                else {\\n                    dd[\"id\"] = data.points[i].y\\n                }\\n            }\\n\\n        // bar plot\\n        else if(data.points[i].data.type == \\'bar\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"field\"] = data.points[i].data.customdata\\n\\n                // correct axis orientation\\n                if(data.points[i].data.orientation == \\'v\\'){\\n                    dd[\"id\"] = data.points[i].x\\n                }\\n                else {\\n                    dd[\"id\"] = data.points[i].y\\n                }\\n            }\\n\\n        // ternary\\n        else if(data.points[i].data.type == \\'scatterternary\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"field\"] = data.points[i].data.customdata\\n            dd[\"fid\"] = data.points[i].pointNumber\\n            }\\n\\n            }\\n        }\\n        //window.status = JSON.stringify(dd)\\n        });\\n        </script>'\n    return js_str", "buggy_source_code": "def js_callback(self, code_string):\n    js_str = '\\n        <script>\\n        // additional js function to select and click on the data\\n        // returns the ids of the selected/clicked feature\\n\\n        var plotly_div = document.getElementById(\\'ReplaceTheDiv\\')\\n        var plotly_data = plotly_div.data\\n\\n        // selecting function\\n        plotly_div.on(\\'plotly_selected\\', function(data){\\n        var dds = {};\\n        dds[\"mode\"] = \\'selection\\'\\n        dds[\"type\"] = data.points[0].data.type\\n\\n        featureIds = [];\\n        featureIdsTernary = [];\\n\\n        data.points.forEach(function(pt){\\n        featureIds.push(parseInt(pt.id))\\n        featureIdsTernary.push(parseInt(pt.pointNumber))\\n        dds[\"id\"] = featureIds\\n        dds[\"tid\"] = featureIdsTernary\\n            })\\n        //console.log(dds)\\n        window.status = JSON.stringify(dds)\\n        })\\n\\n        // clicking function\\n        plotly_div.on(\\'plotly_click\\', function(data){\\n        var featureIds = [];\\n        var dd = {};\\n        dd[\"fidd\"] = data.points[0].id\\n        dd[\"mode\"] = \\'clicking\\'\\n\\n        // pie plot with different js data structure\\n        try {\\n\\n        if(data.points.trace.type == \\'pie\\'){\\n        dd[\"label\"] = data.points[0].label\\n        dd[\"type\"] = data.points.trace.type\\n        dd[\"field\"] = data.points.trace.name\\n            }\\n        }\\n\\n        // all other plots with standard js data structure\\n        catch(err){\\n\\n        for(var i=0; i < data.points.length; i++){\\n\\n        // scatter plot\\n        if(data.points[i].data.type == \\'scatter\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n\\n            data.points.forEach(function(pt){\\n            dd[\"fid\"] = pt.id\\n            })\\n        }\\n\\n        // histogram\\n        else if(data.points[i].data.type == \\'histogram\\'){\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"field\"] = data.points[i].data.name\\n\\n            // correct axis orientation\\n            if(data.points[i].data.orientation == \\'v\\'){\\n                dd[\"id\"] = data.points[i].x\\n                dd[\"bin_step\"] = data.points[i].data.xbins.size\\n            }\\n            else {\\n                dd[\"id\"] = data.points[i].y\\n                dd[\"bin_step\"] = data.points[i].data.ybins.size\\n            }\\n        }\\n\\n        // box plot\\n        else if(data.points[i].data.type == \\'box\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"field\"] = data.points[i].data.customdata\\n\\n                // correct axis orientation\\n                if(data.points[i].data.orientation == \\'v\\'){\\n                    dd[\"id\"] = data.points[i].x\\n                }\\n                else {\\n                    dd[\"id\"] = data.points[i].y\\n                }\\n            }\\n\\n        // bar plot\\n        else if(data.points[i].data.type == \\'bar\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"field\"] = data.points[i].data.customdata\\n\\n                // correct axis orientation\\n                if(data.points[i].data.orientation == \\'v\\'){\\n                    dd[\"id\"] = data.points[i].x\\n                }\\n                else {\\n                    dd[\"id\"] = data.points[i].y\\n                }\\n            }\\n\\n        // ternary\\n        else if(data.points[i].data.type == \\'scatterternary\\'){\\n            dd[\"uid\"] = data.points[i].data.uid\\n            dd[\"type\"] = data.points[i].data.type\\n            dd[\"field\"] = data.points[i].data.customdata\\n            dd[\"fid\"] = data.points[i].pointNumber\\n            }\\n\\n            }\\n        }\\n        window.status = JSON.stringify(dd)\\n        });\\n        </script>'\n    return js_str", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_comment(self, driver):\n    comment = driver.find_element_by_xpath('//*[@class=\"comment-text-wrapper\"]')\n    return comment.text", "buggy_source_code": "def get_comment(self, driver):\n    comment = driver.find_element_by_class_name('comment-text-wrapper')\n    return comment.text", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_video_upload(self):\n    input_fh = open(TEST_VIDEO_PATH, 'r')\n    video_filepath = '/dev/null'\n    res = self.video.do_upload(input_fh, video_filepath)\n    self.assertEqual(video_filepath, res)", "buggy_source_code": "def test_video_upload(self):\n    input_fh = UploadedFile(file(TEST_VIDEO_PATH, 'r'))\n    video_filepath = '/dev/null'\n    res = self.video.do_upload(input_fh, video_filepath)\n    self.assertEqual(video_filepath, res)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def embedError(self, message, *args):\n    if args:\n        message = message % args\n    code = self.slicc.codeFormatter()\n    code('\\nchar c;\\ncerr << \"Runtime Error at ${{self.location}}, Ruby Time: \"\\n     << g_system_ptr->getTime() << \": \"\\n     << $message\\n     << \", PID: \" << getpid() << endl\\n     << \"press return to continue.\" << endl;\\ncin.get(c);\\nabort();\\n')\n    return code", "buggy_source_code": "def embedError(self, message, *args):\n    if args:\n        message = message % args\n    code = self.slicc.codeFormatter()\n    code('\\npanic(\"Runtime Error at ${{self.location}}, Ruby Time: %d, %s.\\\\n\",\\n    g_system_ptr->getTime(), $message);\\n')\n    return code", "edit_actions": ["update-node"]}
{"fixed_source_code": "@hook.event('entity.ExplosionPrimeEvent', 'high')\ndef OnExplosionPrimeEvent(event):\n    if TNT:\n        event.setCancelled(True)", "buggy_source_code": "@hook.event('entity.ExplosionPrimeEvent', 'high')\ndef OnExplosionPrimeEvent(event):\n    if val.TNT:\n        event.setCancelled(True)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _get_url_for_timerange(self, timerange, **kwargs):\n    return rhessi.get_obssum_filename(timerange)", "buggy_source_code": "def _get_url_for_timerange(self, timerange, **kwargs):\n    return rhessi.get_observing_summary_filename(timerange)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(BillingDocument, self).__init__(*args, **kwargs)\n    self.__last_state = self.state", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(BillingDocument, self).__init__(*args, **kwargs)\n    self._last_state = self.state", "edit_actions": ["update-node"]}
{"fixed_source_code": "def close_request(self, request):\n    super(BofhdServerImplementation, self).close_request(request)\n    self.logger.debug2('closed connection %r', request)", "buggy_source_code": "def close_request(self, request):\n    super(BofhdServerImplementation, self).close_request(request)\n    logger.debug('closed connection %r', request)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def import_matprops(mymaterial='T300_5208'):\n    matprops = pd.read_csv('./compositematerials.csv', index_col=0)\n    mat = matprops[mymaterial]\n    return mat", "buggy_source_code": "def import_matprops(mymaterial='T300_5208'):\n    matprops = pd.read_csv('F:/mechpy/mechpy/compositematerials.csv', index_col=0)\n    mat = matprops[mymaterial]\n    return mat", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, casttype, value):\n    self.OP = '({})'.format(cdecl.NamelessArg(casttype))\n    _UnaryOperation.__init__(self, value)", "buggy_source_code": "def __init__(self, casttype, value):\n    self.OP = '({})'.format(cdecl.NamelessArg(casttype))\n    _PrefixUnaryOperation.__init__(self, value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _create_unary_operation(name, op, is_suffix=False):\n    return type(name, (_UnaryOperation,), dict(OP=op, IS_SUFFIX=is_suffix))", "buggy_source_code": "def _create_unary_operation(name, op, is_suffix=False):\n    base = _PostfixUnaryOperation if is_suffix else _PrefixUnaryOperation\n    return type(name, (base,), dict(OP=op))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def broker_get_param(broker, param_name):\n    return e.enchant_broker_get_param(param_name)", "buggy_source_code": "def broker_get_param(broker, name):\n    return e.enchant_broker_get_param(broker, name)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def is_s3_file(file_object):\n    isinstance(file_object.file, S3Boto3StorageFile)", "buggy_source_code": "def is_s3_file(file_object):\n    return isinstance(file_object.file, S3Boto3StorageFile)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def test_create_dataset_outgroup(self):\n    cleaned_data = self.cleaned_data\n    cleaned_data['outgroup'] = 'CP100-11'\n    dataset_creator = CreateDataset(cleaned_data)\n    expected = 'nstates dna;\\nxread\\n1524 2\\n\\n&[dna]\\nCP100-11_Aus_bus'\n    result = dataset_creator.dataset_str\n    self.assertTrue(expected in result)", "buggy_source_code": "def test_create_dataset_outgroup(self):\n    cleaned_data = self.cleaned_data\n    cleaned_data['outgroup'] = 'CP100-11'\n    dataset_creator = CreateDataset(cleaned_data)\n    expected = 'nstates dna;\\nxread\\n1909 2\\n\\n&[dna]\\nCP100-11_Aus_bus'\n    result = dataset_creator.dataset_str\n    self.assertTrue(expected in result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getHTML(self, params):\n    html = '\\n        <!DOCTYPE html>\\n        <html>\\n        <body>\\n\\n        <p>\\n        Prem RPI app by @lfcsorted, your feedback is welcome.</p>\\n        <a href=\"https://twitter.com/lfcsorted\" class=\"twitter-follow-button\" data-show-count=\"false\">Follow @lfcsorted</a>\\n        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)\\n        ?\\'http\\':\\'https\\';if(!d.getElementById(id))\\n        {js=d.createElement(s);js.id=id;js.src=p+\\'://platform.twitter.com/widgets.js\\';fjs.parentNode.insertBefore(js,fjs);}}\\n        (document, \\'script\\', \\'twitter-wjs\\');</script>\\n        <br><br>\\n        </p>\\n        \\n        <p>\\n        The premrpi app automatically generates the latest English Premier League table sorted by the Ratings Percentage Index (RPI).\\n        The app updates itself when the Premier League results data changes at <a href=\"http://www.football-data.co.uk/englandm.php\">www.football-data.co.uk</a>. \\n\\n        </p>\\n\\n        <p>\\n        The English Premier League table does not lie at the end of the season.\\n        But earlier in the season the table does not tell the whole truth, even after 10+ games.\\n        Some teams will have had more difficult starts, having played many of the stronger teams.\\n        And other teams will have had easier starts, having played many of the weaker teams.\\n\\tSo how do you produce a table that takes account of the quality of the opposition?        \\n        <a href=\"https://tomkinstimes.com/\">The Tomkins Times</a> subscriber Tim O\\'Brien (@Tjobrien17) proposed use of the RPI.\\n        The idea is based on a technique used in American sports and is described by Tim\\n        <a href=\"https://tomkinstimes.com/2016/11/comment-of-the-month-october-2016/\">here</a>.\\n        </p>\\n        \\n        <p>\\n        The formula for the RPI is simple.\\n        It assigns a 25% weight to the team\\'s points percentage, a 50% weight to the average of all of that team\\'s\\n        opponents\\' points percentages, and a 25% weight to the average of that team\\'s opponents opponents\\' points percentages.\\n        The points percentage is the percentage of points gained (wins and draws) versus those available.\\n        </p>\\n\\n        <p>\\n        Special thanks to @12Xpert for the latest English Premier League base data at\\n        <a href=\"http://www.football-data.co.uk/englandm.php\">www.football-data.co.uk</a>.\\n        </p>\\n\\n        <p>\\n        Known Limitations\\n        <br>\\n        The RPI method of assessing a team\\'s \\'strength of schedule\\' lacks theoretical justification from a statistical standpoint\\n        - see <a href=\"https://en.wikipedia.org/wiki/Rating_Percentage_Index\">RPI on wikipedia</a>.\\n        The RPI implementation method varies by sport. The simple method implemented here does not remove the results against\\n        the team in the calculation of the opponents\\' and the opponents opponents\\' points percetages.\\n        The method also does not give a different weight to home and away wins. \\n        </p>\\n\\n        <p>\\n        <br>\\n        The app is open source software, built using python and several modules, most notably spyre and pandas.\\n        It is deployed on Heroku\\'s cloud application platform.\\n        For more information on the data analysis, the app source code and how it is deployed see the\\n        <a href=\"https://github.com/terrydolan/premrpi\">premrpi github repository</a>.\\n        </p>\\n        \\n        <p>\\n        Terry Dolan, @lfcsorted<br>\\n        Blog:  <a href=\"http://www.lfcsorted.com\">www.lfcsorted.com</a><br>\\n        </p>\\n        \\n        </body>\\n        </html>\\n        '\n    logger.info('PremRPI.getHTML, return the About HTML')\n    return html", "buggy_source_code": "def getHTML(self, params):\n    html = '\\n        <!DOCTYPE html>\\n        <html>\\n        <body>\\n\\n        <p>\\n        Prem RPI app by @lfcsorted, your feedback is welcome.</p>\\n        <a href=\"https://twitter.com/lfcsorted\" class=\"twitter-follow-button\" data-show-count=\"false\">Follow @lfcsorted</a>\\n        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)\\n        ?\\'http\\':\\'https\\';if(!d.getElementById(id))\\n        {js=d.createElement(s);js.id=id;js.src=p+\\'://platform.twitter.com/widgets.js\\';fjs.parentNode.insertBefore(js,fjs);}}\\n        (document, \\'script\\', \\'twitter-wjs\\');</script>\\n        <br><br>\\n        </p>\\n        \\n        <p>\\n        The premrpi app automatically generates the latest English Premier League table sorted by the Ratings Percentage Index (RPI).\\n        The app updates itself when the Premier League results data changes at <a href=\"http://www.football-data.co.uk/englandm.php\">www.football-data.co.uk</a>. \\n\\n        </p>\\n\\n        <p>\\n        The English Premier League table does not lie at the end of the season.\\n        But earlier in the season the table does not tell the whole truth, even after 10+ games.\\n        Some teams will have had more difficult starts, having played many of the stronger teams.\\n        And other teams will have had easier starts, having played many of the weaker teams.\\n\\tSo how do you produce a table that takes account of the quality of the opposition?        \\n        <a href=\"https://tomkinstimes.com/\">The Tomkins Times</a> subscriber Tim O\\'Brien (@Tjobrien17) proposed use of the RPI.\\n        The idea is based on a technique used in American sports and is described by Tim\\n        <a href=\"https://tomkinstimes.com/2016/11/comment-of-the-month-october-2016/\">here</a>.\\n        </p>\\n        \\n        <p>\\n        The formula for the RPI is simple.\\n        It assigns a 25% weight to the team\\'s points percentage, a 50% weight to the average of all of that team\\'s\\n        opponents\\' points percentages, and a 25% weight to the average of that team\\'s opponents opponents\\' points percentages.\\n        The points percentage is the percentage of points gained (wins and draws) versus those available.\\n        </p>\\n\\n        <p>\\n        Special thanks to @12Xpert for the latest English Premier League base data at\\n        <a href=\"http://www.football-data.co.uk/englandm.php\">www.football-data.co.uk</a>.\\n        </p>\\n\\n        <p>\\n        Known Limitations\\n        <br>\\n        The RPI method of assessing a team\\'s \\'strength of schedule\\' lacks theoretical justification from a statistical standpoint\\n        - see <a href=\"https://en.wikipedia.org/wiki/Rating_Percentage_Index\">RPI on wikipedia</a>.\\n        The RPI implementation method varies by sport. The simple method implemented here does not remove the results against\\n        the team in the calculation of the opponents\\' and the opponents opponents\\' points percentages.\\n        The method also does not give a different weight to home and away wins. \\n        </p>\\n\\n        <p>\\n        <br>\\n        The app is open source software, built using python and several modules, most notably spyre and pandas.\\n        It is deployed on Heroku\\'s cloud application platform.\\n        For more information on the data analysis, the app source code and how it is deployed see the\\n        <a href=\"https://github.com/terrydolan/premrpi\">premrpi github repository</a>.\\n        </p>\\n        \\n        <p>\\n        Terry Dolan, @lfcsorted<br>\\n        Blog:  <a href=\"http://www.lfcsorted.com\">www.lfcsorted.com</a><br>\\n        </p>\\n        \\n        </body>\\n        </html>\\n        '\n    logger.info('PremRPI.getHTML, return the About HTML')\n    return html", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _freebufs(p_arr, len):\n    for i in range(len):\n        if p_arr[i]:\n            libc.free(p_arr[i])", "buggy_source_code": "def _freebufs(p_arr, len_):\n    for i in range(len_):\n        if p_arr[i]:\n            libc.free(p_arr[i])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _repr_payload_data(name, data, debug):\n    return '{}={}{}'.format(name, len(data_), '({})'.format(tuple(data_.keys())) if debug else '')", "buggy_source_code": "def _repr_payload_data(name, data, debug):\n    return '{}={}{}'.format(name, len(data), '({})'.format(tuple(data.keys())) if debug else '')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_links(self, parentnode_id):\n    links = {}\n    if parentnode_id:\n        links['parentnode'] = self.geturl(parentnode_id)\n    return links", "buggy_source_code": "def get_links(self, id):\n    links = {}\n    if id:\n        links['node'] = self.geturl(id)\n    return links", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def get_install_screen(self):\n    method = self.settings.get('partition_mode')\n    return params['main_window'].pages[method]", "buggy_source_code": "def get_install_screen(self):\n    method = self.settings.get('partition_mode')\n    return self.main_window.pages[method]", "edit_actions": ["update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def check_messages(*messages):\n\n    def store_messages(func):\n        func.checks_msgs = messages\n        return func\n    return store_messages", "buggy_source_code": "def check_messages(*messages: str) -> Callable:\n\n    def store_messages(func):\n        func.checks_msgs = messages\n        return func\n    return store_messages", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def getInputFromPort(self, inputPort):\n    if not self.inputPorts.has_key(inputPort):\n        raise Exception('Missing value from port %s' % inputPort)\n    return self.inputPorts[inputPort][0]()", "buggy_source_code": "def getInputFromPort(self, inputPort):\n    if not self.inputPorts.has_key(inputPort):\n        raise ModuleError(self, 'Missing value from port %s' % inputPort)\n    return self.inputPorts[inputPort][0]()", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def set_value(self, value):\n    self.spin_box.setValue(float(value))", "buggy_source_code": "def set_value(self, value):\n    self.spin_box.set_value(float(value))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def index(request):\n    context = {'socials': SOCIALS, 'user': request.user}\n    return render(request, 'main/index.html', context)", "buggy_source_code": "def index(request):\n    context = {'socials': SOCIALS, 'user': request.user}\n    return render(request, 'pages/index/index.html', context)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return str(self.week + ' ' + self.year)", "buggy_source_code": "def __unicode__(self):\n    return str(self.week) + ' ' + str(self.year)", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef methods(cls):\n    return []", "buggy_source_code": "@classmethod\ndef methods(cls):\n    return [None]", "edit_actions": []}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_element_is_enabled_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_element_is_enabled(locator, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_element_is_enabled_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_element_is_enabled(locator, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef run_keyword_and_return_status_without_screenshots(keyword, *args):\n    return BuiltIn().run_keyword_and_return_status(keyword, *args)", "buggy_source_code": "@no_screenshots\ndef run_keyword_and_return_status_without_screenshots(keyword, *args):\n    return BuiltIn().run_keyword_and_return_status(keyword, *args)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_element_is_visible_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_element_is_visible(locator, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_element_is_visible_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_element_is_visible(locator, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_page_does_not_contain_without_screenshots(text, timeout=None, error=None):\n    return s2l.wait_until_page_does_not_contain(text, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_page_does_not_contain_without_screenshots(text, timeout=None, error=None):\n    return s2l.wait_until_page_does_not_contain(text, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_page_contains_without_screenshots(text, timeout=None, error=None):\n    return s2l.wait_until_page_contains(text, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_page_contains_without_screenshots(text, timeout=None, error=None):\n    return s2l.wait_until_page_contains(text, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_keyword_succeeds_without_screenshots(retry, retry_interval, keyword, *args):\n    return BuiltIn().wait_until_keyword_succeeds(retry, retry_interval, keyword, *args)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_keyword_succeeds_without_screenshots(retry, retry_interval, keyword, *args):\n    return BuiltIn().wait_until_keyword_succeeds(retry, retry_interval, keyword, *args)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_element_contains_without_screenshots(locator, text, timeout=None, error=None):\n    return s2l.wait_until_element_contains(locator, text, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_element_contains_without_screenshots(locator, text, timeout=None, error=None):\n    return s2l.wait_until_element_contains(locator, text, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_page_contains_element_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_page_contains_element(locator, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_page_contains_element_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_page_contains_element(locator, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_element_is_not_visible_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_element_is_not_visible(locator, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_element_is_not_visible_without_screenshots(locator, timeout=None, error=None):\n    return s2l.wait_until_element_is_not_visible(locator, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef wait_until_element_does_not_contain_without_screenshots(locator, text, timeout=None, error=None):\n    return s2l.wait_until_element_does_not_contain(locator, text, timeout, error)", "buggy_source_code": "@no_intermediate_screenshots\ndef wait_until_element_does_not_contain_without_screenshots(locator, text, timeout=None, error=None):\n    return s2l.wait_until_element_does_not_contain(locator, text, timeout, error)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@setting_wait_until_flag\ndef run_keyword_and_ignore_error_without_screenshots(keyword, *args):\n    return BuiltIn().run_keyword_and_ignore_error(keyword, *args)", "buggy_source_code": "@no_screenshots\ndef run_keyword_and_ignore_error_without_screenshots(keyword, *args):\n    return BuiltIn().run_keyword_and_ignore_error(keyword, *args)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_description(self):\n    return 'This plugin provides an ability to launch Spark 0.8.0 on Hadoop 2.0.0-cdh4.4.0 cluster without any management consoles.'", "buggy_source_code": "def get_description(self):\n    return 'This plugin provides an ability to launch Spark 0.8.0 on Hadoop 2.0.0-cdh4.5.0 cluster without any management consoles.'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_versions(self):\n    return ['2.0.0_cdh4.4.0']", "buggy_source_code": "def get_versions(self):\n    return ['2.0.0_cdh4.5.0']", "edit_actions": ["update-node"]}
{"fixed_source_code": "@QtCore.Slot()\ndef on_btn_clear(self):\n    self.fixture_list = []\n    self.update_fixtures()", "buggy_source_code": "@QtCore.Slot()\ndef on_btn_clear(self):\n    for fixture in self.fixture_list:\n        fixture.deleteLater()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_obj_or_id_user_self(self, m):\n    user_id = obj_or_id('self', 'user_id', (User,))\n    self.assertIsInstance(user_id, str)\n    self.assertEqual(user_id, 'self')", "buggy_source_code": "def test_obj_or_id_user_self(self, m):\n    user_id = obj_or_id('self', 'user_id', (User,))\n    self.assertIsInstance(user_id, text_type)\n    self.assertEqual(user_id, 'self')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@task\ndef update_assets(ctx):\n    with ctx.lcd(settings.SRC_DIR):\n        ctx.local('python2.7 manage.py nunjucks_precompile')\n        ctx.local('bower install')\n        ctx.local('python2.7 manage.py collectstatic --noinput')", "buggy_source_code": "@task\ndef update_assets(ctx):\n    with ctx.lcd(settings.SRC_DIR):\n        ctx.local('python2.7 manage.py nunjucks_precompile')\n        ctx.local('./node_modules/.bin/bower install')\n        ctx.local('python2.7 manage.py collectstatic --noinput')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_install_package_with_subcommand():\n    install_package_and_wait('riak')\n    (stdout, stderr, return_code) = run_dcos_command('riak --version')\n    assert stdout.startswith('0')", "buggy_source_code": "def test_install_package_with_subcommand():\n    install_package_and_wait('hello-world')\n    (stdout, stderr, return_code) = run_dcos_command('hello-world --info')\n    assert stdout.startswith('Example')", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_uninstall_package_with_subcommand():\n    uninstall_package_and_wait('riak')\n    (stdout, stderr, return_code) = run_dcos_command('riak --version')\n    assert stderr.endswith('is not a dcos command.\\n')", "buggy_source_code": "def test_uninstall_package_with_subcommand():\n    uninstall_package_and_wait('hello-world')\n    (stdout, stderr, return_code) = run_dcos_command('hello-world --info')\n    assert stderr.endswith('is not a dcos command.\\n')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@contextmanager\ndef open_file_for_url(url, path, check_modified=True):\n    download_file_for_url(url, path, check_modified)\n    open_file = open(path, 'rb')\n    yield open_file\n    open_file.close()", "buggy_source_code": "@contextmanager\ndef open_file_for_url(url, path, check_modified=True):\n    download_file(url, path, check_modified)\n    open_file = open(path, 'rb')\n    yield open_file\n    open_file.close()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate(self, stager: str) -> tuple:\n    return ('py', dedent('        #!/usr/bin/env python\\n        # -*- coding: utf-8 -*-\\n        import subprocess\\n        \\n        {} = \"{}\"\\n        subprocess.Popen(\"{}\", shell=True)\\n        subprocess.Popen(\"rm -rf \" + __file__, shell=True)\\n        ').format(random_string(), random_string(numbers=True), stager.replace('\"', '\\\\\"')))", "buggy_source_code": "def generate(self, stager: str) -> tuple:\n    return ('py', dedent('        #!/usr/bin/python\\n        # -*- coding: utf-8 -*-\\n        import subprocess\\n        \\n        {} = \"{}\"\\n        subprocess.Popen(\"{}\", shell=True)\\n        subprocess.Popen(\"rm -rf \" + __file__, shell=True)\\n        ').format(random_string(), random_string(numbers=True), stager.replace('\"', '\\\\\"')))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_edge(self, src, dst):\n    self.edges[src].add(dst)\n    self.edges[-dst].add(-src)", "buggy_source_code": "def add_edge(self, n1, n2):\n    self.edges[n1].add(n2)\n    self.edges[-n2].add(-n1)", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@decorators.list_route()\ndef configured(self, request):\n    return response.Response(self.configuration, status=status.HTTP_200_OK)", "buggy_source_code": "@decorators.list_route()\ndef configured(self, request):\n    return response.Response(settings.WALDUR_SUPPORT['OFFERING'], status=status.HTTP_200_OK)", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef _check_json_output(cls, json):\n    if json['output'] != 'ok':\n        raise dnf.exceptions.Error('{}'.format(json['error']))", "buggy_source_code": "@classmethod\ndef _check_json_output(cls, json_obj):\n    if json_obj['output'] != 'ok':\n        raise dnf.exceptions.Error('{}'.format(json_obj['error']))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _errorReturn(self, e):\n    chapi_log_exception(SR_LOG_PREFIX, e)\n    return super(MAv1Handler, self)._errorReturn(e)", "buggy_source_code": "def _errorReturn(self, e):\n    chapi_log_exception(SR_LOG_PREFIX, e)\n    return super(CHv1Handler, self)._errorReturn(e)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def aliases(*_):\n    aliases = Aliases.instance()\n    if aliases:\n        _info(aliases)\n    else:\n        LOGGER.info('  No aliases')", "buggy_source_code": "def aliases(*_):\n    aliases = Aliases.instance()\n    if aliases:\n        _info(aliases)\n    else:\n        LOGGER.info('  No aliases\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __call__(self, config, args):\n    args['capabilities'] = args.pop('desired_capabilities', {})\n    return super(IeConfig, self).__call__(config, args)", "buggy_source_code": "def __call__(self, config, args):\n    args['desired_capabilities'] = args.pop('desired_capabilities', {})\n    return super(IeConfig, self).__call__(config, args)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_absolute_url(self):\n    return '/filing/%s/#%s' % (self.filing_number, self.transaction_id)", "buggy_source_code": "def get_absolute_url(self):\n    return '/filings/%s/#%s' % (self.filing_number, self.transaction_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_supported_urls(self):\n    self.set_text('\\nhttp://A.B\\nhttps://C.D\\nftp://E.F\\nhttp://H.I.J\\nhttp://K.L/\\nhttp://M.N/O?P=Q&R=S\\nhttp://Q.W:123\\nhttp://Q.W.E:123/\\nZ\\n')\n    self.check_eq_scope('^.+://.+$', 'markup.underline.link')\n    self.check_eq_scope('^.+://.+$', 'meta.link.inet')\n    self.check_default('Z')", "buggy_source_code": "def test_supported_urls(self):\n    self.set_text('\\nhttp://A.IT Z\\nhttps://C.COM Z\\nftp://E.GOOGLE Z\\nhttp://H.I.XX Z\\nhttp://K.XX/ Z\\nhttp://M.XX/O?P=Q&R=S Z\\nhttp://Q.XX:123 Z\\nhttp://Q.W.XX:123/ Z\\nhttp://ПРИВЕТ.МИР Z\\nZ\\n')\n    self.check_eq_scope('\\\\S+://\\\\S+', 'markup.underline.link')\n    self.check_eq_scope('\\\\S+://\\\\S+', 'meta.link.inet')\n    self.check_default('Z')", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_unsupported_urls(self):\n    self.set_text('\\nhttp://A\\nhttp://A:80\\nhttp://A:80.C\\nssh://B.C\\nhttp://D/E\\nhttp://A?B.C\\n')\n    self.check_default('.+')", "buggy_source_code": "def test_unsupported_urls(self):\n    self.set_text('\\nhttp://A\\nhttp://A.B\\nhttp://A:80\\nhttp://A:80.C\\nssh://B.C\\nhttp://D/E\\nhttp://A?B.C\\n')\n    self.check_default('.+')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def itervalues(d):\n    return getattr(d, _itervalues)()", "buggy_source_code": "def itervalues(d, **kw):\n    return iter(d.values(**kw))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def iterkeys(d):\n    return getattr(d, _iterkeys)()", "buggy_source_code": "def iterkeys(d, **kw):\n    return iter(d.keys(**kw))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def iteritems(d):\n    return getattr(d, _iteritems)()", "buggy_source_code": "def iteritems(d, **kw):\n    return iter(d.items(**kw))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def has_account_var(self, expr):\n    return bool(self.ACC_RE.match(expr))", "buggy_source_code": "def has_account_var(self, expr):\n    return bool(self.ACC_RE.search(expr))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def low(self, **config):\n    return self._parse_response(attribute='low', update=False)", "buggy_source_code": "def low(self, **config):\n    return self._parse_response(attribute='low', **config)", "edit_actions": ["insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def testModuleIdentityContactInfo(self):\n    self.assertEqual(self.ctx['testModule'].getContactInfo(), 'WG-email:   agentx@dorothy.bmc.com', 'bad CONTACT-INFO')", "buggy_source_code": "def testModuleIdentityContactInfo(self):\n    self.assertEqual(self.ctx['testModule'].getContactInfo(), 'WG-email: agentx@dorothy.bmc.com', 'bad CONTACT-INFO')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _test_empty(self):\n    return all((x.accepts_empty() for x in self.children))", "buggy_source_code": "def _test_empty(self):\n    return all((x._test_empty() for x in self.children))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _pnf2(self):\n    if self.accepts_empty():\n        return Choice([x._pnf2() for x in self.children])\n    else:\n        return self", "buggy_source_code": "def _pnf2(self):\n    if self._test_empty():\n        return Choice([x._pnf2() for x in self.children])\n    else:\n        return self", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _test_empty(self):\n    return any((x.accepts_empty() for x in self.children))", "buggy_source_code": "def _test_empty(self):\n    return any((x._test_empty() for x in self.children))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on(self):\n    gpio.output(self.ch1, 1)\n    gpio.output(self.ch1, 1)", "buggy_source_code": "def on(self):\n    gpio.output(self.ch1, 1)\n    gpio.output(self.ch2, 1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def idle(self):\n    gpio.output(self.ch1, 0)\n    gpio.output(self.ch1, 1)", "buggy_source_code": "def idle(self):\n    gpio.output(self.ch1, 0)\n    gpio.output(self.ch2, 1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def off(self):\n    gpio.output(self.ch1, 0)\n    gpio.output(self.ch1, 0)", "buggy_source_code": "def off(self):\n    gpio.output(self.ch1, 0)\n    gpio.output(self.ch2, 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def to_python(self, value):\n    if isinstance(value, str):\n        (self.operator, value) = split_on_operator(value)\n    return super(PrefixedField, self).to_python(value)", "buggy_source_code": "def to_python(self, value):\n    if isinstance(value, string_types):\n        (self.operator, value) = split_on_operator(value)\n    return super(PrefixedField, self).to_python(value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def store_sample_data(self, data):\n    try:\n        self.store_records(table=Project, data=data)\n    except:\n        raise", "buggy_source_code": "def store_sample_data(self, data):\n    try:\n        self.store_records(table=Sample, data=data)\n    except:\n        raise", "edit_actions": ["update-node"]}
{"fixed_source_code": "def n_dirname(n, file):\n    directory = file\n    for x in xrange(0, n):\n        directory = dirname(directory)\n    return directory", "buggy_source_code": "def n_dirname(n, file):\n    directory = file\n    for x in range(0, n):\n        directory = dirname(directory)\n    return directory", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_related_articles_excludes_self(self):\n    article = ArticlePage.objects.get(id=8)\n    related_articles = article.related_articles(number=10)\n    self.assertNotIn(article, related_articles)", "buggy_source_code": "def test_related_articles_excludes_self(self):\n    article = ArticlePage.objects.get(id=9)\n    related_articles = article.related_articles(number=10)\n    self.assertNotIn(article, related_articles)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_related_articles_returns_the_number_requested(self):\n    article = ArticlePage.objects.get(id=8)\n    related_articles = article.related_articles(number=2)\n    self.assertEqual(2, len(related_articles))", "buggy_source_code": "def test_related_articles_returns_the_number_requested(self):\n    article = ArticlePage.objects.get(id=9)\n    related_articles = article.related_articles(number=2)\n    self.assertEqual(2, len(related_articles))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_article_has_override_text_for_in_depth_related(self):\n    article = ArticlePage.objects.get(pk=6)\n    override = article.series_articles[0][1][0].override_text\n    self.assertEqual('<p>This is overridden text.</p>', override)", "buggy_source_code": "def test_article_has_override_text_for_in_depth_related(self):\n    article = ArticlePage.objects.get(pk=7)\n    override = article.series_articles[0][1][0].override_text\n    self.assertEqual('<p>This is overridden text.</p>', override)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_in_depth_artcles_does_not_contain_self(self):\n    article = ArticlePage.objects.get(pk=6)\n    actual = article.series_articles\n    self.assertNotIn(article, actual[0][1])", "buggy_source_code": "def test_in_depth_artcles_does_not_contain_self(self):\n    article = ArticlePage.objects.get(pk=7)\n    actual = article.series_articles\n    self.assertNotIn(article, actual[0][1])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def closestString(self):\n    closestStrings = self.closestStrings()\n    if not len(closestStrings):\n        return ''\n    return closestStrings[0]['term']", "buggy_source_code": "def closestString(self):\n    closestStrings = self.closestStrings()\n    if not len(closestStrings):\n        return ''\n    return closestStrings[0]", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def notify_launch_app(self, app):\n    self.reply_all('launch', app.id())", "buggy_source_code": "def notify_launch_app(self, app):\n    self.reply_all('launch_app', build_app_info(app))", "edit_actions": ["update-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def notify_switch_app(self, app):\n    self.reply_all('switch', app.id())", "buggy_source_code": "def notify_switch_app(self, app):\n    self.reply_all('activate_app', build_app_info(app))", "edit_actions": ["update-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, parameter):\n    super(MissingGETParameterError, self).__init__(message='The following GET parameters is required but was missing in the request: %s.' % parameter)", "buggy_source_code": "def __init__(self, *parameters):\n    super(MissingGETParameterError, self).__init__(message='The following GET parameters are required but were missing in the request: \"%s\".' % '\", \"'.join(parameters))", "edit_actions": ["insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def unitTests():\n    _tests = []\n    _tests.extend(SettingSuite())\n    return _tests", "buggy_source_code": "def unitTests():\n    _tests = []\n    _tests.extend(SettingsSuite())\n    return _tests", "edit_actions": ["update-node"]}
{"fixed_source_code": "def run_all():\n    unittest.TextTestRunner(verbosity=3, stream=sys.stdout).run(SettingSuite())", "buggy_source_code": "def run_all():\n    unittest.TextTestRunner(verbosity=3, stream=sys.stdout).run(SettingsSuite())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_job():\n    global ANT_COUNT\n    bot.sendMessage(chat_id=get_chat_id(), text=telegram.Emoji.ANT * ANT_COUNT)", "buggy_source_code": "def test_job():\n    global ANT_COUNT\n    bot.sendMessage(chat_id=get_config_key('chat_id'), text=telegram.Emoji.ANT * ANT_COUNT)", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def map(self, string, params):\n    bytestring = base64.encodestring(string)\n    bytevalue = b''\n    yield shuffled(bytesstring, bytevalue)", "buggy_source_code": "def map(self, string, params):\n    bytestring = base64.encodestring(string)\n    bytevalue = b''\n    yield shuffled((bytestring, bytevalue))", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def get_all_entries(self, request, extra_context=None):\n    return (self.get_item_queryset(), extra_context)", "buggy_source_code": "def get_all_entries(self, request, extra_context=None):\n    return (self.get_entry_queryset(), extra_context)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_all_articles(self, request, extra_context=None):\n    return (self.get_item_queryset(), extra_context)", "buggy_source_code": "def get_all_articles(self, request, extra_context=None):\n    return (self.get_article_queryset(), extra_context)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def singleFile():\n    fpath = '../txt/suzinak_zirgule--sarki--kapali_curcuna--ayri_dustum--yesari_asim_arsoy.txt'\n    print(fpath)\n    piece = symbtrscore(fpath)\n    piece.convertsymbtr2xml()\n    print(piece.phraseboundaryinfo)\n    print(piece.sectionsextracted)", "buggy_source_code": "def singleFile():\n    fpath = '../txt/suzinak_zirgule--sarki--kapali_curcuna--ayri_dustum--yesari_asim_arsoyy.txt'\n    print(fpath)\n    piece = symbtrscore(fpath)\n    piece.convertsymbtr2xml()\n    print(piece.phraseboundaryinfo)\n    print(piece.sectionsextracted)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def qtTaurusMsgHandler(type, msg):\n    log = getQtLogger()\n    caller = QT_LEVEL_MATCHER.get(type)\n    caller(log, msg)", "buggy_source_code": "def qtTaurusMsgHandler(type, msg):\n    global qtLogger\n    if qtLogger is not None:\n        caller = QT_LEVEL_MATCHER.get(type)\n        caller(qtLogger, msg)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_default_markers(testdir):\n    result = testdir.runpytest('--markers')\n    result.stdout.fnmatch_lines(['*skipif(*conditions)*skip*', '*xfail(*conditions, reason=None, run=True)*expected failure*'])", "buggy_source_code": "def test_default_markers(testdir):\n    result = testdir.runpytest('--markers')\n    result.stdout.fnmatch_lines(['*skipif(*condition)*skip*', '*xfail(*condition, reason=None, run=True)*expected failure*'])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_collect_workflowbatch(self, importer):\n    logger.info('test `_collect_workflowbatch()`')\n    workflowbatch = importer._collect_workflowbatch()\n    assert type(workflowbatch) == docs.GalaxyWorkflowBatch", "buggy_source_code": "def test_collect_workflowbatch(self, importerdata):\n    (importer, batchdata) = importerdata\n    logger.info('test `_collect_workflowbatch()`')\n    workflowbatch = importer._collect_workflowbatch()\n    assert type(workflowbatch) == docs.GalaxyWorkflowBatch", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_sniff_path_workflowbatch_file(self, manager, mock_genomics_server):\n    logger.info('test `_sniff_path()` for workflow batch file')\n    path_type = manager._sniff_path(mock_genomics_server['workflowbatch_file'])\n    assert path_type == 'workflowbatch_file'", "buggy_source_code": "def test_sniff_path_workflowbatch_file(self, managerdata, mock_genomics_server):\n    (manager, _, batchdata) = managerdata\n    logger.info('test `_sniff_path()` for workflow batch file')\n    path_type = manager._sniff_path(batchdata['path'])\n    assert path_type == 'workflowbatch_file'", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_sniff_path_workflowbatch_file(self, manager, mock_genomics_server):\n    logger.info('test `_sniff_path()` for workflow batch file')\n    path_type = manager._sniff_path(mock_genomics_server['workflowbatch_file'])\n    assert path_type == 'workflowbatch_file'", "buggy_source_code": "def test_sniff_path_workflowbatch_file(self, managerdata, mock_genomics_server):\n    (manager, _, batchdata) = managerdata\n    logger.info('test `_sniff_path()` for workflow batch file')\n    path_type = manager._sniff_path(batchdata['path'])\n    assert path_type == 'workflowbatch_file'", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def callback_2(self, dt):\n    self.assertTrue(abs(dt - 0.35) < 0.02)\n    self.callback_2_count += 1", "buggy_source_code": "def callback_2(self, dt):\n    self.assertTrue(abs(dt - 0.35) < 0.05)\n    self.callback_2_count += 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def callback_1(self, dt):\n    self.assertTrue(abs(dt - 0.1) < 0.02)\n    self.callback_1_count += 1", "buggy_source_code": "def callback_1(self, dt):\n    self.assertTrue(abs(dt - 0.1) < 0.05)\n    self.callback_1_count += 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def callback_3(self, dt):\n    self.assertTrue(abs(dt - 0.07) < 0.02)\n    self.callback_3_count += 1", "buggy_source_code": "def callback_3(self, dt):\n    self.assertTrue(abs(dt - 0.07) < 0.05)\n    self.callback_3_count += 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _check_closed(self):\n    if not self.connection or not self.connection._db:\n        raise self.connection.ProgrammingError('cursor closed')", "buggy_source_code": "def _check_closed(self):\n    if not self.connection or not self.connection._db:\n        raise self.connection.InterfaceError(0, '')", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, irc):\n    self.irc = irc\n    self.name = self.__class__.__name__\n    self.launchpad = LP.login_anonymously('pyhole', 'production', utils.get_directory(self.name))", "buggy_source_code": "def __init__(self, session):\n    self.session = session\n    self.name = self.__class__.__name__\n    self.launchpad = LP.login_anonymously('pyhole', 'production', utils.get_directory(self.name))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def formatTime(self, s):\n    return datetime.datetime(*time.strptime(s, self.time_format)[:6])", "buggy_source_code": "def formatTime(self, s):\n    from dateutil import parser\n    return parser.parse(s)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dict_table(request, **kwargs):\n    context = kwargs\n    pprint(context)\n    return render(request, 'cloudmesh_portal_hpc/dict_table.jinja', context)", "buggy_source_code": "def dict_table(request, **kwargs):\n    context = kwargs\n    pprint(context)\n    return render(request, 'cloudmesh_portal_comet/dict_table.jinja', context)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def comet_dict_table(request, **kwargs):\n    context = kwargs\n    return render(request, 'cloudmesh_portal/comet/comet_dict_table.jinja', context)", "buggy_source_code": "def comet_dict_table(request, **kwargs):\n    context = kwargs\n    return render(request, 'cloudmesh_portal_comet/comet_dict_table.jinja', context)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def comet_logon(request):\n    c = None\n    try:\n        c = Comet.logon()\n        print('LOGON OK')\n        return render(request, 'cloudmesh_portal/comet/logon_error.jinja')\n    except:\n        return c", "buggy_source_code": "def comet_logon(request):\n    c = None\n    try:\n        c = Comet.logon()\n        print('LOGON OK')\n        return render(request, 'cloudmesh_portal_comet/logon_error.jinja')\n    except:\n        return c", "edit_actions": ["update-node"]}
{"fixed_source_code": "def tanh(x):\n    assert x.flags.c_contiguous\n    all_kernels['tanh'](x)", "buggy_source_code": "def tanh(x):\n    assert x.flags.c_contiguous\n    all_kernels['tanh_inplace'](x)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def chown(self, path: FsPath, own: int):\n    return", "buggy_source_code": "def chown(self, path: FsPath, uid: int, gid: int):\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def chmod(self, path: FsPath, mod: int):\n    return", "buggy_source_code": "def chmod(self, path: FsPath, mode: int):\n    return", "edit_actions": ["update-node"]}
{"fixed_source_code": "def encoder(gan):\n    config = {'projections': ['identity', 'identity'], 'z': 2, 'min': 0, 'max': 1}\n    return UniformEncoder(gan, config)", "buggy_source_code": "def encoder(gan):\n    config = {'projections': ['identity', 'identity'], 'z': 2, 'min': 0, 'max': 1}\n    return UniformDistribution(gan, config)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    retval = self._descr[self.type] + '\\n'\n    for field in self._layout:\n        retval += '%s %s\\n' % (field.name, field.value)\n    return retval", "buggy_source_code": "def __str__(self):\n    s = self._descr[self.type] + '\\n'\n    for field in self._layout:\n        s += '%s %s\\n' % (field.name, field.value)\n    return s", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _check_existing_username(form, field):\n    if Identity.query.filter(provider='indico', identifier=field.data).has_rows():\n        raise ValidationError(_('This username is already in use.'))", "buggy_source_code": "def _check_existing_username(form, field):\n    if Identity.query.filter_by(provider='indico', identifier=field.data).has_rows():\n        raise ValidationError(_('This username is already in use.'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_settings_defaults(self):\n    return dict(socket='/var/run/netconnectd.sock', hostname=None, forwardUrl='http://find.mr-beam.org:5000', timeout=80)", "buggy_source_code": "def get_settings_defaults(self):\n    return dict(socket='/var/run/netconnectd.sock', hostname=None, forwardUrl='http://find.mr-beam.org', timeout=80)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def open_header(card_xml_file: IO[Any]) -> None:\n    card_xml_file.write(\"<cockatrice_carddatabase version='3'>\\n\" + '<!--\\nCreated At: ' + datetime.datetime.utcnow().strftime('%a, %b %d %Y, %H:%M:%S') + ' (UTC)' + '\\nCreated By: Magic-Spoiler project @ https://github.com/Cockatrice/Magic-Spoiler\\n-->\\n' + '<sets>\\n')", "buggy_source_code": "def open_header(card_xml_file: IO[Any]) -> None:\n    card_xml_file.write(\"<cockatrice_carddatabase version='3'>\\n\" + '<!--\\n' + '  Created At: ' + datetime.datetime.utcnow().strftime('%a, %b %d %Y, %H:%M:%S') + ' (UTC)\\n' + '  Created By: Magic-Spoiler project @ https://github.com/Cockatrice/Magic-Spoiler\\n' + '  -->\\n' + '<sets>\\n')", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_dict_values():\n    from trigrams import populate_dict\n    assert len(populate_dict(test_dict, test_biograms, test_list).values()) > 0", "buggy_source_code": "def test_dict_values():\n    from trigrams import populate_dict\n    result = populate_dict(test_dict, test_biograms, test_list)\n    assert len(result.values()) > 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unlistify(self, input):\n    element_pattern = re.compile('[\\'\"](\\\\S*)[\\'\"]')\n    without_tags = input[1:-1]\n    elements = element_pattern.findall(without_tags)\n    return '\\n'.join(elements)", "buggy_source_code": "def unlistify(self, input):\n    element_pattern = re.compile('[\\'\"]([\\\\w\\\\s]*)[\\'\"]')\n    without_tags = input[1:-1]\n    elements = element_pattern.findall(without_tags)\n    return '\\n'.join(elements)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _set_peps_border(ws, last_row_number):\n    cpt = FIRST_ROW_PEPS\n    while cpt <= last_row_number:\n        cell = ws['{}{}'.format(FIRST_COL_PEPS, cpt)]\n        cell.style = STYLE_BORDER_RIGHT\n        cpt += 1", "buggy_source_code": "def _set_peps_border(ws, last_row_number):\n    cpt = FIRST_ROW_PEPS\n    while cpt <= last_row_number:\n        cell = ws['{}{}'.format(FIRST_COL_PEPS, cpt)]\n        _update_border_for_first_peps_column(cell)\n        cpt += 1", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _process_assemblies(self, trackhub_builder):\n    self._get_assemblies_from_pogo_results()", "buggy_source_code": "def _process_assemblies(self, trackhub_builder):\n    self._get_assemblies_from_pogo_results(trackhub_builder)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def on_connect(client):\n    clients.append(Client(client))", "buggy_source_code": "def on_connect(client):\n    clients.append(TelnetClient(client))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def encrypt(self, payload: bytes) -> bytes:\n    encryptor = self.aes.encryptor()\n    return encryptor.update(payload) + encryptor.finalize()", "buggy_source_code": "def encrypt(self, payload: bytes) -> bytes:\n    encryptor = self.aes.encryptor()\n    return encryptor.update(bytes(payload)) + encryptor.finalize()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def set(key, value):\n    self._dict[key] = value", "buggy_source_code": "def set(self, key, value):\n    self._dict[key] = value", "edit_actions": ["insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    app = Flask(__name__)\n    self.hostname = socket.gethostname()\n    self.cpu()\n    self.cheat_load = None", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    app = Flask(__name__)\n    self.hostname = socket.gethostname()\n    self.cheat_load = None\n    self.cpu()", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def _target_relative_path(self, target, path):\n    return posixpath.relpath(self.project_definition.get_absolute_path(path), self.project_definition.get_absolute_path(target.get_obj_dir()))", "buggy_source_code": "def _target_relative_path(self, target, path):\n    return _relpath(self.project_definition.get_absolute_path(path), self.project_definition.get_absolute_path(target.get_obj_dir()))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def migrate(cur, db):\n    cur.execute(\"ALTER TABLE `chars` ADD COLUMN `nnameflags` tinyint(1) unsigned NOT NULL DEFAULT '0';\")\n    cur.execute('UPDATE `chars` o, `chars` n SET o.`nnameflags` = (CASE WHEN n.isnewplayer THEN 0x0 ELSE 0x04 END) WHERE o.charid = n.charid;')\n    print('Committing changes')\n    db.commit()\n    log_messages(cur)", "buggy_source_code": "def migrate(cur, db):\n    cur.execute(\"ALTER TABLE `chars` ADD COLUMN `nnameflags` int(10) unsigned NOT NULL DEFAULT '0';\")\n    cur.execute('UPDATE `chars` o, `chars` n SET o.`nnameflags` = (CASE WHEN n.isnewplayer THEN 0x0 ELSE 0x04 END) WHERE o.charid = n.charid;')\n    print('Committing changes')\n    db.commit()\n    log_messages(cur)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_xslt_broken(self):\n    tree = self.parse('<a/>')\n    style = self.parse('<xslt:stylesheet version=\"1.0\"\\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\\n    <xsl:foo />\\n</xslt:stylesheet>')\n    self.assertRaises(etree.XSLTParseError, etree.XSLT, style)", "buggy_source_code": "def test_xslt_broken(self):\n    tree = self.parse('<a/>')\n    style = self.parse('<xsl:stylesheet version=\"1.0\"\\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\\n    <xsl:foo />\\n</xsl:stylesheet>')\n    self.assertRaises(etree.XSLTParseError, etree.XSLT, style)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getSickCity():\n    sql_str = \"select city_name from lagou_city where total_num > 400 and (num < total_num / 2) and city_name in ('厦门','珠海')\"\n    res = sqlExecute(sql_str)\n    return res", "buggy_source_code": "def getSickCity():\n    sql_str = 'select city_name from lagou_city where total_num > 400 and (num < total_num / 2)'\n    res = sqlExecute(sql_str)\n    return res", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _taper(self, pos, length):\n    return round(1 + (length - pos) / length * 1.0001, 5) if self._taper_enabled else 1", "buggy_source_code": "def _taper(self, pos, length):\n    return round(1 + (length - pos) / length * 1.000000000000001, 15) if self._taper_enabled else 1", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@lazy\ndef traits(self):\n    return Traits(self)", "buggy_source_code": "@either\ndef traits(self):\n    return Traits(self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def to_python(self, not_null=False, boolean=False, many=False):\n    return 'not (' + Python[self.term].to_python(boolean=True) + ')'", "buggy_source_code": "def to_python(self, not_null=False, boolean=False, many=False):\n    return 'not (' + BooleanOp(Python[self.term]).to_python(boolean=True) + ')'", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def case_cancel(self, cr, uid, ids, context=None):\n    self.case_set(cr, uid, ids, 'cancelled', {'active': True}, context=context)\n    return True", "buggy_source_code": "def case_cancel(self, cr, uid, ids, context=None):\n    self.case_set(cr, uid, ids, 'cancel', {'active': True}, context=context)\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def initialize(self, instance, offset):\n    raise se.AbstractStructError(instance)", "buggy_source_code": "def initialize(self, instance, *args, **kwargs):\n    raise se.AbstractStructError(instance)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def viterbi(self, *args):\n    hmm_viterbi.viterbi(self, *args)", "buggy_source_code": "def viterbi(self, *args):\n    return hmm_viterbi.viterbi(self, *args)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self.current_task = None\n    self.module = None\n    self.queue = None", "buggy_source_code": "def __init__(self):\n    self.current_task = None\n    self.module = None\n    self.queue = None\n    self._module_results = None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_ready(self):\n    if self.process.is_alive():\n        return False\n    else:\n        self.module = self.queue.get(block=False)\n        return True", "buggy_source_code": "def is_ready(self):\n    if self.process.is_alive():\n        return False\n    else:\n        self._module_results = self.queue.get(block=False)\n        return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef create_agent_configurations():\n    config = super(Atba, Atba).create_agent_configurations()\n    config.add_header_name('Bot Parameters').add_value('flip_turning', bool, default=False, description='if true bot will turn opposite way')\n    return config", "buggy_source_code": "@staticmethod\ndef create_agent_configurations():\n    config = super(Atba, Atba).create_agent_configurations()\n    config.add_header_name('Atba Parameters').add_value('flip_turning', bool, default=False, description='if true bot will turn opposite way')\n    return config", "edit_actions": ["update-node"]}
{"fixed_source_code": "def load_config(self, config_object):\n    self.flip_turning = config_object.getboolean('atba', 'flip_turning')", "buggy_source_code": "def load_config(self, config_object):\n    self.flip_turning = config_object.getboolean('Atba Parameters', 'flip_turning')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def exist(self, data={}):\n    (err, res) = (yield from Service.Problem.get_execute(data))\n    if res is None:\n        return (404, 'Not Found')", "buggy_source_code": "def exist(self, data={}):\n    (err, res) = (yield from Service.Problem.get_problem(data))\n    if res is None:\n        return (404, 'Not Found')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def create_verification_course(self, openedx_course_id, published_by_id):\n    self.cursor.execute(\"INSERT INTO openedx_edxcourseverification\\n                               (edx_course_id, state, published_by_id)\\n                               VALUES ('{}', 'reviewable', '{}');\\n                            \".format(openedx_course_id, published_by_id))\n    self.connection.commit()\n    return self.cursor.lastrowid", "buggy_source_code": "def create_verification_course(self, openedx_course_id, published_by_id):\n    self.cursor.execute(\"INSERT INTO openedx_edxcourseverification\\n                               (openedx_course_id, status, published_by_id)\\n                               VALUES ('{}', 'reviewable', '{}');\\n                            \".format(openedx_course_id, published_by_id))\n    self.connection.commit()\n    return self.cursor.lastrowid", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_user_input(msg):\n    return input(msg)", "buggy_source_code": "def get_user_input(msg):\n    return raw_input(msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_state(self, entity, state):\n    self.log('__function__: {} = {} ***'.format(entity, state))", "buggy_source_code": "def set_state(self, entity, state):\n    self.log('set_state: {} = {} ***'.format(entity, state))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def write_to_rom(self, rom):\n    self.write_background_data_to_rom(rom)\n    self.write_chars_data_to_rom(rom)\n    self.write_chars_layouts_to_rom(rom)", "buggy_source_code": "def write_to_rom(self, rom):\n    self.write_background_data_to_rom(rom)\n    self.write_chars_data_to_rom(rom)\n    self.write_chars_layouts_and_kirby_data_to_rom(rom)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def history_form(self, context):\n    namespace = {}\n    namespace['revisions'] = self.get_revisions(context)\n    handler = self.get_handler('/ui/File_history.xml')\n    return stl(handler, namespace)", "buggy_source_code": "def history_form(self, context):\n    namespace = {}\n    namespace['revisions'] = self.get_revisions(context)\n    handler = self.get_handler('/ui/file/history.xml')\n    return stl(handler, namespace)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def kind_name_from_key(key):\n    return key.path().element_list()[0].type()", "buggy_source_code": "def kind_name_from_key(key):\n    return key.path().element_list()[-1].type()", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def save(self):\n    with open(self.file_name, 'w', encoding='utf-8') as output_file:\n        output_file.write(self.data)", "buggy_source_code": "def save(self):\n    with open(self.file_name, 'w', encoding='utf-8') as output_file:\n        output_file.writelines(self.data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def responses_by(self, request, user):\n    responses = self.responses(request)\n    return [response for response in responses if user in response.content_object.participants.all()]", "buggy_source_code": "def responses_by(self, request, user):\n    responses = self.responses(request)\n    return [response for response in responses if response and user in response.content_object.participants.all()]", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _is_generate_bvr(self, cursor, uid, invoice, context=None):\n    return invoice.partner_bank_id and invoice.partner_bank_id.state == 'bvr'", "buggy_source_code": "def _is_generate_bvr(self, cr, uid, invoice, context=None):\n    return invoice.partner_bank_id and invoice.partner_bank_id.state == 'bvr'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef normalise_newlines(file_content):\n    return '\\r\\n'.join(file_content.getvalue().decode('utf-8').splitlines())", "buggy_source_code": "@staticmethod\ndef normalise_newlines(file_content):\n    return '\\r\\n'.join(file_content.read().decode('utf-8').splitlines())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_default_config(self):\n    self._config.read_file(StringIO(default_cfg))", "buggy_source_code": "def set_default_config(self):\n    self._config.readfp(StringIO(default_cfg))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@adapter(getSpecification(ILayoutAware['contentLayout']), IMosaicLayer)\n@implementer(IFieldWidget)\ndef LayoutFieldWidget(field, request):\n    return FieldWidget(field, LayoutWidget(request))", "buggy_source_code": "@adapter(getSpecification(ILayoutAware['content']), IMosaicLayer)\n@implementer(IFieldWidget)\ndef LayoutFieldWidget(field, request):\n    return FieldWidget(field, LayoutWidget(request))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_supported_syntax(syntax):\n    for config in configs:\n        if syntax in config.syntaxes:\n            return True\n    return False", "buggy_source_code": "def is_supported_syntax(syntax: str) -> bool:\n    for config in configs:\n        if syntax in config.syntaxes:\n            return True\n    return False", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def filename_to_uri(path):\n    return urljoin('file:', urllib.pathname2url(path))", "buggy_source_code": "def filename_to_uri(path: str) -> str:\n    return urljoin('file:', urllib.pathname2url(path))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def generate_charts(results):\n    for repository in results.repositories:\n        generate_cyclomatic_complexity_chart(repository, results.repo_cyclomatic_complexity[repository])\n        generate_maintainability_index(repository, results.repo_maintainability_index[repository])", "buggy_source_code": "def generate_charts(results):\n    for repository in results.repositories:\n        generate_cyclomatic_complexity_chart(repository, results.repo_cyclomatic_complexity[repository])\n        generate_maintainability_index_chart(repository, results.repo_maintainability_index[repository])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_complex(self):\n    self.assertTemplateRenders('{% load smart_load %}{% load lib1 from app1 into lib1, lib2 from app2 into lib2 %}{% lib1.tag1 %}{% lib1.tag2 %}{% lib2.tag1 %}{% lib2.tag2 %}', '<app 1 lib 1 tag 1><app 1 lib 1 tag 2><app 2 lib 2 tag 1><app 2 lib 2 tag 2>')\n    self.assertTemplateRenders('{% load smart_load %}{% load lib1.tag2 from app1 into tags as mytag1 %}{% load lib1.tag2 from app2 into tags as mytag2 %}{% tags.mytag1 %}{% tags.mytag2 %}', '<app 1 lib 1 tag 2><app 2 lib 1 tag 2>')\n    self.assertTemplateRenders('{% load smart_load %}{% load lib1.tag1 from app2 as app2lib1tag2 into rockin_tags, lib2, lib2.tag2 from app1 as lib2tag2 %}{% rockin_tags.app2lib1tag2 %}{% lib2tag2 %}{% tag1 %}{% tag2 %}', '<app 2 lib 1 tag 1><app 1 lib 2 tag 2><app 2 lib 2 tag 1><app 2 lib 2 tag 2>')", "buggy_source_code": "def test_complex(self):\n    self.assertTemplateRenders('{% load smart_load %}{% load lib1 from app1 into lib1, lib2 from app2 into lib2 %}{% lib1.tag1 %}{% lib1.tag2 %}{% lib2.tag1 %}{% lib2.tag2 %}', '<app 1 lib 1 tag 1><app 1 lib 1 tag 2><app 2 lib 2 tag 1><app 2 lib 2 tag 2>')\n    self.assertTemplateRenders('{% load smart_load %}{% load lib1.tag2 from app1 into tags as mytag1 %}{% load lib1.tag2 from app2 into tags as mytag2 %}{% tags.mytag1 %}{% tags.mytag2 %}', '<app 1 lib 1 tag 2><app 2 lib 1 tag 2>')\n    self.assertTemplateRenders('{% load smart_load %}{% load lib1.tag1 from app2 as app2lib1tag1 into rockin_tags, lib2, lib2.tag2 from app1 as lib2tag2 %}{% rockin_tags.app2lib1tag1 %}{% lib2tag2 %}{% tag1 %}{% tag2 %}', '<app 2 lib 1 tag 1><app 1 lib 2 tag 2><app 2 lib 2 tag 1><app 2 lib 2 tag 2>')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_single_import(self):\n    self.assertEqual(self.render_string('{% load smart_load %}{% import lib1.tag1 %}{% lib1.tag1 %}'), '<app 2 lib 1 tag 1>')", "buggy_source_code": "def test_single_import(self):\n    self.assertTemplateRenders('{% load smart_load %}{% import lib1.tag1 %}{% lib1.tag1 %}', '<app 2 lib 1 tag 1>')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def channel_prefix(self, msg=None, emit=False):\n    return '[%s] ' % self.key", "buggy_source_code": "def channel_prefix(self, msg=None, emit=False):\n    return '' if emit else '[%s] ' % self.key", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def add_verbose_flag(parser):\n    parser.add_argument('--verbose', '-v', help='Verbose output', dest='verbose', action='store_false')\n    parser.set_defaults(verbose=True)", "buggy_source_code": "def add_verbose_flag(parser):\n    parser.add_argument('--silent', '-s', help='Verbose output', dest='verbose', action='store_false')\n    parser.set_defaults(verbose=True)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def validate_openshift_env(text):\n    if not os.path.isdir('/srv/{}'.format(text)):\n        raise ValidationError('Openshift environment not valid')", "buggy_source_code": "def validate_openshift_env(text):\n    if not os.path.isdir('/srv/{}'.format(text)):\n        raise ValidationError('Openshift environment not valid: {}'.format(text))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def _fix_setuptools():\n    print()\n    print(green('Updating distribute pip module.'))\n    subprocess.call('pip install --upgrade distribute'.split())", "buggy_source_code": "def _fix_setuptools():\n    print()\n    print(green(\"Updating the 'distribute' pip module.\"))\n    subprocess.call('pip install --upgrade distribute'.split())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _run_job(self, config_file):\n    job = helpers.job_from_file(config_file)\n    job.launch()\n    return job", "buggy_source_code": "def _run_job(self, config_file):\n    sp = subprocess.Popen(['bin/openquake', '--config_file=' + config_file])\n    sp.wait()", "edit_actions": ["move-tree", "update-node", "update-node", "update-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_empty(self, prop_extractor):\n    prop_extractor.data_matrix = []\n    assert prop_extractor.to_dataproperty_matrix() == []", "buggy_source_code": "def test_empty(self, dp_extractor):\n    dp_extractor.data_matrix = []\n    assert dp_extractor.to_dataproperty_matrix() == []", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def run_test_settings(self, project, sessions):\n    display_settings()\n    self.test_dax(project, sessions)", "buggy_source_code": "def run_test_settings(self, project, sessions):\n    self.display_settings()\n    self.test_dax(project, sessions)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def testStudyRegionPresent(self):\n    self.assertEquals(StudyRegion.objects.count(), 1)\n    self.assertEquals(StudyRegion.objects.all()[0].id, 1)", "buggy_source_code": "def testStudyRegionPresent(self):\n    self.assertTrue(StudyRegion.objects.count() > 1)\n    self.assertEquals(StudyRegion.objects.all()[0].id, 1)", "edit_actions": ["update-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def up(config):\n    os.system('apt-get install -qqy nginx')", "buggy_source_code": "def up(config):\n    os.system('apt-get install -qqy nginx-full')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def requires(self):\n    return [GBIUpdatesRawIntermediateSchema(date=self.date), GBIDumpRawIntermediateSchema(date=self.date)]", "buggy_source_code": "def requires(self):\n    return [GBIUpdatesRawIntermediateSchema(date=self.date), GBIDumpRawIntermediateSchema(issue=self.issue)]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "async def c_forcereload(self, message, args):\n    await ext_unload()\n    await ext_load()\n    await self.say('done')", "buggy_source_code": "async def c_forcereload(self, message, args):\n    await self.ext_unload()\n    await self.ext_load()\n    await self.say('done')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def transfer(self, node, src_state):\n    return src_state - self.g.get_node_attr(node, 'kill_lv') | self.g.get_node_attr(node, 'gen_lv')", "buggy_source_code": "def transfer(self, node, src_state):\n    return src_state - self.g.get_node_attr(node, 'live_kill') | self.g.get_node_attr(node, 'live_gen')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def definition_body(self):\n    body = 'let traps = ProxyTraps {\\n  getPropertyDescriptor: Some(getPropertyDescriptor),\\n  getOwnPropertyDescriptor: Some(getOwnPropertyDescriptor),\\n  defineProperty: Some(defineProperty),\\n  getOwnPropertyNames: ptr::null(),\\n  delete_: None,\\n  enumerate: ptr::null(),\\n\\n  has: None,\\n  hasOwn: Some(hasOwn),\\n  get: Some(get),\\n  set: None,\\n  keys: ptr::null(),\\n  iterate: None,\\n\\n  call: None,\\n  construct: None,\\n  nativeCall: ptr::null(),\\n  hasInstance: None,\\n  typeOf: None,\\n  objectClassIs: None,\\n  obj_toString: Some(obj_toString),\\n  fun_toString: None,\\n  //regexp_toShared: ptr::null(),\\n  defaultValue: None,\\n  iteratorNext: None,\\n  finalize: Some(%s),\\n  getElementIfPresent: None,\\n  getPrototypeOf: None,\\n  trace: Some(%s)\\n};\\n\\nCreateProxyHandler(&traps, &Class as *_ as *_)\\n' % (FINALIZE_HOOK_NAME, TRACE_HOOK_NAME)\n    return CGGeneric(body)", "buggy_source_code": "def definition_body(self):\n    body = 'let traps = ProxyTraps {\\n  getPropertyDescriptor: Some(getPropertyDescriptor),\\n  getOwnPropertyDescriptor: Some(getOwnPropertyDescriptor),\\n  defineProperty: Some(defineProperty),\\n  getOwnPropertyNames: ptr::null(),\\n  delete_: Some(delete_),\\n  enumerate: ptr::null(),\\n\\n  has: None,\\n  hasOwn: Some(hasOwn),\\n  get: Some(get),\\n  set: None,\\n  keys: ptr::null(),\\n  iterate: None,\\n\\n  call: None,\\n  construct: None,\\n  nativeCall: ptr::null(),\\n  hasInstance: None,\\n  typeOf: None,\\n  objectClassIs: None,\\n  obj_toString: Some(obj_toString),\\n  fun_toString: None,\\n  //regexp_toShared: ptr::null(),\\n  defaultValue: None,\\n  iteratorNext: None,\\n  finalize: Some(%s),\\n  getElementIfPresent: None,\\n  getPrototypeOf: None,\\n  trace: Some(%s)\\n};\\n\\nCreateProxyHandler(&traps, &Class as *_ as *_)\\n' % (FINALIZE_HOOK_NAME, TRACE_HOOK_NAME)\n    return CGGeneric(body)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef committees(cls):\n    return cls.objects.filter(classification='committee').order_by('name').all()", "buggy_source_code": "@classmethod\ndef committees(cls):\n    return cls.objects.filter(classification='committee').order_by('name').filter(memberships__isnull=False).distinct()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def test_api_session_backend(self):\n    from lux.extensions.auth import ApiSessionBackend\n    config = ApiSessionBackend.meta.config\n    self.assertEqual(len(config), 7)", "buggy_source_code": "def test_api_session_backend(self):\n    from lux.extensions.auth import ApiSessionBackend\n    config = ApiSessionBackend.meta.config\n    self.assertEqual(len(config), 8)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _load_modules(self):\n    try:\n        from emaint.module import Modules\n        from emaint.main import TaskHandler\n    except ImportError as e:\n        return False\n    return True", "buggy_source_code": "def _load_modules(self):\n    try:\n        from emaint.module import Modules\n        from emaint.main import TaskHandler\n    except ImportError:\n        return False\n    return True", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def undo_config_ntp_auth_keyid(self):\n    xml_str = CE_NC_DELETE_NTP_AUTH_CONFIG % self.key_id\n    ret_xml = set_nc_config(self.module, xml_str)\n    self.check_response(ret_xml, 'UNDO_NTP_AUTH_KEYID_CONFIG')", "buggy_source_code": "def undo_config_ntp_auth_keyid(self):\n    commands = list()\n    config_cli = 'undo ntp authentication-keyid %s' % self.key_id\n    commands.append(config_cli)\n    self.cli_load_config(commands)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "move-tree", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init_module(self):\n    required_if = [('state', 'present', ('password', 'auth_mode'))]\n    self.module = AnsibleModule(argument_spec=self.spec, required_if=required_if, supports_check_mode=True)", "buggy_source_code": "def init_module(self):\n    required_if = [('state', 'present', ('auth_pwd', 'auth_mode'))]\n    self.module = AnsibleModule(argument_spec=self.spec, required_if=required_if, supports_check_mode=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_to_groups(self, groups):\n    from askbot import tasks\n    tasks.add_post_to_groups(post=self, groups=groups)", "buggy_source_code": "def add_to_groups(self, groups):\n    from askbot import tasks\n    tasks.add_post_to_groups.delay(post=self, groups=groups)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_embedding(self):\n    return self.model_.layers_by_depth[1][0]", "buggy_source_code": "def get_embedding(self, model):\n    return model.layers_by_depth[1][0]", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_transactions():\n    query = sqlalchemy.text('\\n    SELECT *\\n    FROM budget_expenses LEFT JOIN budget_payments USING(payment_id)\\n      NATURAL JOIN budget_budgets\\n      NATURAL JOIN budget_fyears\\n      NATURAL LEFT JOIN budget_accounts\\n      LEFT JOIN budget_payees ON budget_payments.payee_id = budget_payees.payee_id\\n    ORDER BY expense_id DESC\\n    ')\n    return flask.g.db.execute(query).fetchall()", "buggy_source_code": "def get_transactions():\n    query = sqlalchemy.text('\\n    SELECT *\\n    FROM budget_expenses LEFT JOIN budget_payments USING(payment_id)\\n      NATURAL JOIN budget_budgets\\n      NATURAL JOIN budget_fyears\\n      NATURAL LEFT JOIN budget_accounts\\n      LEFT JOIN budget_payees ON budget_expenses.payee_id = budget_payees.payee_id\\n    ORDER BY expense_id DESC\\n    ')\n    return flask.g.db.execute(query).fetchall()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return \"{}Supervised Descent Method for CLMs:\\n - Parametric '{}' Regressor\\n - {} training images.\\n\".format(self.clm.__str__(), self._fitters[0].regressor.__name__, self._n_training_images)", "buggy_source_code": "def __str__(self):\n    return \"{}Supervised Descent Method for CLMs:\\n - Parametric '{}' Regressor\\n - {} training images.\\n\".format(self.clm.__str__(), name_of_callable(self._fitters[0].regressor), self._n_training_images)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def clear_messages(self):\n    self.message = []", "buggy_source_code": "def clear_messages(self):\n    self.message = ''", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    GObject.GObject.__init__(self)\n    self.message = []\n    self.color = 'black'\n    self.font = 'Arial'\n    self.size = 18", "buggy_source_code": "def __init__(self):\n    GObject.GObject.__init__(self)\n    self.message = []\n    self.color = 'black'\n    self.font = 'Sans'\n    self.size = 13", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def clear_font_attributes(self):\n    self.color = 'black'\n    self.font = 'Arial'\n    self.size = 18", "buggy_source_code": "def clear_font_attributes(self):\n    self.color = 'black'\n    self.font = 'Sans'\n    self.size = 13", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def compute_static_equilibrium_polygon(self, method='cdd'):\n    if method == 'cdd':\n        return __compute_sep_cdd(self)\n    elif method == 'bretl':\n        return __compute_sep_bretl(self)\n    return Exception('invalid ``method`` argument')", "buggy_source_code": "def compute_static_equilibrium_polygon(self, method='cdd'):\n    if method == 'cdd':\n        return _compute_sep_cdd(self)\n    elif method == 'bretl':\n        return _compute_sep_bretl(self)\n    return Exception('invalid ``method`` argument')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@cron(0, -2, -1, -1, -1, target='mule')\ndef roskom_load(num):\n    print('Running roskom_load')\n    tasks.perform_load()\n    print('roskom_load finished')", "buggy_source_code": "@cron(0, -2, -1, -1, -1, target='mule')\ndef roskom_load(num):\n    print('Running roskom_load')\n    tasks.perform_load('auto')\n    print('roskom_load finished')", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def add_property(self, name: str, value: str) -> None:\n    self.properties.append((str(name), bin_xml_escape(value)))", "buggy_source_code": "def add_property(self, name: str, value: object) -> None:\n    self.properties.append((str(name), bin_xml_escape(value)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_attribute(self, name: str, value: str) -> None:\n    self.attrs[str(name)] = bin_xml_escape(value)", "buggy_source_code": "def add_attribute(self, name: str, value: object) -> None:\n    self.attrs[str(name)] = bin_xml_escape(value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_global_property(self, name: str, value: str) -> None:\n    __tracebackhide__ = True\n    _check_record_param_type('name', name)\n    self.global_properties.append((name, bin_xml_escape(value)))", "buggy_source_code": "def add_global_property(self, name: str, value: object) -> None:\n    __tracebackhide__ = True\n    _check_record_param_type('name', name)\n    self.global_properties.append((name, bin_xml_escape(value)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_homedir(homedir):\n    assert du.dodocs_directory() == homedir", "buggy_source_code": "def test_homedir(dodocs_homedir):\n    assert du.dodocs_directory() == dodocs_homedir", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def parent_name(self, parent_id):\n    query = 'SELECT name FROM nodes WHERE id = ' + str(parent_id)\n    row = db.engine.execute(query).fetchone()[0]\n    return row if row else None", "buggy_source_code": "def parent_name(self, parent_id):\n    query = 'SELECT name FROM nodes WHERE id = ' + str(parent_id)\n    row = db.engine.execute(query).fetchone()\n    return row[0] if row else None", "edit_actions": ["insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def OnReset(self, e=None):\n    self.Update(self.analysis)", "buggy_source_code": "def OnReset(self, e=None):\n    self.UpdatePanel(self.analysis)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def outage_detail(request, o_id):\n    out = Outage.objects.get(id=o_id)\n    context = {out}\n    return render(request, 'outage/out_detail.html', context)", "buggy_source_code": "def outage_detail(request, o_id):\n    out = Outage.objects.get(id=o_id)\n    context = {'out': out}\n    return render(request, 'outage/out_detail.html', context)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def header(node):\n    return '<!DOCTYPE html>\\n\\t<!--[if lt IE 7]> <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\" lang=\"it\"> <![endif]-->\\n\\t<!--[if IE 7]>    <html class=\"no-js lt-ie9 lt-ie8\" lang=\"it\"> <![endif]-->\\n\\t<!--[if IE 8]>    <html class=\"no-js lt-ie9\" lang=\"it\"> <![endif]-->\\n\\t<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"it\"> <!--<![endif]-->\\n\\t<head>\\n        <META NAME=\"ROBOTS\" CONTENT=\"NOINDEX, NOFOLLOW\">\\n       \\t<meta charset=\"utf-8\" />\\n<!--\\t\\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /> -->\\n       \\t<meta name=\"author\" content=\"lucapost\" />\\n\\t    <meta name=\"description\" content=\"' + DESC + '\" />\\n       \\t<title>' + SITE_NAME + ' | ' + DESC + '</title>\\n  \\t\\t<meta name=\"viewport\" content=\"width=device-width\">\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/reset.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/text.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/960.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/hashgrid.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/style.css\" />\\n\\t\\t<link href=\\'http://fonts.googleapis.com/css?family=Fanwood+Text\\' rel=\\'stylesheet\\' type=\\'text/css\\'>\\n  \\t\\t<script src=\"/js/modernizr.js\"></script> \\n\\t\\t<script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\\n  \\t\\t<script src=\"/js/hashgrid.js\"></script> \\n\\t\\t<script src=\"/js/flux.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\\n\\t\\t<script type=\"text/javascript\" charset=\"utf-8\">\\n\\t\\t\\t$(function(){\\n\\t\\t\\t\\tif(!flux.browser.supportsTransitions)\\n\\t\\t\\t\\t\\talert(\"Flux Slider requires a browser that supports CSS3 transitions\");\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\twindow.f = new flux.slider(\\'#slider\\', {\\n\\t\\t\\t\\t\\tpagination: false,\\n                    controls: true,\\n\\t\\t\\t\\t\\ttransitions: [ \\'blocks2\\' ],\\n\\t\\t\\t\\t\\tdelay: 5500\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t</script> \\n\\t</head>\\n\\t<body>\\n\\t\\t<header>\\n\\t\\t\\t<div class=\"container_24 clearfix\">\\n\\t\\t\\t\\t<hgroup class=\"grid_8\">\\n\\t\\t\\t\\t\\t<h1><a href=\"/\" title=\"home page\">Color House</a></h1>\\n\\t\\t\\t\\t\\t<h2>' + SUBTITLE + '</h2>\\n                    <h3>Email: <a href=\"mailto:pdilena@tin.it\" title=\"email address\">pdilena@libero.it</a><br/>\\n                    Phone: <span>+39 3389456208</span></h3>\\n                    <figure>\\n\\t\\t\\t\\t\\t\\t<a href=\"/\" title=\"italiano\" class=\"flag grid_2 alpha prefix_2' + ITA + '\"><img src=\"/images/ita.png\" title=\"italiano\" alt=\"bandiera\"/></a>\\n\\t\\t\\t\\t\\t\\t<a href=\"/en\" title=\"english\" class=\"flag grid_2' + ENG + '\"><img src=\"/images/eng.png\" title=\"english\" alt=\"flag\"/></a>\\n\\t\\t\\t\\t\\t\\t<a href=\"/de\" title=\"deutch\" class=\"flag grid_2 omega' + DEU + '\"><img src=\"/images/deu.png\" title=\"deutch\" alt=\"flagge\"/></a>\\n                    </figure> \\n\\t\\t\\t\\t</hgroup>\\n\\t\\t\\t\\t<figure class=\"grid_16\">\\n\\t\\t\\t\\t\\t<div id=\"slider\">\\n\\t\\t\\t\\t\\t\\t<img src=\"/images/slider/01.jpg\" title=\"entrata0\" alt=\"entrata\" class=\"slid\"/>\\n\\t\\t\\t\\t\\t\\t<img src=\"/images/slider/03.jpg\" title=\"entrata1\" alt=\"entrata\" class=\"slid\"/>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</figure>\\n\\t\\t\\t\\t<div class=\"clear\"></div>\\n\\t\\t\\t</div>\\n\\t\\t</header>\\n\\t\\t<section>\\n\\t\\t\\t<div class=\"container_24 clearfix content\">\\n\\t\\t\\t'", "buggy_source_code": "def header(node):\n    return '<!DOCTYPE html>\\n\\t<!--[if lt IE 7]> <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\" lang=\"it\"> <![endif]-->\\n\\t<!--[if IE 7]>    <html class=\"no-js lt-ie9 lt-ie8\" lang=\"it\"> <![endif]-->\\n\\t<!--[if IE 8]>    <html class=\"no-js lt-ie9\" lang=\"it\"> <![endif]-->\\n\\t<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"it\"> <!--<![endif]-->\\n\\t<head>\\n        <META NAME=\"ROBOTS\" CONTENT=\"NOINDEX, NOFOLLOW\">\\n       \\t<meta charset=\"utf-8\" />\\n<!--\\t\\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /> -->\\n       \\t<meta name=\"author\" content=\"lucapost\" />\\n\\t    <meta name=\"description\" content=\"' + DESC + '\" />\\n       \\t<title>' + SITE_NAME + ' | ' + DESC + '</title>\\n  \\t\\t<meta name=\"viewport\" content=\"width=device-width\">\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/reset.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/text.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/960.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/hashgrid.css\" />\\n\\t\\t<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/style.css\" />\\n\\t\\t<link href=\\'http://fonts.googleapis.com/css?family=Fanwood+Text\\' rel=\\'stylesheet\\' type=\\'text/css\\'>\\n  \\t\\t<script src=\"/js/modernizr.js\"></script> \\n\\t\\t<script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\\n  \\t\\t<script src=\"/js/hashgrid.js\"></script> \\n\\t\\t<script src=\"/js/flux.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\\n\\t\\t<script type=\"text/javascript\" charset=\"utf-8\">\\n\\t\\t\\t$(function(){\\n\\t\\t\\t\\tif(!flux.browser.supportsTransitions)\\n\\t\\t\\t\\t\\talert(\"Flux Slider requires a browser that supports CSS3 transitions\");\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\twindow.f = new flux.slider(\\'#slider\\', {\\n\\t\\t\\t\\t\\tpagination: false,\\n                    controls: true,\\n                    captions: true,\\n\\t\\t\\t\\t\\ttransitions: [ \\'blocks2\\' ],\\n\\t\\t\\t\\t\\tdelay: 5500\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t</script> \\n\\t</head>\\n\\t<body>\\n\\t\\t<header>\\n\\t\\t\\t<div class=\"container_24 clearfix\">\\n\\t\\t\\t\\t<hgroup class=\"grid_8\">\\n\\t\\t\\t\\t\\t<h1><a href=\"/\" title=\"home page\">Color House</a></h1>\\n\\t\\t\\t\\t\\t<h2>' + SUBTITLE + '</h2>\\n                    <h3>Email: <a href=\"mailto:pdilena@tin.it\" title=\"email address\">pdilena@libero.it</a><br/>\\n                    Phone: <span>+39 3389456208</span></h3>\\n                    <figure>\\n\\t\\t\\t\\t\\t\\t<a href=\"/\" title=\"italiano\" class=\"flag grid_2 alpha' + ITA + '\"><img src=\"/images/ita.png\" title=\"italiano\" alt=\"bandiera\"/></a>\\n\\t\\t\\t\\t\\t\\t<a href=\"/en\" title=\"english\" class=\"flag grid_2' + ENG + '\"><img src=\"/images/eng.png\" title=\"english\" alt=\"flag\"/></a>\\n\\t\\t\\t\\t\\t\\t<a href=\"/de\" title=\"deutch\" class=\"flag grid_2 omega' + DEU + '\"><img src=\"/images/deu.png\" title=\"deutch\" alt=\"flagge\"/></a>\\n                    </figure> \\n\\t\\t\\t\\t</hgroup>\\n\\t\\t\\t\\t<figure class=\"grid_16\">\\n\\t\\t\\t\\t\\t<div id=\"slider\">\\n\\t\\t\\t\\t\\t\\t<img src=\"/images/slider/01.jpg\" title=\"entrata0\" alt=\"entrata\" class=\"slid\"/>\\n\\t\\t\\t\\t\\t\\t<img src=\"/images/slider/03.jpg\" title=\"entrata1\" alt=\"entrata\" class=\"slid\"/>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</figure>\\n\\t\\t\\t\\t<div class=\"clear\"></div>\\n\\t\\t\\t</div>\\n\\t\\t</header>\\n\\t\\t<section>\\n\\t\\t\\t<div class=\"container_24 clearfix content\">\\n\\t\\t\\t'", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def mk_status_item(data_id, data_computed, data_measured=[]):\n    return {'id': data_id, 'data': (data, computed, data_measured)}", "buggy_source_code": "def mk_status_item(data_id, data_computed, data_measured=[]):\n    return {'id': data_id, 'data': (data_computed, data_measured)}", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update(self):\n    for (attr, (name, value)) in self._settings.items():\n        setattr(self, attr, self._sobj.get(name, value))", "buggy_source_code": "def update(self):\n    for (attr, (name, def_value)) in self._settings.items():\n        setattr(self, attr, self._sobj.get(name, def_value))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def change_spectrum_to_spec_flux_angstrom(self):\n    self.change_spectrum(self.model.spec_flux_angstrom, 'spec_flux_angstrom')", "buggy_source_code": "def change_spectrum_to_spec_flux_angstrom(self):\n    self.change_spectrum(self.model.spectrum.wavelength.value, 'spec_flux_angstrom')", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def change_spectrum_to_spec_virtual_flux_angstrom(self):\n    self.change_spectrum(self.model.spec_virtual_flux_angstrom, 'spec_virtual_flux_angstrom')", "buggy_source_code": "def change_spectrum_to_spec_virtual_flux_angstrom(self):\n    self.change_spectrum(self.model.spectrum.luminosity_density_lambda.value, 'spec_virtual_flux_angstrom')", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, name, id_tag=None):\n    self.name = name\n    self.id = id_tag", "buggy_source_code": "def __init__(self, name, id_tag=None):\n    self.name = name\n    self.id_ = id_tag", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __len__(self):\n    self.test_validity()\n    pins = self._get_pins()\n    return len(pins)", "buggy_source_code": "def __len__(self):\n    self.test_validity()\n    pins = self.get_pins()\n    return len(pins)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def description_level61():\n    message = ugettext('How are you going to get past all the traffic lights without knowing ' + 'when the traffic light is green? ')\n    return build_description(title_level61, message)", "buggy_source_code": "def description_level61():\n    message = ugettext('How are you going to get past all the traffic lights without knowing ' + 'when the traffic light is green? ')\n    return build_description(title_level61(), message)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def description_level60():\n    message = ugettext('Can you reach the house with only two <b>Move forwards</b> blocks?')\n    return build_description(title_level60, message)", "buggy_source_code": "def description_level60():\n    message = ugettext('Can you reach the house with only two <b>Move forwards</b> blocks?')\n    return build_description(title_level60(), message)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def parse_args(argv, default_config_files=None):\n    cfg.CONF(argv[1:], project='solum', version=version.version_string(), default_config_files=default_config_files)\n    config.set_config_defaults()", "buggy_source_code": "def parse_args(argv, default_config_files=None):\n    cfg.CONF(argv[1:], project='solum', version=version.version_string(), default_config_files=default_config_files)\n    common_config.set_config_defaults()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_success_url(self):\n    return reverse('feature-type-update')", "buggy_source_code": "def get_success_url(self):\n    return reverse('feature-type-list')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_query_set(self):\n    return super(FeaturedManagerWithImages, self).get_query_set().filter(image__isnull=False).distinct()", "buggy_source_code": "def get_query_set(self):\n    return super(FeaturedManagerWithImages, self).get_query_set().filter(image_set__isnull=False).distinct()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def rmdirs(root):\n    rmdirs = subprocess.Popen(rclone_args + ['rmdirs', root])\n    rmdirs.wait()", "buggy_source_code": "def rmdirs(root):\n    cmd = rclone_args + ['rmdirs', root]\n    rmdirs = subprocess.Popen(cmd)\n    rmdirs.wait()", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dedupe(root):\n    dedupe = subprocess.Popen(rclone_args + ['dedupe', '--dedupe-mode', 'skip', root])\n    dedupe.wait()", "buggy_source_code": "def dedupe(root):\n    cmd = rclone_args + ['dedupe', '--dedupe-mode', 'skip', root]\n    dedupe = subprocess.Popen(cmd)\n    dedupe.wait()", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def construct_native_video_pipeline(self):\n    pipeline = '\\n            deinterlace mode={imode}\\n            ! videorate\\n            ! videoscale\\n            ! capsfilter\\n                caps={target_caps}\\n            ! jpegenc\\n                quality=90\\n            '.format(target_caps=Config.getPreviewCaps(), imode='interlaced' if Config.getDeinterlacePreviews() else 'disabled')\n    return pipeline", "buggy_source_code": "def construct_native_video_pipeline(self):\n    pipeline = 'deinterlace mode={imode}\\n            ! videorate\\n            ! videoscale\\n            ! capsfilter\\n                caps={target_caps}\\n            ! jpegenc\\n                quality=90'.format(target_caps=Config.getPreviewCaps(), imode='interlaced' if Config.getDeinterlacePreviews() else 'disabled')\n    return pipeline", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return self._template % roll(self)", "buggy_source_code": "def __str__(self):\n    return self._template.format(roll(self))", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, expression):\n    (self._template, self._asts) = parse_dice_expression(expression)", "buggy_source_code": "def __init__(self, expression):\n    (self._template, self._asts) = self.__parse_expression(expression)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def __roll__(self):\n    return self._sign * sum((roll_die(self._sides) for _ in range(self._number)))", "buggy_source_code": "def __roll__(self):\n    return self._sign * sum((self.__roll_die() for _ in range(self._number)))", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef get_task_signature(cls, floating_ip, serialized_floating_ip, **kwargs):\n    return core_tasks.BackendMethodTask().si(serialized_floating_ip, 'pull_floating_ip', state_transition='begin_updaing')", "buggy_source_code": "@classmethod\ndef get_task_signature(cls, floating_ip, serialized_floating_ip, **kwargs):\n    return core_tasks.BackendMethodTask().si(serialized_floating_ip, 'pull_floating_ip', state_transition='begin_updating')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_button_l_clicked(self):\n    self.led_l = DualButtonV2.ON\n    self.button.set_led_state(DualButtonV2.ON, self.led_r)\n    self.update_buttons()", "buggy_source_code": "def on_button_l_clicked(self):\n    self.led_l = BrickletDualButtonV2.LED_STATE_ON\n    self.button.set_led_state(BrickletDualButtonV2.LED_STATE_ON, self.led_r)\n    self.update_buttons()", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def off_button_l_clicked(self):\n    self.led_l = DualButtonV2.OFF\n    self.button.set_led_state(DualButtonV2.OFF, self.led_r)\n    self.update_buttons()", "buggy_source_code": "def off_button_l_clicked(self):\n    self.led_l = BrickletDualButtonV2.LED_STATE_OFF\n    self.button.set_led_state(BrickletDualButtonV2.LED_STATE_OFF, self.led_r)\n    self.update_buttons()", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def toggle_button_r_clicked(self):\n    self.led_r = DualButtonV2.AT_OFF\n    self.button.set_led_state(self.led_l, DualButtonV2.AT_OFF)\n    self.update_buttons()", "buggy_source_code": "def toggle_button_r_clicked(self):\n    self.led_r = BrickletDualButtonV2.LED_STATE_AUTO_TOGGLE_OFF\n    self.button.set_led_state(self.led_l, BrickletDualButtonV2.LED_STATE_AUTO_TOGGLE_OFF)\n    self.update_buttons()", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def off_button_r_clicked(self):\n    self.led_r = DualButtonV2.OFF\n    self.button.set_led_state(self.led_l, DualButtonV2.OFF)\n    self.update_buttons()", "buggy_source_code": "def off_button_r_clicked(self):\n    self.led_r = BrickletDualButtonV2.LED_STATE_OFF\n    self.button.set_led_state(self.led_l, BrickletDualButtonV2.LED_STATE_OFF)\n    self.update_buttons()", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def on_button_r_clicked(self):\n    self.led_r = DualButtonV2.ON\n    self.button.set_led_state(self.led_l, DualButtonV2.ON)\n    self.update_buttons()", "buggy_source_code": "def on_button_r_clicked(self):\n    self.led_r = BrickletDualButtonV2.LED_STATE_ON\n    self.button.set_led_state(self.led_l, BrickletDualButtonV2.LED_STATE_ON)\n    self.update_buttons()", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def toggle_button_l_clicked(self):\n    self.led_l = DualButtonV2.AT_OFF\n    self.button.set_led_state(DualButtonV2.AT_OFF, self.led_r)\n    self.update_buttons()", "buggy_source_code": "def toggle_button_l_clicked(self):\n    self.led_l = BrickletDualButtonV2.LED_STATE_AUTO_TOGGLE_OFF\n    self.button.set_led_state(BrickletDualButtonV2.LED_STATE_AUTO_TOGGLE_OFF, self.led_r)\n    self.update_buttons()", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def check(self, obj, condition) -> 'WriteTransaction':\n    self._extend(_TxWriteItem(mode='check', obj=obj, condition=condition, atomic=False))\n    return self", "buggy_source_code": "def check(self, obj, condition) -> 'WriteTransaction':\n    self._extend([_TxWriteItem(mode='check', obj=obj, condition=condition, atomic=False)])\n    return self", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def _extend(self, *items):\n    if len(self.objs) + len(items) > MAX_TRANSACTION_ITEMS:\n        raise ValueError(f'transaction cannot exceed {MAX_TRANSACTION_ITEMS} items.')\n    self.objs += items", "buggy_source_code": "def _extend(self, items):\n    if len(self.objs) + len(items) > MAX_TRANSACTION_ITEMS:\n        raise ValueError(f'transaction cannot exceed {MAX_TRANSACTION_ITEMS} items.')\n    self.objs += items", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def standby(self):\n    self.ce(LOW)\n    time.sleep(10 / 1000000.0)\n    self.state = STATE.STANDBY_STATE", "buggy_source_code": "def standby(self):\n    self._ce(LOW)\n    time.sleep(10 / 1000000.0)\n    self.state = STATE.STANDBY_STATE", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testRPD(self):\n    return self.read_register(Register.RPD) & 1", "buggy_source_code": "def testRPD(self):\n    return self._read_register(Register.RPD) & 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __iter__(self):\n    return imap(self._unmap_key, iter(self._dstore))", "buggy_source_code": "def __iter__(self):\n    return map(self._unmap_key, iter(self._dstore))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def iter_keys(self):\n    return imap(self._unmap_key, self._dstore.iter_keys())", "buggy_source_code": "def iter_keys(self):\n    return map(self._unmap_key, self._dstore.iter_keys())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clear_all_particle_addresses(self):\n    self._last_status = st.st_TrackJob_clear_all_particle_addresses(self._ptr_track_job)\n    raise_error_if_status_not_success(self._last_status, 'unsuccessful clearing all particle addresses op; ' + 'status:{0}'.format(self._last_status))\n    return self", "buggy_source_code": "def clear_all_particle_addresses(self):\n    self._last_status = st.st_TrackJobNew_clear_all_particle_addresses(self._ptr_track_job)\n    raise_error_if_status_not_success(self._last_status, 'unsuccessful clearing all particle addresses op; ' + 'status:{0}'.format(self._last_status))\n    return self", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fetch_particle_addresses(self):\n    self._last_status = st.st_TrackJob_fetch_particle_addresses(self._ptr_track_job)\n    raise_error_if_status_not_success(self._last_status, 'unsuccessful fetching particle addresses op; ' + 'status:{0}'.format(self._last_status))\n    return self", "buggy_source_code": "def fetch_particle_addresses(self):\n    self._last_status = st.st_TrackJobNew_fetch_particle_addresses(self._ptr_track_job)\n    raise_error_if_status_not_success(self._last_status, 'unsuccessful fetching particle addresses op; ' + 'status:{0}'.format(self._last_status))\n    return self", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_ip(acl_file, ip):\n    with open(acl_file, 'r+') as f:\n        f.seek(0, 2)\n        f.write('\\n' + ip)\n    return 'Done!'", "buggy_source_code": "def add_ip(acl_file, ip):\n    with open(acl_file, 'r+') as f:\n        f.seek(0, 2)\n        f.write(ip + '\\n')\n    return 'Done!'", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_timeout(self, ms):\n    if ms and ms > 0:\n        self.socket_timeout = ms / 1000\n        self.connect_timeout = self.socket_timeout", "buggy_source_code": "def set_timeout(self, ms):\n    self.socket_timeout = ms / 1000 if ms and ms > 0 else None\n    self.connect_timeout = self.socket_timeout", "edit_actions": ["move-tree", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    return hash(self) == hash(KeyCollection._KeyID(other))", "buggy_source_code": "def __eq__(self, other):\n    return hash(self) == hash(str(other))", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    return hash(self) == hash(KeyCollection._ShortID(other))", "buggy_source_code": "def __eq__(self, other):\n    return hash(self) == hash(str(other))", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef input_shape(self):\n    self.encoder.previous.output_shape", "buggy_source_code": "@property\ndef input_shape(self):\n    return self.encoder.input_shape", "edit_actions": ["insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def run_tests(self):\n    import pytest\n    errcode = pytest.main(self.test_args)\n    sys.exit(errcode)", "buggy_source_code": "def run_tests(self):\n    import pytest\n    errno = pytest.main(self.pytest_args)\n    sys.exit(errno)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def checkout_2_commit(self, branch, commit):\n    PyRepo(self.path).head.set_reference(branch)\n    PyRepo(self.path).head.set_commit(commit)", "buggy_source_code": "def checkout_2_commit(self, branch, commit):\n    PyRepo(self.path).git.checkout(branch)\n    PyRepo(self.path).head.set_commit(commit)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def logpdf_grad(self, x):\n    return self.Ki.dot(self.atleast_2d(x) - self.mu)", "buggy_source_code": "def logpdf_grad(self, x):\n    return self.Ki.dot(np.atleast_1d(x) - self.mu)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_echo_single_weight(self):\n    a = ma.Echo_analysis(timestamp='20170607_211611')\n    fpar = a.fit_res.best_values\n    self.assertAlmostEqual(fpar['tau'] * 1000000.0, 12.7, places=2)", "buggy_source_code": "def test_echo_single_weight(self):\n    a = ma.Echo_analysis(timestamp='20170607_211611')\n    fpar = a.fit_res.best_values\n    self.assertAlmostEqual(fpar['tau'] * 1000000.0, 12.2, places=2)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@tojson\n@submit\n@prefix\ndef query_db_accession(recordid):\n    query = '\\n    SELECT DISTINCT ?Genome ?submitted ?otype ?htype ?recordid ?vf ?amr WHERE {{\\n        ?uriContig a g:Contig ; g:Identifier ?recordid .\\n        VALUES ?recordid {{ \"{}\" }} .\\n        ?uriContig :isFoundIn ?GenomeObject .\\n        ?GenomeObject a g:Genome ; dc:description ?Genome; dc:date ?submitted .\\n        ?GenomeObject :isFoundIn ?spfyIdObject .\\n        ?spfyIdObject a :spfyId .\\n        OPTIONAL {{\\n            ?spfyIdObject ge:0001076 ?otype .\\n            ?spfyIdObject ge:0001077 ?htype .\\n        }}\\n        OPTIONAL {{\\n            ?uriContig :hasPart ?vf.\\n            ?vf a :VirulenceFactor.\\n        }}\\n        OPTIONAL {{\\n            ?uriContig :hasPart ?amr.\\n            ?amr a :AntimicrobialResistanceGene.\\n        }}\\n    }}\\n    '.format(recordid)\n    return query", "buggy_source_code": "@tojson\n@submit\n@prefix\ndef query_db_accession(recordid):\n    query = '\\n    SELECT DISTINCT ?Genome ?submitted ?otype ?htype ?recordid ?subclass ?marker WHERE {{\\n        ?uriContig a g:Contig ; g:Identifier ?recordid .\\n        VALUES ?recordid {{ \"{}\" }} .\\n        ?uriContig :isFoundIn ?GenomeObject .\\n        ?GenomeObject a g:Genome ; dc:description ?Genome; dc:date ?submitted .\\n        ?GenomeObject :isFoundIn ?spfyIdObject .\\n        ?spfyIdObject a :spfyId .\\n        OPTIONAL {{\\n            ?spfyIdObject ge:0001076 ?otype .\\n            ?spfyIdObject ge:0001077 ?htype .\\n        }}\\n        OPTIONAL {{\\n            ?uriContig :hasPart ?marker.\\n            ?marker a :Marker .\\n            ?subclass rdfs:subClassOf :Marker .\\n            ?marker a ?subclass .\\n        }}\\n    }}\\n    '.format(recordid)\n    return query", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clean_last_name(self):\n    lname = self.cleaned_data.get('last_name').strip()\n    if len(mname) < 1:\n        raise forms.ValidationError('You have entered an empty last name')\n    return lname", "buggy_source_code": "def clean_last_name(self):\n    lname = self.cleaned_data.get('last_name').strip()\n    if len(lname) < 1:\n        raise forms.ValidationError('You have entered an empty last name')\n    return lname", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __call__(self, context):\n    ret = self.json_encoder.encode(context)\n    return Response(unicode(ret), mimetype='application/json')", "buggy_source_code": "def __call__(self, context):\n    json_iter = self.json_encoder.iterencode(context)\n    resp = Response(json_iter, mimetype='application/json')\n    resp.mimetype_params['charset'] = self.encoding\n    return resp", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def polygon2pathd(polyline_d):\n    return polyline2pathd(polyline_d, True)", "buggy_source_code": "def polygon2pathd(polyline):\n    return polyline2pathd(polyline, True)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_group_infos(uid):\n    query = \"SELECT g.id,\\n                      g.name,\\n                      count(ugb.id_bskBASKET)\\n               FROM usergroup g LEFT JOIN user_usergroup ug,\\n                                          usergroup_bskBASKET ugb\\n                                ON (g.id=ug.id_usergroup\\n                                            AND\\n                                    g.id=ugb.id_usergroup)\\n               WHERE ug.id_user=%i AND NOT(ugb.share_level='NO') AND ug.user_status!='%s'\\n               GROUP BY g.id\\n               ORDER BY g.name\"\n    params = (int(uid), cfg_websession_usergroup_status['PENDING'])\n    res = run_sql(query % params)\n    return res", "buggy_source_code": "def get_group_infos(uid):\n    query = \"SELECT g.id,\\n                      g.name,\\n                      count(ugb.id_bskBASKET)\\n               FROM usergroup g LEFT JOIN (user_usergroup ug,\\n                                           usergroup_bskBASKET ugb)\\n                                ON (g.id=ug.id_usergroup\\n                                            AND\\n                                    g.id=ugb.id_usergroup)\\n               WHERE ug.id_user=%i AND NOT(ugb.share_level='NO') AND ug.user_status!='%s'\\n               GROUP BY g.id\\n               ORDER BY g.name\"\n    params = (int(uid), cfg_websession_usergroup_status['PENDING'])\n    res = run_sql(query % params)\n    return res", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init_terminal(self, conn):\n    conn.execute('terminal length 0')\n    conn.execute('terminal width 0')", "buggy_source_code": "def init_terminal(self, conn):\n    conn.execute('terminal length 0')\n    conn.execute('terminal width 512')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@step(u'(?:Then|And) I type \"([^\"]*)\" into the username box$')\ndef i_type_into_the_username_box(step, text):\n    world.browser.find_by_css('div.vault').first.find_by_css('#username').first.fill(text)", "buggy_source_code": "@step(u'(?:Then|And) I type \"([^\"]*)\" into the username box$')\ndef i_type_into_the_username_box(step, text):\n    world.browser.find_by_css('div.vault').first.find_by_css('input.username').first.fill(text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def asn_to_owner(self, as_number):\n    if int(as_number) < 1:\n        raise Exception('Invalid AS number %s', as_number)\n    return self.as_info[as_number]", "buggy_source_code": "def asn_to_owner(self, as_number):\n    if int(as_number) < 1:\n        raise Exception('Invalid AS number %s' % as_number)\n    return self.as_info[as_number]", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def before_insert(self):\n    if not frappe.flags.in_test:\n        today_date = today()\n        if self.start_date <= today_date:\n            self.start_date = today_date", "buggy_source_code": "def before_insert(self):\n    if not frappe.flags.in_test:\n        start_date = self.start_date\n        today_date = today()\n        if start_date <= today_date:\n            start_date = today_date", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(Command, self).__init__(*args, **kwargs)\n    self.email_field = Person._meta.get_field('email')", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(Command, self).__init__(*args, **kwargs)\n    self.email_field = PersonEmail._meta.get_field('address')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def abbr(degree):\n    return _by_degree('abbreviation', degree)", "buggy_source_code": "def abbr(degree):\n    return _by_degree('abbr', degree)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_mode(mikrobus_index, mode):\n    ret = _lib.spi_set_mode(mikrobus_index, mode)\n    if ret < 0:\n        raise Exception('spi set mode failed')", "buggy_source_code": "def set_mode(mikrobus_index, mode):\n    ret = _LIB.spi_set_mode(mikrobus_index, mode)\n    if ret < 0:\n        raise Exception('spi set mode failed')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def select_bus(mikrobus_index):\n    _lib.spi_select_bus(mikrobus_index)", "buggy_source_code": "def select_bus(mikrobus_index):\n    _LIB.spi_select_bus(mikrobus_index)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_speed(mikrobus_index, speed):\n    ret = _lib.spi_set_speed(mikrobus_index, speed)\n    if ret < 0:\n        raise Exception('spi set speed failed')", "buggy_source_code": "def set_speed(mikrobus_index, speed):\n    ret = _LIB.spi_set_speed(mikrobus_index, speed)\n    if ret < 0:\n        raise Exception('spi set speed failed')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_current_bus():\n    return _lib.spi_get_current_bus()", "buggy_source_code": "def get_current_bus():\n    return _LIB.spi_get_current_bus()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init():\n    ret = _lib.spi_init()\n    if ret < 0:\n        raise Exception('spi init failed')", "buggy_source_code": "def init():\n    ret = _LIB.spi_init()\n    if ret < 0:\n        raise Exception('spi init failed')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def release():\n    ret = _lib.spi_release()\n    if ret < 0:\n        raise Exception('spi release failed')", "buggy_source_code": "def release():\n    ret = _LIB.spi_release()\n    if ret < 0:\n        raise Exception('spi release failed')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def convert(*args):\n\n    def _inner(func):\n        func._converter_for = map(str.lower, args)\n        return func\n    return _inner", "buggy_source_code": "def convert(*args):\n\n    def _inner(func):\n        func._converter_for = list(map(str.lower, args))\n        return func\n    return _inner", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def p_start(self, p):\n    p[0] = QLAST(p[2])\n    for statement in p[4]:\n        p[0].register_node(statement)", "buggy_source_code": "def p_start(self, p):\n    self.ast.set_title(p[2])\n    for statement in p[4]:\n        self.ast.register_node(statement)", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save(aWeb):\n    aWeb.wr('<ARTICLE>Save: %s</ARTICLE>' % aWeb.rest_call('system_settings_save&node=%s' % aWeb['node']))", "buggy_source_code": "def save(aWeb):\n    aWeb.wr('<ARTICLE>Save: %s</ARTICLE>' % aWeb.rest_call('system_settings_save?node=%s' % aWeb['node']))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def supports_pop(self):\n    return self._parameters.get('supportspop', None).lower() == 'true'", "buggy_source_code": "def supports_pop(self):\n    return self._parameters.get('supportspop', '').lower() == 'true'", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def test_no_sparse_y_support():\n    for name in ALL_TREES:\n        yield (check_decision_path, name)", "buggy_source_code": "def test_no_sparse_y_support():\n    for name in ALL_TREES:\n        yield (check_no_sparse_y_support, name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def check_no_sparse_y_support(name):\n    (X, y) = (X_multilabel, csr_matrix(y_multilabel))\n    TreeEstimator = ALL_TREES[name]\n    assert_raises(ValueError, TreeEstimator(random_state=0).fit, X, y)", "buggy_source_code": "def check_no_sparse_y_support(name):\n    (X, y) = (X_multilabel, csr_matrix(y_multilabel))\n    TreeEstimator = ALL_TREES[name]\n    assert_raises(TypeError, TreeEstimator(random_state=0).fit, X, y)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.reqparse = reqparse.RequestParser()\n    self.reqparse.add_argument('user_id', type=int, location='json')\n    super(personAPI, self).__init__()", "buggy_source_code": "def __init__(self):\n    self.reqparse = reqparse.RequestParser()\n    self.reqparse.add_argument('id', type=int, location='args')\n    super(personAPI, self).__init__()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef engine(self):\n    return self.__connection['engine']", "buggy_source_code": "@property\ndef engine(self):\n    return self.__engine", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef session(self):\n    return self.__connection['session']", "buggy_source_code": "@property\ndef session(self):\n    return self.get_a_session()", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def test_check_rpm_to_binaries(self):\n    expected_binaries = 'cp,nm'\n    self.assertEqual(script_api.check_rpm_to(check_bin=expected_binaries), 0)", "buggy_source_code": "def test_check_rpm_to_binaries(self):\n    expected_binaries = 'strings,nm'\n    self.assertEqual(script_api.check_rpm_to(check_bin=expected_binaries), 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_menuitem_report_bug_activate(self, menuitem):\n    webbrowser.open_new_tab('https://github.com/tobias47n9e/innstereo/issues')", "buggy_source_code": "def on_menuitem_report_bug_activate(self, menuitem):\n    webbrowser.open_new_tab('https://github.com/innstereo/innstereo/issues')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def whoIs(target_id):\n    if rev_book.has_key(target_id):\n        return rev_book.key(target_id)\n    else:\n        logger.warning('%s was not found in address book.' % target_id)", "buggy_source_code": "def whoIs(target_id):\n    if rev_book.has_key(target_id):\n        return rev_book.get(target_id)\n    else:\n        logger.warning('%s was not found in address book.' % target_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate_basestring(option, value):\n    if isinstance(value, basestring):\n        return value\n    raise TypeError('Wrong type for %s, value just be an instance of basestring' % (option,))", "buggy_source_code": "def validate_basestring(option, value):\n    if isinstance(value, basestring):\n        return value\n    raise TypeError('Wrong type for %s, value must be an instance of basestring' % (option,))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, **options):\n    self.__slave_okay = False\n    self.__safe = False\n    self.__safe_opts = {}\n    self._set_options(**options)", "buggy_source_code": "def __init__(self, **options):\n    self.__slave_okay = False\n    self.__safe = False\n    self.__safe_opts = {}\n    self.__set_options(options)", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def onSetOpacity(self, event):\n    newOpacity = self._opacitySlider.GetValue() / 100.0\n    for visible in self.visibles:\n        visible.setOpacity(newOpacity)", "buggy_source_code": "def onSetOpacity(self, event_):\n    newOpacity = self._opacitySlider.GetValue() / 100.0\n    for visible in self.visibles:\n        visible.setOpacity(newOpacity)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop(self):\n    self._driver.stop()\n    self._reftest_driver.stop()", "buggy_source_code": "def stop(self):\n    for driver in self._running_drivers.values():\n        driver.stop()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def has_crashed(self):\n    return self._driver.has_crashed() or self._reftest_driver.has_crashed()", "buggy_source_code": "def has_crashed(self):\n    return any((driver.has_crashed() for driver in self._running_drivers.values()))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fil_line(_line):\n    a = list(filter(_isdigit, _line))\n    b = ''.join(a)\n    return float(b)", "buggy_source_code": "def fil_line(_line):\n    a = list(filter(_isdigit, _line))\n    b = ''.join(a)\n    print(b)\n    return 1.0", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def test_getSpaxel_remote_x_y_success(self):\n    expect = -0.10531016\n    self._test_getSpaxel_remote(10, expect, x=10, y=5)", "buggy_source_code": "def test_getSpaxel_remote_x_y_success(self):\n    expect = -0.10531\n    self._test_getSpaxel_remote(10, expect, x=10, y=5)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_undo_empty_pane(self):\n    controller = self.nammu.atfAreaController\n    controller.clearAtfArea()\n    controller.undo()\n    assert 'edits: []' in controller.undo_manager.toString()", "buggy_source_code": "def test_undo_empty_pane(self, nammu):\n    controller = nammu.atfAreaController\n    controller.clearAtfArea()\n    controller.undo()\n    assert 'edits: []' in controller.undo_manager.toString()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def closeEvent(self, QCloseEvent):\n    super(MPLCanvasWidget, self).closeEvent(QCloseEvent)\n    plt.close(self._fig)", "buggy_source_code": "def closeEvent(self, QCloseEvent):\n    super(MPLCanvasWidget, self).closeEvent(QCloseEvent)\n    plt.close(fig=self._fig)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def add_split(self, node_number, data, values):\n    cutoffs = self.CART(data, values)\n    self.set_node(node_number, min_feature, min_split)\n    self.new_nodes(node_number, 2)", "buggy_source_code": "def add_split(self, node_number, data, values):\n    cutoffs = self.CART(data, values)\n    self.set_node(node_number, cutoffs)\n    self.new_nodes(node_number, 2)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def check_empty(self, section='answer'):\n    return self.check_count(0, None, section)", "buggy_source_code": "def check_empty(self, section='answer'):\n    self.check_count(0, None, section)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def do_DescribeAddresses(client, args):\n    val = client.DescribeAddress()\n    utils.print_dict(val)", "buggy_source_code": "def do_DescribeAddresses(client, args):\n    val = client.DescribeAddresses()\n    utils.print_dict(val)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_rpc_enum():\n    return 'typedef enum{{\\n        {prefix}SUCCESS,\\n        {prefix}FAILURE,\\n        {prefix}COMMAND_UNKNOWN,\\n        {prefix}COMMAND_INCOMPLETE\\n    }} {prefix}RESULT;\\n    '.format(prefix=prefix)", "buggy_source_code": "def get_rpc_enum():\n    return 'typedef enum{{\\n        RPC_SUCCESS,\\n        RPC_FAILURE,\\n        RPC_COMMAND_UNKNOWN,\\n        RPC_COMMAND_INCOMPLETE\\n    }} RPC_RESULT;\\n    '.format(prefix=prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getRPC_Parser_exit():\n    return '\\nvoid {prefix}Parser_exit(){{\\n\\tif (!{prefix}initialized)\\n\\t\\treturn;\\n\\t{prefix}initialized = 0;\\n\\t{prefix}mutex_unlock({prefix}mutex_parsing_complete);\\n\\t{prefix}mutex_unlock({prefix}mutex_answer);\\n}}\\n'.format(prefix=prefix)", "buggy_source_code": "def getRPC_Parser_exit():\n    return '\\nvoid {prefix}Parser_exit(){{\\n\\tif (!{prefix}initialized)\\n\\t\\treturn;\\n\\t{prefix}initialized = 0;\\n\\t{prefix}mutex_unlock(RPC_mutex_parsing_complete);\\n\\t{prefix}mutex_unlock(RPC_mutex_answer);\\n}}\\n'.format(prefix=prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getDeclaration(self):\n    return '{}RESULT {}({});'.format(prefix, self.name, self.getParameterDeclaration())", "buggy_source_code": "def getDeclaration(self):\n    return 'RPC_RESULT {}({});'.format(self.name, self.getParameterDeclaration())", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getRequestParser(functions):\n    buffername = 'current'\n    return '\\n/* This function parses RPC requests, calls the original function and sends an\\n   answer. */\\nvoid {prefix}parse_request(const void *buffer, size_t size_bytes){{\\n\\tconst unsigned char *{buffername} = (const unsigned char *)buffer;\\n\\tswitch (*current++){{ /* switch (request ID) */ {cases}\\n\\t}}\\n}}'.format(cases=''.join((f.getRequestParseCase(buffername) for f in functions)), buffername=buffername, prefix=prefix)", "buggy_source_code": "def getRequestParser(functions):\n    buffername = 'current'\n    return '\\n/* This function parses RPC requests, calls the original function and sends an\\n   answer. */\\nvoid {prefix}parse_request(const void *buffer, size_t size_bytes){{\\n\\t(void)size_bytes;\\n\\tconst unsigned char *{buffername} = (const unsigned char *)buffer;\\n\\tswitch (*current++){{ /* switch (request ID) */ {cases}\\n\\t}}\\n}}'.format(cases=''.join((f.getRequestParseCase(buffername) for f in functions)), buffername=buffername, prefix=prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getAnswerParser(functions):\n    return '\\n/* This function pushes the answers to the caller, doing all the necessary synchronization. */\\nvoid {prefix}parse_answer(const void *buffer, size_t size_bytes){{\\n\\t{prefix}buffer = (const unsigned char *)buffer;\\n\\tassert({prefix}get_answer_length(buffer, size_bytes).result == {prefix}SUCCESS);\\n\\tassert({prefix}get_answer_length(buffer, size_bytes).size <= size_bytes);\\n\\n\\t{prefix}mutex_unlock({prefix}mutex_answer);\\n\\t{prefix}mutex_lock({prefix}mutex_in_caller);\\n\\t{prefix}mutex_unlock({prefix}mutex_parsing_complete);\\n\\t{prefix}mutex_lock({prefix}mutex_answer);\\n\\t{prefix}mutex_lock({prefix}mutex_parsing_complete);\\n\\t{prefix}mutex_unlock({prefix}mutex_in_caller);\\n}}\\n'.format(prefix=prefix)", "buggy_source_code": "def getAnswerParser(functions):\n    return '\\n/* This function pushes the answers to the caller, doing all the necessary synchronization. */\\nvoid {prefix}parse_answer(const void *buffer, size_t size_bytes){{\\n\\t{prefix}buffer = (const unsigned char *)buffer;\\n\\tassert({prefix}get_answer_length(buffer, size_bytes).result == RPC_SUCCESS);\\n\\tassert({prefix}get_answer_length(buffer, size_bytes).size <= size_bytes);\\n\\n\\t{prefix}mutex_unlock(RPC_mutex_answer);\\n\\t{prefix}mutex_lock(RPC_mutex_in_caller);\\n\\t{prefix}mutex_unlock(RPC_mutex_parsing_complete);\\n\\t{prefix}mutex_lock(RPC_mutex_answer);\\n\\t{prefix}mutex_lock(RPC_mutex_parsing_complete);\\n\\t{prefix}mutex_unlock(RPC_mutex_in_caller);\\n}}\\n'.format(prefix=prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getNetworkHeader():\n    return '\\n/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n   IMPORTANT: The following functions must be implemented by YOU.\\n   They are required for the RPC to work.\\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\\n\\n{doNotModifyHeader}\\n#ifndef {prefix}NETWORK_H\\n#define {prefix}NETWORK_H\\n\\n#include \"{prefix}types.h\"\\n\\n{externC_intro}\\nvoid {prefix}message_start(size_t size);\\n/*  This function is called when a new message starts. {{size}} is the number of\\n    bytes the message will require. In the implementation you can allocate  a\\n    buffer or write a preamble. The implementation can be empty if you do not\\n    need to do that. */\\n\\nvoid {prefix}message_push_byte(unsigned char byte);\\n/* Pushes a byte to be sent via network. You should put all the pushed bytes\\n   into a buffer and send the buffer when {prefix}message_commit is called. If you run\\n   out of buffer space you can send multiple partial messages as long as the\\n   other side puts them back together. */\\n\\n{prefix}RESULT {prefix}message_commit(void);\\n/* This function is called when a complete message has been pushed using\\n   {prefix}message_push_byte. Now is a good time to send the buffer over the network,\\n   even if the buffer is not full yet. You may also want to free the buffer that\\n   you may have allocated in the {prefix}message_start function.\\n   {prefix}message_commit should return {prefix}SUCCESS if the buffer has been successfully\\n   sent and {prefix}FAILURE otherwise. */\\n\\n/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n   You need to define 4 mutexes to implement the {prefix}mutex_* functions below.\\n   See {prefix}types.h for a definition of {prefix}mutex_id.\\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\\n\\nvoid {prefix}mutex_init(void);\\n/* Initializes all rpc mutexes. */\\n\\nvoid {prefix}mutex_lock({prefix}mutex_id mutex_id);\\n/* Locks the mutex. If it is already locked it yields until it can lock the mutex. */\\n\\nvoid {prefix}mutex_unlock({prefix}mutex_id mutex_id);\\n/* Unlocks the mutex. The mutex is locked when the function is called. */\\n\\nchar {prefix}mutex_lock_timeout({prefix}mutex_id mutex_id);\\n/* Tries to lock a mutex. Returns 1 if the mutex was locked and 0 if a timeout\\n   occured. The timeout length should be the time you want to wait for an answer\\n   before giving up. If the time is infinite a lost answer will get the calling\\n   thread stuck indefinitely. */\\n\\n\\n/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n   The following functions\\'s implementations are automatically generated.\\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\\n\\nvoid {prefix}Parser_init(void);\\n/* Initializes various states required for the RPC. Must be called before any\\n   other {prefix}* function. Must be called by the parser thread. */\\n\\nvoid {prefix}Parser_exit(void);\\n/* Frees various states required for the RPC. Must be called after any\\n   other {prefix}* function */\\n\\n{prefix}SIZE_RESULT {prefix}get_answer_length(const void *buffer, size_t size);\\n/* Returns the (expected) length of the beginning of a (partial) message.\\n   If returnvalue.result equals {prefix}SUCCESS then returnvalue.size equals the\\n   expected size in bytes.\\n   If returnvalue.result equals {prefix}COMMAND_UNKNOWN then the buffer does not point\\n   to the beginning of a recognized message and returnvalue.size has no meaning.\\n   If returnvalue.result equals {prefix}COMMAND_INCOMPLETE then returnvalue.size equals\\n   the minimum number of bytes required to figure out the length of the message. */\\n\\nvoid {prefix}parse_answer(const void *buffer, size_t size);\\n/* This function parses answer received from the network. {{buffer}} points to the\\n   buffer that contains the received data and {{size}} contains the number of bytes\\n   that have been received (NOT the size of the buffer!). This function will wake\\n   up {prefix}*-functions below that are waiting for an answer.\\n   Do not call this function with an incomplete message. Use {prefix}get_answer_length\\n   to make sure it is a complete message. */\\n\\n\\n{externC_outro}\\n#endif /* {prefix}NETWORK_H */\\n'.format(doNotModifyHeader=doNotModifyHeader, externC_intro=externC_intro, externC_outro=externC_outro, prefix=prefix)", "buggy_source_code": "def getNetworkHeader():\n    return '\\n/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n   IMPORTANT: The following functions must be implemented by YOU.\\n   They are required for the RPC to work.\\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\\n\\n{doNotModifyHeader}\\n#ifndef {prefix}NETWORK_H\\n#define {prefix}NETWORK_H\\n\\n#include \"RPC_types.h\"\\n\\n{externC_intro}\\nvoid {prefix}message_start(size_t size);\\n/*  This function is called when a new message starts. {{size}} is the number of\\n    bytes the message will require. In the implementation you can allocate  a\\n    buffer or write a preamble. The implementation can be empty if you do not\\n    need to do that. */\\n\\nvoid {prefix}message_push_byte(unsigned char byte);\\n/* Pushes a byte to be sent via network. You should put all the pushed bytes\\n   into a buffer and send the buffer when {prefix}message_commit is called. If you run\\n   out of buffer space you can send multiple partial messages as long as the\\n   other side puts them back together. */\\n\\nRPC_RESULT {prefix}message_commit(void);\\n/* This function is called when a complete message has been pushed using\\n   {prefix}message_push_byte. Now is a good time to send the buffer over the network,\\n   even if the buffer is not full yet. You may also want to free the buffer that\\n   you may have allocated in the {prefix}message_start function.\\n   {prefix}message_commit should return RPC_SUCCESS if the buffer has been successfully\\n   sent and RPC_FAILURE otherwise. */\\n\\n/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n   You need to define 4 mutexes to implement the {prefix}mutex_* functions below.\\n   See RPC_types.h for a definition of RPC_mutex_id.\\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\\n\\nvoid {prefix}mutex_init(void);\\n/* Initializes all rpc mutexes. */\\n\\nvoid {prefix}mutex_lock(RPC_mutex_id mutex_id);\\n/* Locks the mutex. If it is already locked it yields until it can lock the mutex. */\\n\\nvoid {prefix}mutex_unlock(RPC_mutex_id mutex_id);\\n/* Unlocks the mutex. The mutex is locked when the function is called. */\\n\\nchar {prefix}mutex_lock_timeout(RPC_mutex_id mutex_id);\\n/* Tries to lock a mutex. Returns 1 if the mutex was locked and 0 if a timeout\\n   occured. The timeout length should be the time you want to wait for an answer\\n   before giving up. If the time is infinite a lost answer will get the calling\\n   thread stuck indefinitely. */\\n\\n\\n/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n   The following functions\\'s implementations are automatically generated.\\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\\n\\nvoid {prefix}Parser_init(void);\\n/* Initializes various states required for the RPC. Must be called before any\\n   other {prefix}* function. Must be called by the parser thread. */\\n\\nvoid {prefix}Parser_exit(void);\\n/* Frees various states required for the RPC. Must be called after any\\n   other {prefix}* function */\\n\\nRPC_SIZE_RESULT {prefix}get_answer_length(const void *buffer, size_t size);\\n/* Returns the (expected) length of the beginning of a (partial) message.\\n   If returnvalue.result equals RPC_SUCCESS then returnvalue.size equals the\\n   expected size in bytes.\\n   If returnvalue.result equals RPC_COMMAND_UNKNOWN then the buffer does not point\\n   to the beginning of a recognized message and returnvalue.size has no meaning.\\n   If returnvalue.result equals RPC_COMMAND_INCOMPLETE then returnvalue.size equals\\n   the minimum number of bytes required to figure out the length of the message. */\\n\\nvoid {prefix}parse_answer(const void *buffer, size_t size);\\n/* This function parses answer received from the network. {{buffer}} points to the\\n   buffer that contains the received data and {{size}} contains the number of bytes\\n   that have been received (NOT the size of the buffer!). This function will wake\\n   up {prefix}*-functions below that are waiting for an answer.\\n   Do not call this function with an incomplete message. Use {prefix}get_answer_length\\n   to make sure it is a complete message. */\\n\\n\\n{externC_outro}\\n#endif /* {prefix}NETWORK_H */\\n'.format(doNotModifyHeader=doNotModifyHeader, externC_intro=externC_intro, externC_outro=externC_outro, prefix=prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getAnswerSizeChecker(functions):\n    return '/* Get (expected) size of (partial) answer. */\\n{prefix}SIZE_RESULT {prefix}get_answer_length(const void *buffer, size_t size_bytes){{\\n\\t{prefix}SIZE_RESULT returnvalue = {{{prefix}SUCCESS, 0}};\\n\\tconst unsigned char *current = (const unsigned char *)buffer;\\n\\tif (!size_bytes){{\\n\\t\\treturnvalue.result = {prefix}COMMAND_INCOMPLETE;\\n\\t\\treturnvalue.size = 1;\\n\\t\\treturn returnvalue;\\n\\t}}\\n\\tswitch (*current){{\\n{answercases}\\t\\tdefault:\\n\\t\\t\\treturnvalue.result = {prefix}COMMAND_UNKNOWN;\\n\\t\\t\\treturn returnvalue;\\n\\t}}\\n\\tif (returnvalue.result != {prefix}COMMAND_UNKNOWN)\\n\\t\\treturnvalue.result = returnvalue.size > size_bytes ? {prefix}COMMAND_INCOMPLETE : {prefix}SUCCESS;\\n\\treturn returnvalue;\\n}}\\n'.format(answercases=''.join((f.getAnswerSizeCase('current') for f in functions)), prefix=prefix)", "buggy_source_code": "def getAnswerSizeChecker(functions):\n    return '/* Get (expected) size of (partial) answer. */\\nRPC_SIZE_RESULT {prefix}get_answer_length(const void *buffer, size_t size_bytes){{\\n\\tRPC_SIZE_RESULT returnvalue = {{RPC_SUCCESS, 0}};\\n\\tconst unsigned char *current = (const unsigned char *)buffer;\\n\\tif (!size_bytes){{\\n\\t\\treturnvalue.result = RPC_COMMAND_INCOMPLETE;\\n\\t\\treturnvalue.size = 1;\\n\\t\\treturn returnvalue;\\n\\t}}\\n\\tswitch (*current){{\\n{answercases}\\t\\tdefault:\\n\\t\\t\\treturnvalue.result = RPC_COMMAND_UNKNOWN;\\n\\t\\t\\treturn returnvalue;\\n\\t}}\\n\\tif (returnvalue.result != RPC_COMMAND_UNKNOWN)\\n\\t\\treturnvalue.result = returnvalue.size > size_bytes ? RPC_COMMAND_INCOMPLETE : RPC_SUCCESS;\\n\\treturn returnvalue;\\n}}\\n'.format(answercases=''.join((f.getAnswerSizeCase('current') for f in functions)), prefix=prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getRequestParserHeader():\n    return '{doNotModifyHeader}\\n#include \"{prefix}types.h\"\\n\\n{hash}\\n\\n{externC_intro}\\n/* Receives a pointer to a (partly) received message and it\\'s size.\\n   Returns a result and a size. If size equals {prefix}SUCCESS then size is the\\n   size that the message is supposed to have. If result equals {prefix}COMMAND_INCOMPLETE\\n   then more bytes are required to determine the size of the message. In this case\\n   size is the expected number of bytes required to determine the correct size.*/\\n{prefix}SIZE_RESULT {prefix}get_request_size(const void *buffer, size_t size_bytes);\\n\\n/* This function parses RPC requests, calls the original function and sends an\\n   answer. */\\nvoid {prefix}parse_request(const void *buffer, size_t size_bytes);\\n{externC_outro}\\n'.format(doNotModifyHeader=doNotModifyHeader, externC_intro=externC_intro, externC_outro=externC_outro, prefix=prefix, hash=getHash())", "buggy_source_code": "def getRequestParserHeader():\n    return '{doNotModifyHeader}\\n#include \"RPC_types.h\"\\n\\n{hash}\\n\\n{externC_intro}\\n/* Receives a pointer to a (partly) received message and it\\'s size.\\n   Returns a result and a size. If size equals RPC_SUCCESS then size is the\\n   size that the message is supposed to have. If result equals RPC_COMMAND_INCOMPLETE\\n   then more bytes are required to determine the size of the message. In this case\\n   size is the expected number of bytes required to determine the correct size.*/\\nRPC_SIZE_RESULT {prefix}get_request_size(const void *buffer, size_t size_bytes);\\n\\n/* This function parses RPC requests, calls the original function and sends an\\n   answer. */\\nvoid {prefix}parse_request(const void *buffer, size_t size_bytes);\\n{externC_outro}\\n'.format(doNotModifyHeader=doNotModifyHeader, externC_intro=externC_intro, externC_outro=externC_outro, prefix=prefix, hash=getHash())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getRPC_Parser_init():\n    return '\\nvoid {prefix}Parser_init(){{\\n\\tif ({prefix}initialized)\\n\\t\\treturn;\\n\\t{prefix}initialized = 1;\\n\\t{prefix}mutex_lock({prefix}mutex_parsing_complete);\\n\\t{prefix}mutex_lock({prefix}mutex_answer);\\n}}\\n'.format(prefix=prefix)", "buggy_source_code": "def getRPC_Parser_init():\n    return '\\nvoid {prefix}Parser_init(){{\\n\\tif ({prefix}initialized)\\n\\t\\treturn;\\n\\t{prefix}initialized = 1;\\n\\t{prefix}mutex_lock(RPC_mutex_parsing_complete);\\n\\t{prefix}mutex_lock(RPC_mutex_answer);\\n}}\\n'.format(prefix=prefix)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def plugin_toggled(self, renderer, _path):\n    renderer.set_active(not renderer.get_active())", "buggy_source_code": "def plugin_toggled(self, renderer, path, user_data):\n    (model, column) = user_data\n    model[path][column] = not model[path][column]\n    return", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "update-node", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def extract_common_cell(form, common_cell=None):\n    common_cell = common_cell or form.cell()\n    if common_cell is None or common_cell.is_undefined():\n        error('Unable to extract common cell;missing cell definition in form.')\n    return common_cell", "buggy_source_code": "def extract_common_cell(form, common_cell=None):\n    common_cell = common_cell or form.cell()\n    if common_cell is None or common_cell.is_undefined():\n        error('Unable to extract common cell; missing cell definition in form.')\n    return common_cell", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, theParent=None, theContext=None):\n    self.parent = theParent\n    self.context = theContext\n    self.showContexthelp()", "buggy_source_code": "def __init__(self, theParent=None, theContext=None):\n    self.parent = theParent\n    self.context = theContext\n    self.showContextHelp()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def make_local(self, *args, **kwargs) -> Optional[DataSource]:\n    warnings.warn('EsdcDataSource cannot be made local')\n    return None", "buggy_source_code": "def make_local(self, *args, **kwargs) -> Optional[DataSource]:\n    warnings.warn('ESDC data sources cannot be made local')\n    return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_conf_ini_loaded_into_namespace():\n    fake_conf_setup(\"test_param='loaded'\")\n    resp = triconf.initialize('bob', conf_file_names='fake_conf.ini')\n    assert hasattr(resp, 'test_param')\n    assert resp.test_param == 'loaded'\n    fake_conf_tear_down()", "buggy_source_code": "def test_conf_ini_loaded_into_namespace():\n    fake_conf_setup(\"test_param='loaded'\")\n    resp = triconf.initialize('bob', given_conf_files='fake_conf.ini')\n    assert hasattr(resp, 'test_param')\n    assert resp.test_param == 'loaded'\n    fake_conf_tear_down()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_specified_missing_conf_file():\n    triconf.initialize('bob', conf_file_names=NON_EXISTANT_FILENAME)\n    assert os.path.exists(NON_EXISTANT_FILENAME)\n    os.unlink(NON_EXISTANT_FILENAME)", "buggy_source_code": "def test_specified_missing_conf_file():\n    triconf.initialize('bob', given_conf_files=NON_EXISTANT_FILENAME)\n    assert os.path.exists(NON_EXISTANT_FILENAME)\n    os.unlink(NON_EXISTANT_FILENAME)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def shortDescription(self):\n    return 'running ' + self.module", "buggy_source_code": "def shortDescription(self):\n    return 'compiling and running ' + self.module", "edit_actions": ["update-node"]}
{"fixed_source_code": "def teardown_package():\n    if tests_are_run:\n        if not SHOW_BROWSER:\n            SeleniumTestCase.vdisplay.stop()\n        SeleniumTestCase.selenium.quit()", "buggy_source_code": "def teardown_package():\n    if tests_are_run:\n        SeleniumTestCase.selenium.quit()\n        if not SHOW_BROWSER:\n            SeleniumTestCase.vdisplay.stop()", "edit_actions": ["move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def _ssl_error_msg():\n    return 'An SSL error occurred. To configure your SSL settings, please run: `dcos config set core.ssl_verify <value>`\\n<value>: Whether to verify SSL certs for HTTPS or path to certs\\n'", "buggy_source_code": "def _ssl_error_msg():\n    return 'An SSL error occurred. To configure your SSL settings, please run: `dcos config set core.ssl_verify <value>`\\n<value>: Whether to verify SSL certs for HTTPS or path to certs. Valid values are True, False, or a path to a CA_BUNDLE.\\n'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def pihole_status(self, widget):\n    if self._pihole_status is None:\n        return 'unknown'\n    return 'pi-hole ' + ('up/' + self._ads_blocked_today if self._pihole_status else 'down')", "buggy_source_code": "def pihole_status(self, widget):\n    if self._pihole_status is None:\n        return 'pi-hole unknown'\n    return 'pi-hole ' + ('up/' + self._ads_blocked_today if self._pihole_status else 'down')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef hresult_to_err_code(hresult):\n    return hresult & 255", "buggy_source_code": "@staticmethod\ndef hresult_to_err_code(hresult):\n    return hresult & 65535", "edit_actions": ["update-node"]}
{"fixed_source_code": "def build(self):\n    self.icon = '../media/images/WaniKaniLogoSite.png'\n    return WaniKani2Anki()", "buggy_source_code": "def build(self):\n    self.icon = 'media/images/WaniKaniLogoSite.png'\n    return WaniKani2Anki()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_object_access(self, spy, tmpdir):\n    traces = self.run(spy, tmpdir, \"\\n        | o |\\n        o := Array with: (Array with: 'a' with: $b) with: (Array with: 'x' with: $y).\\n        1 to: 10000 do: [:i | (o at: (i \\\\\\\\ 2) + 1) at: (i \\\\\\\\ 2) + 1].\\n        \")\n    self.assert_matches(traces[0].loop, '\\n        guard_not_invalidated(descr=<Guard0xa935da4>)\\n        i101 = int_le(i100, 10000)\\n        guard_true(i101, descr=<Guard0xa9677d4>)\\n        i102 = int_mod(i100, 2)\\n        i103 = int_rshift(i102, 31)\\n        i104 = int_and(2, i103)\\n        i105 = int_add(i102, i104)\\n        i106 = int_add(i105, 1)\\n        i107 = uint_lt(i105, i83)\\n        guard_true(i107, descr=<Guard0xa9677b8>)\\n        i108 = int_lt(i105, 0)\\n        guard_false(i108, descr=<Guard0xa96779c>)\\n        p109 = getarrayitem_gc_r(p82, i105, descr=<ArrayP 4>)\\n        guard_class(p109, ConstClass(W_PointersObject), descr=<Guard0xa967764>)\\n        p110 = getfield_gc_r(p109, descr=<FieldP spyvm.model.W_PointersObject.inst_strategy 16>)\\n        guard_value(p111, ConstPtr(ptr93), descr=<Guard0xa9676f4>)\\n        p112 = getfield_gc_r(p109, descr=<FieldP spyvm.model.W_PointersObject.inst__storage 12>)\\n        i113 = arraylen_gc(p112, descr=<ArrayP 4>)\\n        i114 = getfield_gc_pure_i(p110, descr=<FieldU spyvm.storage.AbstractStrategy.inst_space 8>)\\n        i115 = uint_lt(i105, i113)\\n        guard_true(i115, descr=<Guard0xa967630>)\\n        p116 = getarrayitem_gc_r(p112, i105, descr=<ArrayP 4>)\\n        i117 = int_add(i100, 1)\\n        i118 = arraylen_gc(p70, descr=<ArrayP 4>)\\n        jump(p0, p1, i2, p3, p6, p7, i8, i9, p10, p11, i13, p14, p17, i117, p27, p29, p31, p33, p35, p37, p39, p41, p43, p45, p47, p70, i83, p82, descr=TargetToken(177582744))\\n        ')", "buggy_source_code": "def test_object_access(self, spy, tmpdir):\n    traces = self.run(spy, tmpdir, \"\\n        | o |\\n        o := Array with: (Array with: 'a' with: $b) with: (Array with: 'x' with: $y).\\n        1 to: 10000 do: [:i | (o at: (i \\\\\\\\ 2) + 1) at: (i \\\\\\\\ 2) + 1].\\n        \")\n    self.assert_matches(traces[0].loop, '\\n        guard_not_invalidated(descr=<Guard0xa935da4>)\\n        i101 = int_le(i100, 10000)\\n        guard_true(i101, descr=<Guard0xa9677d4>)\\n        i102 = int_mod(i100, 2)\\n        i103 = int_rshift(i102, 31)\\n        i104 = int_and(2, i103)\\n        i105 = int_add(i102, i104)\\n        i106 = int_add(i105, 1)\\n        i107 = uint_lt(i105, i83)\\n        guard_true(i107, descr=<Guard0xa9677b8>)\\n        i108 = int_lt(i105, 0)\\n        guard_false(i108, descr=<Guard0xa96779c>)\\n        p109 = getarrayitem_gc_r(p82, i105, descr=<ArrayP 4>)\\n        guard_class(p109, ConstClass(W_PointersObject), descr=<Guard0xa967764>)\\n        p110 = getfield_gc_r(p109, descr=<FieldP spyvm.model.W_PointersObject.inst_strategy 16>)\\n        guard_value(p111, ConstPtr(ptr93), descr=<Guard0xa9676f4>)\\n        p112 = getfield_gc_r(p109, descr=<FieldP spyvm.model.W_PointersObject.inst__storage 12>)\\n        i113 = arraylen_gc(p112, descr=<ArrayP 4>)\\n        i115 = uint_lt(i105, i113)\\n        guard_true(i115, descr=<Guard0xa967630>)\\n        p116 = getarrayitem_gc_r(p112, i105, descr=<ArrayP 4>)\\n        i117 = int_add(i100, 1)\\n        i118 = arraylen_gc(p70, descr=<ArrayP 4>)\\n        jump(p0, p1, i2, p3, p6, p7, i8, i9, p10, p11, i13, p14, p17, i117, p27, p29, p31, p33, p35, p37, p39, p41, p43, p45, p47, p70, i83, p82, descr=TargetToken(177582744))\\n        ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def html_body_renderer(user):\n    email_body = '<p>Hey %(first_name)s,</p>\\n\\n    <p>Hope exams are going well.</p>\\n\\n    <p>Just a reminder, you can win a <b>$50 gift card</b>, <b>Kindle</b>, or potentially a <b>Nexus 7</b> by reviewing courses and profs on Flow! You\\'ll need 300 points to qualify, and each point is another chance to win.</p>\\n\\n    <p>There\\'s only <b>2 days left</b> until the contest ends this <b>Wednesday, 12/12/12 at 12:12:12 pm</b>. So take a quick study break by reviewing some courses on <http href=\"www.uwflow.com\">www.uwflow.com</a>.</p>\\n\\n    <p>Good luck with exams!</p>\\n\\n\\n    <p style=\"border-top: 1px solid #CCC; padding-top: 10px; margin-top: 50px;\"><small style=\"color:#999\">Are we annoying you? Sorry :( Feel free to <a style=\"color:#999\" href=\"http://uwflow.com/unsubscribe?pasta=%(user_id)s\">unsubscribe</a>.</small></p>'\n    params = {'first_name': user.first_name, 'user_id': user.id}\n    return email_body % params", "buggy_source_code": "def html_body_renderer(user):\n    email_body = '<p>Hey %(first_name)s,</p>\\n\\n    <p>Hope exams are going well.</p>\\n\\n    <p>Just a reminder, you can win a <b>$50 gift card</b>, <b>Kindle</b>, or potentially a <b>Nexus 7</b> by reviewing courses and profs on Flow! You\\'ll need 300 points to qualify, and each point is another chance to win.</p>\\n\\n    <p>There\\'s only <b>2 days left</b> until the contest ends this <b>Wednesday, 12/12/12 at 12:12:12 pm</b>. So take a quick study break by reviewing some courses on <a href=\"www.uwflow.com\">www.uwflow.com</a>.</p>\\n\\n    <p>Good luck with exams!</p>\\n\\n\\n    <p style=\"border-top: 1px solid #CCC; padding-top: 10px; margin-top: 50px;\"><small style=\"color:#999\">Are we annoying you? Sorry :( Feel free to <a style=\"color:#999\" href=\"http://uwflow.com/unsubscribe?pasta=%(user_id)s\">unsubscribe</a>.</small></p>'\n    params = {'first_name': user.first_name, 'user_id': user.id}\n    return email_body % params", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_multiple_session(self):\n    return self.soup.title.contents[0].find('Session limit exceeded') > 0", "buggy_source_code": "def is_multiple_session(self):\n    return self.soup.title.contents[0].find('Session limit exceeded') >= 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def trac_subject(ticket):\n    return 'Trac #%s' % ticket.id", "buggy_source_code": "def trac_subject(ticket):\n    return truncate('Trac #%s: %s' % (ticket.id, ticket.values.get('summary')), 60)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clean_notes(self):\n    if self.notes_val == '':\n        return u''\n    elif self.notes_val:\n        return self.cleaned_data['notes']\n    else:\n        return None", "buggy_source_code": "def clean_notes(self):\n    if self.notes_val == '':\n        return u''\n    elif self.notes_val:\n        return self.cleaned_data['notes']\n    return None", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def clean_domid(self):\n    data = self.cleaned_data['domid']\n    if not re.match('[a-zA-Z_]\\\\w*', data):\n        raise ValidationError(_('The name must be a single word beginning with a letter'))\n    return data", "buggy_source_code": "def clean_domid(self):\n    data = self.cleaned_data['domid']\n    if not re.match('^[a-zA-Z_]\\\\w*$', data):\n        raise ValidationError(_('The name must be a single word beginning with a letter'))\n    return data", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return '{0}\\n{1}'.format(self.name, self.address)", "buggy_source_code": "def __unicode__(self):\n    return u'{}\\n{}'.format(self.name, self.address)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return '{0} - {1}'.format(self.description, self.date)", "buggy_source_code": "def __unicode__(self):\n    return u'{} - {}'.format(self.description, self.date)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return '{0} - {1}'.format(self.date, self.amount)", "buggy_source_code": "def __unicode__(self):\n    return u'{} - {}'.format(self.date, self.amount)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return '{0} - {1}'.format(self.start_date, self.end_date or '')", "buggy_source_code": "def __unicode__(self):\n    return u'{} - {}'.format(self.start_date, self.end_date or '')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return '{0} {1}'.format(self.name, self.property)", "buggy_source_code": "def __unicode__(self):\n    return u'{} {}'.format(self.name, self.property)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def exit_if_vm_not_supported(operation):\n    (vm_supported, vm_dist, vm_ver) = is_vm_supported_for_extension()\n    if not vm_supported:\n        log_and_exit(operation, 51, 'Unsupported operation system: {0} {1}'.format(vm_dist, vm_ver))\n    return 0", "buggy_source_code": "def exit_if_vm_not_supported(operation):\n    (vm_supported, vm_dist, vm_ver) = is_vm_supported_for_extension()\n    if not vm_supported:\n        log_and_exit(operation, UnsupportedOperatingSystem, 'Unsupported operating system: {0} {1}'.format(vm_dist, vm_ver))\n    return 0", "edit_actions": ["insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def link_to_document_navigation(self, obj):\n    return '<a href=\"{0}\">Navigate</a>'.format(urlresolvers.reverse('corpus:navigate_document', args=(obj.id,)))", "buggy_source_code": "def link_to_document_navigation(self, obj):\n    return '<a href=\"{0}\">Rich View</a>'.format(urlresolvers.reverse('corpus:navigate_document', args=(obj.id,)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def xnB(A, B, R):\n\n    @always_comb\n    def logic():\n        R.next = ~(~A & B)\n    return logicbi", "buggy_source_code": "def xnB(A, B, R):\n\n    @always_comb\n    def logic():\n        R.next = ~(~A & B)\n    return logic", "edit_actions": ["update-node"]}
{"fixed_source_code": "def gen_ip_rule_udp(name, ip_addr, ref, sid):\n    rule = IP_UDP_BASERULE % (ORG, ip_addr, name, ip_addr, ref, sid)\n    return rule", "buggy_source_code": "def gen_ip_rule_udp(name, ip_addr, ref, sid):\n    rule = IP_UDP_BASERULE % (ip_addr, ORG, name, ip_addr, ref, sid)\n    return rule", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def gen_ip_rule_tcp(name, ip_addr, ref, sid):\n    rule = IP_TCP_BASERULE % (ORG, ip_addr, name, ip_addr, ref, sid)\n    return rule", "buggy_source_code": "def gen_ip_rule_tcp(name, ip_addr, ref, sid):\n    rule = IP_TCP_BASERULE % (ip_addr, ORG, name, ip_addr, ref, sid)\n    return rule", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def delete(self, delete_id):\n    r = Dive.delete(delete_id)\n    if not r:\n        self.response.status = 404\n        return\n    return", "buggy_source_code": "def delete(self, delete_id):\n    r = Dive.delete(delete_id)\n    if not r:\n        self.response.status = 404\n        return", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __init__(self):\n    super().__init__()\n    self.rectf = QtCore.QRectF(0.0, 0.0, 50.0, 50.0)\n    self.setAcceptHoverEvents(True)", "buggy_source_code": "def __init__(self):\n    super().__init__()\n    self.rectf = QtCore.QRectF(0.0, 0.0, BR_WIDTH_FT, BR_HEIGHT_FT)\n    self.setAcceptHoverEvents(True)", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@sched.scheduled_job('cron', day='*', hour=23, minute='*/1')\ndef rule_water_front_on():\n    logger.info('water on')", "buggy_source_code": "@sched.scheduled_job('cron', day='*', hour='*', minute='*/2')\ndef rule_water_front_on():\n    logger.info('water on')", "edit_actions": ["insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "@sched.scheduled_job('cron', day='*', hour=23, minute='*/2')\ndef rule_water_front_off():\n    logger.info('water off')", "buggy_source_code": "@sched.scheduled_job('cron', day='*', hour='*', minute='*/3')\ndef rule_water_front_off():\n    logger.info('water off')", "edit_actions": ["insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'Relation(Class ID:\"{self.class_id}\", entity1:\"{self.entity1}\", entity2:\"{self.entity2}\")'.format(self=self)", "buggy_source_code": "def __repr__(self):\n    return 'Relation(id:\"{self.class_id}\": e1:\"{self.entity1}\"   <--->   e2:\"{self.entity2}\")'.format(self=self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def earlyinit(args):\n    init_faulthandler()\n    check_pyqt_core()\n    fix_harfbuzz(args)\n    check_qt_version()\n    check_ssl_support()\n    remove_inputhook()\n    check_libraries()\n    maybe_import_webengine()\n    init_log(args)", "buggy_source_code": "def earlyinit(args):\n    init_faulthandler()\n    check_pyqt_core()\n    fix_harfbuzz(args)\n    check_qt_version()\n    check_ssl_support()\n    remove_inputhook()\n    check_libraries()\n    init_log(args)\n    maybe_import_webengine()", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def __update__(self):\n    if self.timer.finished():\n        stats.update()\n    self.timer = Timer(self.cached_time)", "buggy_source_code": "def __update__(self):\n    if self.timer.finished():\n        stats.update()\n        self.timer = Timer(self.cached_time)", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def url_remove_params(url):\n    parsed = urlparse(url or str())\n    return '%s://%s%s' % (parsed.scheme, parsed.netloc, parsed.path)", "buggy_source_code": "def url_remove_params(url):\n    parsed = urlparse(url or str())\n    return '{scheme}://{netloc}{path}'.format(scheme=parsed.scheme, netloc=parsed.netloc, path=parsed.path)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def pytest_runtest_call(item):\n    partest = int(os.environ.get('DEVITO_MPI', 0))\n    if item.get_marker('parallel') and (not partest):\n        parallel(item)", "buggy_source_code": "def pytest_runtest_call(item):\n    partest = int(os.environ.get('DEVITO_MPI', 0))\n    if item.get_closest_marker('parallel') and (not partest):\n        parallel(item)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def web_block(template, values, **kwargs):\n    options = {'template': template, 'values': values}\n    options.update(kwargs)\n    return web_blocks([options])", "buggy_source_code": "def web_block(template, values=None, **kwargs):\n    options = {'template': template, 'values': values}\n    options.update(kwargs)\n    return web_blocks([options])", "edit_actions": ["insert-node"]}
{"fixed_source_code": "@property\ndef value(self):\n    return 1 ^ DigitalItem.value", "buggy_source_code": "@property\ndef value(self):\n    return 1 ^ super().value", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def iter_torrents(self, pattern):\n    self.location('https://kickass.to/usearch/%s/?field=seeders&sorder=desc' % pattern.encode('utf-8'))\n    assert self.is_on_page(TorrentsPage)\n    return self.page.iter_torrents()", "buggy_source_code": "def iter_torrents(self, pattern):\n    self.location('https://kat.cr/usearch/%s/?field=seeders&sorder=desc' % pattern.encode('utf-8'))\n    assert self.is_on_page(TorrentsPage)\n    return self.page.iter_torrents()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_motion():\n    qcres = qc.motioncheck(ref_file, end_file, thres=5.0)\n    os.remove(ref_file)\n    os.remove(in_file)", "buggy_source_code": "def test_motion():\n    qcres = qc.motioncheck(ref_file, end_file, thres=5.0)\n    os.remove(ref_file)\n    os.remove(end_file)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def write_point(self, name, **kwargs):\n    self._client.write_point([{'name': name, 'columns': kwargs.keys(), 'points': [kwargs.values()]}])", "buggy_source_code": "def write_point(self, name, **kwargs):\n    self._client.write_points([{'name': name, 'columns': kwargs.keys(), 'points': [kwargs.values()]}])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def markdown(iterable):\n    import mistletoe.html_tokenizer as tokenizer\n    import mistletoe.html_renderer as renderer\n    rendered = renderer.render(Document(iterable))\n    tokenizer.clear()\n    return rendered", "buggy_source_code": "def markdown(iterable):\n    import mistletoe.html_token as token\n    import mistletoe.html_renderer as renderer\n    rendered = renderer.render(Document(iterable))\n    token.clear()\n    return rendered", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@property\ndef tags(self):\n    return [category.tag for category in self._categories]", "buggy_source_code": "@property\ndef tags(self):\n    return [category.tag for category in self.categories]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __getitem__(self, index):\n    return self._categories[index]", "buggy_source_code": "def __getitem__(self, index):\n    return self.categories[index]", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef tag(self):\n    return self._categories[0].tag", "buggy_source_code": "@property\ndef tag(self):\n    return self.categories[0].tag", "edit_actions": ["update-node"]}
{"fixed_source_code": "def tearDown(self):\n    cursor = self.connection.cursor()\n    cursor.execute('\\n            TRUNCATE\\n              reports_duplicates,\\n              reports,\\n              plugins_reports,\\n              plugins,\\n              raw_crashes\\n            CASCADE\\n        ')\n    self.connection.commit()\n    super(IntegrationTestReport, self).tearDown()", "buggy_source_code": "@classmethod\ndef tearDown(cls):\n    cursor = cls.connection.cursor()\n    cursor.execute('\\n            TRUNCATE\\n              reports_duplicates,\\n              reports,\\n              plugins_reports,\\n              plugins,\\n              raw_crashes\\n            CASCADE\\n        ')\n    cls.connection.commit()\n    super(IntegrationTestReport, cls).tearDownClass()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __items(x):\n    return x.iteritems()", "buggy_source_code": "def __items(x):\n    return six.iteritems(x)", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def get_model_coefficients(self):\n    assert self.can_predict, 'There are coefficients until a model isbuilt.'\n    return self.get_model().coef_", "buggy_source_code": "def get_model_coefficients(self):\n    assert self.can_predict, 'There are no coefficients until a model isbuilt.'\n    return self.get_model().coef_", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef loop(self):\n    if not self.is_running:\n        raise SanicException('Loop can only be retrieved after the app has started running or when not run asynchronously')\n    return get_event_loop()", "buggy_source_code": "@property\ndef loop(self):\n    if not self.is_running:\n        raise SanicException('Loop can only be retrieved after the app has started running. Not supported with `create_server` function')\n    return get_event_loop()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cancel(self):\n    JobQueue.getInstance().remove(self)", "buggy_source_code": "def cancel(self) -> None:\n    JobQueue.getInstance().remove(self)", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def setResult(self, result: any):\n    self._result = result", "buggy_source_code": "def setResult(self, result: Any):\n    self._result = result", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setError(self, error: Exception):\n    self._error = error", "buggy_source_code": "def setError(self, error: Exception) -> None:\n    self._error = error", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def syncdb():\n    manage('syncdb')", "buggy_source_code": "def syncdb():\n    manage('syncdb --no-initial-data')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '<Object: bucket: {0} key: {1} last_modified: {2} etag: {3} size: {4} content_type: {5}>'.format(self.bucket, self.key, self.last_modified, self.etag, self.size, self.content_type)", "buggy_source_code": "def __str__(self):\n    return '<Object: bucket: {0} key: {1} last_modified: {2} etag: {3} size: {4} content_type: {5}, is_dir: {6}>'.format(self.bucket, self.key, self.last_modified, self.etag, self.size, self.content_type, self.is_dir)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def kill(self, idle_only=False):\n    if idle_only and self._cast.media_controller.status.player_state not in ['UNKNOWN', 'IDLE']:\n        return\n    self._cast.quit_app()", "buggy_source_code": "def kill(self, idle_only=False):\n    if idle_only and (not self._is_idle):\n        return\n    self._cast.quit_app()", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture\ndef philips_hue_client(config):\n    philips_hue_client = philips_hue.PhilipsHueClient(config['PHILIPS_HUE_URL'])\n    return philips_hue_client", "buggy_source_code": "@pytest.fixture\ndef philips_hue_client(config):\n    philips_hue_client = philips_hue.PhilipsHueClient(config['BRIDGE_IP_ADDRESS'], config['USERNAME'])\n    return philips_hue_client", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def measureConcurrency(filepath, sleep_time=1):\n    count(1, filepath)\n    try:\n        time.sleep(sleep_time)\n    finally:\n        return count(-1, filepath)", "buggy_source_code": "def measureConcurrency(filepath, sleep_time=3):\n    count(1, filepath)\n    try:\n        time.sleep(sleep_time)\n    finally:\n        return count(-1, filepath)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@abstractmethod\ndef train(self, x, y):\n    (x, y) = self.pre_training_checklist(x, y)\n    return (x, y)", "buggy_source_code": "@abstractmethod\ndef train(self, x_train, y_train):\n    (x_train_normalized, y_train_normalized) = self.pre_training_checklist(x_train, y_train)\n    return (x_train_normalized, y_train_normalized)", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def is_category_view_showing(self):\n    return self.notebook.get_current_page() == self.PAGE_CATEGORY", "buggy_source_code": "def is_category_view_showing(self):\n    return self.notebook.get_current_page() == self.PAGE_CATEGORY or not self.scroll_app_list.props.visible", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def disconnect_proxy(self, name):\n    for signal in self._proxy + _signals:\n        if name in signal:\n            self._proxy_signals.remove(signal)\n            break", "buggy_source_code": "def disconnect_proxy(self, name):\n    for signal in self._proxy_signals:\n        if name in signal:\n            self._proxy_signals.remove(signal)\n            break", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def save(self, *args, **kwargs):\n    self['#doc_type'] = 'XFormDuplicate'\n    super(CXFormDuplicate, self).save(*args, **kwargs)", "buggy_source_code": "def save(self, *args, **kwargs):\n    self['#doc_type'] = 'XFormDuplicate'\n    super(XFormDuplicate, self).save(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_transform_node_id(self):\n    transform_node = self._get_node_by('type', 'TRANSFORMER')\n    if transform_node:\n        return transform_node['id']\n    raise Exception('Could not locate transform id for %s' % self.base_url)", "buggy_source_code": "def get_transform_node_id(self):\n    transform_node = self._get_node_by('type', 'TRANSFORMER')\n    if transform_node:\n        return transform_node['id']\n    raise Exception('Could not locate transform id for %s' % self.account_name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_main_rate_scan():\n    rate_scan.main(example_file_path, '/null')", "buggy_source_code": "def test_main_rate_scan():\n    rate_scan.main(example_file_path, 'test')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def rename_group(self, groupname, groupname_new):\n    pass", "buggy_source_code": "def rename_group(self, group, new_name, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_group(self, groupname):\n    pass", "buggy_source_code": "def create_group(self, specification, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def add_user_to_group(self, username, gid):\n    pass", "buggy_source_code": "def add_user_to_group(self, user, group, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def create_user(self, username, password):\n    pass", "buggy_source_code": "def create_user(self, specification, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "update-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def remove_user_from_group(self, username, gid):\n    pass", "buggy_source_code": "def remove_user_from_group(self, user, group, **kwargs):\n    raise NotImplementedError", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __sql__(self, ctx):\n    return ctx.sql(CommaNodeList([self.model._meta.fields[field] for field in self.field_names]))", "buggy_source_code": "def __sql__(self, ctx):\n    return ctx.sql(EnclosedNodeList([self.model._meta.fields[field] for field in self.field_names]))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@app.route('/')\ndef root():\n    return toolkit.response('docker-registry server ({0}) (v{1})'.format(cfg.flavor, __version__))", "buggy_source_code": "@app.route('/')\ndef root():\n    return toolkit.response(cfg.issue)", "edit_actions": ["move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def load(htype):\n    s_type = __import__('handler.' + htype.replace('.', '_').replace('-', '_'), fromlist='.')\n    return s_type.Handler()", "buggy_source_code": "def load(htype):\n    import importlib\n    s_type = importlib.import_module('.' + htype.replace('.', '_').replace('-', '_'), __name__)\n    return s_type.Handler()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_context(self):\n    return self.context", "buggy_source_code": "def get_context(self):\n    return self._context", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate_from_noise(gen_params, num_samples, noise_dim, rs):\n    noise = rs.randn(num_samples, noise_dim)\n    samples = neural_net_predict(gen_params, noise)\n    return sigmoid(samples)", "buggy_source_code": "def generate_from_noise(gen_params, num_samples, noise_dim, rs):\n    noise = rs.rand(num_samples, noise_dim)\n    samples = neural_net_predict(gen_params, noise)\n    return sigmoid(samples)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def create(self, contact):\n    wd = self.app.wd\n    self.open_contacts_page()\n    self.fill_contact_form(contact)\n    wd.find_element_by_xpath(\"//div[@id='content']/form/input[21]\").click()\n    self.return_to_home_page()", "buggy_source_code": "def create(self, contact):\n    wd = self.app.wd\n    self.open_add_contact_form()\n    self.fill_contact_form(contact)\n    wd.find_element_by_xpath(\"//div[@id='content']/form/input[21]\").click()\n    self.return_to_home_page()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def open_contacts_page(self):\n    wd = self.app.wd\n    wd.find_element_by_link_text('add new').click()", "buggy_source_code": "def open_contacts_page(self):\n    wd = self.app.wd\n    wd.find_element_by_link_text('home').click()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getServerMessage(data):\n    if 'version' in data:\n        if int(data['version']) < 3:\n            return (True, 'Hei betamies, haes uusin suljettu beta osoitteesta http://dl.dropbox.com/u/25959245/IrssiNotifier.apk')\n    return (True, '')", "buggy_source_code": "def getServerMessage(data):\n    if 'version' in data:\n        if int(data['version']) < 3:\n            return (True, 'Koitas nyt, http://dl.dropbox.com/u/25959245/IrssiNotifier.apk')\n    return (True, '')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getValue(pair):\n    nv = pair.split('=')\n    if len(nv) == 2:\n        return nv[1]\n    else:\n        debug(pair)", "buggy_source_code": "def getValue(pair):\n    nv = pair.split('=')\n    if len(nv) == 2:\n        return nv[1]\n    else:\n        logger.debug(pair)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def update_options(self):\n    self.clear_list()\n    for key in self._controller.options:\n        self._orderedlist.append(key)", "buggy_source_code": "def update_options(self):\n    self._listwindow.clear_options()\n    self._listwindow.add_options(self._controller.options)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwds):\n    super(BaseVitrageTest, self).__init__(*args, **kwds)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(BaseVitrageTest, self).__init__(*args, **kwargs)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _create_graph_by_mock(self):\n    processor = BaseMock.create_processor_with_graph()\n    entity_graph = processor.entity_graph\n    mock_graph_output = entity_graph.output_graph()\n    LOG.info('The mock graph is : ' + mock_graph_output)", "buggy_source_code": "def _create_graph_by_mock(self):\n    processor = self.create_processor_with_graph()\n    entity_graph = processor.entity_graph\n    mock_graph_output = entity_graph.output_graph()\n    LOG.info('The mock graph is : ' + mock_graph_output)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def removeSelected(self):\n    self.tview.removeSelected()\n    root = self.selitem.internalPointer().rootpath()\n    self.removeRepo.emit(hglib.tounicode(root))", "buggy_source_code": "def removeSelected(self):\n    root = self.selitem.internalPointer().rootpath()\n    self.tview.removeSelected()\n    self.removeRepo.emit(hglib.tounicode(root))", "edit_actions": ["move-tree"]}
{"fixed_source_code": "@property\ndef service_controller(self):\n    return controllers.ServiceController(self)", "buggy_source_code": "@property\ndef service_controller(self):\n    return controllers.ServicesController(self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def changed_12025(self, fields):\n    self.changed_11927(fields)\n    fields.insert_field(FloatField(), after='spell_difficulty')", "buggy_source_code": "def changed_12025(self, fields):\n    self.changed_11927(fields)\n    fields.insert_field(FloatField(), before='spell_scaling')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@error_handlers.app_errorhandler(401)\ndef page_not_found(error):\n    return (render_template('errors/401.html'), 401)", "buggy_source_code": "@error_handlers.app_errorhandler(400)\ndef page_not_found(error):\n    return (render_template('errors/400.html'), 400)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_detect_simple_anagram(self):\n    self.assertEqual(['ant'], Anagram('tan').match('tan stand at'.split()))", "buggy_source_code": "def test_detect_simple_anagram(self):\n    self.assertEqual(['tan'], Anagram('ant').match('tan stand at'.split()))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef location_id(self):\n    return self.__opts.group_location[1] if self.__opts.gases_schema_id is not None else None", "buggy_source_code": "@property\ndef location_id(self):\n    return self.__opts.group_location[1] if self.__opts.group_location is not None else None", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef group(self):\n    return self.__opts.group_location[0] if self.__opts.gases_schema_id is not None else None", "buggy_source_code": "@property\ndef group(self):\n    return self.__opts.group_location[0] if self.__opts.group_location is not None else None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def find_or_error(elem, path):\n    child_elem = elem.find(path)\n    if child_elem is None:\n        raise ParseError('Cannot find path {} in {}'.format(path, child_elem))\n    return child_elem", "buggy_source_code": "def find_or_error(elem, path):\n    child_elem = elem.find(path)\n    if child_elem is None:\n        raise ParseError('Cannot find path {} in {}'.format(path, elem))\n    return child_elem", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop(self):\n    self.userdata.close()", "buggy_source_code": "def stop(self):\n    self.save_data()", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _register_backup(self, backup):\n    assert self._backups is not None\n    logger.debug('Repository \"%s\": Registering backup \"%s\".', self.name.backup.name)\n    self._backups.append(backup)", "buggy_source_code": "def _register_backup(self, backup):\n    assert self._backups is not None\n    logger.debug('Repository \"%s\": Registering backup \"%s\".', self.name, backup.name)\n    self._backups.append(backup)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def unequip(self, item):\n    self.equipment = [e for e in self.equipment if e != item]\n    self.redraw_equipment()", "buggy_source_code": "def unequip(self, item):\n    self.equipment = [e for e in self.equipment if e != item]\n    self.redraw()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def equip(self, item):\n    self.equipment.append(item)\n    self.redraw_equipment()", "buggy_source_code": "def equip(self, item):\n    self.equipment.append(item)\n    self.redraw()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def reset_all_fields(self):\n    self.header_edit.setPlainText('')\n    self.footer_edit.setPlainText('')", "buggy_source_code": "def reset_all_fields(self):\n    self.header_edit.setText('')\n    self.footer_edit.setText('')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    return smart_text(_('Push Token %(push_token)s for %(user)s') % {'profile': self.user.full_name, 'push_token': self.push_token})", "buggy_source_code": "def __str__(self):\n    return smart_text(_('Push Token %(push_token)s for %(user)s') % {'user': self.user.full_name, 'push_token': self.push_token})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fetch(self, remote=None, prune=True):\n    self.git('fetch', '--prune' if prune else None, remote)", "buggy_source_code": "def fetch(self, remote=None, prune=True):\n    self.git('fetch', '--prune' if prune else None, remote if remote else '--all')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_video_ok(self):\n    url = self._form_api_url('axis-cgi/view/videostatus.cgi?status=%d' % self.camera_id)\n    response_line = self._call_api_oneline_response(url)\n    status = self.parse_parameter_and_value_from_response_line(response_line)[1]\n    return status == 'video'", "buggy_source_code": "def is_video_ok(self):\n    url = self._form_api_url('axis-cgi/view/videostatus.cgi?status=%d' % self.camera_id)\n    response_line = self._read_oneline_response(url)\n    status = self.parse_parameter_and_value_from_response_line(response_line)[1]\n    return status == 'video'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def take_snapshot(self):\n    image_data = self._call_api_binary_response(self._form_api_url('axis-cgi/jpg/image.cgi?camera=%d' % self.camera_id))\n    return image_data", "buggy_source_code": "def take_snapshot(self):\n    image_data = self._read_binary_response(self._form_api_url('axis-cgi/jpg/image.cgi?camera=%d' % self.camera_id))\n    return image_data", "edit_actions": ["update-node"]}
{"fixed_source_code": "def info():\n    import jasy.core.Console as Console\n    print('Jasy %s is a powerful web tooling framework' % __version__)\n    print('Visit %s for details.' % Console.colorize('https://github.com/sebastian-software/jasy', 'underline'))\n    print()", "buggy_source_code": "def info():\n    import jasy.core.Console as Console\n    print('Konstrukteur %s is a static site generator' % __version__)\n    print('Visit %s for details.' % Console.colorize('https://github.com/fastner/konstrukteur', 'underline'))\n    print()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '{} - {}-{} (x{})'.format(weekday_loc[self.weekday], self.start.strftime('%H:%M'), self.end.strftime('%H:%M'))", "buggy_source_code": "def __str__(self):\n    return '{} - {}-{}'.format(weekday_loc[self.weekday], self.start.strftime('%H:%M'), self.end.strftime('%H:%M'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _has_permission(self, policy):\n    has_permission = True\n    policy_check = utils_settings.import_setting('POLICY_CHECK_FUNCTION')\n    if policy_check:\n        has_permission = policy_check(policy, self.request)\n    return has_permission", "buggy_source_code": "def _has_permission(self, policy):\n    has_permission = True\n    policy_check = getattr(settings, 'POLICY_CHECK_FUNCTION', None)\n    if policy_check:\n        has_permission = policy_check(policy, self.request)\n    return has_permission", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task\ndef setup_postgres():\n    createuser()\n    createdb()", "buggy_source_code": "@task(createuser, createdb)\ndef setup_postgres(ctx):\n    print('Postgres user {db_user} and db {db_name} created.'.format(**env))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@task\ndef sh():\n    dj('shell_plus --ipython', pty=True)", "buggy_source_code": "@task\ndef sh(ctx):\n    dj('shell_plus --ipython', pty=True)", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def setup():\n    shelltools.export('HOME', get.workDIR())\n    autotools.configure('--libexecdir=/usr/lib/NetworkManager                          --sysconfdir=/etc                          --localstatedir=/var                          --with-systemdsystemunitdir=/usr/lib/systemd/system                          --with-session-tracking=systemd                          --enable-shared                          --disable-static                          --disable-ppp')\n    shelltools.system('find . -name \"Makefile\" | xargs sed -i \"s@ -Werror@@g\"')", "buggy_source_code": "def setup():\n    shelltools.export('HOME', get.workDIR())\n    autotools.configure('--libexecdir=/usr/lib/NetworkManager                         --sysconfdir=/etc                         --localstatedir=/var                         --with-systemdsystemunitdir=/usr/lib/systemd/system                         --with-session-tracking=systemd                         --enable-shared                         --disable-static                         --disable-ppp')\n    shelltools.system('find . -name \"Makefile\" | xargs sed -i \"s@ -Werror@@g\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def work_finished_cb():\n    print('Finshed updating keyboard')", "buggy_source_code": "def work_finished_cb():\n    print('Finished updating keyboard')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def apply_filter(self, queryobject, cleaned_value):\n    queryobject = queryobject.annotate_with_number_of_examiners().filter(number_of_examiners=int(cleaned_value))\n    return queryobject", "buggy_source_code": "def apply_filter(self, queryobject, cleaned_value):\n    queryobject = queryobject.filter(cached_data__examiner_count=int(cleaned_value))\n    return queryobject", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_find(self):\n    self.assertCodeExecution(\"\\n            print(b''.find(b'a'))\\n            print(b'abcd'.find(b''))\\n            print(b'abcd'.find(b'...'))\\n            print(b'abcd'.find(b'ab'))\\n            print(b'abcd'.find(b'bc'))\\n            print(b'abcd'.find(b'cd'))\\n            print(b'abcd'.find(b'cd', 2))\\n            print(b'abcd'.find(b'ab', 3))\\n            print(b'abcd'.find(b'cd', 2, 3))\\n            print(b'abcd'.find(b'ab', 3, 4))\\n        \")", "buggy_source_code": "def test_find(self):\n    self.assertCodeExecution(\"\\n            print(b''.find(b'a'))\\n            print(b'abcd'.find(b''))\\n            print(b'abcd'.find(b'...'))\\n            print(b'abcd'.find(b'a'))\\n            print(b'abcd'.find(b'b'))\\n            print(b'abcd'.find(b'c'))\\n            print(b'abcd'.find(b'd'))\\n            print(b'abcd'.find(b'ab'))\\n            print(b'abcd'.find(b'bc'))\\n            print(b'abcd'.find(b'cd'))\\n            print(b'abcd'.find(b'cd', 2))\\n            print(b'abcd'.find(b'ab', 3))\\n            print(b'abcd'.find(b'cd', 2, 3))\\n            print(b'abcd'.find(b'ab', 3, 4))\\n        \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def find(self, what):\n    return [p for p in self.partitions if what in p]", "buggy_source_code": "def find(self, what):\n    return [i for (i, p) in enumerate(self.partitions) if what in p]", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def is_done(self):\n    redis_keys = self.redis_client.keys()\n    return all((key in redis_keys for key in ['user:1', 'corplist:user:1', 'user:2', 'corplist:user:2', 'user_index']))", "buggy_source_code": "def is_done(self):\n    redis_keys = self.redis_client.keys()\n    return all((key in redis_keys for key in ['user:0', 'corplist:user:0', 'user:1', 'corplist:user:1', 'user_index']))", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, verbose):\n    self.executablePath = 'python external/executable.py'\n    if verbose:\n        print('Created test executable node.')", "buggy_source_code": "def __init__(self, verbose):\n    self.executablePath = 'python ../python/external/executable.py'\n    if verbose:\n        print('Created test executable node.')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ell(pred, targets):\n    eps = 1e-08\n    pred = tf.clip_by_value(pred, eps, 1 - eps)\n    return tf.reduce_sum(tf.log(pred) * targets)", "buggy_source_code": "def ell(pred, targets):\n    eps = 1e-08\n    pred = tf.clip_by_value(pred, eps, 1 - eps)\n    return -tf.reduce_sum(tf.log(pred) * targets)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def included(self, value):\n    if lower and value < lower:\n        return False\n    if upper and value > upper:\n        return False\n    return True", "buggy_source_code": "def included(self, value):\n    if self.lower and value < self.lower:\n        return False\n    if self.upper and value > self.upper:\n        return False\n    return True", "edit_actions": ["move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def getSolutions(self, bol=True):\n    if bol:\n        solutions = map(lambda x: x + ',', self.completion)\n        return solutions\n    else:\n        return self.completion", "buggy_source_code": "def getSolutions(self, bol=True):\n    if bol:\n        solutions = map(lambda x: x + ', ', self.completion)\n        return solutions\n    else:\n        return self.completion", "edit_actions": ["update-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(path=self.path(ext='ldj'))", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(path=self.path(ext='ldj.gz'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _notify_not_available(self, **kwargs):\n    return", "buggy_source_code": "def _notify_not_available(self, **kwargs):\n    pass", "edit_actions": []}
{"fixed_source_code": "def git_pull_all():\n    local('cd odk_dropbox && git pull origin master', capture=True)\n    local('cd nmis_analysis && git pull origin master', capture=True)\n    local('cd django_eav && git pull origin master', capture=True)", "buggy_source_code": "def git_pull_all():\n    local('cd odk_dropbox && git pull origin master', capture=True)\n    local('cd nmis_analysis && git pull origin master', capture=True)\n    local('cd django-eav && git pull origin master', capture=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def takeStep(self, coords, **kwargs):\n    c = coords[self.srange]\n    c += self.stepsize * (np.random.random(len(c)) - 0.5) * 2.0\n    pass", "buggy_source_code": "def takeStep(self, coords, **kwargs):\n    c = coords[self.srange]\n    c += self.stepsize * (np.random.random(c.shape) - 0.5) * 2.0", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def unwrap_cursor(connection):\n    if hasattr(connection, '_djdt_cursor'):\n        del connection._djdt_cursor\n        del connection.cursor", "buggy_source_code": "def unwrap_cursor(connection):\n    if hasattr(connection, '_graphene_cursor'):\n        del connection._graphene_cursor\n        del connection.cursor", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def begin(self):\n    DEBUG_OUTPUT('BEGIN')\n    self._send_message(PG_F_QUERY, b'BEGIN\\x00')\n    self._process_messages()", "buggy_source_code": "def begin(self):\n    DEBUG_OUTPUT('BEGIN')\n    self._send_message(PG_F_QUERY, b'BEGIN\\x00')\n    self._process_messages(None)", "edit_actions": []}
{"fixed_source_code": "def rollback(self):\n    DEBUG_OUTPUT('ROLLBACK')\n    if self.sock:\n        self._send_message(PG_F_QUERY, b'ROLLBACK\\x00')\n        self._process_messages()\n        self.begin()", "buggy_source_code": "def rollback(self):\n    DEBUG_OUTPUT('ROLLBACK')\n    if self.sock:\n        self._send_message(PG_F_QUERY, b'ROLLBACK\\x00')\n        self._process_messages(None)\n        self.begin()", "edit_actions": []}
{"fixed_source_code": "def commit(self):\n    DEBUG_OUTPUT('COMMIT')\n    if self.sock:\n        self._send_message(PG_F_QUERY, b'COMMIT\\x00')\n        self._process_messages()\n        self.begin()", "buggy_source_code": "def commit(self):\n    DEBUG_OUTPUT('COMMIT')\n    if self.sock:\n        self._send_message(PG_F_QUERY, b'COMMIT\\x00')\n        self._process_messages(None)\n        self.begin()", "edit_actions": []}
{"fixed_source_code": "def test_autofunction_callback(self):\n    self._file_contents_eq('autofunction_callback', u'requestCallback()\\n\\n   Some global callback\\n\\n   Arguments:\\n      * **responseCode** (*number*) –\\n')", "buggy_source_code": "def test_autofunction_callback(self):\n    self._file_contents_eq('autofunction_callback', u'requestCallback(responseCode)\\n\\n   Some global callback\\n\\n   Arguments:\\n      * **responseCode** (*number*) –\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef add_credential_custom_property(attribute, relation):\n    prop = Property()\n    prop.name = attribute_relation\n    prop.value = attribute\n    return prop", "buggy_source_code": "@staticmethod\ndef add_credential_custom_property(attribute, relation):\n    prop = Property()\n    prop.name = relation\n    prop.value = attribute\n    return prop", "edit_actions": ["update-node"]}
{"fixed_source_code": "def item_title(self, item):\n    return '%s  (%s)' % (item.name, item.get_object_name().capitalize())", "buggy_source_code": "def item_title(self, item):\n    return '%s  (%s)' % (item.name, item.get_verbose_name().capitalize())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def items(self, model):\n    N = cyc_settings.CYCLOPE_RSS_LIMIT\n    return model.objects.all().order_by('-creation_date')[:N]", "buggy_source_code": "def items(self, model):\n    N = cyc_settings.CYCLOPE_RSS_LIMIT\n    return model.objects.filter(published=True).order_by('-creation_date')[:N]", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def __init__(self, uploader: 'ArrowUploader'):\n    self.uploader = uploader", "buggy_source_code": "def __init__(self, uploader):\n    self.uploader = uploader", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.side = None\n    self.board_position_log = []\n    self.action_log = []\n    self.next_max_log = []\n    self.probs_log = []\n    self.reward = DRAW_REWARD", "buggy_source_code": "def __init__(self):\n    self.side = None\n    self.board_position_log = []\n    self.action_log = []\n    self.next_max_log = []\n    self.values_log = []\n    self.reward = DRAW_VALUE", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pytest.fixture\ndef appliance_with_providers(appliance_preupdate):\n    appl1 = appliance_preupdate\n    provider_app_crud(VMwareProvider, appl1).setup()\n    provider_app_crud(EC2Provider, appl1).setup()\n    return appliance_preupdate", "buggy_source_code": "@pytest.fixture\ndef appliance_with_providers(appliance_preupdate):\n    appl1 = appliance_preupdate\n    provider_app_crud(VMwareProvider, appl1).setup()\n    provider_app_crud(OpenStackProvider, appl1).setup()\n    return appliance_preupdate", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mount(self):\n    cmd = '/bin/mount -t ext3 ' + self.devidex + 'part1 /hdd'\n    res = system(cmd)\n    return res >> 8", "buggy_source_code": "def mount(self):\n    cmd = '/bin/mount -t ext3 ' + self.devidex + 'part1'\n    res = system(cmd)\n    return res >> 8", "edit_actions": ["update-node"]}
{"fixed_source_code": "def createMovieFolder(self):\n    res = system('mkdir ' + resolveFilename(SCOPE_HDD))\n    return res >> 8", "buggy_source_code": "def createMovieFolder(self):\n    try:\n        makedirs(resolveFilename(SCOPE_HDD))\n    except OSError:\n        return -1\n    return 0", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, container_object_dict):\n    super(BudgetTemplateParser, self).__init__(container_object_dict)\n    self.skipped_rows = {}\n    self.template_parser = self._init_template_parser()", "buggy_source_code": "def __init__(self, container_object_dict):\n    super(BudgetParser, self).__init__(container_object_dict)\n    self.skipped_rows = {}\n    self.template_parser = self._init_template_parser()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def should_be_exec(self, item):\n    retVal = isFile(item) and self.should_file_be_exec(item.path)\n    return retVal", "buggy_source_code": "def should_be_exec(self, item):\n    retVal = item.isFile() and self.should_file_be_exec(item.path)\n    return retVal", "edit_actions": ["update-node", "insert-node", "update-node"]}
{"fixed_source_code": "def set_wall_path(self, in_path):\n    self.cursor.execute(f'UPDATE settings SET set_path to {in_path} where id=1 ')\n    self.db.commit()", "buggy_source_code": "def set_wall_path(self, in_path):\n    self.cursor.execute(f'UPDATE settings SET set_path = \"{in_path}\" where id=1 ')\n    self.db.commit()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef setUpClass(cls):\n    if cls is ControlTestCase:\n        raise ut.SkipTest('In MSIDiagnosticTestCase, skipping base tests')\n    super().setUpClass()\n    cls.f = FauxHDFBuilder()", "buggy_source_code": "@classmethod\ndef setUpClass(cls):\n    if cls is ControlTestCase:\n        raise ut.SkipTest('In ControlTestCase, skipping base tests')\n    super().setUpClass()\n    cls.f = FauxHDFBuilder()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _decode_code_message(self, message):\n    bytecode_list = self._receive_bytecode()\n    message.set(robotEncryption.decrypt(robotEncryption.fromIR(bytecode_list)))", "buggy_source_code": "def _decode_code_message(self, message):\n    bytecode_list = self._receive_bytecode()\n    message.set(self.robotEncryption.decrypt(self.robotEncryption.fromIR(bytecode_list)))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    mcfeely_backend = 'mcfeely.backend.DBBackend'\n    test_sender = 'django.core.mail.backends.locmem.EmailBackend'\n    settings.EMAIL_BACKEND = mcfeely_backend\n    settings.MCFEELY_EMAIL_BACKEND = test_sender\n    self.q = Queue(queue='Test_Queue')\n    self.q.save()", "buggy_source_code": "def setUp(self):\n    mcfeely_backend = 'mcfeely.backend.DbBackend'\n    test_sender = 'django.core.mail.backends.locmem.EmailBackend'\n    settings.EMAIL_BACKEND = mcfeely_backend\n    settings.MCFEELY_EMAIL_BACKEND = test_sender\n    self.q = Queue(queue='Test_Queue')\n    self.q.save()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_read_should_read_empty_data(helper):\n    file_id = random_str()\n    offset = random_int()\n    size = random_int()\n    assert helper.read(file_id, offset, size) == ''", "buggy_source_code": "def test_read_should_read_empty_data(helper):\n    file_id = random_file_id()\n    offset = random_int()\n    size = random_int()\n    assert helper.read(file_id, offset, size) == ''", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_write_should_write_data(helper):\n    file_id = random_str()\n    data = random_str()\n    offset = random_int()\n    assert helper.write(file_id, data, offset) == len(data)", "buggy_source_code": "def test_write_should_write_data(helper):\n    file_id = random_file_id()\n    data = random_str()\n    offset = random_int()\n    assert helper.write(file_id, data, offset) == len(data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_write_should_write_empty_data(helper):\n    file_id = random_str()\n    data = ''\n    offset = 0\n    assert helper.write(file_id, data, offset) == len(data)", "buggy_source_code": "def test_write_should_write_empty_data(helper):\n    file_id = random_file_id()\n    data = ''\n    offset = 0\n    assert helper.write(file_id, data, offset) == len(data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_absolute_url(self):\n    return getattr(settings, 'INVOICING_INVOICE_ABSOLUTE_URL', lambda invoice: reverse('billing:invoice_detail', args=(invoice.pk,)))(self)", "buggy_source_code": "def get_absolute_url(self):\n    return getattr(settings, 'INVOICING_INVOICE_ABSOLUTE_URL', lambda invoice: reverse('invoicing:invoice_detail', args=(invoice.pk,)))(self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def info(self):\n    return _api_scrape(self.json, 1)", "buggy_source_code": "def info(self):\n    return _api_scrape(self.json, 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def info(self):\n    return _api_scrape(self.json, 1)", "buggy_source_code": "def info(self):\n    return _api_scrape(self.json, 0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error_func(self, p, data):\n    (ans,) = self.model(*list(data) + list(p))\n    return ans", "buggy_source_code": "def error_func(self, p, independent_data, dependent_data, sigma_data):\n    jac_args = list(independent_data.values()) + list(p)\n    (ans,) = self.model(*jac_args)\n    return ans", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_xml(self, doc, sEltName):\n    eltFile = doc.createElement(sEltName)\n    eltFile.setAttribute('mtime', self._m_dtMTime.isoformat(' '))\n    return eltFile", "buggy_source_code": "def to_xml(self, doc, sEltName):\n    eltFile = doc.createElement(sEltName)\n    eltFile.setAttribute('mtime', self._m_dtMTime.strftime(self._smc_sDateTimeFormat))\n    return eltFile", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def get_available_categories(self) -> dict:\n    return self._do_request(GET, BASE_URL + '/api/smrt/categories')", "buggy_source_code": "def get_available_categories(self) -> list:\n    return self._do_request(GET, BASE_URL + '/api/smrt/categories')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_invitations(self) -> dict:\n    return self._do_request(GET, BASE_URL + '/api/aff/invitations')", "buggy_source_code": "def get_invitations(self) -> list:\n    return self._do_request(GET, BASE_URL + '/api/aff/invitations')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_true_sections_are_shown(self):\n    template = 'Ready {{#set}}set{{/set}} go!'\n    ret = pystache.render(template, {'set': True})\n    self.assertEquals(ret, 'Ready set go!')", "buggy_source_code": "def test_true_sections_are_shown(self):\n    template = 'Ready {{#set}}set{{/set}} go!'\n    context = {'set': True}\n    self._assert_rendered('Ready set go!', template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_false_sections_are_hidden(self):\n    template = 'Ready {{#set}}set {{/set}}go!'\n    ret = pystache.render(template, {'set': False})\n    self.assertEquals(ret, 'Ready go!')", "buggy_source_code": "def test_false_sections_are_hidden(self):\n    template = 'Ready {{#set}}set {{/set}}go!'\n    context = {'set': False}\n    self._assert_rendered('Ready go!', template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_unicode(self):\n    template = 'Name: {{name}}; Age: {{age}}'\n    ret = pystache.render(template, {'name': u'Henri Poincaré', 'age': 156})\n    self.assertEquals(ret, u'Name: Henri Poincaré; Age: 156')", "buggy_source_code": "def test_unicode(self):\n    template = 'Name: {{name}}; Age: {{age}}'\n    context = {'name': u'Henri Poincaré', 'age': 156}\n    self._assert_rendered(u'Name: Henri Poincaré; Age: 156', template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_render_zero(self):\n    template = 'My value is {{value}}.'\n    ret = pystache.render(template, {'value': 0})\n    self.assertEquals(ret, 'My value is 0.')", "buggy_source_code": "def test_render_zero(self):\n    template = 'My value is {{value}}.'\n    context = {'value': 0}\n    self._assert_rendered('My value is 0.', template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_even_less_basic(self):\n    template = 'I think {{name}} wants a {{thing}}, right {{name}}?'\n    ret = pystache.render(template, {'name': 'Jon', 'thing': 'racecar'})\n    self.assertEquals(ret, 'I think Jon wants a racecar, right Jon?')", "buggy_source_code": "def test_even_less_basic(self):\n    template = 'I think {{name}} wants a {{thing}}, right {{name}}?'\n    context = {'name': 'Jon', 'thing': 'racecar'}\n    self._assert_rendered('I think Jon wants a racecar, right Jon?', template, context)", "edit_actions": ["update-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_tag(self):\n    self.tag('2.0')\n    self.run_snapcraft('snap')\n    self.assertThat('git-test_2.0_amd64.snap', FileExists())", "buggy_source_code": "def test_tag(self):\n    self.tag('2.0')\n    self.run_snapcraft('snap')\n    self.assertThat('git-test_2.0_{}.snap'.format(self.deb_arch), FileExists())", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_whitelist(self):\n    return Whitelist(self.rc)", "buggy_source_code": "def get_whitelist(self):\n    return Whitelist(self._rc)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n    instace.profile.notifications.save()", "buggy_source_code": "@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n    instance.profile.notifications.save()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef getRecentMatchJSON(account_id):\n    matchURL = f'https://na1.api.riotgames.com/lol/match/v3/matchlists/by-account/{account_id}/recent?api_key={config.riot_token}'\n    matchJSON = __doHTTPGetReq(matchURL)\n    return matchJSON", "buggy_source_code": "@staticmethod\ndef getRecentMatchJSON(account_id):\n    matchURL = f'https://na1.api.riotgames.com/lol/match/v3/matchlists/by-account/{account_id}/recent?api_key={config.riot_token}'\n    matchJSON = RiotAPI.__doHTTPGetReq(matchURL)\n    return matchJSON", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@staticmethod\ndef getPlayerJSON(summoner_name):\n    playerURL = f'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/{summoner_name}?api_key={config.riot_token}'\n    playerJSON = __doHTTPGetReq(playerURL)\n    return playerJSON", "buggy_source_code": "@staticmethod\ndef getPlayerJSON(summoner_name):\n    playerURL = f'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/{summoner_name}?api_key={config.riot_token}'\n    playerJSON = RiotAPI.__doHTTPGetReq(playerURL)\n    return playerJSON", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __parse_datetime(self, data):\n    return ItemDate(time.strptime(data, '%Y-%m-%d %H:%M:%S'))", "buggy_source_code": "def __parse_datetime(self, data):\n    return datetime.datetime.strptime(data, '%Y-%m-%d %H:%M:%S')", "edit_actions": ["move-tree", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_dict_format():\n    assert dict_format(test_format_data, test_format_formats) == test_format_result\n    assert dict_format({}, test_format_formats) == None", "buggy_source_code": "def test_dict_format():\n    assert dict_format(test_format_data, test_format_formats) == test_format_result\n    assert dict_format({}, test_format_formats) is None", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __init__(self, name, value=None):\n    self.name = name\n    self.value = value\n    self.id = name", "buggy_source_code": "def __init__(self, name, value=None):\n    self.name = name\n    self.value = value\n    self.id = value", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _url_for_fetch(self, mapping):\n    try:\n        return mapping['pre_processed_url']\n    except KeyError:\n        return mapping['raw_url']", "buggy_source_code": "def _url_for_fetch(self, item):\n    try:\n        return item['pre_processed_url']\n    except KeyError:\n        return item['raw_url']", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def filename_url_pairs(self, year=None):\n    return [(mapping['generated_filename'], self._url_for_fetch(mapping)) for mapping in self.mappings(year)]", "buggy_source_code": "def filename_url_pairs(self, year=None):\n    return [(item['generated_filename'], self._url_for_fetch(item)) for item in self.mappings(year)]", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def invoke(self, args, from_tty):\n    print(eval(args))", "buggy_source_code": "def invoke(self, args, from_tty):\n    print(theCliDumper.fetchVariable(args))", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def setup(self, **kwargs):\n    self.lang = kwargs.get('lang', None)\n    self._load()", "buggy_source_code": "def setup(self, **kwargs):\n    self._lang(kwargs.get('lang', None))\n    self._list([])\n    self._load()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self):\n    return self.list", "buggy_source_code": "def get(self):\n    return self._list()", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def hasKey(self, a, bEncrypted=True):\n    if bEncrypted:\n        return self.hasEncryptedKey(a)\n    else:\n        return self.hasNonEncryptedKey(a)", "buggy_source_code": "def hasKey(self, keyword, bEncrypted=True):\n    if bEncrypted:\n        return self.hasEncryptedKey(keyword)\n    else:\n        return self.hasNonEncryptedKey(keyword)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def hasKeyRecieved(self, a):\n    if self.__CookiesReceived is not None:\n        if a in self.__CookiesReceived:\n            return 1\n    return 0", "buggy_source_code": "def hasKeyRecieved(self, keyword):\n    if self.__CookiesReceived is not None:\n        if keyword in self.__CookiesReceived:\n            return 1\n    return 0", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_stock_ledger_entries(filters):\n    return frappe.db.sql('select\\n\\t\\t\\titem.name, item.item_name, item_group, brand, description, item.stock_uom,\\n\\t\\t\\tactual_qty, posting_date, voucher_type, qty_after_transaction, warehouse\\n\\t\\tfrom `tabStock Ledger Entry` sle,\\n\\t\\t\\t(select name, item_name, description, stock_uom, brand, item_group\\n\\t\\t\\t\\tfrom `tabItem` {item_conditions}) item\\n\\t\\twhere item_code = item.name and\\n\\t\\t\\tcompany = %(company)s and\\n\\t\\t\\tposting_date <= %(to_date)s\\n\\t\\t\\t{sle_conditions}\\n\\t\\t\\torder by posting_date, posting_time, sle.creation'.format(item_conditions=get_item_conditions(filters), sle_conditions=get_sle_conditions(filters)), filters, as_dict=True)", "buggy_source_code": "def get_stock_ledger_entries(filters):\n    return frappe.db.sql('select\\n\\t\\t\\titem.name, item.item_name, item_group, brand, description, item.stock_uom,\\n\\t\\t\\tactual_qty, posting_date, voucher_type, voucher_no, serial_no, batch_no, qty_after_transaction, warehouse\\n\\t\\tfrom `tabStock Ledger Entry` sle,\\n\\t\\t\\t(select name, item_name, description, stock_uom, brand, item_group\\n\\t\\t\\t\\tfrom `tabItem` {item_conditions}) item\\n\\t\\twhere item_code = item.name and\\n\\t\\t\\tcompany = %(company)s and\\n\\t\\t\\tposting_date <= %(to_date)s\\n\\t\\t\\t{sle_conditions}\\n\\t\\t\\torder by posting_date, posting_time, sle.creation, actual_qty'.format(item_conditions=get_item_conditions(filters), sle_conditions=get_sle_conditions(filters)), filters, as_dict=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def message_upgrade_success():\n    xbmc.executebuiltin('XBMC.Notification(%s, %s, %d, %s)' % (ADDONNAME, localise(32013), 15000, ICON))", "buggy_source_code": "def message_upgrade_success():\n    xbmc.executebuiltin('Notification(%s, %s, %d, %s)' % (ADDONNAME, localise(32013), 15000, ICON))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def process_response(self, request, response):\n    response['x-ajax-path'] = request.path\n    return response", "buggy_source_code": "def process_response(self, request, response):\n    response['x-ajax-path'] = urlquote(request.path)\n    return response", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def tag(name='', message=''):\n    local('git checkout master; git pull origin master; git tag -a %(n)s -m %(m)s; git push origin %(n)s' % {'n': name, 'm': message})", "buggy_source_code": "def tag(name='', message=''):\n    local(\"git checkout master; git pull origin master; git tag -a %(n)s -m '%(m)s'; git push origin %(n)s\" % {'n': name, 'm': message})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def close(self):\n    logging.getLogger(__name__).warning('Closing broken database connection.')\n    _local.connection.try_close()\n    del _local.connection", "buggy_source_code": "def close(self):\n    logging.getLogger(__name__).debug('Closing database connection.')\n    _local.connection.try_close()\n    del _local.connection", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_get_numeric_code_default_none(self):\n    self._test_get_numeric_code('snapshot', 'freebsd', None, expected=66, default=None)", "buggy_source_code": "def test_get_numeric_code_default_none(self):\n    self._test_get_numeric_code('', '', '', expected=0, default=None)", "edit_actions": ["update-node", "update-node", "insert-node", "update-node"]}
{"fixed_source_code": "def reset_model(self):\n    self._reset_hand()\n    goal = self.sample_goal()\n    self._set_goal(goal)\n    self._set_block_xy(self.sample_block_xy())\n    return self._get_obs()", "buggy_source_code": "def reset_model(self):\n    self._reset_hand()\n    goal = self.sample_goal()\n    self._set_goal(goal)\n    self._set_obj_xy(self.sample_obj_xy())\n    return self._get_obs()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __hash__(self):\n    return ('%s:%s' % (self.appname, self.pkgname)).__hash__()", "buggy_source_code": "def __hash__(self):\n    return utf8('%s:%s' % (utf8(self.appname), utf8(self.pkgname))).__hash__()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def set_channel_rf_freq(self, channel, rfFreq):\n    Ant.set_channel_rf_freq(self, channel, rfFreq)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def set_channel_rf_freq(self, channel, rfFreq):\n    Ant.set_channel_rf_freq(self, channel, rfFreq)\n    return self.wait_for_response(Message.ID.SET_CHANNEL_RF_FREQ)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_network_key(self, network, key):\n    Ant.set_network_key(self, network, key)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def set_network_key(self, network, key):\n    Ant.set_network_key(self, network, key)\n    return self.wait_for_response(Message.ID.SET_NETWORK_KEY)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def open_channel(self, channel):\n    Ant.open_channel(self, channel)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def open_channel(self, channel):\n    Ant.open_channel(self, channel)\n    return self.wait_for_response(Message.ID.OPEN_CHANNEL)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_channel_search_timeout(self, channel, timeout):\n    Ant.set_channel_search_timeout(self, channel, timeout)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def set_channel_search_timeout(self, channel, timeout):\n    Ant.set_channel_search_timeout(self, channel, timeout)\n    return self.wait_for_response(Message.ID.SET_CHANNEL_SEARCH_TIMEOUT)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_channel_id(self, channel, deviceNum, deviceType, transmissionType):\n    Ant.set_channel_id(self, channel, deviceNum, deviceType, transmissionType)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def set_channel_id(self, channel, deviceNum, deviceType, transmissionType):\n    Ant.set_channel_id(self, channel, deviceNum, deviceType, transmissionType)\n    return self.wait_for_response(Message.ID.SET_CHANNEL_ID)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_search_waveform(self, channel, waveform):\n    Ant.set_search_waveform(self, channel, waveform)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def set_search_waveform(self, channel, waveform):\n    Ant.set_search_waveform(self, channel, waveform)\n    return self.wait_for_response(Message.ID.SET_SEARCH_WAVEFORM)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def reset_system(self):\n    Ant.reset_system(self)\n    return self.wait_for_response(Message.ID.STARTUP_MESSAGE)", "buggy_source_code": "def reset_system(self):\n    Ant.reset_system(self)\n    return self.wait_for_special(Message.ID.STARTUP_MESSAGE)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def assign_channel(self, channel, channelType, networkNumber):\n    Ant.assign_channel(self, channel, channelType, networkNumber)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def assign_channel(self, channel, channelType, networkNumber):\n    Ant.assign_channel(self, channel, channelType, networkNumber)\n    return self.wait_for_response(Message.ID.ASSIGN_CHANNEL)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_channel_period(self, channel, messagePeriod):\n    Ant.set_channel_period(self, channel, messagePeriod)\n    return self.wait_for_response(Message.ID.RESPONSE_CHANNEL)", "buggy_source_code": "def set_channel_period(self, channel, messagePeriod):\n    Ant.set_channel_period(self, channel, messagePeriod)\n    return self.wait_for_response(Message.ID.SET_CHANNEL_PERIOD)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@cherrypy.expose\ndef index(self, K=None, N=None, inp2=None):\n    outstring = '\\n    <!DOCTYPE html> \\n    <html>\\n    <head>\\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\\n    <!-- 載入 brython.js -->\\n    <script type=\"text/javascript\" src=\"/static/Brython3.1.0-20150301-090019/brython.js\"></script>\\n    <script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>\\n    <script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>\\n    </head>\\n    <!-- 啟動 brython() -->\\n    <body onload=\"brython()\">\\n        國立虎尾科技大學，機械設計系二年甲板，協同產品設計，第八組24號的個人網頁<br/>\\n    <a href=\"legoman\">樂高機器人組立</a><br/>\\n    <a href=\"index2\">協同齒輪</a><br/>\\n    <a href=\"geartest\">協同第二次上機期末考個人版</a><br/>\\n    <a href=\"geartest2\">協同第二次上機期末考協同版</a><br/>\\n    <a href=\"CMS\">CMSimply</a><br/>\\n\\n        '\n    return outstring", "buggy_source_code": "@cherrypy.expose\ndef index(self, K=None, N=None, inp2=None):\n    outstring = '\\n    <!DOCTYPE html> \\n    <html>\\n    <head>\\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\\n    <!-- 載入 brython.js -->\\n    <script type=\"text/javascript\" src=\"/static/Brython3.1.0-20150301-090019/brython.js\"></script>\\n    <script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>\\n    <script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>\\n    </head>\\n    <!-- 啟動 brython() -->\\n    <body onload=\"brython()\">\\n        國立虎尾科技大學，機械設計系二年甲板，協同產品設計，第八組24號的個人網頁<br/>\\n    <a href=\"legoman\">樂高機器人組立</a><br/>\\n    <a href=\"index2\">協同齒輪</a><br/>\\n    <a href=\"geartest\">協同第二次上機期末考個人版</a><br/>\\n    <a href=\"geartest3\">協同第二次上機期末考協同版</a><br/>\\n    <a href=\"CMS\">CMSimply</a><br/>\\n\\n        '\n    return outstring", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __post(self, url, data=None):\n    headers = {'Content-Type': 'application/json'}\n    return http._post_with_auth_and_headers(url, data, self.auth, headers)", "buggy_source_code": "def __post(self, url, data=None):\n    headers = {'Content-Type': 'application/json'}\n    return http._post_with_auth_and_head2ers(url, data, self.auth, headers)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef ip(self):\n    addr = self.pk + 1\n    addr0 = 167772160\n    return ipaddress.IPv4Address(addr0 | addr & 16777215)", "buggy_source_code": "@property\ndef ip(self):\n    addr = self.pk + 2\n    addr0 = 167772160\n    return ipaddress.IPv4Address(addr0 | addr & 16777215)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def GetYmax(self):\n    if len(self) == 0:\n        raise ValueError('Attempting to get ymax of empty graph!')\n    return ROOT.TMath.MaxElement(self.GetN(), self.GetY())", "buggy_source_code": "def GetYmax(self):\n    if len(self) == 0:\n        raise ValueError('Attempting to get ymax of empty graph!')\n    return max(list(self.y()))", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def GetXmin(self):\n    if len(self) == 0:\n        raise ValueError('Attemping to get xmin of empty graph')\n    return ROOT.TMath.MinElement(self.GetN(), self.GetX())", "buggy_source_code": "def GetXmin(self):\n    if len(self) == 0:\n        raise ValueError('Attemping to get xmin of empty graph')\n    return min(list(self.x()))", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def GetYmin(self):\n    if len(self) == 0:\n        raise ValueError('Attempting to get ymin of empty graph')\n    return ROOT.TMath.MinElement(self.GetN(), self.GetY())", "buggy_source_code": "def GetYmin(self):\n    if len(self) == 0:\n        raise ValueError('Attempting to get ymin of empty graph')\n    return min(list(self.y()))", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_frequency(self, channel):\n    frequency_str = '{}GHz'.format(int(frequency_lst[str(channel)] / 1000))\n    return frequency_str", "buggy_source_code": "def get_frequency(self, channel):\n    frequency = int(frequency_lst[str(channel)] / 1000)\n    if frequency == 2:\n        frequency = 2.4\n    return '{}GHz'.format(frequency)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getResultGType(self, inSignalMethod):\n    return self._getGType(inSignalMethod.resultType)", "buggy_source_code": "def getResultGType(self, inSignalMethod):\n    return self._getGType(inSignalMethod.result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def delete(self, oid):\n    return self.collection.drop({'_id': oid})", "buggy_source_code": "def delete(self, oid):\n    self.collection.delete_one({'_id': oid})", "edit_actions": ["move-tree", "update-node", "delete-node"]}
{"fixed_source_code": "def task_subdivide(self, orig_args):\n    decorator_name = '@subdivide'\n    error_type = error_task_subdivide\n    self.set_action_type(_task.action_task_subdivide)\n    do_task_subdivide(orig_args, decorator_name, error_type)", "buggy_source_code": "def task_subdivide(self, orig_args):\n    decorator_name = '@subdivide'\n    error_type = error_task_subdivide\n    self.set_action_type(_task.action_task_subdivide)\n    self.do_task_subdivide(orig_args, decorator_name, error_type)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def memory_check():\n    memory = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000000\n    logging.debug('using {:.3f} megabytes of memory'.format(memory))\n    if memory > 100:\n        raise Exception('memory leak')", "buggy_source_code": "def memory_check():\n    memory = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000\n    logging.debug('using {:.0f} megabytes of memory'.format(memory))\n    if memory > 100:\n        raise Exception('memory leak')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "async def sendrawtransaction(self, params):\n    return await self.send_single('sendrawtransaction', params)", "buggy_source_code": "async def sendrawtransaction(self, params):\n    return await self._send_single('sendrawtransaction', params)", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def estimatefee(self, params):\n    return await self.send_single('estimatefee', params)", "buggy_source_code": "async def estimatefee(self, params):\n    return await self._send_single('estimatefee', params)", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def mempool_hashes(self):\n    if self.debug_caught_up:\n        return []\n    return await self.send_single('getrawmempool')", "buggy_source_code": "async def mempool_hashes(self):\n    if self.debug_caught_up:\n        return []\n    return await self._send_single('getrawmempool')", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def relayfee(self):\n    net_info = await self.send_single('getnetworkinfo')\n    return net_info['relayfee']", "buggy_source_code": "async def relayfee(self):\n    net_info = await self._send_single('getnetworkinfo')\n    return net_info['relayfee']", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def block_hex_hashes(self, first, count):\n    params_iterable = ((h,) for h in range(first, first + count))\n    return await self.send_vector('getblockhash', params_iterable)", "buggy_source_code": "async def block_hex_hashes(self, first, count):\n    params_iterable = ((h,) for h in range(first, first + count))\n    return await self._send_vector('getblockhash', params_iterable)", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def height(self):\n    if not self.debug_caught_up:\n        self._height = await self.send_single('getblockcount')\n    return self._height", "buggy_source_code": "async def height(self):\n    if not self.debug_caught_up:\n        self._height = await self._send_single('getblockcount')\n    return self._height", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def getrawtransaction(self, hex_hash):\n    return await self.send_single('getrawtransaction', (hex_hash, 0))", "buggy_source_code": "async def getrawtransaction(self, hex_hash):\n    return await self._send_single('getrawtransaction', (hex_hash, 0))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def deals_with_commodities(account):\n    return 'commodity' in account", "buggy_source_code": "def deals_with_commodities(account):\n    return 'commodities' in account", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, interpreter):\n    self.name = 'cpy2py'\n    self.interpreter = interpreter\n    super(RemoteCpy2PyNotFound, self).__init__(\"No module named 'cpy2py' in %r\" % interpreter)", "buggy_source_code": "def __init__(self, interpreter):\n    self.name = 'cpy2py'\n    self.interpreter = interpreter\n    super(RemoteCpy2PyNotFound, self).__init__(\"No module named 'cpy2py' available for %r\" % interpreter)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def rename_without_extension(self, name):\n    path = self.path.rename_without_extension(name)\n    os.rename(self.path.path, path.path)\n    self.path = path", "buggy_source_code": "def rename_without_extension(self, name):\n    path = self.path.rename_without_extension(name)\n    os.rename(self.path.path, path.path)\n    self._path = path", "edit_actions": ["update-node"]}
{"fixed_source_code": "@route('/')\ndef index(filename):\n    return static_file(filename, root='/')", "buggy_source_code": "@route('/')\ndef index():\n    return static_file('index.html', root='./')", "edit_actions": ["insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def models_update_connector(self, model_id, connector):\n    return self.engine.update_model_connector(model_id, connector)", "buggy_source_code": "def models_update_connector(self, model_id, connector):\n    return self.model_to_dict(self.engine.update_model_connector(model_id, connector))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_no_extra_vars(self):\n    data = dict()\n    result = util.get_install_extra_vars(data)\n    assert not result", "buggy_source_code": "def test_no_extra_vars(self):\n    data = dict()\n    result = util.get_install_extra_vars(data)\n    assert result == {'ceph_stable': True}", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def dimension(self):\n    return self.n_fft // 2 + 1", "buggy_source_code": "def dimension(self):\n    return self.n_fft_ // 2 + 1", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _MAKE_CLOSURE(oparg, operand, codeSource, code):\n    _MAKE_FUNCTION(oparg - 1, operand, codeSource, code)", "buggy_source_code": "def _MAKE_CLOSURE(oparg, operand, codeSource, code):\n    _MAKE_FUNCTION(max(0, oparg - 1), operand, codeSource, code)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def getElementsWithInterface(self, interface):\n    ret = CaseLessDict({})\n    for pool in self.getPoolListObj():\n        ret.update(pool.getElementsWithInterface(self, interface))\n    return ret", "buggy_source_code": "def getElementsWithInterface(self, interface):\n    ret = CaselessDict({})\n    for pool in self.getPoolListObjs():\n        ret.update(pool.getElementsWithInterface(interface))\n    return ret", "edit_actions": ["update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_should_start_a_request_with_localhost(self):\n    self.assertEqual('localhost', self.request.host)", "buggy_source_code": "def test_should_start_a_request_with_localhost(self):\n    self.assertEqual('127.0.0.1', self.request.host)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __int__(self):\n    if not self._const:\n        raise TypeError('Int value of signal can be evaluated because it is not constant expression:', self)\n    else:\n        return int(self._val)", "buggy_source_code": "def __int__(self):\n    if not self._const:\n        raise TypeError('Int value of signal can not be evaluated because it is not constant expression:', self)\n    else:\n        return int(self._val)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __iter__(self):\n    return iter(self.value)", "buggy_source_code": "def __iter__(self):\n    return iter(self.serialize_iterable())", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def getMetricMethod(self):\n    if self.type == 'reg':\n        return Evaluator.meanSqError\n    else:\n        return Evaluator.binaryError", "buggy_source_code": "def getMetricMethod(self):\n    if self.type == 'reg':\n        return Evaluator.meanAbsError\n    else:\n        return Evaluator.binaryError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_male_members(self):\n    return self.get_members().filter(user__player__gender__iexact='M')", "buggy_source_code": "def get_male_members(self):\n    return TeamMember.objects.filter(team=self, user__profile__gender__iexact='M')", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def get_female_members(self):\n    return self.get_members().filter(user__player__gender__iexact='F')", "buggy_source_code": "def get_female_members(self):\n    return TeamMember.objects.filter(team=self, user__profile__gender__iexact='F')", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    if isinstance(other, Command):\n        return self.__key() == other.__key()\n    return False", "buggy_source_code": "def __eq__(self, other):\n    if isinstance(other, CommandBase):\n        return self.__key() == other.__key()\n    return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_equilateral(self):\n    equilateral = False\n    if self.__sideA == self.__sideB == self.__sideC:\n        equilater = True\n    return equilateral", "buggy_source_code": "def is_equilateral(self):\n    equilateral = False\n    if self.__sideA == self.__sideB == self.__sideC:\n        equilateral = True\n    return equilateral", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cam_switch_num(self, car_number=0, group=1, camera=0):\n    return self._broadcast_msg(BroadcastMsg.cam_switch_num, self._pad_car_num(car_number), group, camera)", "buggy_source_code": "def cam_switch_num(self, car_number='1', group=1, camera=0):\n    return self._broadcast_msg(BroadcastMsg.cam_switch_num, self._pad_car_num(car_number), group, camera)", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def scrivi(self, testoh):\n    myfile = open('\\\\homeDictator\\\\static\\\\spesa.txt', 'w')\n    myfile.write(testoh)\n    myfile.flush()\n    myfile.close()", "buggy_source_code": "def scrivi(self, testoh):\n    myfile = open('/homeDictator/static/spesa.txt', 'w')\n    myfile.write(testoh)\n    myfile.flush()\n    myfile.close()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def leggi(self):\n    myfile = open('\\\\homeDictator\\\\static\\\\spesa.txt', 'r')\n    testoh = myfile.read()\n    myfile.close()\n    return testoh", "buggy_source_code": "def leggi(self):\n    myfile = open('/homeDictator/static/spesa.txt', 'r')\n    testoh = myfile.read()\n    myfile.close()\n    return testoh", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(*args, **kwargs):\n    super().__init__(*args, **kwargs)\n    session = aiohttp.ClientSession()\n    startepoch = time.time()", "buggy_source_code": "def __init__(*args, **kwargs):\n    super.__init__(*args, **kwargs)\n    session = aiohttp.ClientSession()\n    startepoch = time.time()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def gen_output_data(model):\n    _doc = minidom.parse('data/totaux.xml')\n    tree = OutNode('root', 'root')\n    handleXml(_doc, tree, model)\n    return tree", "buggy_source_code": "def gen_output_data(model):\n    _doc = minidom.parse('data/totaux.xml')\n    tree = OutNode('root', 'root')\n    handle_output_xml(_doc, tree, model)\n    return tree", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_mime(self):\n    return 'fix/me'", "buggy_source_code": "def get_mime(self):\n    return 'text/xml'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getUrl(self):\n    return 'http://%s:%d%s' % (self.hostname, self.port, self.mountPoint)", "buggy_source_code": "def getUrl(self):\n    return 'http://%s:%d%s/Manifest' % (self.hostname, self.port, self.mountPoint)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_timeout(self, time):\n    if time < 0:\n        raise RuntimeError('Timeout must be non-negative')\n    self.timeout = time\n    return self", "buggy_source_code": "def set_timeout(self, timeout):\n    if timeout < 0:\n        raise RuntimeError('Timeout must be non-negative')\n    self.timeout = timeout\n    return self", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='function')\ndef sample_team_api_key(notify_db, notify_db_session, service=None):\n    return sample_api_key(notify_db, notify_db_session, service, KEY_TYPE_TEAM)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef sample_team_api_key(sample_api_key):\n    service = create_service(check_if_service_exists=True)\n    return create_api_key(service, key_type=KEY_TYPE_TEAM)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture(scope='function')\ndef sample_test_api_key(notify_db, notify_db_session, service=None):\n    return sample_api_key(notify_db, notify_db_session, service, KEY_TYPE_TEST)", "buggy_source_code": "@pytest.fixture(scope='function')\ndef sample_test_api_key(sample_api_key):\n    service = create_service(check_if_service_exists=True)\n    return create_api_key(service, key_type=KEY_TYPE_TEST)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def assign_func_name(f, name):\n    try:\n        f.__name__ = name\n    except Exception as e:\n        f.__name__ = name.decode('utf-8')", "buggy_source_code": "def assign_func_name(f, name):\n    try:\n        f.__name__ = name\n    except Exception as e:\n        f.__name__ = 'b{}'.format(name)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef assigned(self):\n    return map(int, self.assigned_depts.split(',')) if self.assigned_depts else []", "buggy_source_code": "@property\ndef assigned(self):\n    return [int(i) for i in self.assigned_depts.split(',')] if self.assigned_depts else []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef interests_list(self):\n    return map(int, self.interests.split(',')) if self.interests else []", "buggy_source_code": "@property\ndef interests_list(self):\n    return [int(i) for i in self.interests.split(',')] if self.interests else []", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_request_id(self):\n    return '%s-%i' % (self.method.decode('ascii'), self.request_seq)", "buggy_source_code": "def get_request_id(self):\n    return '%s-%i' % (self.get_method(), self.request_seq)", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, **options):\n    super().__init__(**options)\n    self._outer_box = None\n    self._in_question = False", "buggy_source_code": "def __init__(self, **options):\n    super().__init__(**options)\n    self._outer_boxes = []\n    self._in_question = False", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "@staticmethod\ndef format_ports(ports):\n    return [format_port(port) for port in ports]", "buggy_source_code": "@staticmethod\ndef format_ports(ports):\n    return [PortHelper.format_port(port) for port in ports]", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@api.depends('generate_lead_from_alias')\ndef _compute_crm_alias_prefix(self):\n    for setting in self:\n        setting.crm_alias_prefix = setting.crm_alias_prefix or 'info' if setting.generate_lead_from_alias else False", "buggy_source_code": "@api.depends('generate_lead_from_alias')\ndef _compute_crm_alias_prefix(self):\n    for setting in self:\n        setting.crm_alias_prefix = setting.crm_alias_prefix or 'contact' if setting.generate_lead_from_alias else False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def modelo_inform(cursor, modelo):\n    sql = \"\\n        SELECT\\n          re.REF\\n        , COALESCE( r.DESCR_REFERENCIA, ' ' ) DESCR\\n        , CASE WHEN r.REFERENCIA <= '99999' THEN 'PA'\\n          WHEN r.REFERENCIA like 'A%' or r.REFERENCIA like 'B%' THEN 'PG'\\n          WHEN r.REFERENCIA like 'Z%' THEN 'MP'\\n          ELSE 'MD'\\n          END TIPO\\n        , COALESCE( r.COLECAO_CLIENTE, ' ' ) COLECAO_CLIENTE\\n        , r.CGC_CLIENTE_9 CNPJ9\\n        , r.CGC_CLIENTE_4 CNPJ4\\n        , r.CGC_CLIENTE_2 CNPJ2\\n        , cl.NOME_CLIENTE NOME\\n        , COALESCE( r.RESPONSAVEL, ' ' ) STATUS\\n        FROM\\n        (\\n        SELECT\\n          r.REFERENCIA REF\\n        FROM basi_030 r\\n        WHERE regexp_replace(r.REFERENCIA, '[^0-9]', '')\\n              IN ('{}', '0{}', '00{}')\\n          AND r.REFERENCIA < 'C0000'\\n          AND r.NIVEL_ESTRUTURA = 1\\n        UNION\\n        SELECT DISTINCT\\n          ec.GRUPO_COMP REF\\n        FROM BASI_050 ec\\n        WHERE ec.NIVEL_ITEM = 1\\n          AND ec.NIVEL_COMP = 1\\n          AND regexp_replace(ec.GRUPO_ITEM, '[^0-9]', '')\\n              IN ('{}', '0{}', '00{}')\\n          AND ec.GRUPO_ITEM < 'C0000'\\n        ) re\\n        JOIN basi_030 r\\n          ON r.REFERENCIA = re.REF\\n         AND r.NIVEL_ESTRUTURA = 1\\n        JOIN PEDI_010 cl\\n          ON cl.CGC_9 = r.CGC_CLIENTE_9\\n         and cl.CGC_4 = r.CGC_CLIENTE_4\\n        ORDER BY\\n          NLSSORT(re.REF,'NLS_SORT=BINARY_AI')\\n    \"\n    sql = sql.format(modelo, modelo, modelo, modelo, modelo, modelo)\n    cursor.execute(sql)\n    return rows_to_dict_list(cursor)", "buggy_source_code": "def modelo_inform(cursor, modelo):\n    sql = \"\\n        SELECT\\n          re.REF\\n        , COALESCE( r.DESCR_REFERENCIA, ' ' ) DESCR\\n        , CASE WHEN r.REFERENCIA <= '99999' THEN 'PA'\\n          WHEN r.REFERENCIA like 'A%' or r.REFERENCIA like 'B%' THEN 'PG'\\n          WHEN r.REFERENCIA like 'Z%' THEN 'MP'\\n          ELSE 'MD'\\n          END TIPO\\n        , COALESCE( r.COLECAO_CLIENTE, ' ' ) COLECAO_CLIENTE\\n        , r.CGC_CLIENTE_9 CNPJ9\\n        , r.CGC_CLIENTE_4 CNPJ4\\n        , r.CGC_CLIENTE_2 CNPJ2\\n        , cl.NOME_CLIENTE NOME\\n        , COALESCE( r.RESPONSAVEL, ' ' ) STATUS\\n        FROM\\n        (\\n        SELECT\\n          r.REFERENCIA REF\\n        FROM basi_030 r\\n        WHERE regexp_replace(r.REFERENCIA, '[^0-9]', '')\\n              IN ('{}', '0{}', '00{}')\\n          AND r.REFERENCIA < 'C0000'\\n          AND r.NIVEL_ESTRUTURA = 1\\n        UNION\\n        SELECT DISTINCT\\n          ec.GRUPO_COMP REF\\n        FROM BASI_050 ec\\n        WHERE ec.NIVEL_ITEM = 1\\n          AND ec.NIVEL_COMP = 1\\n          AND regexp_replace(ec.GRUPO_ITEM, '[^0-9]', '')\\n              IN ('{}', '0{}', '00{}')\\n          AND ec.GRUPO_ITEM < 'C0000'\\n        ) re\\n        JOIN basi_030 r\\n          ON r.REFERENCIA = re.REF\\n         AND r.NIVEL_ESTRUTURA = 1\\n        JOIN PEDI_010 cl\\n          ON cl.CGC_9 = r.CGC_CLIENTE_9\\n         and cl.CGC_4 = r.CGC_CLIENTE_4\\n         and cl.CGC_2 = r.CGC_CLIENTE_2\\n        ORDER BY\\n          NLSSORT(re.REF,'NLS_SORT=BINARY_AI')\\n    \"\n    sql = sql.format(modelo, modelo, modelo, modelo, modelo, modelo)\n    cursor.execute(sql)\n    return rows_to_dict_list(cursor)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __getattr__(self, k):\n    self.uriparts += (k,)\n    return self", "buggy_source_code": "def __getattr__(self, k):\n    self.missing_attrs += (k,)\n    return self", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _reset_uri(self):\n    self.requested_uri = self.uri\n    self.uri = ''\n    self.uriparts = ()", "buggy_source_code": "def _reset_uri(self):\n    self.requested_uri = self.uri\n    self.uri = ''\n    self.missing_attrs = ()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def service_logs(service, follow=True):\n    if follow:\n        sudo('journalctl -u %s -f' % (service,))\n    else:\n        sudo('journalctl -u %s -n 100' % (service,))", "buggy_source_code": "def service_logs(service, follow=True):\n    if follow is True:\n        sudo('journalctl -u %s -f' % (service,))\n    else:\n        sudo('journalctl -u %s -n 100' % (service,))", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def test_product_constructor_failure(self):\n    self.assertRaises(ValueError, epr.Product, '')", "buggy_source_code": "def test_product_constructor_failure(self):\n    self.assertRaises(epr.EPRError, epr.Product, '')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def test_direct_Product_instantiation(self):\n    self.assertRaises(ValueError, epr.Product, 'filename')", "buggy_source_code": "def test_direct_Product_instantiation(self):\n    self.assertRaises(epr.EPRError, epr.Product, 'filename')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef _flush_symbol_cache_callback(self, event):\n    gdb.execute('maint flush-symbol-cache')", "buggy_source_code": "@classmethod\ndef _flush_symbol_cache_callback(cls, event):\n    gdb.execute('maint flush-symbol-cache')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def items(self, obj):\n    return Post.objects.all().order_by('-created')", "buggy_source_code": "def items(self, obj):\n    return Post.active_objects.all().order_by('-created')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_connection_blocked(self, name):\n    LOGGER.debug('Connection %s blocked', name)\n    if self.is_processing:\n        self.consumer.on_blocked(name)", "buggy_source_code": "def on_connection_blocked(self, name):\n    LOGGER.warning('Connection %s blocked', name)\n    if self.is_processing:\n        self.consumer.on_blocked(name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_connection_unblocked(self, name):\n    LOGGER.debug('Connection %s unblocked', name)\n    if self.is_processing:\n        self.consumer.on_blocked(name)", "buggy_source_code": "def on_connection_unblocked(self, name):\n    LOGGER.info('Connection %s unblocked', name)\n    if self.is_processing:\n        self.consumer.on_blocked(name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cancel(self):\n    if self.alg.isRunning():\n        self.alg.cancel()\n        self.signals.error.emit(self.ref)", "buggy_source_code": "def cancel(self):\n    if self.alg.isRunning():\n        self.alg.cancel()\n        self.signals.finished.emit(self.ref, 1)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_accounts_list(self):\n    if not self.is_on_page(AccountsPage):\n        self.home()\n    return self.page.get_list()", "buggy_source_code": "def get_accounts_list(self):\n    if not self.is_on_page(AccountsPage):\n        self.login()\n    return self.page.get_list()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_country_code(self, queryset, name, value):\n    return queryset.filter(country_code=value and value.upper())", "buggy_source_code": "def get_country_code(self, queryset, name, value):\n    return queryset.filter(locations__admin_level_1__country_code=value and value.upper())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unload_ipython_extension(ip):\n    notebook_extension_fn._loaded = False", "buggy_source_code": "def unload_ipython_extension(ip):\n    notebook_extension._loaded = False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_type_ref(self):\n    menu_on(self.page('main.cpp'), 'numba', {'html': 'Jump to definition', 'href': '/code/source/extern.c#5'}, {'html': 'Find references', 'href': '/code/search?q=%2Btype-ref%3Anumba'})", "buggy_source_code": "def test_type_ref(self):\n    menu_on(self.page('main.cpp'), 'MyClass', {'html': 'Jump to definition', 'href': '/code/source/extern.c#14'}, {'html': 'Find declarations', 'href': '/code/search?q=%2Btype-decl%3AMyClass'})", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _clear_rects(self):\n    self.canvas.clear()\n    self.texture_rectangles = {}", "buggy_source_code": "def _clear_rects(self):\n    for rect in self._texture_rectangles.values():\n        self.group.remove(rect)\n    self._texture_rectangles = {}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _merge_two(self, collection_a, collection_b):\n    return ee.ImageCollection(collection_a.merge(collection_b).set('bands', normalized_band_names))", "buggy_source_code": "def _merge_two(self, collection_a, collection_b):\n    return ee.ImageCollection(collection_a.merge(collection_b).set('bands', constants.normalized_band_names))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def convert_to_messybrainz_json(data):\n    serialized = json.dumps(final_data, sort_keys=True, separators=(',', ':'))\n    return (serialized, serialized.lower())", "buggy_source_code": "def convert_to_messybrainz_json(data):\n    serialized = json.dumps(data, sort_keys=True, separators=(',', ':'))\n    return (serialized, serialized.lower())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def element_exists(self, css_selector):\n    try:\n        self.driver.find_element_by_css_selector(css_selector)\n        return True\n    except common.exceptions.NoSuchElementException as no_such:\n        return False", "buggy_source_code": "def element_exists(self, css_selector):\n    try:\n        self.driver.find_element_by_css_selector(css_selector)\n        return True\n    except common.exceptions.NoSuchElementException:\n        return False", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@app.route('/')\ndef page_home():\n    if 'username' not in session:\n        return abort(403)\n    else:\n        return redirect(url_for('page_dashboard'))", "buggy_source_code": "@app.route('/')\ndef page_home():\n    if 'username' not in session:\n        return redirect(url_for('page_login'))\n    else:\n        return redirect(url_for('page_dashboard'))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node"]}
{"fixed_source_code": "def peekinput(self):\n    if not self.inputqueue:\n        self.inputqueue.appendleft(self.getuserinput())\n    return self.inputqueue[-1]", "buggy_source_code": "def peekinput(self):\n    if not self.inputqueue:\n        self.inputqueue.appendleft(self._getuserinput())\n    return self.inputqueue[-1]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate_date_in_past(value):\n    if value > date.today():\n        raise ValidationError('Please select a past date or today as the valid date.')", "buggy_source_code": "def validate_date_in_past(value):\n    if value > date.today():\n        raise ValidationError('Please select a valid date on or before today.')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_qbatch_help():\n    p = command_pipe('qbatch --help')\n    (out, err) = p.communicate(''.encode('UTF-8'))\n    assert p.returncode == 0, err", "buggy_source_code": "def test_qbatch_help():\n    p = command_pipe('qbatch --help')\n    (out, err) = p.communicate(''.encode())\n    assert p.returncode == 0, err", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def command_pipe(command):\n    return Popen(shlex.split(command), stdin=PIPE, stdout=PIPE, stderr=PIPE)", "buggy_source_code": "def command_pipe(command):\n    return Popen(shlex.split(command), stdin=PIPE, stdout=PIPE, stderr=STDOUT)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def subscribe_all_foreign(self):\n    self.subscribe_foreign('plugins', 'plugin_stoped', self.on_plugin_changed)\n    self.subscribe_foreign('plugins', 'plugin_started', self.on_plugin_changed)", "buggy_source_code": "def subscribe_all_foreign(self):\n    self.subscribe_foreign('plugins', 'plugin_stopped', self.on_plugin_changed)\n    self.subscribe_foreign('plugins', 'plugin_started', self.on_plugin_changed)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cancel_payment_for_rsvp(payment):\n    try:\n        rsvp = payment.rsvp\n    except RSVP.DoesNotExist:\n        pass\n    rsvp.status = RSVP.STATUS_CANCELED\n    rsvp.save()\n    return rsvp", "buggy_source_code": "def cancel_payment_for_rsvp(payment):\n    try:\n        rsvp = payment.rsvp\n    except RSVP.DoesNotExist:\n        return\n    rsvp.status = RSVP.STATUS_CANCELED\n    rsvp.save()\n    return rsvp", "edit_actions": []}
{"fixed_source_code": "@property\ndef PROJECT_ID(self):\n    return self.__gcloud_project_id", "buggy_source_code": "@property\ndef PROJECT_ID(self):\n    return self._gcloud_project_id", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _maybeCancel(self, cancel):\n    if cancel:\n        self.cancel('killing job by user request')\n    else:\n        logging.debug('not cancelling')", "buggy_source_code": "def _maybeCancel(self, cancel):\n    if cancel:\n        self.cancel('killing job by user request')\n    else:\n        self.logger.debug('running job id %s', self.job_id)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_should_refuse_unspecified_list(self):\n    parameter = Parameter('foo', Parameter.POSITIONAL_OR_KEYWORD, annotation=list)\n    with self.assertRaises(TypeError):\n        PycksonAttribute.from_parameter(parameter)", "buggy_source_code": "def test_should_refuse_unspecified_list(self):\n    parameter = Parameter('foo', Parameter.POSITIONAL_OR_KEYWORD, annotation=list)\n    with self.assertRaises(TypeError):\n        build_pyckson_attribute(parameter)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_should_not_accept_untyped_parameter(self):\n    parameter = Parameter('foo', Parameter.POSITIONAL_OR_KEYWORD)\n    with self.assertRaises(TypeError):\n        PycksonAttribute.from_parameter(parameter)", "buggy_source_code": "def test_should_not_accept_untyped_parameter(self):\n    parameter = Parameter('foo', Parameter.POSITIONAL_OR_KEYWORD)\n    with self.assertRaises(TypeError):\n        build_pyckson_attribute(parameter)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_should_not_accept_positional_only_parameter(self):\n    parameter = Parameter('foo', Parameter.POSITIONAL_ONLY, annotation=int)\n    with self.assertRaises(TypeError):\n        PycksonAttribute.from_parameter(parameter)", "buggy_source_code": "def test_should_not_accept_positional_only_parameter(self):\n    parameter = Parameter('foo', Parameter.POSITIONAL_ONLY, annotation=int)\n    with self.assertRaises(TypeError):\n        build_pyckson_attribute(parameter)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_should_not_accept_var_positionalparameter(self):\n    parameter = Parameter('foo', Parameter.VAR_POSITIONAL, annotation=int)\n    with self.assertRaises(TypeError):\n        PycksonAttribute.from_parameter(parameter)", "buggy_source_code": "def test_should_not_accept_var_positionalparameter(self):\n    parameter = Parameter('foo', Parameter.VAR_POSITIONAL, annotation=int)\n    with self.assertRaises(TypeError):\n        build_pyckson_attribute(parameter)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _build_params(self, q, args):\n    params = {}\n    params.update(args)\n    if q is not None:\n        params.update(q)\n    return params", "buggy_source_code": "def _build_params(self, query, args):\n    params = {}\n    params.update(args)\n    if query is not None:\n        params['q'] = query\n    return params", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_zones_of_account(self, account_name, q=None, **kwargs):\n    uri = '/v1/accounts/' + account_name + '/zones'\n    params = self._build_params(q, kwargs)\n    return self._get(uri, params)", "buggy_source_code": "def get_zones_of_account(self, account_name, query=None, **kwargs):\n    uri = '/v1/accounts/' + account_name + '/zones'\n    params = self._build_params(query, kwargs)\n    return self._get(uri, params)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _get_transaction_query_body(self, method, url, data={}):\n    return {'method': method.upper(), 'uri': url, 'body': data}", "buggy_source_code": "def _get_transaction_query_body(self, method, url, data=None):\n    return {'method': method.upper(), 'uri': url, 'body': data or {}}", "edit_actions": ["insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "@contextmanager\ndef get_iframe(self, id):\n    self.driver.switch_to_frame(id)\n    try:\n        yield self\n    finally:\n        self.driver.switch_to_frame(None)", "buggy_source_code": "@contextmanager\ndef get_iframe(self, id):\n    self.driver.switch_to.frame(id)\n    try:\n        yield self\n    finally:\n        self.driver.switch_to.frame(None)", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def test__generator__generate__no_tasks():\n    Generator(mock.sentinel.MODEL, mock.sentinel.FOLDERPATH).generate()", "buggy_source_code": "def test__generator__generate__no_tasks():\n    Generator().generate(mock.sentinel.MODEL, mock.sentinel.OUTFOLDER)", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.socketDict = {}\n    self.peerDict = {}", "buggy_source_code": "def __init__(self):\n    self.peerList = []\n    self.Stopper = False\n    self.printStopper = False", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __eq__(self, y):\n    return md5.new(self._file).digest() == md5.new(y._file).digest()", "buggy_source_code": "def __eq__(self, y):\n    return hashlib.md5(self._file).hexdigest() == hashlib.md5(y._file).hexdigest()", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self):\n    super(SwiftKittenEventListener, self).__init__()\n    SwiftKittenEventListener.shared_instance = self\n    self.logger.setLevel(logging.DEBUG)", "buggy_source_code": "def __init__(self):\n    super(SwiftKittenEventListener, self).__init__()\n    SwiftKittenEventListener.shared_instance = self\n    self.logger.setLevel(logging.WARN)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def initialize(self):\n    self.weight.data.fill_(1)", "buggy_source_code": "def initialize(self):\n    self.bias.data.fill_(0.0)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def strerror(rc):\n    try:\n        return _return_codes[rc][1]\n    except IndexError:\n        return None", "buggy_source_code": "def strerror(rc):\n    try:\n        return _return_codes[rc][1]\n    except KeyError:\n        return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def trigger_to_code(item):\n    codes = {'leftTrigger': '6', 'rightTrigger': '7'}\n    trigger = item[2].strip()\n    return item + (codes[trigger],)", "buggy_source_code": "def trigger_to_code(question_item):\n    codes = {'leftTrigger': '6', 'rightTrigger': '7'}\n    trigger = question_item[2].strip()\n    return question_item + (codes[trigger],)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _formatFileName(self):\n    return '%s%s' % (self.prefix, self.count)", "buggy_source_code": "def _formatFileName(self):\n    return '%s%03d' % (self.prefix, self.count)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_synodic():\n    rot = diff_rot(10, 30 * u.deg, rot_type='howard', frame_time='synodic')\n    assert rot == 126.9656 * u.deg", "buggy_source_code": "def test_synodic():\n    rot = diff_rot(10 * seconds_per_day, 30 * u.deg, rot_type='howard', frame_time='synodic')\n    assert rot == 126.9656 * u.deg", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@register.inclusion_tag('figure_gridobj.html')\ndef show_figure(figure):\n    return {'figure': figure}", "buggy_source_code": "@register.inclusion_tag('anime/figure_gridobj.html')\ndef show_figure(figure):\n    return {'figure': figure}", "edit_actions": ["update-node"]}
{"fixed_source_code": "@register.inclusion_tag('anime_gridobj.html')\ndef show_anime(anime):\n    return {'anime': anime}", "buggy_source_code": "@register.inclusion_tag('anime/anime_gridobj.html')\ndef show_anime(anime):\n    return {'anime': anime}", "edit_actions": ["update-node"]}
{"fixed_source_code": "@register.inclusion_tag('content_rows.html')\ndef show_content_rows(series_list, nofigs_list):\n    return {'series_list': series_list, 'nofigs_list': nofigs_list}", "buggy_source_code": "@register.inclusion_tag('anime/content_rows.html')\ndef show_content_rows(series_list, nofigs_list):\n    return {'series_list': series_list, 'nofigs_list': nofigs_list}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _compare_flux_distributions(flux_dist1, flux_dist2, self_key='A', other_key='B'):\n    assert isinstance(flux_dist1, FluxDistributionResult)\n    assert isinstance(flux_dist2, FluxDistributionResult)\n    return FluxDistributionComparison(flux_dist1, flux_dist2, self_key, other_key)", "buggy_source_code": "def _compare_flux_distributions(flux_dist1, flux_dist2, self_key='A', other_key='B'):\n    assert isinstance(flux_dist1, FluxDistributionResult)\n    assert isinstance(flux_dist2, FluxDistributionResult)\n    return FluxDistributionDiff(flux_dist1, flux_dist2, self_key, other_key)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, time):\n    self.seconds = self._convert_to_seconds(time)", "buggy_source_code": "def __init__(self, time):\n    self.seconds = self._convert_time_to_seconds(time)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, date, input_format=None):\n    self.seconds = self._convert_to_seconds(date, input_format)", "buggy_source_code": "def __init__(self, date, input_format=None):\n    self.seconds = self._convert_date_to_seconds(date, input_format)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_doctest_flag_disabled_include_file_exclude_file_error(self):\n    options = Options(builtins=None, doctests=False, include_in_doctest='./cookies.txt', exclude_from_doctest='./cookies.txt,cake_yuck.txt')\n    with self.assertRaises(ValueError):\n        FlakesChecker.parse_options(options)", "buggy_source_code": "def test_doctest_flag_disabled_include_file_exclude_file_error(self):\n    options = Options(builtins=None, doctests=False, include_in_doctest='./cookies.txt', exclude_from_doctest='./cookies.txt,cake_yuck.txt')\n    self.assertRaises(ValueError, FlakesChecker.parse_options, options)", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def navigate_to(self, custom_url=None):\n    url_to_use = self.url if custom_url is None else custom_url\n    if self._driver.current_url != url_to_use:\n        self._driver.get(url_to_use)\n    return self", "buggy_source_code": "def navigate_to(self, custom_url=None):\n    url_to_use = self.url if custom_url is None else custom_url\n    selenium_utils.open_url(self._driver, url_to_use)\n    return self", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture\ndef conn(request, loop, dsn):\n    return _connect(loop, dsn, request.addfinalizer)", "buggy_source_code": "@pytest.yield_fixture\ndef conn(request, loop, dsn):\n    connection = loop.run_until_complete(_connect(loop, dsn))\n    yield connection\n    loop.run_until_complete(connection.close())", "edit_actions": ["insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def logHandler(self, req):\n    log_debug(3)\n    return apache.OK", "buggy_source_code": "@staticmethod\ndef logHandler(_req):\n    log_debug(3)\n    return apache.OK", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_document_endpoint_eid_not_existing(client):\n    (_, res) = client.get('/document/346')\n    assert res.status == 404\n    assert 'error' in res.json()", "buggy_source_code": "def test_document_endpoint_eid_not_existing(client):\n    (_, res) = client.get('/document/346')\n    assert res.status == 404\n    assert 'message' in res.json()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def moveEast(self, initialMovement=True, movementToken=None, force=1):\n    self.moveDirection('east', force, initialMovement, movementBlock)", "buggy_source_code": "def moveEast(self, initialMovement=True, movementBlock=set(), force=1):\n    self.moveDirection('east', force, initialMovement, movementBlock)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_progress_display_name(self):\n    run_tracker = self.create_with_pipeline_step()\n    self.add_input(run_tracker)\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('.-.-Fasta2CSV on TestFASTA', progress)", "buggy_source_code": "def test_run_progress_display_name(self):\n    run_tracker = self.create_with_pipeline_step()\n    self.add_input(run_tracker)\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('Fasta2CSV on TestFASTA', progress['name'])", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_progress_started_steps(self):\n    run_tracker = self.create_with_started_run_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('+-.-Fasta2CSV', progress)", "buggy_source_code": "def test_run_progress_started_steps(self):\n    run_tracker = self.create_with_started_run_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('+-.', progress['status'])", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_progress_ready(self):\n    run_tracker = self.create_with_run_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual(':-.-Fasta2CSV', progress)", "buggy_source_code": "def test_run_progress_ready(self):\n    run_tracker = self.create_with_run_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual(':-.', progress['status'])", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_run_progress_completed_steps(self):\n    run_tracker = self.create_with_completed_run_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('*-.-Fasta2CSV', progress)", "buggy_source_code": "def test_run_progress_completed_steps(self):\n    run_tracker = self.create_with_completed_run_step()\n    progress = run_tracker.get_run_progress()\n    self.assertSequenceEqual('*-.', progress['status'])", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_get_current_kernel_version(self):\n    assert len(roller.get_current_kernel_version().split('.')) in [2, 3]", "buggy_source_code": "def test_get_current_kernel_version(self):\n    assert len(roller.get_current_kernel_version().split('.')) > 1", "edit_actions": ["update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update_children():\n    children = json.load(open('/children_by_name.json'))\n    for child in children.items():\n        update_child(child['inspect']['Id'])", "buggy_source_code": "def update_children():\n    children = json.load(open('/children_by_name.json'))\n    for child in children.values():\n        update_child(child['inspect']['Id'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "@application.route('/index', methods=['GET'])\ndef index():\n    return render_template('portfolio.html', title='mounds')", "buggy_source_code": "@application.route('/index', methods=['GET'])\ndef index():\n    return render_template('portfolio.html', title='mounds makes')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@register.filter(is_safe=True)\ndef gravatar(user, arg='80,False'):\n    return gravatar_from_email(user.email, user.username, arg)", "buggy_source_code": "@register.inclusion_tag('inc/dummy.haml')\ndef gravatar(user, size=80, itemprop=False):\n    return gravatar_from_email(user.email, user.username, size, itemprop)", "edit_actions": ["insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_element(self, idx):\n    ptr = self._get_element_ptr(idx)\n    return self.builder.load(ptr)", "buggy_source_code": "def _get_element(self, idx):\n    indices = map(const_int, [0, _head_len + idx])\n    ptr = self.builder.gep(self.pyarray_ptr, indices)\n    return ptr", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return 'concat(%s)' % [repr((expr for expr in self.exprs))]", "buggy_source_code": "def __repr__(self):\n    return 'concat(%s)' % ', '.join([repr(expr) for expr in self.exprs])", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def loop_worker(self):\n    if self._what_to_run in ['csr', 'both']:\n        self.csr_run()\n    if self._what_to_run in ['nfvbench', 'both']:\n        self.nfvbench_run()", "buggy_source_code": "def loop_worker(self):\n    if self.what_to_run in ['csr', 'both']:\n        self.csr_run()\n    if self.what_to_run in ['nfvbench', 'both']:\n        self.nfvbench_run()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def setUp(self):\n    FirefoxTestCase.setUp(self)\n    self.urls = ['https://summitbook.mozilla.org', 'https://ssl-ev.mozqa.com/', 'http://www.mozqa.com']\n    self.identity_box = self.browser.navbar.locationbar.identity_popup.box", "buggy_source_code": "def setUp(self):\n    FirefoxTestCase.setUp(self)\n    self.urls = ['https://ssl-expired.mozqa.com', 'https://ssl-ev.mozqa.com/', 'http://www.mozqa.com']\n    self.identity_box = self.browser.navbar.locationbar.identity_popup.box", "edit_actions": ["update-node"]}
{"fixed_source_code": "def put_files_in_hadoop(directory_path_processed):\n    call(['hdfs', 'dfs', '-fs', 'mkdir', '/user/kanagre/compressed_pubmed_data/'])\n    call(['hdfs', 'dfs', '-fs', 'put', directory_path_processed + '*.zip', '/user/kanagre/compressed_pubmed_data/'])", "buggy_source_code": "def put_files_in_hadoop(directory_path_compressed):\n    hadoop_directory = '/user/kanagre/'\n    call(['hdfs', 'dfs', '-put', directory_path_compressed, hadoop_directory])", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "update-node", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def cronosDebug(msg, logfile):\n    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s: %(message)s', filename=settings.LOGDIR + logfile, filemode='w')\n    logging.debug(msg)", "buggy_source_code": "def cronosDebug(msg, logfile):\n    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s: %(message)s', filename=settings.LOGDIR + logfile, filemode='a+')\n    logging.debug(msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _route(self, src, cmd, arg):\n    if len(src) == 0:\n        self.__handle(cmd, arg)\n    else:\n        raise Exception('unroutable')", "buggy_source_code": "def _route(self, src, cmd, arg):\n    if len(src) == 0:\n        self._handle(cmd, arg)\n    else:\n        raise Exception('unroutable')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _server_get_job_status(self, user_id):\n    global _SOM_SERVER\n    return _SOM_SERVER.jobs.status", "buggy_source_code": "def _server_get_job_status(self, user_id=None):\n    global _SOM_SERVER\n    return _SOM_SERVER.jobs.status", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def harmonize_vf_families(ttfonts):\n    family_styles = _get_vf_styles(ttfonts)\n    for ttfont in ttfonts:\n        add_other_vf_styles_to_nametable(ttfont, family_styles)\n        set_stat_for_font_in_family(ttfont, family_styles)", "buggy_source_code": "def harmonize_vf_families(ttfonts):\n    family_styles = _get_vf_types(ttfonts)\n    for ttfont in ttfonts:\n        add_other_vf_styles_to_nametable(ttfont, family_styles)\n        set_stat_for_font_in_family(ttfont, family_styles)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def starting(self):\n    print('OESS FVD Monitoring')\n    print('{:24} {:4}  {:24} {:4}  {:26}'.format('DPID', 'Port', 'Neighbor', 'Port', 'Last Seen'))", "buggy_source_code": "def starting(self):\n    print('OESS FVD Monitoring')\n    print('%-24s %-4s %-24s %-4s %s' % ('DPID', 'Port', 'Neighbor', 'Port', 'Last Seen'))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "async def get_by_id(comic_id):\n    response = requests.get(f'https://xkcd.com/{comic_id}/info.0.json')\n    if not response.text:\n        return await get_recent()\n    return json.loads(response.text)", "buggy_source_code": "async def get_by_id(comic_id):\n    response = requests.get(f'https://xkcd.com/{comic_id}/info.0.json')\n    if response.status_code == 404:\n        return await get_recent()\n    return json.loads(response.text)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def noop(fake):\n    pass", "buggy_source_code": "def noop(fake=0):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def get_position(self):\n    if not self.has_reference():\n        raise RuntimeError('Cannot read position, no valid reference given')\n    return self._encoder.get_encoder().getThetaData().getAbsoluteDegree() - self._calibration", "buggy_source_code": "def get_position(self):\n    if not self.has_reference():\n        raise RuntimeError('Cannot read position, no valid reference given')\n    return self._encoder.get_encoder().getZData().getAbsoluteDegree() - self._calibration", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_trigger(self):\n    self._encoder.assert_connected()\n    return self._encoder.get_encoder().getThetaData().getThetaData().getData().trigger", "buggy_source_code": "def get_trigger(self):\n    self._encoder.assert_connected()\n    return self._encoder.get_encoder().getZData().getThetaData().getData().trigger", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mkQApp():\n    app = QtGui.QApplication.instance()\n    if app is None:\n        app = QtGui.QApplication([])\n    return app", "buggy_source_code": "def mkQApp():\n    global QAPP\n    if QtGui.QApplication.instance() is None:\n        QAPP = QtGui.QApplication([])\n    return QAPP", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_signup_page():\n    signupPage = '<html>\\n   <head>\\n      <title>\\n         Sign up for Lifemapper\\n      </title>\\n   </head>\\n   <body>\\n<div align=\"center\" class=\"signup\">\\n   <form name=\"signup\" action=\"/api/signup\" method=\"post\" \\n         onsubmit=\"return validateNewUser(this);\">\\n      <div align=\"center\">\\n         <table>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  User Id:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"userId\" id=\"userIdField\" type=\"text\" \\n                                             onchange=\"checkUserName(this);\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Email Address:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"email\" id=\"emailField\" type=\"text\" \\n                                                onchange=\"checkEmail(this);\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  First Name:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"firstName\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Last Name:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"lastName\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Institution:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"institution\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Address 1:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"address1\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Address 2:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"address2\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Address 3:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"address3\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Phone Number:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"phone\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Password:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"pword1\" type=\"password\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Confirm Password:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"pword2\" type=\"password\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n         </table>\\n      </div>\\n      <br />\\n      <input name=\"tos\" type=\"checkbox\" /> \\n      I have read and agree to the \\n      <a href=\"http://lifemapper.org/?page_id=1096\" target=\"_blank\">terms of service</a>.<br />\\n      <br />\\n      <input type=\"submit\" id=\"signUpButton\" value=\"Sign Up!\" /><br />\\n   </form>\\n</div>\\n\\n<script type=\"text/javascript\">\\nfunction validateNewUser(frm) {\\n   userId = document.getElementById(\\'userIdField\\').value;\\n   email = document.getElementById(\\'emailField\\').value;\\n   fName = document.getElementsByName(\\'firstName\\')[0].value;\\n   lName = document.getElementsByName(\\'lastName\\')[0].value;\\n   institution = document.getElementsByName(\\'institution\\')[0].value;\\n   add1 = document.getElementsByName(\\'address1\\')[0].value;\\n   add2 = document.getElementsByName(\\'address2\\')[0].value;\\n   add3 = document.getElementsByName(\\'address3\\')[0].value;\\n   phone = document.getElementsByName(\\'phone\\')[0].value;\\n   pword1 = document.getElementsByName(\\'pword1\\')[0].value;\\n   pword2 = document.getElementsByName(\\'pword2\\')[0].value;\\n   \\n   if (userId.length > 0) {\\n      if (!validateLength(userId, 20)) {\\n         alert(\"User name must be 20 characters or less\");\\n         return false;\\n      }\\n   } else {\\n      alert(\"User id is a required field\");\\n      return false;\\n   }\\n\\n   if (email.length < 1) {\\n      alert(\"Email is a required field\");\\n      return false;\\n   }\\n\\n   if (!validateEmail(email)) {\\n      alert(\"Invalid email address\");\\n      return false;\\n   } else {\\n      if (!validateLength(email, 64)) {\\n         alert(\"Email must be 64 characters or less\");\\n         return false;\\n      }\\n   }\\n\\n   if (fName < 1) {\\n      alert(\"First name is a required field\");\\n      return false;\\n   }\\n\\n   if (!validateLength(fName, 50)) {\\n      alert(\"First name must be 50 characters or less\");\\n      return false;\\n   }\\n\\n   if (!validateLength(lName, 50)) {\\n      alert(\"Last name must be 50 characters or less\");\\n      return false;\\n   }\\n\\n   if (!validateLength(phone, 20)) {\\n      alert(\"Phone must be 20 characters or less\");\\n      return false;\\n   }\\n\\n   if (pword1.length < 1 || pword2.length < 1) {\\n      alert(\"A password is required\");\\n      return false;\\n   }\\n\\n   if (pword1 != pword2) {\\n      alert(\"Password does not match\");\\n      return false;\\n   }\\n\\n   if (!validateLength(pword1, 32)) {\\n      alert(\"Password must be 32 characters or less\");\\n      return false;\\n   }\\n\\n   return true;\\n\\n}\\n\\nfunction validateEmail(email) {\\n   var re = /^(([^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+(\\\\.[^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/;\\n   return re.test(email);\\n}\\n\\nfunction validateLength(val, maxLen) {\\n   if (val.length <= maxLen) {\\n      return true;\\n   } else {\\n      return false;\\n   }\\n}\\n   \\n\\nfunction checkEmail(fld) {\\n   if (!validateEmail(fld.value)) {\\n      alert(\"Invalid email\");\\n      document.getElementById(\\'emailField\\').focus();\\n      return false;\\n   }\\n}\\n\\nfunction checkUserName(fld) {\\n   if (!validateLength(fld.value, 20)) {\\n      alert(\"User name must be 20 characters or less\");\\n      return false;\\n   }\\n}\\n\\n</script>\\n   </body>\\n</html>'\n    return signupPage", "buggy_source_code": "def _get_signup_page():\n    signupPage = '<html>\\n   <head>\\n      <title>\\n         Sign up for Lifemapper\\n      </title>\\n   </head>\\n   <body>\\n<div align=\"center\" class=\"signup\">\\n   <form name=\"signup\" action=\"/api/signup\" method=\"post\" \\n         onsubmit=\"return validateNewUser(this);\">\\n      <div align=\"center\">\\n         <table>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  User Id:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"userId\" id=\"userIdField\" type=\"text\" \\n                                             onchange=\"checkUserName(this);\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Email Address:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"email\" id=\"emailField\" type=\"text\" \\n                                                onchange=\"checkEmail(this);\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  First Name:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"firstName\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Last Name:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"lastName\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Institution:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"institution\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Address 1:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"address1\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Address 2:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"address2\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Address 3:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"address3\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Phone Number:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"phone\" type=\"text\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Password:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"pword1\" type=\"password\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n            <tr>\\n               <td class=\"signupLabel\">\\n                  Confirm Password:\\n               </td>\\n               <td class=\"signupInput\">\\n                  <input name=\"pword2\" type=\"password\" />\\n               </td>\\n               <td class=\"signupRequired\">\\n                  (Required)\\n               </td>\\n            </tr>\\n         </table>\\n      </div>\\n      <br />\\n      <input name=\"tos\" type=\"checkbox\" /> \\n      I have read and agree to the \\n      <a href=\"http://lifemapper.org/?page_id=1096\" target=\"_blank\">terms of service</a>.<br />\\n      <br />\\n      <input type=\"submit\" id=\"signUpButton\" value=\"Sign Up!\" /><br />\\n   </form>\\n</div>\\n\\n<script type=\"text/javascript\">\\nfunction validateNewUser(frm) {\\n   userId = document.getElementById(\\'userIdField\\').value;\\n   email = document.getElementById(\\'emailField\\').value;\\n   fName = document.getElementsByName(\\'firstName\\')[0].value;\\n   lName = document.getElementsByName(\\'lastName\\')[0].value;\\n   institution = document.getElementsByName(\\'institution\\')[0].value;\\n   add1 = document.getElementsByName(\\'address1\\')[0].value;\\n   add2 = document.getElementsByName(\\'address2\\')[0].value;\\n   add3 = document.getElementsByName(\\'address3\\')[0].value;\\n   phone = document.getElementsByName(\\'phone\\')[0].value;\\n   pword1 = document.getElementsByName(\\'pword1\\')[0].value;\\n   pword2 = document.getElementsByName(\\'pword2\\')[0].value;\\n   \\n   if (userId.length > 0) {\\n      if (!validateLength(userId, 20)) {\\n         alert(\"User name must be 20 characters or less\");\\n         return false;\\n      }\\n   } else {\\n      alert(\"User id is a required field\");\\n      return false;\\n   }\\n\\n   if (email.length < 1) {\\n      alert(\"Email is a required field\");\\n      return false;\\n   }\\n\\n   if (!validateEmail(email)) {\\n      alert(\"Invalid email address\");\\n      return false;\\n   } else {\\n      if (!validateLength(email, 64)) {\\n         alert(\"Email must be 64 characters or less\");\\n         return false;\\n      }\\n   }\\n\\n   if (fName < 1) {\\n      alert(\"First name is a required field\");\\n      return false;\\n   }\\n\\n   if (!validateLength(fName, 50)) {\\n      alert(\"First name must be 50 characters or less\");\\n      return false;\\n   }\\n\\n   if (!validateLength(lName, 50)) {\\n      alert(\"Last name must be 50 characters or less\");\\n      return false;\\n   }\\n\\n   if (!validateLength(phone, 20)) {\\n      alert(\"Phone must be 20 characters or less\");\\n      return false;\\n   }\\n\\n   if (pword1.length < 1 || pword2.length < 1) {\\n      alert(\"A password is required\");\\n      return false;\\n   }\\n\\n   if (pword1 != pword2) {\\n      alert(\"Password does not match\");\\n      return false;\\n   }\\n\\n   if (!validateLength(pword1, 32)) {\\n      alert(\"Password must be 32 characters or less\");\\n      return false;\\n   }\\n\\n   return true;\\n\\n}\\n\\nfunction validateEmail(email) {\\n   var re = /^(([^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+(\\\\.[^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/;\\n   return re.test(email);\\n}\\n\\nfunction validateLength(val, maxLen) {\\n   if (val.length <= maxLen) {\\n      return true;\\n   } else {\\n      return false;\\n   }\\n}\\n   \\n\\nfunction checkEmail(fld) {\\n   if (!validateEmail(fld.value)) {\\n      alert(\"Invalid email\");\\n      document.getElementById(\\'emailField\\').focus();\\n      return false;\\n   }\\n}\\n\\nfunction checkUserName(fld) {\\n   if (!validateLength(fld.value, 20)) {\\n      alert(\"User name must be 20 characters or less\");\\n      return false;\\n   }\\n}\\n\\n</script>\\n   </body>\\n</html>'\n    return signupPage", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_base_packing_price_net(self, request):\n    pc = self.get_price_calculator(request)\n    return pc.get_base_packing_price_net(request)", "buggy_source_code": "def get_base_packing_price_net(self, request, with_properties=True):\n    pc = self.get_price_calculator(request)\n    return pc.get_base_packing_price_net(with_properties)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def _is_single_subnet_mode(self, network_actions):\n    return network_actions is None or (isinstance(network_actions, list) and len(network_actions) == 1)", "buggy_source_code": "def _is_single_subnet_mode(self, network_actions):\n    return network_actions is None or (isinstance(network_actions, list) and len(network_actions) <= 1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def onModuleLoad(self):\n    b = Button(ClickMe, greet)\n    RootPanel().add(b)\n    pyjslib.import_module(None, None, 'test')", "buggy_source_code": "def onModuleLoad(self):\n    b = Button(self.ClickMe, greet)\n    RootPanel().add(b)\n    pyjslib.import_module(None, None, 'test')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def setup_module(module):\n    try:\n        import numpy as np\n    except ImportError:\n        raise SkipTest('Skipped as numpy is not installed')", "buggy_source_code": "def setup_module(module):\n    try:\n        import numpy as np\n        import multiprocessing\n    except ImportError:\n        raise SkipTest('Skipped as numpy or multiprocessing is not installed')", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def AppStart(self):\n    logging.debug('Starting RemoteEx App.')\n    self.sendCommand('AppStart', timeout=15)", "buggy_source_code": "def AppStart(self):\n    logging.debug('Starting RemoteEx App.')\n    self.sendCommand('AppStart', timeout=30)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, **params):\n    super(MSSQLDialect_pymssql, self).__init__(**params)\n    self.use_scope_identity = True", "buggy_source_code": "def __init__(self, **params):\n    super(MSDialect_pymssql, self).__init__(**params)\n    self.use_scope_identity = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def eval_preprocess(self, image):\n    image = tf.image.resize_image_with_crop_or_pad(image, POST_HEIGHT, POST_WIDTH)\n    image = tf.image.per_image_standardization(image)\n    return image", "buggy_source_code": "def eval_preprocess(self, image):\n    image = tf.image.resize_image_with_crop_or_pad(image, POST_HEIGHT, POST_WIDTH)\n    image = tf.image.per_image_whitening(image)\n    return image", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef state_variables(self):\n    if self._state_variables is None:\n        self._state_variables = self._scpd.actions\n    return self._state_variables", "buggy_source_code": "@property\ndef state_variables(self):\n    if self._state_variables is None:\n        self._state_variables = self._scpd.state_variables\n    return self._state_variables", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __len__(self):\n    return len(self.__unicode__())", "buggy_source_code": "def __len__(self):\n    return len(self.__str__())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def readMessage(self):\n    message = self.socket.read(self.socket.bytesAvailable())\n    logging('Server said:%s', message)\n    return message", "buggy_source_code": "def readMessage(self):\n    message = self.socket.read(self.socket.bytesAvailable())\n    log.info('Server said: %s', message)\n    return message", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def test_order_positional(self):\n    df = self.execute('SELECT e.prename FROM employee AS e ORDER BY 0 ASC')\n    self.assertListEqual(df.prename.tolist(), sorted(self.employees.Prename.tolist()))", "buggy_source_code": "def test_order_positional(self):\n    df = self.execute('SELECT e.prename FROM employee AS e ORDER BY 1 ASC')\n    self.assertListEqual(df.prename.tolist(), sorted(self.employees.Prename.tolist()))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def wait_until(f, msg='Webdriver wait timed out'):\n    t = time()\n    return WebDriverWait(browser(), 120.0).until(f, msg) and time() - t", "buggy_source_code": "def wait_until(f, msg='Webdriver wait timed out', timeout=120.0):\n    return wait_for(lambda : f(browser()), num_sec=timeout, message=msg, delay=0.5)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def assertIsValid(self, model_admin, model):\n    admin_obj = model_admin(model, AdminSite())\n    errors = admin_obj.check(model)\n    expected = []\n    self.assertEqual(errors, expected)", "buggy_source_code": "def assertIsValid(self, model_admin, model):\n    admin_obj = model_admin(model, AdminSite())\n    errors = admin_obj.check()\n    expected = []\n    self.assertEqual(errors, expected)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __init__(self, x3d_shapes_dict):\n    self._x3d_shapes_dict = x3d_shapes_dict", "buggy_source_code": "def __init__(self, x3d_shapes):\n    self._x3d_shapes = x3d_shapes", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_require_multiple_existing_keys():\n    require('version', 'settings_file')", "buggy_source_code": "def test_require_multiple_existing_keys():\n    require('version', 'sudo_prompt')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.s_id = 0\n    self.id_to_statement_map = {}\n    self.tx_id = None\n    self.tx_commit_url = None", "buggy_source_code": "def __init__(self):\n    self.statement_set = []\n    self.result_set = None\n    self.error_set = None\n    self.tx_id = None\n    self.tx_commit_url = None", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, index, content):\n    super(Value, self).__init__()\n    self.index = str(index)\n    self.content = str(content)", "buggy_source_code": "def __init__(self, index, content):\n    super(Value, self).__init__()\n    self.index = str(index)\n    self.content = unicode(content)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _verify_overflow(self):\n    if self._current_motor < 0:\n        self._current_motor = 0\n    elif self._current_motor == self._MOTORS_SIZE:\n        self._current_motor = self._MOTORS_SIZE - 1", "buggy_source_code": "def _verify_overflow(self):\n    if self._current_motor < 0:\n        self._current_motor = self._MOTORS_SIZE - 1\n    elif self._current_motor == self._MOTORS_SIZE:\n        self._current_motor = 0", "edit_actions": ["move-tree", "move-tree", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef default_atom_h5_path():\n    return atomic.default_atom_h5_path", "buggy_source_code": "@pytest.fixture(scope='module')\ndef default_atom_h5_path():\n    return atomic.data_path('atom_data.h5')", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _get_conditional_intensity(fit, predict_design_matrix):\n    return np.vstack([fitted_model.predict(predict_design_matrix) for fitted_model in fit]).T", "buggy_source_code": "def _get_conditional_intensity(fit, predict_design_matrix):\n    return np.vstack([glmval(fitted_model, predict_design_matrix) for fitted_model in fit]).T", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def all_filenames(self):\n    return self.cooker.recipecache.file_checksums.keys()", "buggy_source_code": "def all_filenames(self):\n    return self.cooker.recipecaches[''].file_checksums.keys()", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _getChunkCount(user_file):\n    file_size = user_file.user_file.size\n    return int(file_size / _getUploadChunkSize())", "buggy_source_code": "def _getChunkCount(user_file):\n    file_size = user_file.user_file.size\n    return int(math.ceil(file_size / float(_getUploadChunkSize())))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "move-tree"]}
{"fixed_source_code": "def _get_url_and_task(self):\n    task = BatchApexWait(self.project_config, self.task_config, self.org_config)\n    url = self.base_tooling_url + 'query/?q=SELECT+Id%2C+ApexClass.Name%2C+Status%2C+ExtendedStatus%2C+TotalJobItems%2C+JobItemsProcessed%2C+NumberOfErrors%2C+CreatedDate%2C+CompletedDate+FROM+AsyncApexJob+WHERE+JobType%3D%27BatchApex%27+AND+ApexClass.Name%3D%27ADDR_Seasonal_BATCH%27+ORDER+BY+CreatedDate+DESC+LIMIT+1'\n    return (task, url)", "buggy_source_code": "def _get_url_and_task(self):\n    task = BatchApexWait(self.project_config, self.task_config, self.org_config)\n    url = self.base_tooling_url + 'query/?q=SELECT+Id%2C+ApexClass.Name%2C+Status%2C+ExtendedStatus%2C+TotalJobItems%2C+JobItemsProcessed%2C+NumberOfErrors%2C+CreatedDate%2C+CompletedDate+FROM+AsyncApexJob+WHERE+JobType%3D%27BatchApex%27+AND+ApexClass.Name%3D%27ADDR_Seasonal_BATCH%27++++ORDER+BY+CreatedDate+DESC++LIMIT+1+'\n    return (task, url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_taa_acceptance_time_too_recent(validate, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Acception time of Txn Author Agreement is not appropriate'):\n        validate(domain_req)", "buggy_source_code": "def test_taa_acceptance_time_too_recent(validate_taa_acceptance, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Acception time of Txn Author Agreement is not appropriate'):\n        validate_taa_acceptance(domain_req)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pytest.mark.taa_acceptance_digest('123456')\ndef test_taa_acceptance_digest_non_latest(validate, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Accepted Txn Author Agreement is invalid or non-latest, expected {}'.format(latest_taa_digest)):\n        validate(domain_req)", "buggy_source_code": "@pytest.mark.taa_acceptance_digest('123456')\ndef test_taa_acceptance_digest_non_latest(validate_taa_acceptance, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Accepted Txn Author Agreement is invalid or non-latest, expected {}'.format(latest_taa_digest)):\n        validate_taa_acceptance(domain_req)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_taa_acceptance_valid(validate, domain_req):\n    validate(domain_req)", "buggy_source_code": "def test_taa_acceptance_valid(validate_taa_acceptance, domain_req):\n    validate_taa_acceptance(domain_req)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pytest.mark.taa_acceptance_mechanism('some-unknown-mech')\ndef test_taa_acceptance_mechanism_unknown(validate, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Accepted Txn Author Agreement is invalid or non-latest, expected {}'.format(latest_taa_digest)):\n        validate(domain_req)", "buggy_source_code": "@pytest.mark.taa_acceptance_mechanism('some-unknown-mech')\ndef test_taa_acceptance_mechanism_unknown(validate_taa_acceptance, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Accepted Txn Author Agreement is invalid or non-latest, expected {}'.format(latest_taa_digest)):\n        validate_taa_acceptance(domain_req)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pytest.mark.taa_acceptance_time()\ndef test_taa_acceptance_time_too_old(validate, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Acception time of Txn Author Agreement is not appropriate'):\n        validate(domain_req)", "buggy_source_code": "@pytest.mark.taa_acceptance_time()\ndef test_taa_acceptance_time_too_old(validate_taa_acceptance, domain_req):\n    with pytest.raises(InvalidClientTAAAcceptance, match='Acception time of Txn Author Agreement is not appropriate'):\n        validate_taa_acceptance(domain_req)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def to_string(self):\n    return '%s,%s' % (self._fill, self._stroke)", "buggy_source_code": "def to_string(self):\n    return '%s,%s' % (self._stroke, self._fill)", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def silc_noise(cinv, response=None):\n    response = ilc_def_response(response, cinv)\n    return 1.0 / ilc_comb_a_b(response, response, cinv)", "buggy_source_code": "def silc_noise(cinv, response=None):\n    response = ilc_def_response(response, cinv)\n    return np.nan_to_num(1.0 / ilc_comb_a_b(response, response, cinv))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_highlight_rects(self, hs):\n    query = 'select * from FileHighlightRects Where highlightId in (%s) ORDER BY page, y1 DESC, x1'\n    return self.cursor.execute(query % ','.join(map(str, hs))).fetchall()", "buggy_source_code": "def get_highlight_rects(self, hs):\n    query = 'select * from FileHighlightRects Where highlightId in (%s) ORDER BY highlightid, y1 DESC, x1'\n    return self.cursor.execute(query % ','.join(map(str, hs))).fetchall()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, certificate, key, proxy=None):\n    self.certificate = certificate\n    self.key = key\n    self.proxy_address = proxy\n    self.result = []", "buggy_source_code": "def __init__(self, certificate, key, url=None):\n    self.certificate = certificate\n    self.key = key\n    self.url = url\n    self.result = []", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, certificate, key, proxy=None):\n    super(IDService, self).__init__(certificate, key, proxy)\n    self.validator_service = None", "buggy_source_code": "def __init__(self, certificate, key, url=None):\n    super(IDService, self).__init__(certificate, key, url)\n    self.validator_service = None", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    return regular_json.dumps(self.query_engine.get_results(), sort_keys=True, indent=4, separators=(',', ': '))", "buggy_source_code": "def __str__(self):\n    return json.dumps(self.query_engine.get_results(), sort_keys=True, indent=4, separators=(',', ': '))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _source_continues_to_submit_page(self):\n    continue_button = self.driver.find_element_by_id('continue-button')\n    continue_button.click()\n    headline = self.driver.find_element_by_class_name('headline')\n    self.assertEqual('Submit a document, message, or both', headline.text)", "buggy_source_code": "def _source_continues_to_submit_page(self):\n    continue_button = self.driver.find_element_by_id('continue-button')\n    continue_button.click()\n    headline = self.driver.find_element_by_class_name('headline')\n    self.assertEqual('You have three options to send data', headline.text)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testnumneurons(self):\n    nrons = 10\n    inpts = 3\n    nlayer = neuronLayer(nrons, inpts)\n    self.assertTrue(nlayer.getnumNeurons(), nron)", "buggy_source_code": "def testnumneurons(self):\n    nrons = 10\n    inpts = 3\n    nlayer = neuronLayer(nrons, inpts)\n    self.assertTrue(nlayer.getnumNeurons(), nrons)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def UpdateLoop():\n    while True:\n        try:\n            ManageUpdates()\n            sleep(0.5)\n        except Exception:\n            logger.error('Exit from loop!')", "buggy_source_code": "def UpdateLoop():\n    while True:\n        try:\n            ManageUpdates()\n            sleep(1)\n        except Exception:\n            logger.error('Exit from loop!')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def input_validation(i):\n    if re.findall('[^A-Za-z0-9_./]', i):\n        return False\n    else:\n        return True", "buggy_source_code": "def input_validation(i):\n    if re.findall('[^A-Za-z0-9_./~]', i):\n        return False\n    else:\n        return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def wraps(fn):\n\n    def wrapper(f):\n        f = functools.wraps(fn)(f)\n        f.__wrapped__ = fn\n        return f\n    return wrapper", "buggy_source_code": "def wraps(wrapped):\n\n    def wrapper(f):\n        f = functools.wraps(wrapped)(f)\n        f.__wrapped__ = wrapped\n        return f\n    return wrapper", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def get_my_trades(self):\n    trades = self.perform_request('TradeHistory')\n    return [self._format_trade(t_id, t) for (t_id, t) in trades.iteritems()]", "buggy_source_code": "def get_my_trades(self):\n    trades = self.perform_request('TradeHistory')\n    return [BTCE._format_trade(t_id, t) for (t_id, t) in trades.iteritems()]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.log = logging.getLogger('main.simpleschedplugin')\n    self.log.debug('TrivialSchedPlugin initializing...')", "buggy_source_code": "def __init__(self):\n    self.log = logging.getLogger('main.schedplugin')\n    self.log.debug('Object initialized.')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@staticmethod\ndef forget_request_envelope(envelope):\n    return envelope['replyto'] is None", "buggy_source_code": "@staticmethod\ndef forget_request_envelope(envelope):\n    return envelope['routing'][1] == None", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "@property\ndef geo_coords(self):\n    return_value = (self.point.x, self.point.y)", "buggy_source_code": "@property\ndef geo_coords(self):\n    return (self.point.x, self.point.y)", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _header_end_html(self):\n    return ''", "buggy_source_code": "def _header_end_html(self):\n    return u''", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_stream(self, stream_id, details):\n    stream = int(stream_id)\n    return self.driver.find_streams(stream_id=stream_id, include_events=details)", "buggy_source_code": "def get_stream(self, stream_id, details):\n    stream_id = int(stream_id)\n    return self.driver.find_streams(stream_id=stream_id, include_events=details)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\n@cache_this(lambda f, self: 'contest:%d:questions' % self.pk)\ndef questions(self):\n    return list(Question.objects.filter(contest=self))", "buggy_source_code": "@property\n@cache_this(lambda self, *args, **kwargs: 'contest:%d:questions' % self.pk)\ndef questions(self):\n    return list(Question.objects.filter(contest=self))", "edit_actions": ["insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@property\n@cache_this(lambda f, self: 'quiz:%d:questions' % self.pk)\ndef questions(self):\n    return list(Question.objects.filter(quiz=self))", "buggy_source_code": "@property\n@cache_this(lambda self, *args, **kwargs: 'quiz:%d:questions' % self.pk)\ndef questions(self):\n    return list(Question.objects.filter(quiz=self))", "edit_actions": ["insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def handle_read(self):\n    read = self.recv(4096)\n    print('%04i -->' % len(read))\n    self.from_remote_buffer += read", "buggy_source_code": "def handle_read(self):\n    read = self.recv(4096)\n    print('%04i from server' % len(read))\n    self.from_remote_buffer += read", "edit_actions": ["update-node"]}
{"fixed_source_code": "def handle_read(self):\n    read = self.recv(4096)\n    print('%04i -->' % len(read))\n    self.sreceiver.to_remote_buffer += read", "buggy_source_code": "def handle_read(self):\n    read = self.recv(4096)\n    print('%04i from client' % len(read))\n    self.sreceiver.to_remote_buffer += read", "edit_actions": ["update-node"]}
{"fixed_source_code": "def handle_write(self):\n    sent = self.send(self.to_remote_buffer)\n    print('%04i <--' % sent)\n    self.to_remote_buffer = self.to_remote_buffer[sent:]", "buggy_source_code": "def handle_write(self):\n    sent = self.send(self.to_remote_buffer)\n    print('%04i to server' % sent)\n    self.to_remote_buffer = self.to_remote_buffer[sent:]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def pop(self):\n    return self.element", "buggy_source_code": "def pop(self):\n    return self._list_element", "edit_actions": ["update-node"]}
{"fixed_source_code": "def extend(self, other):\n    self.element = other[0]", "buggy_source_code": "def extend(self, other):\n    self._list_element = other[0]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def append(self, element):\n    self.element = element", "buggy_source_code": "def append(self, element):\n    self._list_element = element", "edit_actions": ["update-node"]}
{"fixed_source_code": "def next(self):\n    return self.element", "buggy_source_code": "def next(self):\n    return self._iterator_element", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, element):\n    self.element = element", "buggy_source_code": "def __init__(self, element):\n    self._iterator_element = element", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __getitem__(self, index):\n    return self.element", "buggy_source_code": "def __getitem__(self, index):\n    return self._list_element", "edit_actions": ["update-node"]}
{"fixed_source_code": "def insert(self, index, element):\n    self.element = element", "buggy_source_code": "def insert(self, index, element):\n    self._list_element = element", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __iter__(self):\n    return _iterator(self.element)", "buggy_source_code": "def __iter__(self):\n    return _iterator(self._list_element)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_supersearch_home(self):\n    url = reverse('documentation:supersearch_home')\n    response = self.client.get(url)\n    eq_(response.status_code, 200)\n    ok_('What is Super Search?' in response.content)", "buggy_source_code": "def test_supersearch_home(self):\n    url = reverse('documentation:supersearch_home')\n    response = self.client.get(url)\n    assert response.status_code == 200\n    assert 'What is Super Search?' in response.content", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.bno = BNO055.BNO055(rst=18)\n    self.bno.begin()", "buggy_source_code": "def __init__(self):\n    self.bno = Adafruit_BNO055.BNO055(rst=18)\n    self.bno.begin()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def adadelta_optimizer(**kwargs):\n    return tf.train.AdadeltaOptimizer(kwargs)", "buggy_source_code": "def adadelta_optimizer(**kwargs):\n    return tf.train.AdadeltaOptimizer(**kwargs)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_csv_export_english_labels_no_hxl(self):\n    export_options = {'lang': 'English', 'tag_cols_for_header': []}\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "buggy_source_code": "def test_csv_export_english_labels_no_hxl(self):\n    export_options = {'lang': 'English', 'tag_cols_for_header': []}\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"[]\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_csv_export_default_options(self):\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines)", "buggy_source_code": "def test_csv_export_default_options(self):\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"[]\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_csv_export_spanish_labels(self):\n    export_options = {'lang': 'Spanish'}\n    expected_lines = ['\"start\";\"end\";\"¿Qué tipo de simetría tiene?\";\"¿Qué tipo de simetría tiene?/Esférico\";\"¿Qué tipo de simetría tiene?/Radial\";\"¿Qué tipo de simetría tiene?/Bilateral\";\"¿Cuántos segmentos tiene tu cuerpo?\";\"¿Tienes fluidos corporales que ocupan espacio intracelular?\";\"¿Desciende de un organismo unicelular ancestral?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Esférico Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Sí, y algún espacio extracelular\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Sí\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Inseguro\";\"Sí\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "buggy_source_code": "def test_csv_export_spanish_labels(self):\n    export_options = {'lang': 'Spanish'}\n    expected_lines = ['\"start\";\"end\";\"¿Qué tipo de simetría tiene?\";\"¿Qué tipo de simetría tiene?/Esférico\";\"¿Qué tipo de simetría tiene?/Radial\";\"¿Qué tipo de simetría tiene?/Bilateral\";\"¿Cuántos segmentos tiene tu cuerpo?\";\"¿Tienes fluidos corporales que ocupan espacio intracelular?\";\"¿Desciende de un organismo unicelular ancestral?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Esférico Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Sí, y algún espacio extracelular\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Sí\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Inseguro\";\"Sí\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"[]\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_csv_export_english_labels_group_sep(self):\n    export_options = {'lang': 'English', 'group_sep': '%'}\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?%Spherical\";\"What kind of symmetry do you have?%Radial\";\"What kind of symmetry do you have?%Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "buggy_source_code": "def test_csv_export_english_labels_group_sep(self):\n    export_options = {'lang': 'English', 'group_sep': '%'}\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?%Spherical\";\"What kind of symmetry do you have?%Radial\";\"What kind of symmetry do you have?%Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"[]\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_csv_export_english_labels(self):\n    export_options = {'lang': 'English'}\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "buggy_source_code": "def test_csv_export_english_labels(self):\n    export_options = {'lang': 'English'}\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"[]\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_csv_export_hierarchy_in_labels(self):\n    export_options = {'hierarchy_in_labels': 'true'}\n    expected_lines = ['\"start\";\"end\";\"External Characteristics/What kind of symmetry do you have?\";\"External Characteristics/What kind of symmetry do you have?/Spherical\";\"External Characteristics/What kind of symmetry do you have?/Radial\";\"External Characteristics/What kind of symmetry do you have?/Bilateral\";\"External Characteristics/How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "buggy_source_code": "def test_csv_export_hierarchy_in_labels(self):\n    export_options = {'hierarchy_in_labels': 'true'}\n    expected_lines = ['\"start\";\"end\";\"External Characteristics/What kind of symmetry do you have?\";\"External Characteristics/What kind of symmetry do you have?/Spherical\";\"External Characteristics/What kind of symmetry do you have?/Radial\";\"External Characteristics/What kind of symmetry do you have?/Bilateral\";\"External Characteristics/How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:40:39.000-04:00\";\"2017-10-23T05:41:13.000-04:00\";\"Spherical Radial Bilateral\";\"1\";\"1\";\"1\";\"6\";\"Yes, and some extracellular space\";\"No\";\"61\";\"48583952-1892-4931-8d9c-869e7b49bafb\";\"2017-10-23T09:41:19\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"1\"', '\"2017-10-23T05:41:14.000-04:00\";\"2017-10-23T05:41:32.000-04:00\";\"Radial\";\"0\";\"1\";\"0\";\"3\";\"Yes\";\"No\";\"62\";\"317ba7b7-bea4-4a8c-8620-a483c3079c4b\";\"2017-10-23T09:41:38\";\"\";\"[]\";\"submitted_via_web\";\"None\";\"\";\"2\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"[]\";\"submitted_via_web\";\"anotheruser\";\"\";\"3\"']\n    self.run_csv_export_test(expected_lines, export_options)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_csv_export_default_options_partial_submissions(self):\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"\";\"submitted_via_web\";\"anotheruser\";\"\";\"1\"']\n    self.run_csv_export_test(expected_lines, user=self.anotheruser)", "buggy_source_code": "def test_csv_export_default_options_partial_submissions(self):\n    expected_lines = ['\"start\";\"end\";\"What kind of symmetry do you have?\";\"What kind of symmetry do you have?/Spherical\";\"What kind of symmetry do you have?/Radial\";\"What kind of symmetry do you have?/Bilateral\";\"How many segments does your body have?\";\"Do you have body fluids that occupy intracellular space?\";\"Do you descend from an ancestral unicellular organism?\";\"_id\";\"_uuid\";\"_submission_time\";\"_validation_status\";\"_notes\";\"_status\";\"_submitted_by\";\"_tags\";\"_index\"', '\"\";\"\";\"#symmetry\";\"\";\"\";\"\";\"#segments\";\"#fluids\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\";\"\"', '\"2017-10-23T05:41:32.000-04:00\";\"2017-10-23T05:42:05.000-04:00\";\"Bilateral\";\"0\";\"0\";\"1\";\"2\";\"No / Unsure\";\"Yes\";\"63\";\"3f15cdfe-3eab-4678-8352-7806febf158d\";\"2017-10-23T09:42:11\";\"\";\"[]\";\"submitted_via_web\";\"anotheruser\";\"\";\"1\"']\n    self.run_csv_export_test(expected_lines, user=self.anotheruser)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, name, latitudine, longitudine, numHosts):\n    self.__name = name.encode('latin1')\n    self.__latitudine = latitudine\n    self.__longitudine = longitudine\n    self.__totalHosts = numHosts", "buggy_source_code": "def __init__(self, name, latitudine, longitudine, numHosts):\n    self.__name = name.encode('utf-8')\n    self.__latitudine = latitudine\n    self.__longitudine = longitudine\n    self.__totalHosts = numHosts", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef name(self):\n    return 'DependencyManager'", "buggy_source_code": "@property\ndef name(self):\n    return 'dependency_manager'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __exit__(self, type, value, traceback):\n    if not value is None:\n        logging.info('!! Exception in %s: %s' % (self.funcName, value))", "buggy_source_code": "def __exit__(self, type, value, traceback):\n    if not value is None:\n        logging.error('!! Exception in %s: %s' % (self.funcName, value))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@command\ndef version(args):\n    print('zpm version %s' % zpmlib.__version__)", "buggy_source_code": "@command\ndef version(args):\n    parser = set_up_arg_parser()\n    parser.parse_args(['--version'])", "edit_actions": ["insert-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_query_testable_permissions(capsys):\n    custom_roles.query_testable_permissions('//cloudresourcemanager.googleapis.com/projects/' + GCLOUD_PROJECT)\n    (out, _) = capsys.readouterr()\n    assert 'apigee' in out", "buggy_source_code": "def test_query_testable_permissions(capsys):\n    custom_roles.query_testable_permissions('//cloudresourcemanager.googleapis.com/projects/' + GCLOUD_PROJECT)\n    (out, _) = capsys.readouterr()\n    assert '\\n' in out", "edit_actions": ["update-node"]}
{"fixed_source_code": "def isdecorated(func):\n    return isinstance(func, types.FunctionType) and hasattr(func, '_args_spec') and hasattr(func, '_func_') or isinstance(func, BaseDecorator)", "buggy_source_code": "def isdecorated(func):\n    return isinstance(func, types.FunctionType) and hasattr(func, '_args_spec_') and hasattr(func, '_func_') or isinstance(func, BaseDecorator)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@dbus.service.signal(CHANNEL_TYPE_STREAMED_MEDIA, signature='uu')\ndef StreamAdded(self, stream_id, contact_handle, stream_type):\n    pass", "buggy_source_code": "@dbus.service.signal(CHANNEL_TYPE_STREAMED_MEDIA, signature='uuu')\ndef StreamAdded(self, stream_id, contact_handle, stream_type):\n    pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "@dbus.service.signal(CHANNEL_TYPE_STREAMED_MEDIA, signature='')\ndef StreamRemoved(self, stream_id):\n    pass", "buggy_source_code": "@dbus.service.signal(CHANNEL_TYPE_STREAMED_MEDIA, signature='u')\ndef StreamRemoved(self, stream_id):\n    pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "@dbus.service.signal(CHANNEL_TYPE_STREAMED_MEDIA, signature='uuu')\ndef StreamStateChanged(self, stream_id, stream_state):\n    pass", "buggy_source_code": "@dbus.service.signal(CHANNEL_TYPE_STREAMED_MEDIA, signature='uu')\ndef StreamStateChanged(self, stream_id, stream_state):\n    pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fitit(self, x, y, Q):\n    (popt, pcov) = curve_fit(self.func, x, y, p0=0.1)\n    return (popt, pcov)", "buggy_source_code": "def fitit(self, x, y, Q):\n    (popt, pcov) = curve_fit(recess.func, x, y, p0=0.1)\n    return (popt, pcov)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@turnaroud(13)\ndef feedback():\n    frame.r = 0.5\n    frame.x = 0.5\n    frame.draw()", "buggy_source_code": "@turnaround(13)\ndef feedback():\n    frame.r = 0.5\n    frame.x = 0.5\n    frame.draw()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def CustomizeBrowserOptions(self, options):\n    options.AppendExtraBrowserArgs('--enable-threaded-compositing')\n    options.AppendExtraBrowserArgs('--force-compositing-mode')\n    options.AppendExtraBrowserArgs('--enable-impl-side-painting')\n    options.AppendExtraBrowserArgs('--enable-gpu-rasterization')", "buggy_source_code": "def CustomizeBrowserOptions(self, options):\n    options.AppendExtraBrowserArgs('--enable-threaded-compositing')\n    options.AppendExtraBrowserArgs('--force-compositing-mode')\n    options.AppendExtraBrowserArgs('--enable-impl-side-painting')\n    options.AppendExtraBrowserArgs('--force-gpu-rasterization')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def CustomizeBrowserOptions(self, options):\n    options.AppendExtraBrowserArgs('--enable-threaded-compositing')\n    options.AppendExtraBrowserArgs('--force-compositing-mode')\n    options.AppendExtraBrowserArgs('--enable-impl-side-painting')\n    options.AppendExtraBrowserArgs('--enable-gpu-rasterization')", "buggy_source_code": "def CustomizeBrowserOptions(self, options):\n    options.AppendExtraBrowserArgs('--enable-threaded-compositing')\n    options.AppendExtraBrowserArgs('--force-compositing-mode')\n    options.AppendExtraBrowserArgs('--enable-impl-side-painting')\n    options.AppendExtraBrowserArgs('--force-gpu-rasterization')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def filename(self, pathstr):\n    return DataSource.filename(self, self._fullpath(pathstr))", "buggy_source_code": "def filename(self, pathstr):\n    return DataSource.filename(self, str(self._fullpath(pathstr)))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _lock_non_sandbox(self, conn_handler):\n    if self.status != 'sandbox':\n        raise QiitaDBStatusError('Illegal operation on public study!')", "buggy_source_code": "def _lock_non_sandbox(self, conn_handler):\n    if self.status != 'sandbox':\n        raise QiitaDBStatusError('Illegal operation on non-sandbox study!')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _watch_for_exit(self):\n    main = threading.main_thread()\n    main.join()\n    self.stop()", "buggy_source_code": "def _watch_for_exit(self):\n    main = threading.main_thread()\n    main.join()\n    self._stop_nowait()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def server_content(self, data):\n    assert self.server, '%s server_content had no server' % self\n    if data:\n        self.write(data)", "buggy_source_code": "def server_content(self, data):\n    assert self.server, '%s server_content(%s) had no server' % (self, data)\n    if data:\n        self.write(data)", "edit_actions": ["update-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def downgrade():\n    op.alter_column(u'radio_scheduledprogram', 'program_id', new_column_name='episode_id')", "buggy_source_code": "def downgrade():\n    op.add_column('radio_scheduledprogram', sa.Column('episode_id', INTEGER, sa.ForeignKey('radio_epside.id')))\n    op.drop_column('radio_scheduledprogram', 'program_id')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def upgrade():\n    op.alter_column(u'radio_scheduledprogram', 'episode_id', new_column_name='program_id')", "buggy_source_code": "def upgrade():\n    op.add_column('radio_scheduledprogram', sa.Column('program_id', INTEGER, sa.ForeignKey('radio_program.id')))\n    op.drop_column('radio_scheduledprogram', 'episode_id')", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def command(self, name):\n    return 'rpm -qp {0} 2> /dev/null || rpm -q {0}'.format(name)", "buggy_source_code": "def command(self, name):\n    return 'rpm --queryformat \"{0}\" -qp {1} 2> /dev/null || rpm --queryformat \"{0}\" -q {1}'.format(rpm_query_format, name)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def recalculate_checksums(self):\n    if self.next is not None:\n        self.next.reecalculate_checksums()", "buggy_source_code": "def recalculate_checksums(self):\n    if self.next is not None:\n        self.next.recalculate_checksums()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _term_signal_handler(signalNumber, frame):\n    assert signalNumber == signal.SIGINT\n    _logger.error('Shutting down ...')\n    sys.exit(0)", "buggy_source_code": "def _term_signal_handler(signalNumber, frame):\n    assert signalNumber == signal.SIGINT\n    _logger.info('Shutting down ...')\n    sys.exit(0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='module')\ndef provision_data(rest_api_modscope, provider, small_template_modscope):\n    return get_provision_data(rest_api_modscope, provider, small_template_modscope)", "buggy_source_code": "@pytest.fixture(scope='module')\ndef provision_data(appliance, provider, small_template_modscope):\n    return get_provision_data(appliance.rest_api, provider, small_template_modscope)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def remote_caching_flags(platform):\n    if platform in ['ubuntu1404', 'ubuntu1604']:\n        return ['--experimental_strict_action_env', '--remote_timeout=10', '--google_default_credentials', '--experimental_remote_spawn_cache', '--experimental_remote_platform_override=\\'properties:{name:\"platform\" value:\"{0}\"}\\''.format(platform), '--remote_http_cache=https://storage.googleapis.com/bazel-buildkite-cache']\n    return []", "buggy_source_code": "def remote_caching_flags(platform):\n    if platform in ['ubuntu1404', 'ubuntu1604']:\n        return ['--experimental_strict_action_env', '--remote_timeout=10', '--google_default_credentials', '--experimental_remote_spawn_cache', '--experimental_remote_platform_override=\\'properties:{name:\"platform\" value:\"' + platform + '\"}\\'', '--remote_http_cache=https://storage.googleapis.com/bazel-buildkite-cache']\n    return []", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def is_active_recurring_charge(self, charge_id):\n    charge = APIWrapper(self.shop).get('application_recurring_charges', {'id': charge_id})\n    return charge and charge['status'] == 'active'", "buggy_source_code": "def is_active_recurring_charge(self, charge_id):\n    charge = APIWrapper(self.shop).get('recurring_application_charges', {'id': charge_id})\n    return charge and charge['status'] == 'active'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setBackgroundImage(self, image):\n    self.setStyleSheet(f'background-image:url({image})')", "buggy_source_code": "def setBackgroundImage(self, image):\n    self.setStyleSheet(f'#JAKWindow {{background-image:url({image})}}')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_taxonomy_success(self, subject, child_one_subject, child_two_subject, subjects, res_subject_list):\n    assert len(subjects) > 0\n    assert res_subject_list.status_code == 200\n    assert res_subject_list.content_type == 'application/vnd.api+json'", "buggy_source_code": "def test_taxonomy_success(self, subject, subject_child_one, subject_child_two, subjects, res_subject_list):\n    assert len(subjects) > 0\n    assert res_subject_list.status_code == 200\n    assert res_subject_list.content_type == 'application/vnd.api+json'", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __rsub__(self, other):\n    return elementwise.subtract(self, other)", "buggy_source_code": "def __rsub__(self, other):\n    return elementwise.subtract(other, self)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __rpow__(self, other):\n    return elementwise.power(self, other)", "buggy_source_code": "def __rpow__(self, other):\n    return elementwise.power(other, self)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __radd__(self, other):\n    return elementwise.add(self, other)", "buggy_source_code": "def __radd__(self, other):\n    return elementwise.add(other, self)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __rmul__(self, other):\n    return elementwise.multiply(self, other)", "buggy_source_code": "def __rmul__(self, other):\n    return elementwise.multiply(other, self)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __rdiv__(self, other):\n    return elementwise.divide(self, other)", "buggy_source_code": "def __rdiv__(self, other):\n    return elementwise.divide(other, self)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@app.route('/')\ndef mainpage():\n    return redirect('/templates/presence_weekday')", "buggy_source_code": "@app.route('/')\ndef mainpage():\n    return redirect('/presence_weekday')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ungettext(a, b, count):\n    if count:\n        return b\n    return a", "buggy_source_code": "def ungettext(a, b, count):\n    if count == 1:\n        return a\n    return b", "edit_actions": ["move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef timeout_customer(self):\n    self.statu_required('accepted_by_taxi')\n    self.status = 'timeout_customer'\n    self.status_changed()\n    return True", "buggy_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef timeout_customer(self):\n    self.status_required('accepted_by_taxi')\n    self.status = 'timeout_customer'\n    self.status_changed()\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef declined_by_customer(self):\n    self.statu_required('accepted_by_taxi')\n    self.status = 'declined_by_customer'\n    self.status_changed()\n    return True", "buggy_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef declined_by_customer(self):\n    self.status_required('accepted_by_taxi')\n    self.status = 'declined_by_customer'\n    self.status_changed()\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main():\n    if len(sys.argv) >= 2:\n        name = len(sys.argv[1])\n    else:\n        name = 'World'\n    print('Gday', name)", "buggy_source_code": "def main():\n    if len(sys.argv) >= 2:\n        name = sys.argv[1]\n    else:\n        name = 'Worldly'\n    print('Gday', name)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_first_identifier(self):\n    if isinstance(self.identifiers, (tuple, list)):\n        return self._identifiers[0]\n    else:\n        return self._identifiers", "buggy_source_code": "def get_first_identifier(self):\n    if isinstance(self._identifiers, (tuple, list)):\n        return self._identifiers[0]\n    else:\n        return self._identifiers", "edit_actions": ["update-node"]}
{"fixed_source_code": "def f_header():\n    header = '\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Pynoncode</title>   \\n     <link href=\"dist/css/bootstrap.min.css\" rel=\"stylesheet\" media=\"screen\">\\n    <link href=\"dist/css/bootstrap.min.css\" rel=\"dist/css/bootstrap-theme.min.css\">\\n    <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\\n    <script src=\"dist/js/bootstrap.min.js\"></script>\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> \\n</head>\\n  <body>\\n\\n\\n<!-- Fixed navbar -->\\n<div class=\"navbar navbar-default\" role=\"navigation\">\\n<div class=\"container\">\\n<div class=\"navbar-header\">\\n<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\\n<span class=\"sr-only\">Toggle navigation</span>\\n<span class=\"icon-bar\"></span>\\n<span class=\"icon-bar\"></span>\\n<span class=\"icon-bar\"></span>\\n        \\n</button>\\n<a class=\"navbar-brand\" href=\"#\">pynoncode</a>\\n</div>\\n<div class=\"navbar-collapse collapse\">\\n<ul class=\"nav navbar-nav\">\\n<li class=\"active\"><a href=\"#\">Home</a></li>\\n<li><a href=\"#about\">About</a></li>\\n<li><a href=\"#contact\">Contact</a></li>\\n</ul>\\n</div><!--/.nav-collapse -->\\n</div>\\n</div>\\n\\n<div class=\"container\"  role=\"main\">\\n\\n<div class=\"jumbotron\">\\n        <h1>Pynoncode Fragments results</h1>\\n        <p><a href=\"#\" class=\"btn btn-primary btn-lg\" role=\"button\">Learn more about pynoncode &raquo;</a></p>\\n      </div>\\n</div>\\n<div class=\"container\" style=\"height: 800px; overflow: auto;\">\\n<table class=\"table table-striped table-bordered table-condensed\">\\n      '\n    return header", "buggy_source_code": "def f_header():\n    header = '\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Pynoncode</title>   \\n     <link href=\"dist/css/bootstrap.min.css\" rel=\"stylesheet\" media=\"screen\">\\n    <link href=\"dist/css/bootstrap.min.css\" rel=\"dist/css/bootstrap-theme.min.css\">\\n    <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\\n    <script src=\"dist/js/bootstrap.min.js\"></script>\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> \\n</head>\\n  <body>\\n\\n\\n<!-- Fixed navbar -->\\n<div class=\"navbar navbar-default\" role=\"navigation\">\\n<div class=\"container\">\\n<div class=\"navbar-header\">\\n<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\\n<span class=\"sr-only\">Toggle navigation</span>\\n<span class=\"icon-bar\"></span>\\n<span class=\"icon-bar\"></span>\\n<span class=\"icon-bar\"></span>\\n        \\n</button>\\n<a class=\"navbar-brand\" href=\"#\">pynoncode</a>\\n</div>\\n<div class=\"navbar-collapse collapse\">\\n<ul class=\"nav navbar-nav\">\\n<li class=\"active\"><a href=\"#\">Home</a></li>\\n<li><a href=\"#about\">About</a></li>\\n<li><a href=\"#contact\">Contact</a></li>\\n</ul>\\n</div><!--/.nav-collapse -->\\n</div>\\n</div>\\n\\n<div class=\"container\"  role=\"main\">\\n\\n<div class=\"jumbotron\">\\n        <h1>Pynoncode Fragments results</h1>\\n        <p><a href=\"#\" class=\"btn btn-primary btn-lg\" role=\"button\">Learn more about pynoncode &raquo;</a></p>\\n      </div>\\n</div>\\n<div class=\"container\" style=\"height: 600px; overflow: auto;\">\\n<table class=\"table table-striped table-bordered table-condensed\">\\n      '\n    return header", "edit_actions": ["update-node"]}
{"fixed_source_code": "def read_sensor_data(self, timeout=1.0):\n    mb1a.wait_for_notifications(timeout)\n    raw_data = []\n    for b in self.sensor_data:\n        raw_data.append(b)\n    return raw_data", "buggy_source_code": "def read_sensor_data(self, timeout=1.0):\n    self.wait_for_notifications(timeout)\n    raw_data = []\n    for b in self.sensor_data:\n        raw_data.append(b)\n    return raw_data", "edit_actions": ["update-node"]}
{"fixed_source_code": "def argand_diagram(self, *kwargs):\n    raise NotImplementedError('Argand diagram is not implemented for Lazy signals.Use `compute()` method to convert your signal to a regular one.')", "buggy_source_code": "def argand_diagram(self, *args, **kwargs):\n    raise NotImplementedError('Argand diagram is not implemented for lazy signals. Use `compute()` to convert the signal to a regular one.')", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "@GDef('string_val = ~\\'\\\\\"[^\"\\\\n]\\\\\"\\' ')\ndef string_val(env, node, children):\n    return node.text", "buggy_source_code": "@GDef('string_val = ~\\'\\\\\"[^\"\\\\n]*\\\\\"\\' ')\ndef string_val(env, node, children):\n    return node.text", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clean_string(self, s):\n    return s.replace('\\n', ' ')", "buggy_source_code": "def clean_string(self, s):\n    return clean_str(s).replace('\\n', ' ')", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def gas_intro(request):\n    context = {'title': _('What is Ethereum (ETH) Gas & Web3'), 'card_desc': _('About Ethereum (ETH) Gas and how it works. Gas is the payment that is sent to the ethereum node operators (also called miners), in exchange for execution of a smart contract.'), 'hide_send_tip': True}\n    return TemplateResponse(request, 'gas_intro.html', context)", "buggy_source_code": "def gas_intro(request):\n    context = {'title': _('What is Ethereum (ETH) Gas & Web3 | Gitcoin'), 'card_desc': _('About Ethereum (ETH) Gas and how it works. Gas is the payment that is sent to the ethereum node operators (also called miners), in exchange for execution of a smart contract.'), 'hide_send_tip': True}\n    return TemplateResponse(request, 'gas_intro.html', context)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def help_wrap(text, *args, **kwargs):\n    return _help_wrap(text, *args, **kwargs).replace('\\ufeff', '')", "buggy_source_code": "def help_wrap(text, *args, **kwargs):\n    return _help_wrap(text, *args, **kwargs).replace(u'\\ufeff', u'')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def deal_to_data(activity, change_date, action):\n    return {'deal_id': activity.activity_identifier, 'change_date': change_date, 'action': action, 'target_country': target_country(activity)}", "buggy_source_code": "def deal_to_data(activity, change_date, action):\n    return {'deal_id': activity.activity_identifier, 'change_date': change_date, 'action': action, 'target_country': activity.target_country and activity.target_country.name or ''}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "@property\ndef quantity(self):\n    return u.Quantity(self.array, self.unit, copy=False)", "buggy_source_code": "@property\ndef quantity(self):\n    return Quantity(self.array, self.unit, copy=False)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@classmethod\ndef __getattr__(cls, name):\n    return Mock()", "buggy_source_code": "@classmethod\ndef __getattr__(cls, name):\n    return MagicMock()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cleanup(self):\n    self.send_command('config paging enable')", "buggy_source_code": "def cleanup(self):\n    self.send_command_timing('config paging enable')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def keys(self):\n    return dict(self).keys()", "buggy_source_code": "def keys(self):\n    return dict.keys(self)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def __len__(self):\n    return dict(self).__len__()", "buggy_source_code": "def __len__(self):\n    return dict.__len__(self)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def test_from_imports():\n    from six.moves.queue import Queue\n    assert isinstance(Queue, types.ClassType)\n    from six.moves.configparser import ConfigParser\n    assert isinstance(ConfigParser, types.ClassType)", "buggy_source_code": "def test_from_imports():\n    from six.moves.queue import Queue\n    assert isinstance(Queue, six.class_types)\n    from six.moves.configparser import ConfigParser\n    assert isinstance(ConfigParser, six.class_types)", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_registration1(self):\n    response = get_and_check_page(self, 'huntserver:registration', 200)\n    self.assertEqual(response.context['error'], '')", "buggy_source_code": "def test_registration1(self):\n    response = get_and_check_page(self, 'huntserver:registration', 200)\n    self.assertEqual(message_from_response(response), '')", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_update(self):\n    invalidate_cache_for_item(self)\n    self.validate_name_with_item_group()\n    self.update_variants()\n    self.update_item_price()\n    self.update_template_item()", "buggy_source_code": "def on_update(self):\n    invalidate_cache_for_item(self)\n    self.validate_name_with_item_group()\n    self.update_variants()\n    self.update_item_price()\n    self.update_variants_website_display()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _remote_url(self, remote: str) -> str:\n    url = self._get_git_url(remote=remote)\n    url = re.sub('^(https|git)(:\\\\/\\\\/|@)([^\\\\/:]+)[\\\\/:]([^\\\\/:]+)\\\\/(.+).git$', 'https://\\\\3/\\\\4/\\\\5', url)\n    return url", "buggy_source_code": "def _remote_url(self, remote: str) -> str:\n    url = self._get_git_url(remote=remote)\n    url = re.sub('^(https|git|ssh)(:\\\\/\\\\/|@)([^\\\\/:]+)[\\\\/:]([^\\\\/:]+)\\\\/(.+).git$', 'https://\\\\3/\\\\4/\\\\5', url)\n    return url", "edit_actions": ["update-node"]}
{"fixed_source_code": "def append(self, v):\n    v = self._processNewItem(v, len(self))\n    list.append(self, v)", "buggy_source_code": "def append(self, v):\n    v = self._processItem(v, len(self))\n    list.append(self, v)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(UsageError, self).__init__(*args, **kwargs)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(InvalidContainerSpec, self).__init__(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(UsageError, self).__init__(*args, **kwargs)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(ItemNotFound, self).__init__(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, *args, **kwargs):\n    super(UsageError, self).__init__(*args, **kwargs)", "buggy_source_code": "def __init__(self, *args, **kwargs):\n    super(ContainerNotFound, self).__init__(*args, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getDependsFmt(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveDepends(self.matched_atom[0], atoms=True)", "buggy_source_code": "def getDependsFmt(self):\n    return self.dbconn.retrieveDepends(self.matched_atom[0], atoms=True)", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getTag(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveVersionTag(self.matched_atom[0])", "buggy_source_code": "def getTag(self):\n    return self.dbconn.retrieveVersionTag(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getDiskSize(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveOnDiskSize(self.matched_atom[0])", "buggy_source_code": "def getDiskSize(self):\n    return self.dbconn.retrieveOnDiskSize(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getEclasses(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveEclasses(self.matched_atom[0])", "buggy_source_code": "def getEclasses(self):\n    return self.dbconn.retrieveEclasses(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_filelist(self):\n    dbc = self.get_dbconn()\n    m = list(dbc.retrieveContent(self.matched_atom[0]))\n    m.sort()\n    return m", "buggy_source_code": "def get_filelist(self):\n    c = list(self.dbconn.retrieveContent(self.matched_atom[0]))\n    c.sort()\n    return c", "edit_actions": ["update-node", "update-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getNeeded(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveNeeded(self.matched_atom[0])", "buggy_source_code": "def getNeeded(self):\n    return self.dbconn.retrieveNeeded(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getSlot(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveSlot(self.matched_atom[0])", "buggy_source_code": "def getSlot(self):\n    return self.dbconn.retrieveSlot(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getRevision(self):\n    dbc = self.get_dbconn()\n    return dbc.retrieveRevision(self.matched_atom[0])", "buggy_source_code": "def getRevision(self):\n    return self.dbconn.retrieveRevision(self.matched_atom[0])", "edit_actions": ["move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_request_from_master(self):\n    request = FakeRequest(self, 'GET', '/', headers={'User-Agent': config['master_user_agent']})\n    self.assertTrue(request_from_master(request))", "buggy_source_code": "def test_request_from_master(self):\n    request = DummyRequest('')\n    request.requestHeaders.setRawHeaders('User-Agent', [config['master_user_agent']])\n    self.assertTrue(request_from_master(request))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_request_not_from_master(self):\n    request = FakeRequest(self, 'GET', '/', headers={'User-Agent': 'foobar'})\n    self.assertFalse(request_from_master(request))", "buggy_source_code": "def test_request_not_from_master(self):\n    request = DummyRequest('')\n    request.requestHeaders.setRawHeaders('User-Agent', ['foobar'])\n    self.assertFalse(request_from_master(request))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    NwcSafPpsChannel.__init__(self)\n    self.name = 'CT'", "buggy_source_code": "def __init__(self):\n    NwcSafPpsChannel.__init__(self)\n    self.name = 'CloudType'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def find_order(order_id: OrderID) -> Optional[Order]:\n    return Order.query.get(order_id)", "buggy_source_code": "def find_order(order_id: OrderID) -> Optional[DbOrder]:\n    return DbOrder.query.get(order_id)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def find_order_by_order_number(order_number: OrderNumber) -> Optional[Order]:\n    return Order.query.filter_by(order_number=order_number).one_or_none()", "buggy_source_code": "def find_order_by_order_number(order_number: OrderNumber) -> Optional[DbOrder]:\n    return DbOrder.query.filter_by(order_number=order_number).one_or_none()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _add_article_to_order(order: Order, article: Article, quantity: int) -> OrderItem:\n    return OrderItem(order, article, quantity)", "buggy_source_code": "def _add_article_to_order(order: DbOrder, article: Article, quantity: int) -> DbOrderItem:\n    return DbOrderItem(order, article, quantity)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _update_payment_state(order: Order, state: PaymentState, updated_at: datetime, updated_by_id: UserID) -> None:\n    order.payment_state = state\n    order.payment_state_updated_at = updated_at\n    order.payment_state_updated_by_id = updated_by_id", "buggy_source_code": "def _update_payment_state(order: DbOrder, state: PaymentState, updated_at: datetime, updated_by_id: UserID) -> None:\n    order.payment_state = state\n    order.payment_state_updated_at = updated_at\n    order.payment_state_updated_by_id = updated_by_id", "edit_actions": ["update-node"]}
{"fixed_source_code": "def has_user_placed_orders(user_id: UserID, party_id: PartyID) -> bool:\n    orders_total = Order.query.for_party_id(party_id).placed_by_id(user_id).count()\n    return orders_total > 0", "buggy_source_code": "def has_user_placed_orders(user_id: UserID, party_id: PartyID) -> bool:\n    orders_total = DbOrder.query.for_party_id(party_id).placed_by_id(user_id).count()\n    return orders_total > 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def count_open_orders_for_party(party_id: PartyID) -> int:\n    return Order.query.for_party_id(party_id).filter_by(_payment_state=PaymentState.open.name).count()", "buggy_source_code": "def count_open_orders_for_party(party_id: PartyID) -> int:\n    return DbOrder.query.for_party_id(party_id).filter_by(_payment_state=PaymentState.open.name).count()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def patch_file(source, delta):\n    f = librsync.PatchFile(source, delta)\n    source.seek(0)\n    delta.seek(0)\n    return f", "buggy_source_code": "def patch_file(source, delta):\n    f = librsync.PatchedFile(source, delta)\n    source.seek(0)\n    delta.seek(0)\n    return f", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_stylesheet(self, parser):\n    return self.get_search_path_css(parser) + self.get_override_css()", "buggy_source_code": "def get_stylesheet(self, parser):\n    return self.get_default_css(parser) + self.get_override_css()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    if self.original_format:\n        return self.original_format\n    else:\n        return 'unknown'", "buggy_source_code": "def __unicode__(self):\n    if self.physical_format:\n        return self.physical_format.value\n    else:\n        return 'Unknown'", "edit_actions": ["update-node", "update-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def decision_properties(doc):\n    lines = get_lines(doc)\n    sections = make_sections(lines, decision_section_matchers)\n    props = {}\n    props.update(properties(sections['ZBA DECISION']))\n    return sections", "buggy_source_code": "def decision_properties(doc):\n    lines = get_lines(doc)\n    sections = make_sections(lines, decision_section_matchers)\n    props = {}\n    props.update(properties(sections['zba decision']))\n    return sections", "edit_actions": ["update-node"]}
{"fixed_source_code": "def demo_data_upload(dataset):\n    _can_handle_dataset(dataset)\n    _needs_targetenv()\n    rsync_project(env.demo_data_root, '%(demodata_dir)s/%(dataset)s' % venv(), exclude='.*', delete=True)", "buggy_source_code": "def demo_data_upload(dataset):\n    _can_handle_dataset(dataset)\n    _needs_targetenv()\n    rsync_project(env.demo_data_root, '%(demodata_dir)s/%(dataset)s-depot' % venv(), exclude='.*', delete=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _download_riksdagen_data(dataset):\n    local('%(java_opts)s groovy %(demodata_tools)s/data_riksdagen_se/fetch_data_riksdagen_se.groovy  %(demodata_dir)s/%(dataset)s-download %(dataset)s -f' % venv())", "buggy_source_code": "def _download_riksdagen_data(dataset):\n    local('%(java_opts)s groovy %(demodata_tools)s/data_riksdagen_se/fetch_data_riksdagen_se.groovy  %(demodata_dir)s/%(dataset)s-raw %(dataset)s -f' % venv())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _transform_riksdagen_data(dataset):\n    local('groovy %(demodata_tools)s/data_riksdagen_se/depot_from_data_riksdagen_se.groovy  %(demodata_dir)s/%(dataset)s-download %(demodata_dir)s/%(dataset)s-depot' % venv())", "buggy_source_code": "def _transform_riksdagen_data(dataset):\n    local('groovy %(demodata_tools)s/data_riksdagen_se/depot_from_data_riksdagen_se.groovy  %(demodata_dir)s/%(dataset)s-raw %(demodata_dir)s/%(dataset)s-depot' % venv())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ref_estruturas(cursor, ref):\n    sql = \"\\n        SELECT DISTINCT\\n          ia.ALTERNATIVA_ITEM ALTERNATIVA\\n        , COALESCE( al.DESCRICAO, '' ) DESCR\\n        , LISTAGG(ia.GRUPO_COMP, ', ')\\n          WITHIN GROUP (ORDER BY ia.ALTERNATIVA_ITEM) REF\\n        FROM BASI_050 ia -- insumos de alternativa\\n        LEFT JOIN BASI_070 al -- cadastro de altern. de estrutura e de roteiro\\n          ON al.ROTEIRO = 0 -- seleciona cadastro de alternativas de estrutura\\n         AND al.ALTERNATIVA = ia.ALTERNATIVA_ITEM\\n        WHERE ia.NIVEL_ITEM = 1\\n          AND ia.NIVEL_COMP = 1\\n          AND ia.GRUPO_ITEM = %s\\n        GROUP BY\\n          ia.ALTERNATIVA_ITEM\\n        , al.DESCRICAO\\n        ORDER BY\\n          ia.ALTERNATIVA_ITEM\\n    \"\n    cursor.execute(sql, [ref])\n    return rows_to_dict_list(cursor)", "buggy_source_code": "def ref_estruturas(cursor, ref):\n    sql = \"\\n        SELECT DISTINCT\\n          ia.ALTERNATIVA_ITEM ALTERNATIVA\\n        , COALESCE( al.DESCRICAO, '' ) DESCR\\n        , COALESCE(\\n          ( SELECT\\n              LISTAGG(COALESCE(ec.GRUPO_COMP, ''), ', ')\\n              WITHIN GROUP (ORDER BY ec.ALTERNATIVA_ITEM) REF\\n            FROM BASI_050 ec\\n            WHERE ec.NIVEL_ITEM = ia.NIVEL_ITEM\\n              AND ec.GRUPO_ITEM = ia.GRUPO_ITEM\\n              AND ec.ALTERNATIVA_ITEM = ia.ALTERNATIVA_ITEM\\n              AND ec.NIVEL_COMP = 1\\n          ), ' ') REF\\n        FROM BASI_050 ia -- insumos de alternativa\\n        LEFT JOIN BASI_070 al -- cadastro de altern. de estrutura e de roteiro\\n          ON al.ROTEIRO = 0 -- seleciona cadastro de alternativas de estrutura\\n         AND al.ALTERNATIVA = ia.ALTERNATIVA_ITEM\\n        WHERE ia.NIVEL_ITEM = 1\\n          AND ia.GRUPO_ITEM = %s\\n        ORDER BY\\n          ia.ALTERNATIVA_ITEM\\n    \"\n    cursor.execute(sql, [ref])\n    return rows_to_dict_list(cursor)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __hash__(self):\n    if self._hash is None:\n        self._hash = hash(frozenset(self.model.items()))\n    return self._hash", "buggy_source_code": "def __hash__(self):\n    if not hasattr(self, '_hash'):\n        self._hash = hash(frozenset(self.model.items()))\n    return self._hash", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def SaveGrid(self):\n    self.saver(self._modified)\n    self.deleter(self._deleted)", "buggy_source_code": "def SaveGrid(self):\n    self.saver(self._modified)\n    self._delete_rows(self._deleted)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_creds_by_roles(self, roles, force_new=False):\n    msg = 'Credentials being specified through the config file can not be used with tests that specify using credentials by roles. Either exclude/skip the tests doing this or use either an test_accounts_file or dynamic credentials.'\n    raise exceptions.InvalidConfiguration(msg)", "buggy_source_code": "def get_creds_by_roles(self, roles, force_new=False):\n    msg = 'Credentials being specified through the config file can not be used with tests that specify using credentials by roles. Either exclude/skip the tests doing this or use either a test_accounts_file or dynamic credentials.'\n    raise exceptions.InvalidConfiguration(msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, game):\n    super(SkillshotMode, self).__init__(game=game, priority=5)", "buggy_source_code": "def __init__(self, game):\n    super(SkillshotMode, self).__init__(game=game, priority=7)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@utilities.two_string_args\ndef invalid_processes(url):\n    msg = 'process information from URL %s is invalid' % url\n    current_app.logger.exception(msg)\n    raise collector_error.CollectorError(msg)", "buggy_source_code": "@utilities.one_string_arg\ndef invalid_processes(url):\n    msg = 'process information from URL %s is invalid' % url\n    current_app.logger.exception(msg)\n    raise collector_error.CollectorError(msg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_builtin_variable_completion_proposal(self):\n    for varname in ('False', 'True'):\n        result = self._assist(varname[0])\n        self.assert_completion_in_result(varname, 'builtin', result, type='variable')", "buggy_source_code": "def test_builtin_variable_completion_proposal(self):\n    for varname in ('False', 'True'):\n        result = self._assist(varname[0])\n        self.assert_completion_in_result(varname, 'builtin', result, type='instance')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_from_package_import_mod(self):\n    code = 'from package import nestedmod\\nnest'\n    result = self._assist(code)\n    self.assert_completion_in_result('nestedmod', 'global', result)", "buggy_source_code": "def test_from_package_import_mod(self):\n    code = 'from package import nestedmod\\nnest'\n    result = self._assist(code)\n    self.assert_completion_in_result('nestedmod', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def assert_completion_not_in_result(self, name, kind, result):\n    for proposal in result:\n        if proposal.name == name and proposal.kind == kind:\n            self.fail('completion <%s> was proposed' % name)", "buggy_source_code": "def assert_completion_not_in_result(self, name, scope, result):\n    for proposal in result:\n        if proposal.name == name and proposal.scope == scope:\n            self.fail('completion <%s> was proposed' % name)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_from_imports_inside_functions(self):\n    code = 'def f():\\n    from samplemod import SampleClass\\n    Sample'\n    result = self._assist(code)\n    self.assert_completion_in_result('SampleClass', 'local', result)", "buggy_source_code": "def test_from_imports_inside_functions(self):\n    code = 'def f():\\n    from samplemod import SampleClass\\n    Sample'\n    result = self._assist(code)\n    self.assert_completion_in_result('SampleClass', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_attribute_module_completion_proposal(self):\n    code = 'class Some(object):\\n  import os\\nSome.o'\n    result = self._assist(code)\n    self.assert_completion_in_result('os', 'attribute', result, type='module')", "buggy_source_code": "def test_attribute_module_completion_proposal(self):\n    code = 'class Some(object):\\n  import os\\nSome.o'\n    result = self._assist(code)\n    self.assert_completion_in_result('os', 'imported', result, type='module')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_simple_import(self):\n    code = 'import samplemod\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('samplemod', 'global', result)", "buggy_source_code": "def test_simple_import(self):\n    code = 'import samplemod\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('samplemod', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_imports_inside_function(self):\n    code = 'def f():\\n    import sys\\n    sy'\n    result = self._assist(code)\n    self.assert_completion_in_result('sys', 'local', result)", "buggy_source_code": "def test_imports_inside_function(self):\n    code = 'def f():\\n    import sys\\n    sy'\n    result = self._assist(code)\n    self.assert_completion_in_result('sys', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_from_import_function(self):\n    code = 'from samplemod import sample_func\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('sample_func', 'global', result)", "buggy_source_code": "def test_from_import_function(self):\n    code = 'from samplemod import sample_func\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('sample_func', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_local_variable_completion_proposal(self):\n    code = 'def foo():\\n  xvar = 5\\n  x'\n    result = self._assist(code)\n    self.assert_completion_in_result('xvar', 'local', result, 'variable')", "buggy_source_code": "def test_local_variable_completion_proposal(self):\n    code = 'def foo():\\n  xvar = 5\\n  x'\n    result = self._assist(code)\n    self.assert_completion_in_result('xvar', 'local', result, 'instance')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_builtin_exception_completion_proposal(self):\n    code = 'def blah():\\n  Z'\n    result = self._assist(code)\n    self.assert_completion_in_result('ZeroDivisionError', 'builtin', result, type='exception')", "buggy_source_code": "def test_builtin_exception_completion_proposal(self):\n    code = 'def blah():\\n  Z'\n    result = self._assist(code)\n    self.assert_completion_in_result('ZeroDivisionError', 'builtin', result, type='class')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_from_import_star(self):\n    code = 'from samplemod import *\\nSample'\n    result = self._assist(code)\n    self.assert_completion_in_result('SampleClass', 'global', result)", "buggy_source_code": "def test_from_import_star(self):\n    code = 'from samplemod import *\\nSample'\n    result = self._assist(code)\n    self.assert_completion_in_result('SampleClass', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_completing_imported_names(self):\n    code = 'import sys\\na = sy'\n    result = self._assist(code)\n    self.assert_completion_in_result('sys', 'global', result)", "buggy_source_code": "def test_completing_imported_names(self):\n    code = 'import sys\\na = sy'\n    result = self._assist(code)\n    self.assert_completion_in_result('sys', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_from_import_star2(self):\n    code = 'from samplemod import *\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('sample_func', 'global', result)\n    self.assert_completion_in_result('sample_var', 'global', result)", "buggy_source_code": "def test_from_import_star2(self):\n    code = 'from samplemod import *\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('sample_func', 'imported', result)\n    self.assert_completion_in_result('sample_var', 'imported', result)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_from_import_variable(self):\n    code = 'from samplemod import sample_var\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('sample_var', 'global', result)", "buggy_source_code": "def test_from_import_variable(self):\n    code = 'from samplemod import sample_var\\nsample'\n    result = self._assist(code)\n    self.assert_completion_in_result('sample_var', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_global_variable_completion_proposal(self):\n    code = 'yvar = 5\\ny'\n    result = self._assist(code)\n    self.assert_completion_in_result('yvar', 'global', result, 'variable')", "buggy_source_code": "def test_global_variable_completion_proposal(self):\n    code = 'yvar = 5\\ny'\n    result = self._assist(code)\n    self.assert_completion_in_result('yvar', 'global', result, 'instance')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def assert_completion_not_in_result(self, name, kind, result):\n    for proposal in result:\n        if proposal.name == name and proposal.kind == kind:\n            self.fail('completion <%s> was proposed' % name)", "buggy_source_code": "def assert_completion_not_in_result(self, name, scope, result):\n    for proposal in result:\n        if proposal.name == name and proposal.scope == scope:\n            self.fail('completion <%s> was proposed' % name)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_from_import_class(self):\n    code = 'from samplemod import SampleClass\\nSample'\n    result = self._assist(code)\n    self.assert_completion_in_result('SampleClass', 'global', result)", "buggy_source_code": "def test_from_import_class(self):\n    code = 'from samplemod import SampleClass\\nSample'\n    result = self._assist(code)\n    self.assert_completion_in_result('SampleClass', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_attribute_variable_completion_proposal(self):\n    code = 'class AClass(object):\\n  def foo(self):\\n    self.bar = 1\\n    self.b'\n    result = self._assist(code)\n    self.assert_completion_in_result('bar', 'attribute', result, type='variable')", "buggy_source_code": "def test_attribute_variable_completion_proposal(self):\n    code = 'class AClass(object):\\n  def foo(self):\\n    self.bar = 1\\n    self.b'\n    result = self._assist(code)\n    self.assert_completion_in_result('bar', 'attribute', result, type='instance')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_global_module_completion_proposal(self):\n    code = 'import operator\\no'\n    result = self._assist(code)\n    self.assert_completion_in_result('operator', 'global', result, type='module')", "buggy_source_code": "def test_global_module_completion_proposal(self):\n    code = 'import operator\\no'\n    result = self._assist(code)\n    self.assert_completion_in_result('operator', 'imported', result, type='module')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_local_module_completion_proposal(self):\n    code = 'def foo():\\n  import types\\n  t'\n    result = self._assist(code)\n    self.assert_completion_in_result('types', 'local', result, type='module')", "buggy_source_code": "def test_local_module_completion_proposal(self):\n    code = 'def foo():\\n  import types\\n  t'\n    result = self._assist(code)\n    self.assert_completion_in_result('types', 'imported', result, type='module')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_completing_imported_names_with_as(self):\n    code = 'import sys as mysys\\na = mys'\n    result = self._assist(code)\n    self.assert_completion_in_result('mysys', 'global', result)", "buggy_source_code": "def test_completing_imported_names_with_as(self):\n    code = 'import sys as mysys\\na = mys'\n    result = self._assist(code)\n    self.assert_completion_in_result('mysys', 'imported', result)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _all_list_items(self):\n    return [self.ui.toolbar_layout_list.item(i).text() for i in range(self.ui.toolbar_layout_list.count())]", "buggy_source_code": "def _all_list_items(self):\n    return [self.ui.toolbar_layout_list.item(i).action_name for i in range(self.ui.toolbar_layout_list.count())]", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "@property\ndef ret_type(self):\n    return self.ret_type", "buggy_source_code": "@property\ndef ret_type(self):\n    return self.retty", "edit_actions": ["update-node"]}
{"fixed_source_code": "def deploytemplate(batch, channels, size, datain):\n    deploystring = 'name: \"Autogen\"\\n    input: \"%s\"\\n    input_dim: %i\\n    input_dim: %i\\n    input_dim: %i\\n    input_dim: %i\\n' % (datain, batch, channels, size, size)\n    return deploystring", "buggy_source_code": "def deploytemplate(batch, channels, size, datain):\n    deploystring = 'name: \"Autogen\"\\ninput: \"%s\"\\ninput_dim: %i\\ninput_dim: %i\\ninput_dim: %i\\ninput_dim: %i\\n' % (datain, batch, channels, size, size)\n    return deploystring", "edit_actions": ["update-node"]}
{"fixed_source_code": "def create_driver(self, worker_number, no_timeout=False):\n    return ChromiumAndroidDriver(self, worker_number, pixel_tests=self.get_option('pixel_tests'), no_timeout=no_timeout)", "buggy_source_code": "def create_driver(self, worker_number, no_timeout=False):\n    return ChromiumAndroidDriver(self, worker_number, pixel_tests=self.get_option('pixel_tests'), no_timeout=True)", "edit_actions": ["delete-node"]}
{"fixed_source_code": "@blueprint.route('/index/<record>', methods=['GET'])\ndef get_index_record(record):\n    ret = blueprint.index_driver.get(record)\n    return (flask.jsonify(ret), 200)", "buggy_source_code": "@blueprint.route('/index/<path:record>', methods=['GET'])\ndef get_index_record(record):\n    ret = blueprint.index_driver.get(record)\n    return (flask.jsonify(ret), 200)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@blueprint.route('/index/<record>/versions', methods=['GET'])\ndef get_all_index_record_versions(record):\n    ret = blueprint.index_driver.get_all_versions(record)\n    return (flask.jsonify(ret), 200)", "buggy_source_code": "@blueprint.route('/index/<path:record>/versions', methods=['GET'])\ndef get_all_index_record_versions(record):\n    ret = blueprint.index_driver.get_all_versions(record)\n    return (flask.jsonify(ret), 200)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@blueprint.route('/index/<record>/latest', methods=['GET'])\ndef get_latest_index_record_versions(record):\n    ret = blueprint.index_driver.get_latest_version(record)\n    return (flask.jsonify(ret), 200)", "buggy_source_code": "@blueprint.route('/index/<path:record>/latest', methods=['GET'])\ndef get_latest_index_record_versions(record):\n    ret = blueprint.index_driver.get_latest_version(record)\n    return (flask.jsonify(ret), 200)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, form):\n    self.form = form\n    self.formats = {}\n    self.doc_ids = form.doc_ids()", "buggy_source_code": "def __init__(self, form):\n    self.form = form\n    self.formats = {}\n    self.doc_ids = form.document_ids()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def eq_join(self, other, left_attr):\n    return EqJoin(self, other, left_attr)", "buggy_source_code": "def eq_join(self, left_attr, other):\n    return EqJoin(self, left_attr, other)", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@property\ndef ELEMENT(self):\n    return [1]", "buggy_source_code": "@property\ndef ELEMENT(self):\n    return [2]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def bypass(f):\n    if ANCIENT:\n        return f\n    else:\n        return lambda *x, **y: None", "buggy_source_code": "def bypass(f):\n    if ANCIENT:\n        return f\n    else:\n        return staticmethod(lambda *x, **y: None)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def _compute_magnitude(self, rup, coeffs):\n    return coeffs['b1'] + coeffs['b2'] * rup.mag", "buggy_source_code": "@classmethod\ndef _compute_magnitude(cls, rup, coeffs):\n    return coeffs['b1'] + coeffs['b2'] * rup.mag", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_queryset(self):\n    return self.model._default_manager.filter(status=Dog.STATUS_SUCCESS)", "buggy_source_code": "def get_queryset(self):\n    return self.model._default_manager.filter(dogStatus=Dog.STATUS_SUCCESS)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_quoted_empty_values():\n    text = 'a b c\\n1 2 \" \\n \"'\n    table = ascii.read(StringIO(text))\n    assert table['c'][0] is ma.masked", "buggy_source_code": "def test_quoted_empty_values():\n    text = 'a b c\\n1 2 \" \\n \"'\n    table = read_basic(text, fail_parallel=True)\n    assert table['c'][0] is ma.masked", "edit_actions": ["update-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remove(self, data):\n    self.content.remove(data)", "buggy_source_code": "def remove(self, data):\n    self._content.remove(data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_valid_grid_ref(grid_ref_string):\n    ptn = re.compile('^[a-zA-Z]{1}[0-9]{3}[a-zA-Z]{1}[0-9]{3}$')\n    if ptn.match(grid_ref_string) is not None:\n        return True\n    else:\n        return False", "buggy_source_code": "def is_valid_grid_ref(grid_ref_string):\n    ptn = re.compile('^[a-zA-Z]{1}[0-9]{3}[a-zA-Z]{1}[0-9]{3,4}$')\n    if ptn.match(grid_ref_string) is not None:\n        return True\n    else:\n        return False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getAnswersByQuestion(qid):\n    c.execute('SELECT * FROM answers WHERE qid=? ORDER BY upvotes DESC', qid)\n    return c.fetchall()", "buggy_source_code": "def getAnswersByQuestion(qid):\n    c.execute('SELECT * FROM answers WHERE qid=:qid ORDER BY upvotes DESC', {'qid': qid})\n    return c.fetchall()", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def getQuestionById(qid):\n    c.execute('SELECT * FROM questions WHERE qid=?', qid)\n    return c.fetchone()", "buggy_source_code": "def getQuestionById(qid):\n    c.execute('SELECT * FROM questions WHERE qid=:qid', {'qid': qid})\n    return c.fetchone()", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def relDstPathOf(self, loc):\n    loc = self.absDstPathOf(loc)\n    loc = self.stripCommonPrefix(loc, self._dstRoot)\n    loc = self.stripCommonPrefix(loc, self._relLoc)\n    return loc", "buggy_source_code": "def relDstPathOf(self, loc):\n    loc = self.absDstPathOf(loc)\n    loc = self.stripCommonPrefix(loc, self._dstRoot)\n    loc = posixpath.join(self._relRoot, loc)\n    return loc", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef workbench_scenarios():\n    return [('TableXBlock', '<vertical_demo>\\n\\t\\t\\t\\t<table/>\\n\\t\\t\\t\\t</vertical_demo>\\n\\t\\t\\t ')]", "buggy_source_code": "@staticmethod\ndef workbench_scenarios():\n    return [('TableXBlock', '<vertical_demo>\\n  <table url_name=\"591ea471f35e40319af625e81fe06b2b\" display_name=\"Table XBlock\" showColumns=\"[u\\'[Column name]\\', u\\'Exercise\\']\" currentStructure=\"Table\" tableStructure=\"{u\\'Table\\': {u\\'rows\\': [], u\\'displayName\\': u\\'Table XBlock\\', u\\'rowTypes\\': [u\\'normal\\', u\\'parent\\', u\\'appendable\\', u\\'parentAppendable\\'], u\\'columnTypes\\': [u\\'text\\', u\\'textarea\\', u\\'checkbox\\', u\\'label\\', u\\'number\\', u\\'xAPI button\\', u\\'xAPI onetimeButton\\'], u\\'_timestamp\\': 1414598392210L, u\\'allowNewRows\\': True, u\\'allowNewColumns\\': False, u\\'columns\\': [{u\\'type\\': u\\'text\\', u\\'placeholder\\': u\\'\\', u\\'name\\': u\\'Exercise\\', u\\'context\\': False, u\\'xAPI\\': False}], u\\'xAPIObject\\': \\'\\'}}\"/>\\n\\t\\t\\t\\t</vertical_demo>\\n\\t\\t\\t ')]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def show_name(self, p):\n    return get_perssmsion_name(p)", "buggy_source_code": "def show_name(self, p):\n    return get_permission_name(p)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def label_from_instance(self, p):\n    return get_perssmsion_name(p)", "buggy_source_code": "def label_from_instance(self, p):\n    return get_permission_name(p)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.file = open('items.jl', 'wb')", "buggy_source_code": "def __init__(self):\n    self.file = open('items.json', 'wb')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_quota_validation_required(self, request_uri):\n    if request_uri.startswith('/marathon/v2/delete') or request_uri.startswith('/marathon/v2/eventSubscriptions'):\n        return False\n    return True", "buggy_source_code": "def is_quota_validation_required(self, request_uri):\n    if request_uri.startswith('/marathon/v2/tasks/delete') or request_uri.startswith('/marathon/v2/eventSubscriptions'):\n        return False\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def write_mutual_friends(self, friend_list):\n    for user in mutual_friends:\n        user = extract_output_fields(user)\n        self._writer.writerow(user.values())", "buggy_source_code": "def write_mutual_friends(self, friend_list):\n    for user in friend_list:\n        user = extract_output_fields(user)\n        self._writer.writerow(user.values())", "edit_actions": ["update-node"]}
{"fixed_source_code": "@blueprint.route('/me/avatar', methods=['DELETE'])\n@respond_no_content\ndef delete():\n    user = get_current_user_or_404()._user\n    avatar_service.remove_avatar_image(user)\n    flash_success('Dein Avatarbild wurde entfernt.')", "buggy_source_code": "@blueprint.route('/me/avatar', methods=['DELETE'])\n@respond_no_content\ndef delete():\n    user = _get_current_user_or_404()._user\n    avatar_service.remove_avatar_image(user)\n    flash_success('Dein Avatarbild wurde entfernt.')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef class_name(self):\n    return self._handle.get_toolkit_name()", "buggy_source_code": "@property\ndef class_name(self):\n    return self._handle.getRoleName()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_competitor_endpoint_list(anon_api_client, competitor):\n    path = reverse('competitor-list')\n    response = anon_api_client.get(path)\n    assert response.status_code == status.HTTP_401_UNAUTHORIZED", "buggy_source_code": "def test_competitor_endpoint_list(anon_api_client, competitor):\n    path = reverse('competitor-list')\n    response = anon_api_client.get(path)\n    assert response.status_code == status.HTTP_200_OK", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_competitor_endpoint_detail(anon_api_client, competitor):\n    path = reverse('competitor-detail', args=(str(competitor.id),))\n    response = anon_api_client.get(path)\n    assert response.status_code == status.HTTP_401_UNAUTHORIZED", "buggy_source_code": "def test_competitor_endpoint_detail(anon_api_client, competitor):\n    path = reverse('competitor-detail', args=(str(competitor.id),))\n    response = anon_api_client.get(path)\n    assert response.status_code == status.HTTP_200_OK", "edit_actions": ["update-node"]}
{"fixed_source_code": "def tearDown(self):\n    config.remove_cache_folder(self.dumpname)", "buggy_source_code": "def tearDown(self):\n    config.remove_cache_folder(self.cache_dumpname)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate_role(roles, role):\n    if role.upper in roles:\n        return True\n    else:\n        return False", "buggy_source_code": "def validate_role(roles, role):\n    if role.upper() in roles:\n        return True\n    else:\n        return False", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def absolute_path(path):\n    return path if '://' in str(path) else os.path.abspath(path)", "buggy_source_code": "def absolute_path(path):\n    return path if b'://' in tf.compat.as_bytes(path) else os.path.abspath(path)", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def default_ldflags(self):\n    return list(set().union(LDFLAGS, clang_buildtype[self.buildtype]['ldflags']))", "buggy_source_code": "def default_ldflags(self):\n    return list(set().union(LDFLAGS, self.compiler.ldflags))", "edit_actions": ["move-tree", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def default_ldflags(self):\n    return list(set().union(LDFLAGS, ['-dead_strip_dylibs', '-headerpad_max_install_names'], clang_buildtype[self.buildtype]['ldflags']))", "buggy_source_code": "def default_ldflags(self):\n    return list(set().union(LDFLAGS, ['-dead_strip_dylibs', '-headerpad_max_install_names'], self.compiler.ldflags))", "edit_actions": ["move-tree", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_wrong_flavor(self):\n    response = self.get('/api/v1.1/flavors/%d' % 22)\n    self.assertItemNotFound(response)", "buggy_source_code": "def test_wrong_flavor(self):\n    response = self.myget('flavors/%d' % 23)\n    self.assertItemNotFound(response)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def reduce():\n    t = dxpy.open_dxtable(job['input']['tableId'])\n    t.close()\n    job['output']['mappings'] = t.get_id()", "buggy_source_code": "def reduce():\n    t = dxpy.open_dxgtable(job['input']['tableId'])\n    t.close()\n    job['output']['mappings'] = t.get_id()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def rotateByAngleAxis(self, angle, axis):\n    if self._locked:\n        return\n    self._transformation.rotateByAxis(angle, axis)\n    self.transformationChanged.emit(self)", "buggy_source_code": "def rotateByAngleAxis(self, angle, axis):\n    if self._locked:\n        return\n    self._transformation.rotateByAxis(math.radians(angle), axis)\n    self.transformationChanged.emit(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def arn(self):\n    return 'arn:openstack:senlin::%s:%s' % (urlparse.quote(self.tenant, ''), self._tenant_path())", "buggy_source_code": "def arn(self):\n    proj = urlparse.quote(self.tenant, '')\n    return 'arn:openstack:senlin::%s:%s' % (proj, self._tenant_path())", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def remote_event_Power(arg):\n    lookup_local_action('power').call(arg)", "buggy_source_code": "def remote_event_Power(arg):\n    lookup_local_action('LoopOnAll').call() if arg == 'On' else lookup_local_action('PauseOnAll').call()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<VlanBinding(%d,%s,%s)>' % (self.vlan_id, self.network_id)", "buggy_source_code": "def __repr__(self):\n    return '<VlanBinding(%d,%s)>' % (self.vlan_id, self.network_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef diameter(self):\n    return self.radius * 2", "buggy_source_code": "@property\ndef diameter(self):\n    return (self.height + self.width) / 2", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def leaveEvent(self, event):\n    QWidget.leaveEvent(self, event)\n    if HelpedWidget.__error_popup is not None:\n        HelpedWidget.__error_popup.hide()", "buggy_source_code": "def leaveEvent(self, event):\n    QWidget.leaveEvent(self, event)\n    if self.__error_popup is not None:\n        self.__error_popup.hide()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def delete_s(self, dn):\n    datastore.Redis.instance().delete(self._redis_prefix + dn)", "buggy_source_code": "def delete_s(self, dn):\n    datastore.Redis.instance().delete('%s%s' % (self.__redis_prefix, dn))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "delete-node"]}
{"fixed_source_code": "def first_sense(ambigous_word):\n    return wn.synsets(ambiguous_word)[0]", "buggy_source_code": "def first_sense(ambiguous_word):\n    return wn.synsets(ambiguous_word)[0]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def breathe_effect(self, rgb1=None, rgb2=None, speed=1, splotch=None):\n    return self._set_multi_mode_effect(Effect.BREATHE, rgb1, rgb2, speed, splotch)", "buggy_source_code": "def breathe_effect(self, rgb1=None, rgb2=None, splotch=None):\n    return self._set_multi_mode_effect(Effect.BREATHE, rgb1, rgb2, splotch=splotch)", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_oid(self, username):\n    return 'MPASSOID.{user_hash}'.format(user_hash=hashlib.sha1('ldap_test' + username).hexdigest())[:30]", "buggy_source_code": "def get_oid(self, username):\n    return 'MPASSOID.{user_hash}'.format(user_hash=hashlib.sha1('ad_oulu' + username).hexdigest())[:30]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def center(x=''):\n    print('flash green ' + str(x))\n    off()\n    green.start(20)\n    green.ChangeFrequency(MEDIUM)", "buggy_source_code": "def center(x=''):\n    print('flash green ' + str(x))\n    off()\n    green.start(20)\n    green.ChangeFrequency(FAST)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def send_simulation(self, routing, message, reply_to=None):\n    self.LOGGER.debug('-->' + routing)\n    self.send(Node.SIMULATION + self.name, routing, message, reply_to=reply_to)", "buggy_source_code": "def send_simulation(self, routing, message, reply_to=None):\n    self.LOGGER.debug(' ----> ' + routing)\n    self.send(Node.SIMULATION + self.name, routing, message, reply_to=reply_to)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def apply_template(jj2_template, data, output_file):\n    with open(output_file, 'w') as output:\n        rendered_content = jj2_template.render(**data)\n        output.write(rendered_content.encode('utf-8'))", "buggy_source_code": "def apply_template(jj2_template, data, output_file):\n    with open(output_file, 'wb') as output:\n        rendered_content = jj2_template.render(**data)\n        output.write(rendered_content.encode('utf-8'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def reset(self):\n    self.time = time.time()\n    self.iter = 0", "buggy_source_code": "def reset(self):\n    self.start_time = time.time()\n    self.iter = 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.registration = ['sourceipaddress', 'destinationipaddress']\n    self.priority = 20\n    self.geoip = pygeoip.GeoIP('/home/mozdef/envs/mozdef/mq/GeoLiteCity.dat', pygeoip.MEMORY_CACHE)", "buggy_source_code": "def __init__(self):\n    self.registration = ['sourceipaddress', 'destinationipaddress']\n    self.priority = 20\n    self.geoip = pygeoip.GeoIP('/home/mozdef/envs/mozdef/bot/GeoLiteCity.dat', pygeoip.MEMORY_CACHE)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _add_column(self, card=None, data=None, comment=''):\n    if not self.is_complex():\n        return self._read_real(card)\n    raise NotImplementedError('complex DMI')", "buggy_source_code": "def _add_column(self, card=None, data=None, comment=''):\n    if not self.is_complex:\n        return self._read_real(card)\n    raise NotImplementedError('complex DMI')", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def is_real(self):\n    return not self.is_complex()", "buggy_source_code": "@property\ndef is_real(self):\n    return not self.is_complex", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def isReal(self):\n    self.deprecated('isReal()', 'is_real()', '0.8')\n    return self.is_real()", "buggy_source_code": "def isReal(self):\n    self.deprecated('isReal()', 'is_real', '0.8')\n    return self.is_real", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def isComplex(self):\n    self.deprecated('isComplex()', 'is_complex()', '0.8')\n    return self.is_complex()", "buggy_source_code": "def isComplex(self):\n    self.deprecated('isComplex()', 'is_complex', '0.8')\n    return self.is_complex", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, cards):\n    self.cards = cards\n    self._count_cards()\n    self._card_count = dict()", "buggy_source_code": "def __init__(self, cards):\n    self.cards = cards\n    self._card_count = dict()\n    self._count_cards()", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def AttachNewDataFrame(session, dataframe_name):\n    session = e.AttachDataFrame(session, dataframe_name)\n    return session", "buggy_source_code": "def AttachNewDataFrame(session, dataframe_name):\n    session = e.AttachNewDataFrame(session, dataframe_name)\n    return session", "edit_actions": ["update-node"]}
{"fixed_source_code": "def log_subclade_rankings(n_taxa_1, n_taxa_2):\n    lsr = 0.0\n    lsr += math.lgamma(n_taxa_1 + n_taxa_2 + 1)\n    lsr -= math.lgamma(n_taxa_1)\n    lsr -= math.lgamma(n_taxa_2)\n    return lsr", "buggy_source_code": "def log_subclade_rankings(n_taxa_1, n_taxa_2):\n    lsr = 0.0\n    lsr += math.lgamma(n_taxa_1 + n_taxa_2 - 1)\n    lsr -= math.lgamma(n_taxa_1)\n    lsr -= math.lgamma(n_taxa_2)\n    return lsr", "edit_actions": ["update-node"]}
{"fixed_source_code": "def reapply(self, circ):\n    self._modifiers(circ.id(self.arg[0]))", "buggy_source_code": "def reapply(self, circ):\n    self._modifiers(circ.iden(self.arg[0]))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def script_sayPlayStatus(self, gesture):\n    obj = self.status(self.SPLPlayStatus).children[0]\n    ui.message(obj.name)", "buggy_source_code": "def script_sayPlayStatus(self, gesture):\n    if self.statusAPI(0, 104, ret=True):\n        ui.message('Play status: Playing')\n    else:\n        ui.message('Play status: Stopped')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@open_file(1, mode='w')\ndef to_indra_statements_json(graph):\n    return [statement.to_json() for statement in to_indra_statements(graph)]", "buggy_source_code": "def to_indra_statements_json(graph) -> List[Mapping[str, Any]]:\n    return [statement.to_json() for statement in to_indra_statements(graph)]", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_header_config_string(self):\n    result = ReverseProxiedEnvironment.to_header_candidates('prefix-header')\n    self.assertEqual(result, ['HTTP_PREFIX_HEADER'])", "buggy_source_code": "def test_header_config_string(self):\n    result = ReverseProxiedEnvironment.to_header_candidates('prefix-header')\n    self.assertSetEqual(set(result), set(['HTTP_PREFIX_HEADER']))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree"]}
{"fixed_source_code": "def test_header_config_ok(self):\n    result = ReverseProxiedEnvironment.to_header_candidates(['prefix-header1', 'prefix-header2'])\n    self.assertEqual(result, ['HTTP_PREFIX_HEADER1', 'HTTP_PREFIX_HEADER2'])", "buggy_source_code": "def test_header_config_ok(self):\n    result = ReverseProxiedEnvironment.to_header_candidates(['prefix-header1', 'prefix-header2'])\n    self.assertSetEqual(set(result), set(['HTTP_PREFIX_HEADER1', 'HTTP_PREFIX_HEADER2']))", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def setup_routes(self):\n    config['routes.map'] = make_map()", "buggy_source_code": "def setup_routes(self):\n    config['routes.map'] = routing.make_map()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def corps_accueil():\n    html = '\\n        <div class=\"container\">\\n            <div class=\"sixteen columns main-content\">\\n                <div class=\"sixteen columns\">\\n                    <div class=\"tagline\">\\n                        <p>Bienvenue sur le site de l\\'<strong>ASA Sourdoire</strong>, le site de gestion de l\\'irrigation par internet.<br>\\n                        Simple. Minimal. Easy-to-use.</p>\\n                    </div>\\n                    <hr>\\n                    <p style =\"font-size: large; text-align: justify;\">(Re)Découvrez l\\'ASA Sourdoire désormais connecté ! Vous pouvez désormais rentrer vos relevés de chez vous par internet,\\n                     votre consommation est alors mise à jour en direct, et les dialogues avec le gestionnaire sont désormais plus simples.</p>\\n                     <br />\\n                    <hr>\\n                    <section class=\"container\">\\n\\n        <div class=\"one-third column\" style =\"text-align: center;\" >\\n        <img src=\"../images/logo_conso.png\" height=\"60em\" />\\n            <h3> Consommation</h3>\\n            <p style =\"text-align: justify;\">Vous pouvez consulter votre consommation quand vous voulez, suivre l\\'évolution de celle ci et garder un suivi personnalisé de vos bornes et parcelles.</p>\\n        </div>\\n        <div class=\"one-third column\" style =\"text-align: center;\">\\n        <img src=\"../images/logo_releve.png\" height=\"60em\" />\\n            <h3> Fini la galère des relevés </h3>\\n            <p style =\"text-align: justify;\">Grâce à ce nouveau système vous pouvez entrer vous même un relevé, plus besoin d\\'intermédiaire !</p>\\n        </div>\\n        <div class=\"one-third column\" style =\"text-align: center;\">\\n        <img src=\"../images/signal.png\" height=\"60em\" />\\n            <h3> Signalez les problèmes</h3>\\n            <p style =\"text-align: justify;\">Maintenant vous pouvez signalez quand il y a un soucis sur une des bornes, un relevé, consulter l\\'état du réseau et bien plus encore...</p>\\n        </div>\\n\\n        </section>\\n\\n                     <br/>\\n                     <fieldset>\\n                        <legend style=\"font-size:20px; margin-bottom:20px; margin-top:10px;\">Aide</legend>\\n                        <p>Commencez à l\\'utiliser dès maintenant ! Si vous rencontrez des difficultés, consultez nos tutoriels vidéo en <a href=\"../page_tuto.py\">cliquant ici !</a></p>\\n                    </fieldset>\\n                </div>\\n            </div>\\n        </div>\\n    '\n    return html", "buggy_source_code": "def corps_accueil():\n    html = '\\n        <div class=\"container\">\\n            <div class=\"sixteen columns main-content\">\\n                <div class=\"sixteen columns\">\\n                    <div class=\"tagline\">\\n                        <p>Bienvenue sur le site de l\\'<strong>ASA Sourdoire</strong>, le site de gestion de l\\'irrigation par internet.<br>\\n                        Simple. Minimal. Easy-to-use.</p>\\n                    </div>\\n                    <hr>\\n                    <p style =\"font-size: large; text-align: justify;\">(Re)Découvrez l\\'ASA Sourdoire désormais connecté ! Vous pouvez désormais rentrer vos relevés de chez vous par internet,\\n                     votre consommation est alors mise à jour en direct, et les dialogues avec le gestionnaire sont désormais plus simples.</p>\\n                     <br />\\n                    <hr>\\n                    <section class=\"container\">\\n\\n        <div class=\"one-third column\" style =\"text-align: center;\" >\\n        <img src=\"../images/logo_conso.png\" height=\"60em\" />\\n            <h3> Consommation</h3>\\n            <p style =\"text-align: justify;\">Vous pouvez consulter votre consommation quand vous voulez, suivre l\\'évolution de celle ci et garder un suivi personnalisé de vos bornes et parcelles.</p>\\n        </div>\\n        <div class=\"one-third column\" style =\"text-align: center;\">\\n        <img src=\"../images/logo_releve.png\" height=\"60em\" />\\n            <h3> Finie la galère des relevés </h3>\\n            <p style =\"text-align: justify;\">Grâce à ce nouveau système vous pouvez entrer vous même un relevé, plus besoin d\\'intermédiaire !</p>\\n        </div>\\n        <div class=\"one-third column\" style =\"text-align: center;\">\\n        <img src=\"../images/signal.png\" height=\"60em\" />\\n            <h3> Signalez les problèmes</h3>\\n            <p style =\"text-align: justify;\">Maintenant vous pouvez signalez quand il y a un soucis sur une des bornes, un relevé, consulter l\\'état du réseau et bien plus encore...</p>\\n        </div>\\n\\n        </section>\\n\\n                     <br/>\\n                     <fieldset>\\n                        <legend style=\"font-size:20px; margin-bottom:20px; margin-top:10px;\">Aide</legend>\\n                        <p>Commencez à l\\'utiliser dès maintenant ! Si vous rencontrez des difficultés, consultez nos tutoriels vidéo en <a href=\"../page_tuto.py\">cliquant ici !</a></p>\\n                    </fieldset>\\n                </div>\\n            </div>\\n        </div>\\n    '\n    return html", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_isotope_set(ans):\n    return {iso.name for ai in ans for iso in ai.itervalues()}", "buggy_source_code": "def get_isotope_set(ans):\n    return {k for ai in ans for k in ai.isotope_keys}", "edit_actions": ["update-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_item_code(order_item):\n    asin = order_item.ASIN\n    item_code = frappe.db.get_value('Item', {'amazon_item_code': asin}, 'item_code')\n    if item_code:\n        return item_code", "buggy_source_code": "def get_item_code(order_item):\n    sku = order_item.SellerSKU\n    item_code = frappe.db.get_value('Item', {'item_code': sku}, 'item_code')\n    if item_code:\n        return item_code", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@forever\ndef GenerateFloats(outchan, epsilon=0.1):\n    x = 0.0\n    while True:\n        outchan.write(x)\n        x += epsilon\n        yield", "buggy_source_code": "@forever\ndef GenerateFloats(outchan, epsilon=0.1):\n    counter = 0\n    while True:\n        outchan.write(counter * epsilon)\n        counter += 1\n        yield", "edit_actions": ["update-node", "update-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.dirname = tempfile.mkdtemp()\n    self.cache = get_cache('file:///%s' % self.dirname)", "buggy_source_code": "def setUp(self):\n    self.dirname = tempfile.mkdtemp()\n    self.cache = get_cache('file://%s' % self.dirname)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_devnull(self):\n    sandbox = DirectorySandbox(self.dir)\n    sandbox.run(self._file_writer(os.devnull))", "buggy_source_code": "def test_devnull(self, tmpdir):\n    sandbox = DirectorySandbox(str(tmpdir))\n    sandbox.run(self._file_writer(os.devnull))", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def to_dict(self):\n    json_dict = dict()\n    json_dict['inline_keyboard'] = [[json.loads(button.to_json()) for button in row] for row in self.keyboard]\n    return json_dict", "buggy_source_code": "def to_dict(self):\n    json_dict = dict()\n    json_dict['inline_keyboard'] = [[button.to_dict() for button in row] for row in self.keyboard]\n    return json_dict", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delete(self, name):\n    abort_if_pool_doesnot_exist(name)\n    pooldelete = Poolop.Delete()\n    return pooldelete(name)", "buggy_source_code": "def delete(self, name):\n    abort_if_poolname_doesnot_exist(name)\n    pooldelete = Poolop.Delete()\n    return pooldelete(name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __versionsDownloadCanceled(self):\n    if self.http is not None:\n        self.__versionCheckCanceled = True\n        self.http.abort()", "buggy_source_code": "def __versionsDownloadCanceled(self):\n    if self.__replies:\n        self.__versionCheckCanceled = True\n        self.__replies[-1].abort()", "edit_actions": ["move-tree", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@pytest.fixture\ndef jsonstatus(app):\n    return {'job': 'curr3ntj0b', 'imagesToSend': 2, 'startTime': '1985-10-26T00:00:00Z', 'nextScheduledScan': '1985-10-26T00:22:00Z', 'devices': ['epson']}", "buggy_source_code": "@pytest.fixture\ndef jsonstatus(self):\n    return {'job': 'curr3ntj0b', 'imagesToSend': 2, 'startTime': '1985-10-26T00:00:00Z', 'nextScheduledScan': '1985-10-26T00:22:00Z', 'devices': ['epson']}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def letter_span(self):\n    return max(1, sum([obj.letter_span() for obj in self.objects()]))", "buggy_source_code": "def letter_span(self):\n    if self.type_name == 'letter':\n        return 1\n    return sum([obj.letter_span() for obj in self.objects()])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def letters(self):\n    if self.objects == []:\n        return [self]\n    return toolbox.flatten([obj.letters() for obj in self.objects()])", "buggy_source_code": "def letters(self):\n    if self.type_name == 'letter':\n        return [self]\n    return toolbox.flatten([obj.letters() for obj in self.objects()])", "edit_actions": ["insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def _extract_network_label(self, interface):\n    try:\n        return interface['network']['label']\n    except (TypeError, KeyError):\n        LOG.error(traceback.format_exc())\n        raise TypeError", "buggy_source_code": "def _extract_network_label(self, interface):\n    try:\n        return interface['network']['label']\n    except (TypeError, KeyError):\n        LOG.exception(traceback.format_exc())\n        raise TypeError", "edit_actions": ["update-node"]}
{"fixed_source_code": "@auth_token_required(['project'])\n@ns.marshal_list_with(job_model)\ndef get(self, project_id, build_id):\n    jobs = g.db.execute_many_dict('\\n            SELECT id, state, start_date, build_id, end_date, name,\\n                cpu, memory, build_arg, env_var, message, docker_file\\n            FROM job\\n            WHERE project_id = %s\\n            AND build_id = %s\\n        ', [project_id, build_id])\n    return jobs", "buggy_source_code": "@auth_token_required(['project'])\n@ns.marshal_list_with(job_model)\ndef get(self, project_id, build_id):\n    jobs = g.db.execute_many_dict('\\n            SELECT id, state, start_date, build_id, end_date, name,\\n                cpu, memory, build_arg, env_var, message, dockerfile as docker_file\\n            FROM job\\n            WHERE project_id = %s\\n            AND build_id = %s\\n        ', [project_id, build_id])\n    return jobs", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cursor_changed_handler(self, treeview):\n    node = self.get_selected_node()\n    node.on_selected(self.busname)\n    self.emit('selected', node)", "buggy_source_code": "def cursor_changed_handler(self, treeview):\n    node = self.get_selected_node()\n    if node:\n        node.on_selected(self.busname)\n        self.emit('selected', node)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def findNumberOfBases(alignments):\n    numBases = 0\n    for alignment in alignments:\n        read = alignments[1]\n        numBases += len(read)\n    return numBases", "buggy_source_code": "def findNumberOfBases(alignments):\n    numBases = 0\n    for alignment in alignments:\n        size = len(alignment[0])\n        numBases += size\n    return numBases", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef anomaly_score(self, X=None, normalize=False):\n    return self._final_estimator.anomaly_score(self._pre_transform(X), normalize=normalize)", "buggy_source_code": "@if_delegate_has_method(delegate='_final_estimator')\ndef anomaly_score(self, X=None, **kwargs):\n    X = self._pre_transform(X)\n    return self._final_estimator.anomaly_score(X, **kwargs)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def init(self):\n    if self.exists:\n        return\n    sefl._git = Repo.init(self.path, bare=True)", "buggy_source_code": "def init(self):\n    if self.exists:\n        return\n    self._git = Repo.init(self.path, bare=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, filename, order):\n    self.model = srilmcc.LanguageModel(filename, order + 1)\n    self.order = order", "buggy_source_code": "def __init__(self, filename, n):\n    self.model = srilmcc.LanguageModel(filename, n)\n    self.n = n", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@actionrun(action=True)\ndef dnspython3(self):\n    C = '\\n            cd $tmpDir\\n            wget http://www.dnspython.org/kits3/1.12.0/dnspython3-1.12.0.tar.gz\\n            tar -xf dnspython3-1.12.0.tar.gz\\n            cd dnspython3-1.12.0\\n            ./setup.py install\\n            '\n    self.cuisine.core.run_script(C)", "buggy_source_code": "@actionrun(action=True)\ndef dnspython3(self):\n    C = '\\n            cd $tmpDir\\n            wget --remote-encoding=utf-8 http://www.dnspython.org/kits3/1.12.0/dnspython3-1.12.0.tar.gz\\n            tar -xf dnspython3-1.12.0.tar.gz\\n            cd dnspython3-1.12.0\\n            ./setup.py install\\n            '\n    self.cuisine.core.run_script(C)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def systextil_conn(self):\n    if hasattr(request_cfg, 'alter_db') and request_cfg.alter_db:\n        return 'sn '\n    else:\n        return 'so'", "buggy_source_code": "def systextil_conn(self):\n    if hasattr(request_cfg, 'alter_db') and request_cfg.alter_db:\n        return 'sn'\n    else:\n        return 'so'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def debugprint(msg):\n    print('[%6.2f] %s' % (env.now, msg))", "buggy_source_code": "def debugprint(msg):\n    print('[%8.2f] %s' % (env.now, msg))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_name(self):\n    return u'c%dr%dd%d' % (self.cpu, self.ram, self.disk)", "buggy_source_code": "def _get_name(self):\n    return u'C%dR%dD%d' % (self.cpu, self.ram, self.disk)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_here(self):\n    return CleanText(u'//span[contains(text(), \"Créer une liste de virements\")]')(self.doc)", "buggy_source_code": "def is_here(self):\n    return CleanText(u'//span[contains(text(), \"Créer une liste de virements\")] | //span[contains(text(), \"Réalisez un virement\")]')(self.doc)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_mypy(self):\n    if 'CI' not in os.environ:\n        subprocess.check_call('mypy oj onlinejudge/**/*.py', shell=True, stdout=sys.stdout, stderr=sys.stderr)", "buggy_source_code": "def test_mypy(self):\n    if 'CI' not in os.environ:\n        subprocess.check_call(['mypy', '--show-traceback', 'oj', 'onlinejudge'], stdout=sys.stdout, stderr=sys.stderr)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def update_interpretation_comments(self, clinical_analysis, interpretation, data, **options):\n    return self._post('interpretations', query_id=clinical_analysis, subcategory='comment/update', subquery_id=interpretation, data=data, **options)", "buggy_source_code": "def update_interpretation_comments(self, clinical_analysis, interpretation, data, **options):\n    return self._post('interpretations', query_id=clinical_analysis, subcategory='comments/update', subquery_id=interpretation, data=data, **options)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def repair_permissions():\n    sudo('cd %(path)s;chown -Rf root:www-data %(domain)s;chmod -R 700 %(domain)s;chmod -Rf 770 %(domain)s/media;chmod -Rf 750 %(domain)s/static;chmod -Rf 750 %(domain)s/site;chmod -Rf 750 %(domain)s/lib %(domain)s/src %(domain)s/bin;chmod 750 %(domain)s;' % env)", "buggy_source_code": "def repair_permissions():\n    sudo('cd %(path)s;chown -Rf root:www-data %(domain)s;chmod -R 700 %(domain)s;chmod 750 %(domain)s;chmod -Rf 770 %(domain)s/media;chmod -Rf 750 %(domain)s/static;chmod -Rf 750 %(domain)s/site;chmod -Rf 750 %(domain)s/lib %(domain)s/src %(domain)s/bin;chmod 750 %(domain)s;' % env)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def install_LESS():\n    sudo('apt-get install -y python-software-properties curl;yes|add-apt-repository ppa:chris-lea/node.js;apt-get update;apt-get install -y nodejs;export skipclean=1;curl http://npmjs.org/install.sh | sudo -E sh;npm install less -g;')", "buggy_source_code": "def install_LESS():\n    sudo('apt-get install -y python-software-properties curl;yes|add-apt-repository ppa:chris-lea/node.js;apt-get update;apt-get install -y nodejs npm;npm install less -g;')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def shutdownServer(self):\n    self.network.sendCommand('shutdown', waitForResponse=True, userId=self.userId)\n    return True", "buggy_source_code": "def shutdownServer(self):\n    self.network.sendCommand('shutdown', waitForResponse=False, userId=self.userId)\n    return True", "edit_actions": []}
{"fixed_source_code": "def test_push_val_to_left(heap):\n    heap.push(3)\n    heap.push(2)\n    assert heap.container == [None, 3, 2]", "buggy_source_code": "def test_push_val_to_left(heap):\n    heap.push(3)\n    heap.push(2)\n    assert heap.container == [None, 2, 3]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def wait_step():\n    return ' - wait'", "buggy_source_code": "def wait_step():\n    return '\\n  - wait'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clean_for_user_description(html):\n    return bleach.clean(html, tags=DESCR_ALLOWED_TAGS, strip=True)", "buggy_source_code": "def clean_for_user_description(html):\n    return bleach.clean(html, tags=USER_DESCR_ALLOWED_TAGS, strip=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    for (k, v) in kwargs.iteritems():\n        setattr(self, k, v)", "buggy_source_code": "def __init__(self, **kwargs):\n    for (k, v) in iterator(kwargs):\n        setattr(self, k, v)", "edit_actions": ["update-node", "update-node", "delete-node"]}
{"fixed_source_code": "@pimms.value\ndef path(pseudo_path):\n    if pseudo_path is None:\n        return None\n    return pseudo_path.source_path", "buggy_source_code": "@pimms.value\ndef path(pseudo_path):\n    if pseudo_path is None:\n        return None\n    return pseudo_path.actual_source_path", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_login_bad_content_type(self):\n    response = self.client.open('/login/', method='GET', headers=[('Content-Type', 'application/json')])\n    self.assert_bad_request(response)", "buggy_source_code": "def test_login_bad_content_type(self):\n    response = self.client.get('/login/', method='GET', headers=[('Content-Type', 'application/json')])\n    self.assert_bad_request(response)", "edit_actions": ["update-node"]}
{"fixed_source_code": "async def _activefight(self):\n    await self.bot.say('_activefight Todo')", "buggy_source_code": "def _activefight(self):\n    return self._isrunningFight(self.server)", "edit_actions": ["move-tree", "insert-node", "move-tree", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_internal_value(self, data):\n    try:\n        return ObjectId(unicode(data))\n    except Exception as e:\n        raise serializers.ValidationError(e.message)", "buggy_source_code": "def to_internal_value(self, data):\n    try:\n        return ObjectId(smart_str(data))\n    except Exception as e:\n        raise serializers.ValidationError(e.message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def MaxdbConnection(*args, **kw):\n    _warn('MaxdbConnection is deprecated; use connectionForURI(\"maxdb://...\") or \"from sqlobject.maxdb import builder; MaxdbConnection = builder()\"')\n    _maxdb.builder()(*args, **kw)", "buggy_source_code": "def MaxdbConnection(*args, **kw):\n    _warn('MaxdbConnection is deprecated; use connectionForURI(\"maxdb://...\") or \"from sqlobject.maxdb import builder; MaxdbConnection = builder()\"')\n    return _maxdb.builder()(*args, **kw)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def FirebirdConnection(*args, **kw):\n    _warn('FirebirdConnection is deprecated; use connectionForURI(\"firebird://...\") or \"from sqlobject.firebird import builder; FirebirdConnection = builder()\"')\n    _firebird.builder()(*args, **kw)", "buggy_source_code": "def FirebirdConnection(*args, **kw):\n    _warn('FirebirdConnection is deprecated; use connectionForURI(\"firebird://...\") or \"from sqlobject.firebird import builder; FirebirdConnection = builder()\"')\n    return _firebird.builder()(*args, **kw)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def PostgresConnection(*args, **kw):\n    _warn('PostgresConnection is deprecated; use connectionForURI(\"postgres://...\") or \"from sqlobject.postgres import builder; PostgresConnection = builder()\"')\n    _postgres.builder()(*args, **kw)", "buggy_source_code": "def PostgresConnection(*args, **kw):\n    _warn('PostgresConnection is deprecated; use connectionForURI(\"postgres://...\") or \"from sqlobject.postgres import builder; PostgresConnection = builder()\"')\n    return _postgres.builder()(*args, **kw)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def SybaseConnection(*args, **kw):\n    _warn('SybaseConnection is deprecated; use connectionForURI(\"sybase://...\") or \"from sqlobject.sybase import builder; SybaseConnection = builder()\"')\n    _sybase.builder()(*args, **kw)", "buggy_source_code": "def SybaseConnection(*args, **kw):\n    _warn('SybaseConnection is deprecated; use connectionForURI(\"sybase://...\") or \"from sqlobject.sybase import builder; SybaseConnection = builder()\"')\n    return _sybase.builder()(*args, **kw)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def MySQLConnection(*args, **kw):\n    _warn('MySQLConnection is deprecated; use connectionForURI(\"mysql://...\") or \"from sqlobject.mysql import builder; MySQLConnection = builder()\"')\n    _mysql.builder()(*args, **kw)", "buggy_source_code": "def MySQLConnection(*args, **kw):\n    _warn('MySQLConnection is deprecated; use connectionForURI(\"mysql://...\") or \"from sqlobject.mysql import builder; MySQLConnection = builder()\"')\n    return _mysql.builder()(*args, **kw)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def DBMConnection(*args, **kw):\n    _warn('DBMConnection is deprecated; use connectionForURI(\"dbm://...\") or \"from sqlobject.dbm import builder; DBMConnection = builder()\"')\n    _dbm.builder()(*args, **kw)", "buggy_source_code": "def DBMConnection(*args, **kw):\n    _warn('DBMConnection is deprecated; use connectionForURI(\"dbm://...\") or \"from sqlobject.dbm import builder; DBMConnection = builder()\"')\n    return _dbm.builder()(*args, **kw)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def generate_config_section(self, config_dir_path, server_name, **kwargs):\n    return '        # Enable OpenID Connect for registration and login. Uses authlib.\\n        #\\n        oidc_config:\\n            # enable OpenID Connect. Defaults to false.\\n            #\\n            #enabled: true\\n\\n            # use the OIDC discovery mechanism to discover endpoints. Defaults to true.\\n            #\\n            #discover: true\\n\\n            # the OIDC issuer. Used to validate tokens and discover the providers endpoints. Required.\\n            #\\n            #issuer: \"https://accounts.example.com/\"\\n\\n            # oauth2 client id to use. Required.\\n            #\\n            #client_id: \"provided-by-your-issuer\"\\n\\n            # oauth2 client secret to use. Required.\\n            #\\n            #client_secret: \"provided-by-your-issuer\"\\n\\n            # auth method to use when exchanging the token.\\n            # Valid values are \"client_secret_basic\" (default), \"client_secret_post\" and \"none\".\\n            #\\n            #client_auth_method: \"client_auth_basic\"\\n\\n            # list of scopes to ask. This should include the \"openid\" scope. Defaults to [\"openid\"].\\n            #\\n            #scopes: [\"openid\"]\\n\\n            # the oauth2 authorization endpoint. Required if provider discovery is disabled.\\n            #\\n            #authorization_endpoint: \"https://accounts.example.com/oauth2/auth\"\\n\\n            # the oauth2 token endpoint. Required if provider discovery is disabled.\\n            #\\n            #token_endpoint: \"https://accounts.example.com/oauth2/token\"\\n\\n            # the OIDC userinfo endpoint. Required if discovery is disabled and the \"openid\" scope is not asked.\\n            #\\n            #userinfo_endpoint: \"https://accounts.example.com/userinfo\"\\n\\n            # URI where to fetch the JWKS. Required if discovery is disabled and the \"openid\" scope is used.\\n            #\\n            #jwks_uri: \"https://accounts.example.com/.well-known/jwks.json\"\\n\\n            # skip metadata verification. Defaults to false.\\n            # Use this if you are connecting to a provider that is not OpenID Connect compliant.\\n            # Avoid this in production.\\n            #\\n            #skip_verification: false\\n\\n\\n            # An external module can be provided here as a custom solution to mapping\\n            # attributes returned from a OIDC provider onto a matrix user.\\n            #\\n            user_mapping_provider:\\n              # The custom module\\'s class. Uncomment to use a custom module.\\n              # Default is {mapping_provider!r}.\\n              #\\n              #module: mapping_provider.OidcMappingProvider\\n\\n              # Custom configuration values for the module. Below options are intended\\n              # for the built-in provider, they should be changed if using a custom\\n              # module. This section will be passed as a Python dictionary to the\\n              # module\\'s `parse_config` method.\\n              #\\n              # Below is the config of the default mapping provider, based on Jinja2\\n              # templates. Those templates are used to render user attributes, where the\\n              # userinfo object is available through the `user` variable.\\n              #\\n              config:\\n                # name of the claim containing a unique identifier for the user.\\n                # Defaults to `sub`, which OpenID Connect compliant providers should provide.\\n                #\\n                #subject_claim: \"sub\"\\n\\n                # Jinja2 template for the localpart of the MXID\\n                #\\n                localpart_template: \"{{{{ user.preferred_username }}}}\"\\n\\n                # Jinja2 template for the display name to set on first login. Optional.\\n                #\\n                #display_name_template: \"{{{{ user.given_name }}}} {{{{ user.last_name }}}}\"\\n        '.format(mapping_provider=DEFAULT_USER_MAPPING_PROVIDER)", "buggy_source_code": "def generate_config_section(self, config_dir_path, server_name, **kwargs):\n    return '        # Enable OpenID Connect for registration and login. Uses authlib.\\n        #\\n        oidc_config:\\n            # enable OpenID Connect. Defaults to false.\\n            #\\n            #enabled: true\\n\\n            # use the OIDC discovery mechanism to discover endpoints. Defaults to true.\\n            #\\n            #discover: true\\n\\n            # the OIDC issuer. Used to validate tokens and discover the providers endpoints. Required.\\n            #\\n            #issuer: \"https://accounts.example.com/\"\\n\\n            # oauth2 client id to use. Required.\\n            #\\n            #client_id: \"provided-by-your-issuer\"\\n\\n            # oauth2 client secret to use. Required.\\n            #\\n            #client_secret: \"provided-by-your-issuer\"\\n\\n            # auth method to use when exchanging the token.\\n            # Valid values are \"client_secret_basic\" (default), \"client_secret_post\" and \"none\".\\n            #\\n            #client_auth_method: \"client_secret_basic\"\\n\\n            # list of scopes to ask. This should include the \"openid\" scope. Defaults to [\"openid\"].\\n            #\\n            #scopes: [\"openid\"]\\n\\n            # the oauth2 authorization endpoint. Required if provider discovery is disabled.\\n            #\\n            #authorization_endpoint: \"https://accounts.example.com/oauth2/auth\"\\n\\n            # the oauth2 token endpoint. Required if provider discovery is disabled.\\n            #\\n            #token_endpoint: \"https://accounts.example.com/oauth2/token\"\\n\\n            # the OIDC userinfo endpoint. Required if discovery is disabled and the \"openid\" scope is not asked.\\n            #\\n            #userinfo_endpoint: \"https://accounts.example.com/userinfo\"\\n\\n            # URI where to fetch the JWKS. Required if discovery is disabled and the \"openid\" scope is used.\\n            #\\n            #jwks_uri: \"https://accounts.example.com/.well-known/jwks.json\"\\n\\n            # skip metadata verification. Defaults to false.\\n            # Use this if you are connecting to a provider that is not OpenID Connect compliant.\\n            # Avoid this in production.\\n            #\\n            #skip_verification: false\\n\\n\\n            # An external module can be provided here as a custom solution to mapping\\n            # attributes returned from a OIDC provider onto a matrix user.\\n            #\\n            user_mapping_provider:\\n              # The custom module\\'s class. Uncomment to use a custom module.\\n              # Default is {mapping_provider!r}.\\n              #\\n              #module: mapping_provider.OidcMappingProvider\\n\\n              # Custom configuration values for the module. Below options are intended\\n              # for the built-in provider, they should be changed if using a custom\\n              # module. This section will be passed as a Python dictionary to the\\n              # module\\'s `parse_config` method.\\n              #\\n              # Below is the config of the default mapping provider, based on Jinja2\\n              # templates. Those templates are used to render user attributes, where the\\n              # userinfo object is available through the `user` variable.\\n              #\\n              config:\\n                # name of the claim containing a unique identifier for the user.\\n                # Defaults to `sub`, which OpenID Connect compliant providers should provide.\\n                #\\n                #subject_claim: \"sub\"\\n\\n                # Jinja2 template for the localpart of the MXID\\n                #\\n                localpart_template: \"{{{{ user.preferred_username }}}}\"\\n\\n                # Jinja2 template for the display name to set on first login. Optional.\\n                #\\n                #display_name_template: \"{{{{ user.given_name }}}} {{{{ user.last_name }}}}\"\\n        '.format(mapping_provider=DEFAULT_USER_MAPPING_PROVIDER)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _SetTitle(self, title):\n    if not self._destroyed:\n        window = self._widget.Parent\n        if hasattr(window, 'SetTitle'):\n            window.SetTitle(title)", "buggy_source_code": "def _SetTitle(self, title):\n    if not self._destroyed:\n        window = self._widget.GetParent()\n        if hasattr(window, 'SetTitle'):\n            window.SetTitle(title)", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def doc():\n    local('mkdir -p docs_source && cd docs_source && make html && cd ..')", "buggy_source_code": "def doc():\n    local('mkdir -p docs_source && cd docs_source && make clean && make singlehtml && cd ..')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, buffer):\n    Readable.__init__(self)\n    self.buffer = buffer\n    self.ptr = 0", "buggy_source_code": "def __init__(self, data_buffer):\n    Readable.__init__(self)\n    self.buffer = data_buffer\n    self.ptr = 0", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __read(self, data_type, length):\n    buffer = self.read_data(length)\n    return struct.unpack('<' + data_type, buffer)[0]", "buggy_source_code": "def __read(self, data_type, length):\n    data_buffer = self.read_data(length)\n    return struct.unpack('<' + data_type, data_buffer)[0]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '%s return multiple elements, %s' % (self.path, self.elements)", "buggy_source_code": "def __str__(self):\n    return '%s returns multiple elements, %s' % (self.path, self.elements)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testAcceptInvitation(self):\n    self.assertIsNone(self.user.accept_invitation(4294886))", "buggy_source_code": "def testAcceptInvitation(self):\n    self.assertEqual(self.user.accept_invitation(4294886), None)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@classmethod\ndef getDescription(cls, sessionType):\n    return 'Kill your opponents to steal their capsules.\\nCollect them and score at the deposit point!'", "buggy_source_code": "@classmethod\ndef getDescription(cls, sessionType):\n    return 'Kill your opponents to steal their Capsules.\\nCollect them and score at the Deposit point!'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def timer_stop(self):\n    Clock.unschedule(self.timer_runner)", "buggy_source_code": "def timer_stop(self):\n    self.timer_unschedule()", "edit_actions": ["update-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_linker_flags(self):\n    result = ['-rdynamic', '-lstdc++']\n    if self.config.gprof:\n        result += ['-pg']\n    return result", "buggy_source_code": "def get_linker_flags(self, libs):\n    return self.get_base_linker_flags() + ['-l%s' % lib for lib in libs]", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@overload_method(StringType, 'c_str')\ndef str_c_str(str_typ):\n    return lambda s: get_char_ptr(s)", "buggy_source_code": "@overload_method(StringType, 'c_str')\ndef str_c_str(str_typ):\n    return lambda s: get_c_str(s)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def trunk_open(which_trunk):\n    if which_trunk == 'rear':\n        self.is_trunk_open = True\n    elif which_trunk == 'rear':\n        self.is_frunk_open = True\n    return self.status", "buggy_source_code": "def trunk_open(self, which_trunk):\n    if which_trunk == 'rear':\n        self.is_trunk_open = True\n    elif which_trunk == 'frunk':\n        self.is_frunk_open = True\n    return self.status", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def charge_limit(self, charge):\n    self.charge_state.charger_power = charge\n    return self.status", "buggy_source_code": "def charge_limit(self, charge):\n    self.charge_state['charger_power'] = charge\n    return self.status", "edit_actions": ["insert-node", "delete-node"]}
{"fixed_source_code": "def visible(self):\n    return self.filter(topic__deleted=False, topic__on_moderation=BaseTopic.MODERATION_IS_CLEAN, topic__redirect=False)", "buggy_source_code": "def visible(self):\n    return self.filter(topic__deleted=False, topic__redirect=False).exclude(topic__on_moderation=BaseTopic.MODERATION_IS_IN_MODERATION)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node"]}
{"fixed_source_code": "def visible(self):\n    return self.filter(deleted=False, on_moderation=BaseTopic.MODERATION_IS_CLEAN, redirect=False)", "buggy_source_code": "def visible(self):\n    return self.filter(deleted=False, redirect=False).exclude(on_moderation=BaseTopic.MODERATION_IS_IN_MODERATION)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node"]}
{"fixed_source_code": "def load_ts(filepath):\n    temp = pd.read_csv(fn, header=0, index_col=0, parse_dates=True)\n    return temp", "buggy_source_code": "def load_ts(filepath):\n    temp = pd.read_csv(filepath, header=0, index_col=0, parse_dates=True)\n    return temp", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main(config):\n    locator = cea.inputlocator.InputLocator(scenario=config.scenario)\n    epw_reader(weather_path=locator.get_weather())", "buggy_source_code": "def main(config):\n    locator = cea.inputlocator.InputLocator(scenario=config.scenario)\n    epw_reader(weather_path=locator.get_weather_file())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def help(*xs):\n    return ([ast.Nonlocal([x.value() for x in xs])], help_expr(name('None')))", "buggy_source_code": "def help(*xs):\n    return ([ast.Nonlocal([x.value() for x in xs])], help_nil())", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _get_uri(self):\n    if ':' in self.filename:\n        return self.filename\n    return 'file://' + path.abspath(self.filename)", "buggy_source_code": "def _get_uri(self):\n    uri = self.filename\n    if ':' not in uri:\n        uri = 'file:' + pathname2url(path.realpath(uri))\n    return uri", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, sender, reciever, msg, time=None):\n    self.sender = sender\n    self.reciever = reciever\n    self.msg = msg\n    self.time = time", "buggy_source_code": "def __init__(self, sender, receiver, msg, time=None):\n    self.sender = sender\n    self.receiver = receiver\n    self.msg = msg\n    self.time = time", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@step(u'I press the button with the label \"([^\"]*)\"$')\ndef press_the_button_with_label(_step, buttonname):\n    button_css = 'button span.show-label'\n    elem = world.css_find(button_css).first\n    assert_equal(elem.text, buttonname)\n    elem.click()", "buggy_source_code": "@step(u'I press the button with the label \"([^\"]*)\"$')\ndef press_the_button_with_label(_step, buttonname):\n    button_css = 'button span.show-label'\n    elem = world.css_find(button_css).first\n    assert_equal(elem.text, buttonname)\n    world.css_click(button_css)", "edit_actions": ["update-node", "update-node", "insert-node"]}
{"fixed_source_code": "@expose('/bookings/<int:project_id>')\ndef bookings(self, project_id):\n    return self.render_template('test.html', cal_header='project(%r) Resource Request/Booking Chart' % project_id, cal_data=get_calendar_data(resources_booking, 'grey'))", "buggy_source_code": "@expose('/bookings/<int:project_id>')\ndef bookings(self, project_id):\n    return self.render_template('test.html', cal_header='project(%r) Resource Request/Booking Chart' % project_id, cal_data=get_calendar_data(resources_booking_model, 'grey'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@expose('/availability/<int:project_id>')\ndef availability(self, project_id):\n    return self.render_template('test.html', cal_header='project(%r) Resource Availability Chart' % project_id, cal_data=get_calendar_data(resources_availability, '#257e4a'))", "buggy_source_code": "@expose('/availability/<int:project_id>')\ndef availability(self, project_id):\n    return self.render_template('test.html', cal_header='project(%r) Resource Availability Chart' % project_id, cal_data=get_calendar_data(resources_availability_model, '#257e4a'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def check_swb_issn(issn, title):\n    req = requests.get('%s?q=source_id:0+institution:DE-105+issn:%s+title_short=%s&wt=csv&fl=id' % (servername, issn, title))\n    x = req.text\n    return len(x)", "buggy_source_code": "def check_swb_issn(issn, title):\n    req = requests.get('%s?q=source_id:0+institution:DE-105+issn:%s+title_short:\"%s\"&wt=csv&fl=id' % (servername, issn, title))\n    x = req.text\n    return len(x)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef timeout_customer(self):\n    self.statu_required('accepted_by_taxi')\n    self.status = 'timeout_customer'\n    self.status_changed()\n    return True", "buggy_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef timeout_customer(self):\n    self.status_required('accepted_by_taxi')\n    self.status = 'timeout_customer'\n    self.status_changed()\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef declined_by_customer(self):\n    self.statu_required('accepted_by_taxi')\n    self.status = 'declined_by_customer'\n    self.status_changed()\n    return True", "buggy_source_code": "@login_required\n@roles_accepted('moteur', 'admin')\ndef declined_by_customer(self):\n    self.status_required('accepted_by_taxi')\n    self.status = 'declined_by_customer'\n    self.status_changed()\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "@api.route('/view/<entity>/<id>')\n@crossdomain(origin=origin)\ndef vw(entity, id):\n    return controller.vw(entity, id)", "buggy_source_code": "@api.route('/view/<entity>/<id>')\n@crossdomain(origin=origin)\ndef vw(entity, id):\n    return controller.vw(entity, int(id))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def draw_header(self, context):\n    obj = context.object\n    if not obj.vox_empty.created:\n        self.layout.operator('voxelarray_create_voxels', text='Create')", "buggy_source_code": "def draw_header(self, context):\n    obj = context.object\n    if not obj.vox_empty.created:\n        self.layout.operator('object.voxelarray_create_voxels', text='Create')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef subpages(self):\n    return Page.select().where(peewee.SQL('slug LIKE ?', self.slug + '/%')).order_by(Page.title)", "buggy_source_code": "@property\ndef subpages(self):\n    return Page.select().where(Page.slug % (self.slug + '/%')).order_by(Page.title)", "edit_actions": ["move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __getattr__(self, name):\n    raise AttributeError('dvc.api.open() should be used in a with statement')", "buggy_source_code": "def __getattr__(self, name):\n    raise AttributeError('dvc.api.open() should be used in a with statement.')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def scale_thumbnail_file(inimage, outimage):\n    scale_image_file(inimage, outimage, '70x70')", "buggy_source_code": "def scale_thumbnail_file(inimage, outimage):\n    scale_image_file(inimage, outimage, '150x150')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_subclassing(self):\n    self.assertTrue(issubclass(UnorderedListTagOptions, ListTagOptions))", "buggy_source_code": "def test_subclassing(self):\n    self.assertTrue(issubclass(UnorderedListTreeNode, ListTreeNode))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_subclassing(self):\n    self.assertTrue(issubclass(OrderedListTagOptions, ListTagOptions))", "buggy_source_code": "def test_subclassing(self):\n    self.assertTrue(issubclass(OrderedListTreeNode, ListTreeNode))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_get_parent_list_first_number_with_non_list_as_parent(self):\n    opts = ListElementTagOptions()\n    root_tree_node = RootTreeNode(RootTagOptions())\n    tree_node = root_tree_node.new_child('li', opts)\n    self.assertEqual(1, opts.get_parent_list_first_number(tree_node))", "buggy_source_code": "def test_get_parent_list_first_number_with_non_list_as_parent(self):\n    root_tree_node = RootTreeNode()\n    tree_node = root_tree_node.new_child('li', ListElementTreeNode)\n    self.assertEqual(1, tree_node.get_parent_list_first_number())", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _set_points(self, player_id, points):\n    self._cursor.execute('UPDATE players SET points=? WHERE id=?', (points, winner_id))", "buggy_source_code": "def _set_points(self, player_id, points):\n    self._cursor.execute('UPDATE players SET points=? WHERE id=?', (points, player_id))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def escape_decimal(obj):\n    return str(obj)", "buggy_source_code": "def escape_decimal(obj, charset):\n    return unicode(obj).encode(charset)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def encrypt(v, key=None):\n    cipher = get_cipher(key)\n    return cipher.encrypt(v)", "buggy_source_code": "def encrypt(v, key=None):\n    cipher = functions.get_cipher(key)\n    return cipher.encrypt(v)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self.__client = MongoClient()\n    self.__db = self.__client.GamesCollection", "buggy_source_code": "def __init__(self):\n    self.__client = None\n    self.__init_mongo_client()\n    self.__db = self.__client.GamesCollection", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def analyze(self):\n    (self._f0, self._spc, self._ap) = self.analyzer.analyze(self.x)\n    self._f0[0 < self._f0] = 0\n    return", "buggy_source_code": "def analyze(self):\n    (self._f0, self._spc, self._ap) = self.analyzer.analyze(self.x)\n    self._f0[self._f0 < 0] = 0\n    return", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def construct(bytes):\n    return Bitstream(bytes)", "buggy_source_code": "def construct(_bytes):\n    return Bitstream(_bytes)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, url):\n    self.url = url\n    self.query = QUrlQuery()", "buggy_source_code": "def __init__(self, url):\n    self.url = QUrl(url)\n    self.query = QUrlQuery()", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __postorder(self, root):\n    if not root:\n        return []\n    return self.__inorder(root.left) + self.__inorder(root.right) + [root.value]", "buggy_source_code": "def __postorder(self, root):\n    if not root:\n        return []\n    return self.__postorder(root.left) + self.__postorder(root.right) + [root.value]", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __preorder(self, root):\n    if not root:\n        return []\n    return [root.value] + self.__inorder(root.left) + self.__inorder(root.right)", "buggy_source_code": "def __preorder(self, root):\n    if not root:\n        return []\n    return [root.value] + self.__preorder(root.left) + self.__preorder(root.right)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def render(self):\n    return format_html(u'<form action=\"{0}\" method=\"post\">\\n    {1}\\n    <input type=\"image\" src=\"{2}\" border=\"0\" name=\"submit\" alt=\"Buy it Now\" />\\n</form>', self.get_endpoint(), self.as_p(), self.get_image())", "buggy_source_code": "def render(self):\n    return format_html(u'<form action=\"{0}\" method=\"post\">\\n    {1}\\n    <input type=\"image\" src=\"{2}\" name=\"submit\" alt=\"Buy it Now\" />\\n</form>', self.get_endpoint(), self.as_p(), self.get_image())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def realisationFailed(self, iens):\n    run_arg = self.ert_run_context.iensGet(iens)\n    queue_index = run_arg.getQueueIndex()\n    return self.queue_manager.jobFailed(queue_index)", "buggy_source_code": "def realisationFailed(self, iens):\n    run_arg = self.ert_run_context.iensGet(iens)\n    queue_index = run_arg.getQueueIndex()\n    return self.queue_manager.didJobFail(queue_index)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def realisationSuccess(self, iens):\n    run_arg = self.ert_run_context.iensGet(iens)\n    queue_index = run_arg.getQueueIndex()\n    return self.queue_manager.jobSuccess(queue_index)", "buggy_source_code": "def realisationSuccess(self, iens):\n    run_arg = self.ert_run_context.iensGet(iens)\n    queue_index = run_arg.getQueueIndex()\n    return self.queue_manager.didJobSucceed(queue_index)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_supported_version(self):\n    with patch('apsconnectcli.hub.sys') as sys_mock:\n        _assert_supported_version('oa-8.2-1216')\n        sys_mock.exit.assert_not_called()", "buggy_source_code": "def test_supported_version(self):\n    with patch('apsconnectcli.hub.sys') as sys_mock:\n        HUB._assert_supported_version('oa-8.2-1216')\n        sys_mock.exit.assert_not_called()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_unsupported_version(self):\n    with patch('apsconnectcli.hub.sys') as sys_mock:\n        _assert_supported_version('oa-7.0-1216')\n        sys_mock.exit.assert_called_with(1)", "buggy_source_code": "def test_unsupported_version(self):\n    with patch('apsconnectcli.hub.sys') as sys_mock:\n        HUB._assert_supported_version('oa-7.0-1216')\n        sys_mock.exit.assert_called_with(1)", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def close_updater(self):\n    global resource_list_file\n    resource_list_file.close()\n    print('Closed!')\n    self.quit()", "buggy_source_code": "def close_updater(self):\n    if os.path.exists('./temp_software_list.json'):\n        os.remove('./temp_software_list.json')\n    print('Closed!')\n    self.quit()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def find_quantities(soup):\n    try:\n        return _find_quantities_from_form(soup)\n    except TypeError:\n        return _find_quantities_from_input(soup)", "buggy_source_code": "def find_quantities(soup):\n    try:\n        return _find_quantities_from_form(soup)\n    except NoMaxQuantity:\n        return _find_quantities_from_input(soup)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_exception(self, exception):\n    with self._lock:\n        self._exception = exception\n        self._done = True", "buggy_source_code": "def set_exception(self, exception):\n    with self._lock:\n        self._exception = exception\n        self._finish()", "edit_actions": ["move-tree", "insert-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef spear_damage_mod(self):\n    return rendrenge(91, 112)", "buggy_source_code": "@property\ndef spear_damage_mod(self):\n    return randrange(91, 112)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef bow_damage_mod(self):\n    return rendrenge(103, 142)", "buggy_source_code": "@property\ndef bow_damage_mod(self):\n    return randrange(103, 142)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef bow_damage_mod(self):\n    return rendrenge(60, 83)", "buggy_source_code": "@property\ndef bow_damage_mod(self):\n    return randrange(60, 83)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef bow_damage_mod(self):\n    return rendrenge(30, 54)", "buggy_source_code": "@property\ndef bow_damage_mod(self):\n    return randrange(30, 54)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef spear_damage_mod(self):\n    return rendrenge(71, 86)", "buggy_source_code": "@property\ndef spear_damage_mod(self):\n    return randrange(71, 86)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef axe_damage_mod(self):\n    return rendrenge(181, 210)", "buggy_source_code": "@property\ndef axe_damage_mod(self):\n    return randrange(181, 210)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef axe_damage_mod(self):\n    return rendrenge(134, 167)", "buggy_source_code": "@property\ndef axe_damage_mod(self):\n    return randrange(134, 167)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef spear_damage_mod(self):\n    return rendrenge(143, 151)", "buggy_source_code": "@property\ndef spear_damage_mod(self):\n    return randrange(143, 151)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef axe_damage_mod(self):\n    return rendrenge(199, 234)", "buggy_source_code": "@property\ndef axe_damage_mod(self):\n    return randrange(199, 234)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def awg_file(self, filename) -> None:\n    self.awg(filename)", "buggy_source_code": "def awg_file(self, filename) -> None:\n    self.load_awg_program_from_file(filename)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _do_set_AWG_file(self, filename) -> None:\n    self.awg('UHFLI_AWG_sequences/' + filename)", "buggy_source_code": "def _do_set_AWG_file(self, filename) -> None:\n    self.load_awg_program_from_file('UHFLI_AWG_sequences/' + filename)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def rank():\n    try:\n        return backend.MPI.rank(backend.mpi_comm_world())\n    except RuntimeError:\n        return backend.MPI.process_number()", "buggy_source_code": "def rank():\n    try:\n        return backend.MPI.rank(backend.mpi_comm_world())\n    except AttributeError:\n        return backend.MPI.process_number()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __set_change_event(self, attrName, implemented, detect):\n    if self.__getDevice() is not None:\n        self.set_change_event(attrName, implemented, detect)", "buggy_source_code": "def __set_change_event(self, attrName, implemented, detect):\n    device = self.__getDevice()\n    if device is not None:\n        device.set_change_event(attrName, implemented, detect)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node"]}
{"fixed_source_code": "def __exit__(self, exc_type, exc_value, traceback):\n    for patch in self.settings_patches:\n        patch.stop()\n    self.patcher.stop()", "buggy_source_code": "def __exit__(self, exc_type, exc_value, traceback):\n    for p in self.settings_patches:\n        p.stop()\n    self.patcher.stop()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __enter__(self):\n    for patch in self.settings_patches:\n        patch.start()\n    self.patcher.start().return_value = self.return_value", "buggy_source_code": "def __enter__(self):\n    for p in self.settings_patches:\n        p.start()\n    self.patcher.start().return_value = self.return_value", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def output(self):\n    return luigi_s3.S3Target('s3://{0}{1}'.format(os.environ['LUIGIS3_EXAMPLES'], self.date.strftime('streams_%Y_%m_%d_faked.tsv')))", "buggy_source_code": "def output(self):\n    return luigi_s3.S3Target('s3:{0}{1}'.format(os.environ['LUIGIS3_EXAMPLES'], self.date.strftime('streams_%Y_%m_%d_faked.tsv')))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def output(self):\n    s3_string = 's3://{0}{1}'.format(os.environ['LUIGIS3_EXAMPLES'], 'artist_streams_{}.tsv'.format(self.date_interval))\n    print(s3_string)\n    return luigi_s3.S3Target(s3_string)", "buggy_source_code": "def output(self):\n    s3_string = 's3:{0}{1}'.format(os.environ['LUIGIS3_EXAMPLES'], 'artist_streams_{}.tsv'.format(self.date_interval))\n    print(s3_string)\n    return luigi_s3.S3Target(s3_string)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _close_and_get_root(self, parser):\n    root = parser.close()\n    if root is None and 'ElementTree' in self.etree.__name__:\n        root = parser.root\n    return root", "buggy_source_code": "def _close_and_get_root(self, parser):\n    root = parser.close()\n    if root is None and 'ElementTree' in self.etree.__name__:\n        root = parser._root\n    return root", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_help_text(self):\n    return _(\"Your password can't consists of single character or whitespace.\")", "buggy_source_code": "def get_help_text(self):\n    return _(\"Your password can't consist of single character or whitespace only.\")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_intersection(self):\n    valid_users = {'Thomas', 'Richard', 'Harold'}\n    self.assertFalse(valid_users & {'Thomas', 'Jake'})", "buggy_source_code": "def test_intersection(self):\n    valid_users = {'Thomas', 'Richard', 'Harold'}\n    self.assertFalse(valid_users & {'Manish', 'Jake'})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '{} - {}'.format(self.trader, self.primary_key)", "buggy_source_code": "def __str__(self):\n    return '{} - {}'.format(self.trader, self.net_income)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def between(m, n, s, greedy=True):\n    result = '%s{%d,%d}' % (s, m, n)\n    if greedy:\n        result += '?'\n    return result", "buggy_source_code": "def between(m, n, s, greedy=True):\n    result = '%s{%d,%d}' % (s, m, n)\n    if not greedy:\n        result += '?'\n    return result", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def make_module_extra(self):\n    txt = super(EB_TotalView, self).make_module_extra()\n    txt += self.moduleGenerator.prepend_paths('LM_LICENSE_FILE', self.license)\n    return txt", "buggy_source_code": "def make_module_extra(self):\n    txt = super(EB_TotalView, self).make_module_extra()\n    txt += self.moduleGenerator.prepend_paths('LM_LICENSE_FILE', self.license_file)\n    return txt", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __setstate__(self, state):\n    self.update_model_params(**state)", "buggy_source_code": "def __setstate__(self, state):\n    self.set_model_params(**state)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, name, adress, contact, econtact):\n    self.name = name\n    self.adress = adress\n    self.contact = contact\n    self.econtack = econtact", "buggy_source_code": "def __init__(self, name, adress, contact, econtact):\n    self.name = name\n    self.adress = adress\n    self.contact = contact\n    self.econtact = econtact", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _rollback(self):\n    try:\n        self._connection.request_rollback().wait()\n    except Exception as e:\n        raise CancelFailedError() from e", "buggy_source_code": "def _rollback(self):\n    try:\n        self._connection.request_reversal().result()\n    except Exception as e:\n        raise CancelFailedError() from e", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def title_with_spacer(self, spacer=u'...'):\n    return spacer * self.level + u' ' + self.slug", "buggy_source_code": "def title_with_spacer(self, spacer=u'...'):\n    return spacer * self.level + u' ' + self.name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_context_data(self, **kwargs):\n    context = {'styleguide': self.get_styleguide()}\n    context.update(kwargs)\n    return super(StyleguideMixin, self).get_context_data(**context)", "buggy_source_code": "def get_context_data(self, **kwargs):\n    context = super(StyleguideMixin, self).get_context_data(**kwargs)\n    context.update({'styleguide': self.get_styleguide()})\n    return context", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def jsonrpc_show(self):\n    return api.show()", "buggy_source_code": "def jsonrpc_show(self):\n    return api.process_show()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def jsonrpc_stop(self):\n    return api.stop()", "buggy_source_code": "def jsonrpc_stop(self):\n    return api.process_stop()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def jsonrpc_restart(self, show=False):\n    return api.restart(show)", "buggy_source_code": "def jsonrpc_restart(self, show=False):\n    return api.process_restart(show)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef _scan_completed(self):\n    return not self._scanning_effector_data.scanning_thread.is_alive", "buggy_source_code": "@property\ndef _scan_completed(self):\n    return not self._scanning_effector_data.scanning_thread.is_alive()", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def saveParams(self):\n    (width, height) = self.GetSizeTuple()\n    self._config.width.value = width\n    self._config.height.value = height", "buggy_source_code": "def saveParams(self):\n    (width, height) = self.GetClientSizeTuple()\n    self._config.width.value = width\n    self._config.height.value = height", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self._bot_client = None\n    self._user_client = None\n    self.clients = {'bot': self._bot_client, 'user': self._user_client}", "buggy_source_code": "def __init__(self):\n    self._bot_client = None\n    self._user_client = None\n    self._clients = {'bot': self._bot_client, 'user': self._user_client}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_checkuser(self):\n    self.tps.clean_up()\n    data = self.askview.checkuser()\n    assert data == {'admin': False, 'username': 'jdoe', 'blocked': False, 'galaxy': False}", "buggy_source_code": "def test_checkuser(self):\n    self.tps.clean_up()\n    data = self.askview.checkuser()\n    assert data == {'admin': False, 'username': 'jdoe', 'blocked': True, 'galaxy': False}", "edit_actions": []}
{"fixed_source_code": "def is_stored(self):\n    return self.internal_data == InternalState.STORED", "buggy_source_code": "def is_stored(self):\n    return self.internal_state == InternalState.STORED", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _add_listener(self, key, d):\n    self._listeners[key].append(d)", "buggy_source_code": "def _add_listener(self, key, deferred):\n    self._listeners[key].append(deferred)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef id(self):\n    return self.data.matchid", "buggy_source_code": "@property\ndef id(self):\n    return self.data.matchId", "edit_actions": ["update-node"]}
{"fixed_source_code": "def active(self):\n    return self.get_query_set().filter(expires__gt=timezone.now())", "buggy_source_code": "def active(self):\n    return self.get_queryset().filter(expires__gt=timezone.now())", "edit_actions": ["update-node"]}
{"fixed_source_code": "@freeze_time('2001-01-01 12:00:00.000000')\ndef test_should_fail_request_if_over_limit(mocked_redis_client):\n    my_redis_mock.execute.return_value = [True, True, 100, True]\n    assert mocked_redis_client.exceeded_rate_limit('key', 99, 100)", "buggy_source_code": "@freeze_time('2001-01-01 12:00:00.000000')\ndef test_should_fail_request_if_over_limit(mocked_redis_client, mocked_redis_pipeline):\n    mocked_redis_pipeline.execute.return_value = [True, True, 100, True]\n    assert mocked_redis_client.exceeded_rate_limit('key', 99, 100)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def test_app(self):\n    resp = self.client.get('/')\n    self.assertEqual('Hello World!', resp.data)", "buggy_source_code": "def test_app(self):\n    resp = self.client.get('/')\n    self.assertEqual(b'Hello World!', resp.data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_get_subject__third_line(self):\n    msg = 'merge pull request #blah\\n\\nmy real message\\n\\nwith lots of info'\n    expected = '[TEST/it] my real message'\n    actual = emailer._get_subject('TEST/it', msg)\n    self.assertEqual(expected, actual)", "buggy_source_code": "def test_get_subject__third_line(self):\n    msg = 'merge pull request #blah\\n\\nmy real message\\n\\nwith lots of info\\n'\n    expected = '[TEST/it] my real message'\n    actual = emailer._get_subject('TEST/it', msg)\n    self.assertEqual(expected, actual)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _on_remove_service(self, jid):\n    self.roster.delItem(jid)\n    self.dispatch('NOTIFY', (jid, 'offline', '', 'local', 0, None, 0))", "buggy_source_code": "def _on_remove_service(self, jid):\n    self.roster.delItem(jid)\n    self.dispatch('NOTIFY', (jid, 'offline', '', 'local', 0, None, 0, None))", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def send_alert(self, service, users, duty_officers):\n    os.open('/tmp/cabotTestLocalAlert' + time.strftime('%Y%m%d_%H%M%S', time.localtime(time.time())), 'a').close()\n    return", "buggy_source_code": "def send_alert(self, service, users, duty_officers):\n    open('/tmp/cabotTestLocalAlert_' + time.strftime('%Y%m%d_%H%M%S', time.localtime(time.time())), 'a').close()\n    return", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def inactiveText(self):\n    return self.__lineedit.inactiveText()", "buggy_source_code": "def inactiveText(self):\n    return self.lineEdit().inactiveText()", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def setInactiveText(self, inactiveText):\n    self.__lineedit.setInactiveText()", "buggy_source_code": "def setInactiveText(self, inactiveText):\n    self.lineEdit().setInactiveText(inactiveText)", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def set_prompt(self, prompt_regex, prompt_change_cmd):\n    self.child.expect(u(prompt_regex))\n    self.sendline(u(prompt_change_cmd))", "buggy_source_code": "def set_prompt(self, prompt_regex, prompt_change_cmd):\n    self.child.expect(prompt_regex)\n    self.sendline(u(prompt_change_cmd))", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def open_latin1(filename, mode='r'):\n    return open(f, mode=mode, encoding='iso-8859-1')", "buggy_source_code": "def open_latin1(filename, mode='r'):\n    return open(filename, mode=mode, encoding='iso-8859-1')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef edgesets(self):\n    return sef.edges", "buggy_source_code": "@property\ndef edgesets(self):\n    return self.__edges", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='session')\ndef local_pip_cache():\n    return tempfile.mkdtemp()", "buggy_source_code": "@pytest.fixture(scope='session')\ndef local_pip_cache():\n    return _get_temp_dir()", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def render(self, site):\n    return Template(self.body).render(Context({'site': site, 'test': self})).encode()", "buggy_source_code": "def render(self, site):\n    return Template(self.body).render(Context({'site': site, 'test': self})).encode('utf8')", "edit_actions": ["insert-node"]}
{"fixed_source_code": "def page_not_found(e):\n    return (render_template('error.html', no_nav='true'), 404)", "buggy_source_code": "def page_not_found(e):\n    return (render_template('404.html', no_nav='true'), 404)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_default_minifier(self):\n    return UglifyCSSMinifier()", "buggy_source_code": "def get_default_minifier(self):\n    return UglifyCssMinifier()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def execute():\n    frappe.db.sql(\"\\n\\t\\tUPDATE `tabDesktop Icon`\\n\\t\\tSET\\n\\t\\t\\t`module_name`='Help', `label`=%s\\n\\t\\tWHERE\\n\\t\\t\\t`module_name`='Learn' AND\\n\\t\\t\\t`standard`=1\\n\\t\\t\", _('Help'))", "buggy_source_code": "def execute():\n    frappe.db.sql(\"\\n\\t\\tUPDATE `tabDesktop Icon`\\n\\t\\tSET\\n\\t\\t\\t`module_name`='Help', `label`='Help', `_label`=%s\\n\\t\\tWHERE\\n\\t\\t\\t`module_name`='Learn' AND\\n\\t\\t\\t`standard`=1\\n\\t\\t\", _('Help'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def compile(self, content):\n    return '<div id = ' + self.divId + '>\\n' + content + '\\n</div>'", "buggy_source_code": "def compile(self, content):\n    return '<div id = \"' + self.divId + '\">\\n' + content + '\\n</div>'", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def getBlock(sh, obj, lwPoly=False):\n    block = dxfLibrary.Block(name=obj.Name, layer=getGroup(obj))\n    writeShape(sh, obj, block, lwPoly)\n    return block", "buggy_source_code": "def getBlock(sh, obj, lwPoly=False):\n    block = dxfLibrary.Block(name=obj.Name, layer=getStrGroup(obj))\n    writeShape(sh, obj, block, lwPoly)\n    return block", "edit_actions": ["update-node"]}
{"fixed_source_code": "def xbmc_active_player(self):\n    xbmc_active_player(self.rpi_ip)", "buggy_source_code": "def xbmc_active_player(self):\n    return xbmc_active_player(self.rpi_ip)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def unhighlight(self):\n    self._item.setBrush(self._brush)", "buggy_source_code": "def unhighlight(self):\n    self._currentBrush = QtGui.QBrush(self._defaultBrush)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "update-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def _url_save(self):\n    if SAVE_FULL_URL:\n        return self.url_full\n    else:\n        return self.path", "buggy_source_code": "def _url_save(self):\n    if SAVE_FULL_URL:\n        return self.url_full\n    else:\n        return self.url_rel", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _url_relative(self):\n    return self.path", "buggy_source_code": "def _url_relative(self):\n    return self.url_rel", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _url_full(self):\n    return u'%s' % url_join(MEDIA_URL, self.path)", "buggy_source_code": "def _url_full(self):\n    return u'%s' % url_join(MEDIA_URL, self.url_rel)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __call__(self, *args, **kwargs):\n    kwargs.update({'pdb': kwargs['pdbs'].pdbs[0]})\n    return kwargs", "buggy_source_code": "def __call__(self, *args, **kwargs):\n    kwargs.update({'pdb': kwargs['pdbs'].data[0]})\n    return kwargs", "edit_actions": ["update-node"]}
{"fixed_source_code": "def send_notifications(self):\n    send_notifications.delay(self.version.pk, build_pk=self.build['id'])", "buggy_source_code": "def send_notifications(self, version_pk, build_pk):\n    send_notifications.delay(version_pk, build_pk=build_pk)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def shutdown(self):\n    for svc in self.registered_services.keys():\n        self.unregister_service(svc)\n    SimpleJSONRPCServer.shutdown(self)", "buggy_source_code": "def shutdown(self):\n    shutdown_list = self.registered_services.keys()\n    for svc in shutdown_list:\n        self.unregister_service(svc)\n    SimpleJSONRPCServer.shutdown(self)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@click.command()\ndef register():\n    print('Works!\\n')", "buggy_source_code": "@click.command()\ndef register():\n    print('Works!')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def lastmod(self, obj):\n    return obj.pub_date", "buggy_source_code": "def lastmod(self, obj):\n    return obj.updated", "edit_actions": ["update-node"]}
{"fixed_source_code": "def all_but(d, exclude_keys):\n    return get_subdict(d, set(d.keys()).difference(ulist.ascertain_list(exclude_keys)))", "buggy_source_code": "def all_but(d, exclude_keys):\n    return {k: d[k] for k in d.keys().difference(exclude_keys)}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_bitsize(filelist):\n    bitsize = 0\n    for item in filelist:\n        try:\n            nbitsize = get_bitsize(item)\n        except:\n            nbitsize = 0\n        bitsize += nbitsize\n    return bitsize", "buggy_source_code": "def get_bitsize(filelist):\n    bitsize = 0\n    for item in filelist:\n        try:\n            nbitsize = get_bitsize_file(item)\n        except:\n            nbitsize = 0\n        bitsize += nbitsize\n    return bitsize", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_scale_factor_line(self):\n    frequency = self.fit_dicts['line_fit']['fit_res'].params['frequency']\n    scale_factor = (1 + frequency) ** 2\n    return scale_factor", "buggy_source_code": "def _get_scale_factor_line(self):\n    frequency = self.fit_dicts['line_fit']['fit_res'].params['frequency']\n    scale_factor = (1 + 2 * frequency) ** 2\n    return scale_factor", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_fix_rule_005(self):\n    oRule = generate.rule_005()\n    oRule.fix(oFile)\n    oRule.analyze(oFile)\n    self.assertEqual(oRule.violations, [])", "buggy_source_code": "def test_fix_rule_005(self):\n    oRule = generate.rule_005()\n    oRule.fix(self.oFile)\n    oRule.analyze(self.oFile)\n    self.assertEqual(oRule.violations, [])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree"]}
{"fixed_source_code": "def find_board(board_id: BoardID) -> Optional[Board]:\n    return Board.query.get(board_id)", "buggy_source_code": "def find_board(board_id: BoardID) -> Optional[DbBoard]:\n    return DbBoard.query.get(board_id)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_boards_for_brand(brand_id: BrandID) -> Sequence[Board]:\n    return Board.query.filter_by(brand_id=brand_id).all()", "buggy_source_code": "def get_boards_for_brand(brand_id: BrandID) -> Sequence[DbBoard]:\n    return DbBoard.query.filter_by(brand_id=brand_id).all()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_cycle_direct(self):\n    self.do_test_cycle('graph_test:direct_cycle')", "buggy_source_code": "def test_cycle_direct(self):\n    self.do_test_cycle('graph_test:direct_cycle', 'graph_test:direct_cycle')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_cycle_self(self):\n    self.do_test_cycle('graph_test:self_cycle')", "buggy_source_code": "def test_cycle_self(self):\n    self.do_test_cycle('graph_test:self_cycle', 'graph_test:self_cycle')", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_git_config():\n    run_ssh('ls -la /opt/app/gogs/git/bin/git config', password=DEVICE_PASSWORD)", "buggy_source_code": "def test_git_config():\n    run_ssh('/opt/app/gogs/git/bin/git config', password=DEVICE_PASSWORD)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def boundingRect(self):\n    if self.__boundingRect.width() < 0:\n        self.__boundingRect = qwtBoundingRect(self)\n    return self.__boundingRect", "buggy_source_code": "def boundingRect(self):\n    if self._boundingRect.width() < 0:\n        self._boundingRect = qwtBoundingRect(self)\n    return self._boundingRect", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def boundingRect(self):\n    if self.__boundingRect.width() < 0:\n        self.__boundingRect = qwtBoundingRect(self)\n    return self.__boundingRect", "buggy_source_code": "def boundingRect(self):\n    if self._boundingRect.width() < 0:\n        self._boundingRect = qwtBoundingRect(self)\n    return self._boundingRect", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def testBadDefaultDtype(self):\n    with self.assertRaisesRegexp(TypeError, 'Expected int32.*|Cannot convert .+ to EagerTensor of dtype int32'):\n        pointer_ops.gather_with_default(params=[0, 1, 2, 3], indices=[0], default='a')", "buggy_source_code": "def testBadDefaultDtype(self):\n    with self.assertRaisesRegexp(TypeError, 'Expected int32.*|Cannot convert .*'):\n        pointer_ops.gather_with_default(params=[0, 1, 2, 3], indices=[0], default='a')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _ziplErrorHandler(self, *args, **kwargs):\n    details = kwargs['exception']\n    message = _('Installation was stopped due to an error installing the boot loader. The exact error message is:\\n\\n%s\\n\\nThe installer will now terminate.') % details\n    self.ui.showError(message)\n    return ERROR_RAISE", "buggy_source_code": "def _ziplErrorHandler(self, exn):\n    details = str(exn)\n    message = _('Installation was stopped due to an error installing the boot loader. The exact error message is:\\n\\n%s\\n\\nThe installer will now terminate.') % details\n    self.ui.showError(message)\n    return ERROR_RAISE", "edit_actions": ["update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def terminate(self):\n    self.guiManager = None", "buggy_source_code": "def terminate(self):\n    del self.guiManager", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_package(self):\n    results = self.parse_package()\n    return results[0]", "buggy_source_code": "def get_package(self):\n    (package, bare_name) = self.parse_package()\n    return package", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def string_value(self):\n    return self.__str__()", "buggy_source_code": "def string_value(self):\n    return self.data", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def get_name(self):\n    results = self.parse_package()\n    return results[1]", "buggy_source_code": "def get_name(self):\n    (package, bare_name) = self.parse_package()\n    return bare_name", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def onSchedule(self):\n    self.scheduleLock.acquire()\n    data = self.pullMeasurement()\n    self.isUpdateScheduled = False\n    self.runUpdate(data)\n    self.scheduleLock.release()", "buggy_source_code": "def onSchedule(self):\n    self.scheduleLock.acquire()\n    self.isUpdateScheduled = False\n    data = self.pullMeasurement()\n    self.runUpdate(data)\n    self.scheduleLock.release()", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def set_children(self):\n    self.selected_children = [item.text() for item in self.listWidget.selectedItems()]\n    print('New children : {}'.format(self.selected_children))", "buggy_source_code": "def set_children(self):\n    self.selected_children = [item.text() for item in self.listWidget.selectedItems()]\n    self.logger.debug('New children : {}'.format(self.selected_children))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def set_time(self, index):\n    self.selected_time = self.comboBoxItems[index].dt\n    print('New time : {}'.format(self.selected_time))", "buggy_source_code": "def set_time(self, index):\n    self.selected_time = self.comboBoxItems[index]\n    self.logger.debug('New time : {}'.format(self.selected_time.dt))", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, unsafe_tags=False, **kwargs):\n    self.unsafe_tags = unsafe_tags\n    super(TemplateField, self).__init__(**kwargs)", "buggy_source_code": "def __init__(self, allow_unsafe_tags=False, **kwargs):\n    self.allow_unsafe_tags = allow_unsafe_tags\n    super(TemplateField, self).__init__(**kwargs)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def retrieve(request):\n    placeholder = {is_placeholder: True}\n    return JsonResponse(placeholder)", "buggy_source_code": "def retrieve(request):\n    placeholder = {errors: ['this is a placeholder']}\n    return JsonResponse(placeholder)", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def is_bool(value):\n    return is_true(value) or is_false(value)", "buggy_source_code": "def is_bool(value):\n    return is_bool_true(value) or is_bool_false(value)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def on_press(self, box, arg):\n    self.refresh()\n    self.manager.show_popover(self.box)", "buggy_source_code": "def on_press(self, box, arg):\n    self.refresh_from_idle()\n    self.manager.show_popover(self.box)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _repr_html_(self):\n    src = '\\n                    <audio controls>\\n                        <source src=\"data:audio/wav;base64,{base64}\" type=\"audio/wav\" />\\n                        Your browser does not support the audio element.\\n                    </audio>\\n                  '\n    fh = self.export()\n    data = base64.b64encode(fh.read()).decode('ascii')\n    return src.format(base64=data)", "buggy_source_code": "def _repr_html_(self):\n    src = '\\n                    <audio controls>\\n                        <source src=\"data:audio/mpeg;base64,{base64}\" type=\"audio/mpeg\"/>\\n                        Your browser does not support the audio element.\\n                    </audio>\\n                  '\n    fh = self.export()\n    data = base64.b64encode(fh.read()).decode('ascii')\n    return src.format(base64=data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_populate_earliest_date_does_nothing_if_record_is_not_literature():\n    record = {'$schema': 'http://localhost:5000/schemas/records/hep.json'}\n    populate_earliest_date(None, record)\n    assert 'earliest_date' not in record", "buggy_source_code": "def test_populate_earliest_date_does_nothing_if_record_is_not_literature():\n    record = {'$schema': 'http://localhost:5000/schemas/records/other.json'}\n    populate_earliest_date(None, record)\n    assert 'earliest_date' not in record", "edit_actions": ["update-node"]}
{"fixed_source_code": "def list(self):\n    return self._list('/pool/devices', 'nodes')", "buggy_source_code": "def list(self):\n    return self._list('/pool/devices', 'devices')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get(self, device):\n    return self._get('/pool/devices/%s' % base.getid(device), 'node')", "buggy_source_code": "def get(self, device):\n    return self._get('/pool/devices/%s' % base.getid(device), 'device')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getSPfromTask(self, tcb):\n    regmap = NX_register_set.v7em_regmap\n    a = tcb['xcp']['regs']\n    return int(a[regmap['SP']])", "buggy_source_code": "def getSPfromTask(self, tcb):\n    regmap = NX_register_set.v7em_regmap\n    a = tcb['xcp']['regs']\n    return parse_int(a[regmap['SP']])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __repr__(self):\n    exit(0)", "buggy_source_code": "def __repr__(self):\n    exit()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def create_message(username, message):\n    return '{{\"service\":1, \"data\":{{\"message\":\"{mes}\", \"username\":\"{user}\"}} }}\\n'.format(mes=message, user=username)", "buggy_source_code": "def create_message(username, message):\n    return '{{\"service\":1, \"data\":{{\"message\":\"{mes}\", \"username\":\"{user}\"}} }}'.format(mes=message.replace('\\n', ''), user=username)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def factory(config, core):\n    subsonic_api = subsonic_api.get_subsonic_api_with_config(config)\n    return (('/cover_art', CoverartRequestHandler, dict(config=config, subsonic_api=subsonic_api)),)", "buggy_source_code": "def factory(config, core):\n    sapi = subsonic_api.get_subsonic_api_with_config(config)\n    return (('/cover_art', CoverartRequestHandler, dict(config=config, subsonic_api=sapi)),)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def setUp(self):\n    TestsState.view.settings().erase('vintage')\n    TestsState.view.settings().erase('vintageous_foo')\n    self.settsman = VintageSettings(view=TestsState.view)", "buggy_source_code": "def setUp(self):\n    TestsState.view.settings().erase('vintage')\n    TestsState.view.settings().erase('vintageous_foo')\n    self.vi_settings = VintageSettings(view=TestsState.view)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def tray_notify_error(str, timeout=3000):\n    if notify_object:\n        notify_object.Notify('Qubes', 0, 'dialog-error', 'Qubes', str, [], [], timeout, dbus_interface='org.freedesktop.Notifications')", "buggy_source_code": "def tray_notify_error(msg, timeout=3000):\n    if notify_object:\n        notify_object.Notify('Qubes', 0, 'dialog-error', 'Qubes', msg, [], [], timeout, dbus_interface='org.freedesktop.Notifications')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def info(parent, message):\n    logging.debug(message)\n    handle_gtk_dialog(parent, Gtk.MessageType.INFO, message, 'Information')", "buggy_source_code": "def info(parent, message):\n    logging.info(message)\n    handle_gtk_dialog(parent, Gtk.MessageType.INFO, message, 'Information')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def shutdown_piohome_servers():\n    port = 8010\n    while port < 8100:\n        try:\n            requests.get('http://127.0.0.1:%d?__shutdown__=1' % port)\n        except:\n            pass\n        port += 1", "buggy_source_code": "def shutdown_piohome_servers():\n    port = 8010\n    while port < 8050:\n        try:\n            requests.get('http://127.0.0.1:%d?__shutdown__=1' % port, timeout=0.01)\n        except:\n            pass\n        port += 1", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef __strip_characters(input: str) -> str:\n    filter_step = sub('[^a-zA-Z0-9-() *.]', '', input)\n    return sub(' +', ' ', filter_step)", "buggy_source_code": "@staticmethod\ndef __strip_characters(input_str: str) -> str:\n    filter_step = sub('[^a-zA-Z0-9-() *.]', '', input_str)\n    return sub(' +', ' ', filter_step)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def process_response(self, request, response):\n    signals.pre_save.disconnect(dispatch_uid=request)\n    return response", "buggy_source_code": "def process_response(self, request, response):\n    signals.post_save.disconnect(dispatch_uid=request)\n    return response", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getNextGripXStep(self, gridXStep):\n    gridXStep += 1\n    if self.repository.infillPatternGridHexagonal.value and (not gridXStep % 3):\n        gridXStep += 1\n    return gridXStep", "buggy_source_code": "def getNextGripXStep(self, gridXStep):\n    gridXStep += 1\n    if self.repository.infillPatternGridHexagonal.value:\n        if gridXStep % 3 == 0:\n            gridXStep += 1\n    return gridXStep", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, ncurses):\n    self.ncurses = ncurses\n    self.stop = threading.Event()\n    threading.Thread.__init__(self)\n    self.daemon = True", "buggy_source_code": "def __init__(self, ncurses):\n    threading.Thread.__init__(self)\n    self.daemon = True\n    self.ncurses = ncurses\n    self.stop = threading.Event()", "edit_actions": ["move-tree", "insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def random_col(board):\n    return randint(0, len(board) - 1)", "buggy_source_code": "def random_col(board):\n    return randint(1, len(board))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def random_row(board):\n    return randint(0, len(board) - 1)", "buggy_source_code": "def random_row(board):\n    return randint(1, len(board))", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set(self, *a, **b):\n    return self.client.delete(*a, **b)", "buggy_source_code": "def set(self, *a, **b):\n    return self.client.set(*a, **b)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get(self, *a, **b):\n    return self.client.delete(*a, **b)", "buggy_source_code": "def get(self, *a, **b):\n    return self.client.get(*a, **b)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _make_xunit(self, xunit_path, data_sources, settings):\n    if xunit_path:\n        self._robot_test_output(data_sources, settings).serialize_xunit(xunit_path)", "buggy_source_code": "def _make_xunit(self, xunit_path, data_source, settings):\n    if xunit_path:\n        self._robot_test_output([data_source], settings).serialize_xunit(xunit_path)", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def build_info(self):\n    items = [Text('There was no LXD bridge found on your system or you are not part of the LXD user group which usually means this is your first time running LXD.'), Padding.line_break(''), Text('If you wish to do so now pressing confirm will drop you out of the installer and you will be required to run the following: \\n\\n  $ sudo lxd init\\n  $ newgrp lxd\\n  $ lxc finger\\n\\nIf `lxc finger` does not fail with an error you are ready to re-run conjure-up and continue the installation.')]\n    return Pile(items)", "buggy_source_code": "def build_info(self):\n    items = [Text(\"There was no LXD bridge found on your system or not part of the 'lxd' group which usually means this is your first time running LXD.\"), Padding.line_break(''), Text('If you wish to do so now pressing confirm will drop you out of the installer and you will be required to run the following: \\n\\n  $ sudo lxd init\\n  $ newgrp lxd\\n  $ lxc finger\\n\\nIf `lxc finger` does not fail with an error you are ready to re-run conjure-up and continue the installation.')]\n    return Pile(items)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_channel_list():\n    file_name = 'new_channel_list'\n    output = codecs.open('%s.txt' % file_name, 'r', 'utf-8')\n    return [line.replace('\\n', '') for line in output.readlines()]", "buggy_source_code": "def get_channel_list():\n    file_name = 'channels_list'\n    output = codecs.open('%s.txt' % file_name, 'r', 'utf-8')\n    return [line.replace('\\n', '') for line in output.readlines()]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __getitem__(self, key):\n    try:\n        return super(Params, self).__getitem__(key)\n    except KeyError:\n        raise ParamNotFound(\"Mandatory parameter '%s' is missing. Check your cfg files for typos/mistakes\" % key)", "buggy_source_code": "def __getitem__(self, key):\n    try:\n        return IterableUserDict.__getitem__(self, key)\n    except KeyError:\n        raise ParamNotFound(\"Mandatory parameter '%s' is missing. Check your cfg files for typos/mistakes\" % key)", "edit_actions": ["move-tree", "update-node", "update-node", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def readAddr(self, address):\n    if 4 == self._POINTER_SIZE:\n        return readDword(address)\n    else:\n        return readQword(address)", "buggy_source_code": "def readAddr(self, address):\n    if 4 == self._POINTER_SIZE:\n        return self.readDword(address)\n    else:\n        return self.readQword(address)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def __init__(self):\n    self.name = MODULE_NAME\n    self._js = []", "buggy_source_code": "def __init__(self):\n    self.name = MODULE_NAME\n    self._js = {}", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@pytest.fixture(scope='session')\ndef platform_data_dir():\n    return get_platform_data_dir()", "buggy_source_code": "@pytest.fixture(scope='session')\ndef platform_data_dir():\n    return get_data_dir('platform')", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "@bot.group(pass_context=True)\nasync def about(ctx):\n    if ctx.invoked_subcommand is None:\n        await bot.say('Invoked About Sub-Command')", "buggy_source_code": "@bot.group(pass_context=True)\nasync def about(ctx):\n    if ctx.invoked_subcommand is None:\n        await bot.say('Invoked Information Sub-Command')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef active_sheet(self):\n    book = self.active_workbook\n    return Sheet(book, self.xl.active_sheet.name.get())", "buggy_source_code": "@property\ndef active_sheet(self):\n    book = self.active_book\n    return Sheet(book, self.xl.active_sheet.name.get())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def run_pef_queries(self):\n    args = '{0}{1} {2} {3} {4} {5}'.format(self.pef_runner, self.pef_index_type, self.pef_index_file, self.pef_query_file, self.thread_count, self.pef_results_file)\n    execute(args)", "buggy_source_code": "def run_pef_queries(self):\n    args = '{0} {1} {2} {3} {4} {5}'.format(self.pef_runner, self.pef_index_type, self.pef_index_file, self.pef_query_file, self.thread_count, self.pef_results_file)\n    execute(args)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _pydot_missing(self):\n    if pydot is None:\n        msg = 'Attempted calling _to_pydot.\\n'\n        msg += 'Unavailable due to pydot not installed.\\n'\n        warn(msg)\n        return True\n    return False", "buggy_source_code": "def _pydot_missing():\n    if pydot is None:\n        msg = 'Attempted calling _to_pydot.\\n'\n        msg += 'Unavailable due to pydot not installed.\\n'\n        warn(msg)\n        return True\n    return False", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, datasvc):\n    self.now = datetime.datetime.now()\n    self.cutoff = self.now - datetime.timedelta(days=90)\n    self.datasvc = datasvc", "buggy_source_code": "def __init__(self, datasvc):\n    self.now = datetime.datetime.now()\n    self.cutoff = self.now - datetime.timedelta(days=60)\n    self.datasvc = datasvc", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, build_name):\n    url = 'http://laxsky001/DevQaTools/RegisterBuild?buildNumber={}'\n    RegisterBuild.__init__(self, url, build_name)", "buggy_source_code": "def __init__(self, build_name):\n    url = 'http://skynetqa.scorebiginc.com/DevQaTools/RegisterBuild?buildNumber={}'\n    RegisterBuild.__init__(self, url, build_name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def checkRevIvl(d, targetIvl):\n    (min, max) = d.sched._fuzzIvlRange(targetIvl)\n    return min <= targetIvl <= max", "buggy_source_code": "def checkRevIvl(d, c, targetIvl):\n    (min, max) = d.sched._fuzzIvlRange(targetIvl)\n    return min <= c.ivl <= max", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def __del__(self):\n    self._del_controls()", "buggy_source_code": "def __del__(self):\n    self.del_controls()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.mark.usefixtures('temp_dir')\ndef test_git_commit_with_right_msg():\n    git_command('commit', '-m', 'feat(ui): sample')", "buggy_source_code": "@pytest.mark.usefixtures('temp_dir')\ndef test_git_commit_with_right_msg():\n    git_command('commit', '-m', 'feat(ui): sample')\n    pass", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def latest_added(n):\n    return Resource.query.order_by(Resource.date_created.desc()).limit(n).all()", "buggy_source_code": "def latest_added(n):\n    return rad.resourceservice.search(db, limit=n, search_params=dict(visible=True), order_by='date_created desc')", "edit_actions": ["update-node", "insert-node", "update-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '<User {} ({})>'.format(self.name, self.sno)", "buggy_source_code": "def __repr__(self):\n    return '<Student {} ({})>'.format(self.name, self.sno)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mapper(self, _, line):\n    filename = mrjob.compat.jobconf_from_env('map.input.file')\n    log = Weblog(line)\n    yield (filename, log.date)", "buggy_source_code": "def mapper(self, _, line):\n    filename = mrjob.compat.jobconf_from_env('map.input.file')\n    log = Weblog(line)\n    yield (filename, log.datetime)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def s(str):\n    return Template(str).substitute(dict(pod='[\\\\\"\\\\w\\\\.]+', eos='\\\\n|;', id='[a-zA-Z_][a-zA-Z0-9_]*', type='(?:\\\\[|[a-zA-Z_]|\\\\|)[:\\\\w_\\\\[\\\\]\\\\|\\\\->\\\\?]*?'))", "buggy_source_code": "def s(str):\n    return Template(str).substitute(dict(pod='[\\\\\"\\\\w\\\\.]+', eos='\\\\n|;', id='[a-zA-Z_][a-zA-Z0-9_]*', type='(?:\\\\[|[a-zA-Z_]|\\\\|)[:\\\\w\\\\[\\\\]\\\\|\\\\->\\\\?]*?'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_version():\n    description = _get_git_description()\n    if description:\n        return _create_version_from_description(description)\n    else:\n        return None", "buggy_source_code": "def get_version():\n    with open(VERSION_FILE) as version_file:\n        return json.loads(version_file.read())['version']", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef lr(self):\n    warnings.warn('AdamRule.lr is deprecated. Use AdamRule.alpha_t instead.', DeprecationWarning)\n    return self.alpha_t", "buggy_source_code": "@property\ndef lr(self):\n    warnings.warn('AdamRule.lr has been renamed to AdamRule.alpha_t. Use of AdamRule.lr is deprecated in Chainer v6.', DeprecationWarning)\n    return self.alpha_t", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef lr(self):\n    warnings.warn('Adam.lr is deprecated. Use Adam.alpha_t instead.', DeprecationWarning)\n    return self.alpha_t", "buggy_source_code": "@property\ndef lr(self):\n    warnings.warn('Adam.lr has been renamed to AdamRule.alpha_t. Use of Adam.lr is deprecated in Chainer v6.', DeprecationWarning)\n    return self.alpha_t", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.6b3.tar.gz', url_subpath='pywebsocket-0.6b3/src/mod_pywebsocket')", "buggy_source_code": "def _install_pywebsocket(self):\n    pywebsocket_dir = self._fs.join(_AUTOINSTALLED_DIR, 'pywebsocket')\n    installer = AutoInstaller(target_dir=pywebsocket_dir)\n    installer.install(url='http://pywebsocket.googlecode.com/files/mod_pywebsocket-0.6b2.tar.gz', url_subpath='pywebsocket-0.6b2/src/mod_pywebsocket')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def detect_variant(self):\n    raise NotImplementedError('Subclass Document and override this method')", "buggy_source_code": "def detect_variant(self):\n    raise NotImplementedError('Subclass Document and override this method to return a DocSchema  derived class.')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate_segments_response(segments):\n    segment_list = [segment_dict(segment) for segment in segments]\n    return HttpResponse(json.dumps({'ok': True, 'segments': segment_list}), mimetype='text/json')", "buggy_source_code": "def generate_segments_response(segments):\n    segment_list = [segment_dict(segment) for segment in segments]\n    return HttpResponse(json.dumps({'ok': True, 'segments': segment_list}), content_type='text/json')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def generate_slices_response(slices):\n    slice_list = [slice_dict(slice) for slice in slices]\n    return HttpResponse(json.dumps({'ok': True, 'slices': slice_list}), mimetype='text/json')", "buggy_source_code": "def generate_slices_response(slices):\n    slice_list = [slice_dict(slice) for slice in slices]\n    return HttpResponse(json.dumps({'ok': True, 'slices': slice_list}), content_type='text/json')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_role_by_name(self, role_name):\n    return self.client.get(self.endpoint + '/' + role_name)", "buggy_source_code": "def get_role_by_name(self, role_name):\n    return self.client.get(self.endpoint + '/name/' + role_name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    return type(self) == type(other) and self._coders == self._coders", "buggy_source_code": "def __eq__(self, other):\n    return type(self) == type(other) and self._coders == other.coders", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    return type(self) == type(other) and self._elem_coder == self._elem_coder", "buggy_source_code": "def __eq__(self, other):\n    return type(self) == type(other) and self._elem_coder == other.value_coder", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __eq__(self, other):\n    return type(self) == type(other) and self._elem_coder == self._elem_coder", "buggy_source_code": "def __eq__(self, other):\n    return type(self) == type(other) and self._elem_coder == other.value_coder", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def testSearch(self):\n    print(json.dumps(self._api.search('*')))", "buggy_source_code": "def testSearch(self):\n    hosts = self._api.search('*')\n    print(next(hosts))\n    print(next(hosts))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@login_required\n@flaskapp.route('/logout')\ndef logout():\n    session.clear()\n    gc.collect()\n    flash('You have been logged out!')\n    return redirect(url_for('register'))", "buggy_source_code": "@flaskapp.route('/logout')\n@login_required\ndef logout():\n    session.clear()\n    gc.collect()\n    flash('You have been logged out!')\n    return redirect(url_for('register'))", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def __init__(self, name, fn, redirect_everything=False):\n    self.__orig_module = sys.modules[name]\n    sys.modules[name] = self\n    self.__everything = redirect_everything\n    self.__fn = fn", "buggy_source_code": "def __init__(self, name, fn, redirect_everything=False):\n    self._orig_module_ = sys.modules[name]\n    sys.modules[name] = self\n    self._everything_ = redirect_everything\n    self._fn_ = fn", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def get_available_devices():\n    return libpcap.findalldevs()", "buggy_source_code": "def get_available_devices():\n    return lpcap.findalldevs()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def die(self):\n    for gEnemy in enemy.Enemy.group:\n        gEnemy.die()\n    self.spawn()", "buggy_source_code": "def die(self, game):\n    game.paused = True\n    self.setStatus('death', lambda : self.realDie(game))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_branch_length(self, age):\n    return FractalTree.get_branch_length(self, age) * gauss(1, self.branch_sigma)", "buggy_source_code": "def get_branch_length(self, age):\n    return FractalTree.get_branch_length(self, age) * (1 + gauss(0, self.branch_sigma))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def run(self, count=1, mode=None):\n    for i in range(count):\n        self.view.run_command('redo')", "buggy_source_code": "def run(self, count=1, mode=None):\n    for i in range(count):\n        self._view.run_command('redo')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, cursor, connection):\n    self.cursor = cursor\n    self.connection = connection", "buggy_source_code": "def __init__(self, cursor, db):\n    self.cursor = cursor\n    self.db = db", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return '{} ()'.format(self.provider.name, self.get_ad_type_display())", "buggy_source_code": "def __unicode__(self):\n    return '{} ({})'.format(self.provider.name, self.get_ad_type_display())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def invalidate_all_tokens(self, user=None):\n    if user is None:\n        user = self.get_user()\n    user.uuid = getUUID()\n    user.save()", "buggy_source_code": "def invalidate_all_tokens(self, user=None):\n    if user is None:\n        user = self.get_user()\n    user.uuid = getUUID()\n    user.save()\n    return True", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def run_async(func):\n\n    @wraps(func)\n    def async_func(*pargs, **kwargs):\n        ASYNC_QUEUE.put((func, pargs, kwargs))\n    return async_func", "buggy_source_code": "def run_async(func):\n\n    @wraps(func)\n    def async_func(*args, **kwargs):\n        ASYNC_QUEUE.put((func, args, kwargs))\n    return async_func", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, num='0'):\n    self.num = num\n    self.icon = gtk.StatusIcon()\n    self.update_icon()\n    gobject.timeout_add_seconds(TIMEOUT, self.update_icon)", "buggy_source_code": "def __init__(self, num='0'):\n    self.num = num\n    self.icon = gtk.StatusIcon()\n    self.update_icon()\n    gobject.timeout_add(TIMEOUT, self.update_icon)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def delete(self, name):\n    self.connection.delete_blob(self.azure_container, name)", "buggy_source_code": "def delete(self, name):\n    try:\n        self.connection.delete_blob(self.azure_container, name)\n    except AzureMissingResourceHttpError:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __getattr__(self, name):\n    raise AttributeError(name)", "buggy_source_code": "def __getattr__(self, name):\n    raise AttributeError()", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def testKeyvalInvalid(self):\n    self.assertRaisesMPI([MPI.ERR_KEYVAL, MPI.ERR_OTHER], MPI.COMM_SELF.Get_attr, MPI.KEYVAL_INVALID)", "buggy_source_code": "def testKeyvalInvalid(self):\n    self.assertRaisesMPI([MPI.ERR_KEYVAL, MPI.ERR_OTHER], MPI.COMM_WORLD.Get_attr, MPI.KEYVAL_INVALID)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def rotary2_right():\n    logger.debug('rotary2_right')\n    logger.debug('[ VOLUME %d ]' % volume)\n    sonos_device.volume -= 2", "buggy_source_code": "def rotary2_right():\n    logger.debug('rotary2_right')\n    logger.debug('[ VOLUME Down ]')\n    sonos_device.volume -= 2", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, order=3, mode='reflect', cval=0.0):\n    self.order = order\n    self.mode = mode\n    self.cval = cval", "buggy_source_code": "def __init__(self, order=3, mode='constant', cval=0.0):\n    self.order = order\n    self.mode = mode\n    self.cval = cval", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_sle_against_current_voucher(self):\n    return frappe.db.sql('\\n\\t\\t\\tselect\\n\\t\\t\\t\\t*, timestamp(posting_date, posting_time) as \"timestamp\"\\n\\t\\t\\tfrom\\n\\t\\t\\t\\t`tabStock Ledger Entry`\\n\\t\\t\\twhere\\n\\t\\t\\t\\titem_code = %(item_code)s\\n\\t\\t\\t\\tand warehouse = %(warehouse)s\\n\\t\\t\\t\\tand voucher_type = %(voucher_type)s\\n\\t\\t\\t\\tand voucher_no = %(voucher_no)s\\n\\t\\t\\torder by\\n\\t\\t\\t\\tcreation ASC\\n\\t\\t\\tfor update\\n\\t\\t', self.args, as_dict=1)", "buggy_source_code": "def get_sle_against_current_voucher(self):\n    return frappe.db.sql('\\n\\t\\t\\tselect\\n\\t\\t\\t\\t*, timestamp(posting_date, posting_time) as \"timestamp\"\\n\\t\\t\\tfrom\\n\\t\\t\\t\\t`tabStock Ledger Entry`\\n\\t\\t\\twhere\\n\\t\\t\\t\\titem_code = %(item_code)s\\n\\t\\t\\t\\tand warehouse = %(warehouse)s\\n\\t\\t\\t\\tand timestamp(posting_date, time_format(posting_time, \\'%H:%i:%s\\')) = timestamp(%(posting_date)s, time_format(%(posting_time)s, \\'%H:%i:%s\\'))\\n\\t\\t\\torder by\\n\\t\\t\\t\\tcreation ASC\\n\\t\\t\\tfor update\\n\\t\\t', self.args, as_dict=1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def selectFile(self, path):\n    if isinstance(path, str):\n        path = getHandle(path)\n    self.ui.fileTreeWidget.select(path)", "buggy_source_code": "def selectFile(self, path):\n    if isinstance(path, six.string_types):\n        path = getHandle(path)\n    self.ui.fileTreeWidget.select(path)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def bonded_atoms(self):\n    idx = [b.partner(self).index for b in self.bonds]\n    return self._u.atoms[idx]", "buggy_source_code": "def bonded_atoms(self):\n    idx = [b.partner(self).index for b in self.bonds]\n    return self.universe.atoms[idx]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def enable_service(self, service_name):\n    self.log('MaitreD: Enabling ' + service_name)\n    os.system('sudo /bin/systemctl enable ' + servicename)\n    os.system('sudo /bin/systemctl start ' + servicename)", "buggy_source_code": "def enable_service(self, service_name):\n    self.log('MaitreD: Enabling ' + service_name)\n    os.system('sudo /bin/systemctl enable ' + service_name)\n    os.system('sudo /bin/systemctl start ' + service_name)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@hook('stop')\ndef shutdown():\n    service_stop('snap.kube-apiserver.daemon')\n    service_stop('snap.kube-controller-manager.daemon')\n    service_stop('snap.kube-scheduler.daemon')\n    service_stop('snap.kube-proxy.daemon')", "buggy_source_code": "@hook('stop')\ndef shutdown():\n    for service in master_services:\n        service_stop('snap.%s.daemon' % service)", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_attrs_repr():\n    x = Locus('1', 3, 4, attrs={'foo': 'locus1', 'bar': 'baz'})\n    assert repr(x.attrs)", "buggy_source_code": "def test_attrs_repr():\n    x = Locus('chr1', 1, 100, attrs={'foo': 'bar'})\n    assert repr(x)", "edit_actions": ["move-tree", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def python(command='python'):\n    return REPLWrapper(command, u('>>> '), u('import sys; sys.ps1={0!r}; sys.ps2={1!r}'))", "buggy_source_code": "def python(command='python'):\n    return REPLWrapper(command, u'>>> ', u'import sys; sys.ps1={0!r}; sys.ps2={1!r}')", "edit_actions": ["update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def set_link(self, linkid, target):\n    assert (linkid not in self._linkid2target, 'linkid %r already used' % (linkid,))\n    self._linkid2target[linkid] = target", "buggy_source_code": "def set_link(self, linkid, target):\n    assert linkid not in self._linkid2target, 'linkid %r already used' % (linkid,)\n    self._linkid2target[linkid] = target", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def update_po_per_received_per_billed():\n    frappe.db.sql(' \\n\\t\\tupdate\\n\\t\\t\\t`tabPurchase Order`\\n\\t\\tset\\n\\t\\t\\t`tabPurchase Order`.per_received = round((select sum(if(qty > ifnull(received_qty, 0),\\n\\t\\t\\t\\t\\tifnull(received_qty, 0), qty)) / sum(qty) *100 from `tabPurchase Order Item`\\n\\t\\t\\t\\t\\twhere parent = `tabPurchase Order`.name), 2),\\n\\t\\t\\t`tabPurchase Order`.per_billed = round((select sum( if(amount > ifnull(billed_amt, 0),\\n\\t\\t\\t\\t\\tifnull(billed_amt, 0), amount)) / sum(amount) *100 from `tabPurchase Order Item`\\n\\t\\t\\t\\t\\twhere parent = `tabPurchase Order`.name), 2)')", "buggy_source_code": "def update_po_per_received_per_billed():\n    frappe.db.sql(' \\n\\t\\tupdate\\n\\t\\t\\t`tabPurchase Order`\\n\\t\\tset\\n\\t\\t\\t`tabPurchase Order`.per_received = round((select sum(if(qty > ifnull(received_qty, 0),\\n\\t\\t\\t\\t\\tifnull(received_qty, 0), qty)) / sum(qty) *100 from `tabPurchase Order Item`\\n\\t\\t\\t\\t\\twhere parent = `tabPurchase Order`.name), 2),\\n\\t\\t\\t`tabPurchase Order`.per_billed = ifnull(round((select sum( if(amount > ifnull(billed_amt, 0),\\n\\t\\t\\t\\t\\tifnull(billed_amt, 0), amount)) / sum(amount) *100 from `tabPurchase Order Item`\\n\\t\\t\\t\\t\\twhere parent = `tabPurchase Order`.name), 2), 0)')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def update_so_per_delivered_per_billed():\n    frappe.db.sql(' \\n\\t\\tupdate\\n\\t\\t\\t`tabSales Order`\\n\\t\\tset \\n\\t\\t\\t`tabSales Order`.per_delivered = round((select sum( if(qty > ifnull(delivered_qty, 0),\\n\\t\\t\\t\\t\\tifnull(delivered_qty, 0), qty)) / sum(qty) *100 from `tabSales Order Item` \\n\\t\\t\\t\\t\\twhere parent = `tabSales Order`.name), 2), \\n\\t\\t\\t`tabSales Order`.per_billed = round((select sum( if(amount > ifnull(billed_amt, 0),\\n\\t\\t\\t\\t\\tifnull(billed_amt, 0), amount)) / sum(amount) *100 from `tabSales Order Item`\\n\\t\\t\\t\\t\\twhere parent = `tabSales Order`.name), 2)')", "buggy_source_code": "def update_so_per_delivered_per_billed():\n    frappe.db.sql(' \\n\\t\\tupdate\\n\\t\\t\\t`tabSales Order`\\n\\t\\tset \\n\\t\\t\\t`tabSales Order`.per_delivered = round((select sum( if(qty > ifnull(delivered_qty, 0),\\n\\t\\t\\t\\t\\tifnull(delivered_qty, 0), qty)) / sum(qty) *100 from `tabSales Order Item` \\n\\t\\t\\t\\t\\twhere parent = `tabSales Order`.name), 2), \\n\\t\\t\\t`tabSales Order`.per_billed = ifnull(round((select sum( if(amount > ifnull(billed_amt, 0),\\n\\t\\t\\t\\t\\tifnull(billed_amt, 0), amount)) / sum(amount) *100 from `tabSales Order Item`\\n\\t\\t\\t\\t\\twhere parent = `tabSales Order`.name), 2), 0)')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def authenticate():\n    return Response('Could not verify your access level for that URL.\\nYou have to login with proper credentials', 401, {'WWW-Authenticate': 'Basic realm=\"Login Required\"'})", "buggy_source_code": "def authenticate():\n    return Response('Could not verify your access level for that URL.\\nYou have to login with proper credentials', 401, {b'WWW-Authenticate': b'Basic realm=\"Login Required\"'})", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pre_execute('.')\n@static_validate_value_type('.', strings)\ndef concatinate(context, *terms):\n    return Value(''.join(terms), actual=True)", "buggy_source_code": "@pre_execute('JOIN')\n@static_validate_value_type('JOIN', strings)\ndef concatinate(context, *terms):\n    return Value(''.join([t.v for t in terms]), actual=True)", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@app.route('/api/v1/update_model/', methods=['POST'])\ndef update_params():\n    updateParams = messaging.load_gradient_message(request.data, compressed=False)\n    update(params)\n    return 'model updated'", "buggy_source_code": "@app.route('/api/v1/update_model', methods=['POST'])\ndef update_params():\n    updateParams = messaging.load_gradient_message(request.data, compressed=False)\n    update(params)\n    return 'model updated'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _tarballUrlForBranch(repo, branchname=None):\n    r = repo.url + u'/tarball'\n    if branchname:\n        r += '/' + branchname\n    return r", "buggy_source_code": "def _tarballUrlForBranch(repo, branchname=None):\n    r = _ensureDomainPrefixed(repo.url) + u'/tarball'\n    if branchname:\n        r += '/' + branchname\n    return r", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def testHasAccessNormalSub(self):\n    roleHad = 'Caster'\n    roleNeeded = 'Sub'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "buggy_source_code": "def testHasAccessNormalSub(self):\n    roleHad = 'Normal'\n    roleNeeded = 'Sub'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testHasAccessNormalMod(self):\n    roleHad = 'Caster'\n    roleNeeded = 'Mod'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "buggy_source_code": "def testHasAccessNormalMod(self):\n    roleHad = 'Normal'\n    roleNeeded = 'Mod'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testHasAccessNormalNormal(self):\n    roleHad = 'Caster'\n    roleNeeded = 'Normal'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), True)", "buggy_source_code": "def testHasAccessNormalNormal(self):\n    roleHad = 'Normal'\n    roleNeeded = 'Normal'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testHasAccessNormalFollower(self):\n    roleHad = 'Caster'\n    roleNeeded = 'Follower'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "buggy_source_code": "def testHasAccessNormalFollower(self):\n    roleHad = 'Normal'\n    roleNeeded = 'Follower'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testHasAccessNormalCaster(self):\n    roleHad = 'Caster'\n    roleNeeded = 'Caster'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "buggy_source_code": "def testHasAccessNormalCaster(self):\n    roleHad = 'Normal'\n    roleNeeded = 'Caster'\n    self.assertEqual(centurion.hasAccess(roleHad, roleNeeded), False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_should_show_login_page(self):\n    res = self.client.get('/login')\n    assert res.status_code == 200\n    assert 'Log in to the Digital Marketplace' in res.get_data(as_text=True)", "buggy_source_code": "def test_should_show_login_page(self):\n    res = self.client.get('/login')\n    assert res.status_code == 200\n    assert 'Log in to see more' in res.get_data(as_text=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_login_form_and_inputs_not_autofillable(self):\n    self._forms_and_inputs_not_autofillable('/login', 'Log in to the Digital Marketplace')", "buggy_source_code": "def test_login_form_and_inputs_not_autofillable(self):\n    self._forms_and_inputs_not_autofillable('/login', 'Log in to see more')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.regex = re.compile('.*?\\\\s+_\\\\s*\\\\(')\n    self.iffail = 'lua_str01'", "buggy_source_code": "def __init__(self):\n    self.regex = re.compile('((?:_)|(?:.*?\\\\s+_))\\\\s*\\\\(')\n    self.iffail = 'lua_str01'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def splitPrefix(self, name):\n    if name is not None and ':' in name:\n        return tuple(name.split(':'))\n    else:\n        return (None, name)", "buggy_source_code": "def splitPrefix(self, name):\n    if name is not None and ':' in name:\n        return tuple(name.split(':', 1))\n    else:\n        return (None, name)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "@emoji.command()\nasync def shrug(self, ctx):\n    await ctx.message.edit('¯\\\\_(ツ)_/¯')", "buggy_source_code": "@emoji.command()\nasync def shrug(self, ctx):\n    await ctx.message.edit(content='¯\\\\_(ツ)_/¯')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def unflip(self, ctx):\n    await ctx.message.edit('┬─┬\\ufeff ノ( ゜-゜ノ)')", "buggy_source_code": "@emoji.command()\nasync def unflip(self, ctx):\n    await ctx.message.edit(content='┬─┬\\ufeff ノ( ゜-゜ノ)')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def tableflip(self, ctx):\n    await ctx.message.edit('(╯°□°）╯︵ ┻━┻')", "buggy_source_code": "@emoji.command()\nasync def tableflip(self, ctx):\n    await ctx.message.edit(content='(╯°□°）╯︵ ┻━┻')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@emoji.command()\nasync def eyesworried(self, ctx):\n    await ctx.message.edit('ಠ_ಠ')", "buggy_source_code": "@emoji.command()\nasync def eyesworried(self, ctx):\n    await ctx.message.edit(content='ಠ_ಠ')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def convert_DateTimeProperty(model, prop, kwargs):\n    if prop.auto_now or prop.auto_now_add:\n        return None\n    return f.DateTimeField(format='%Y-%m-%d %H-%M-%S', **kwargs)", "buggy_source_code": "def convert_DateTimeProperty(model, prop, kwargs):\n    if prop.auto_now or prop.auto_now_add:\n        return None\n    return f.DateTimeField(format='%Y-%m-%d %H:%M:%S', **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unload(self):\n    self.iface.removePluginMenu('Geosisma-prototype', self.action)", "buggy_source_code": "def unload(self):\n    self.iface.removePluginMenu('GeosismaPrototype', self.action)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@cached_property\ndef accessible(self):\n    return self.areas.difference(self.holes).difference(self.obstacles)", "buggy_source_code": "@cached_property\ndef accessible(self):\n    return self.areas.difference(cascaded_union([self.holes, self.obstacles]))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef iv_str(self):\n    return self.embed.fields[WildEmbed.iv_index].value", "buggy_source_code": "@property\ndef iv_str(self):\n    return self.embed.fields[WildEmbed.lvl_iv_index].value", "edit_actions": ["update-node"]}
{"fixed_source_code": "def all_moment_errs(self):\n    return [self._moment0_err, self._moment1_err, self._moment2_err, self._intint_err]", "buggy_source_code": "def all_moment_errs(self):\n    return [self._moment0_err, self._moment1_err, self.linewidth_err, self._intint_err]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def all_moments(self):\n    return [self._moment0, self._moment1, self._moment2, self._intint]", "buggy_source_code": "def all_moments(self):\n    return [self._moment0, self._moment1, self.linewidth, self._intint]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def remove(self):\n    from shutil import rmtree\n    rmtree(self._fs_path)", "buggy_source_code": "def remove(self):\n    from shutil import rmtree\n    try:\n        rmtree(self._fs_path)\n    except FileNotFoundError as error:\n        pass", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def reset_seen(self):\n    if getattr(self.meta, 'track_seen', False):\n        self._seen = json.dumps([frappe.session.user])", "buggy_source_code": "def reset_seen(self):\n    if getattr(self.meta, 'track_seen', False):\n        self.db_set('_seen', json.dumps([frappe.session.user]), update_modified=False)", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def assign_product_template(cr, registry):\n    cr.execute('UPDATE mrp_bom_line AS line   SET product_template = product_product.product_tmpl_id  FROM product_product WHERE line.product_id = product_product.id;')\n    cr.execute('UPDATE mrp_production AS line   SET product_template = product_product.product_tmpl_id  FROM product_product WHERE line.product_id = product_product.id;')\n    cr.execute('UPDATE mrp_production_product_line AS line   SET product_template = product_product.product_tmpl_id  FROM product_product WHERE line.product_id = product_product.id;')", "buggy_source_code": "def assign_product_template(cr, registry):\n    cr.execute('UPDATE mrp_bom_line AS line   SET product_template = product_product.product_tmpl_id  FROM product_product WHERE line.product_id = product_product.id')\n    cr.execute('UPDATE mrp_production AS line   SET product_template = product_product.product_tmpl_id  FROM product_product WHERE line.product_id = product_product.id')\n    cr.execute('UPDATE mrp_production_product_line AS line   SET product_template = product_product.product_tmpl_id  FROM product_product WHERE line.product_id = product_product.id')", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self):\n    renderer.__init__(self)\n    self.name = 'FY'\n    self.icon_path = 'images/pompelyts.png'", "buggy_source_code": "def __init__(self):\n    renderer.__init__(self)\n    self.name = 'FY'\n    self.icon_path = '/images/pompelyts.png'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@argcheck(ProductFullStockView)\ndef get_editor_model(self, model):\n    return Product.get(model.product_id, connection=self.conn)", "buggy_source_code": "@argcheck(SellableView)\ndef get_editor_model(self, model):\n    return Product.get(model.product_id, connection=self.conn)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.mark.parametrize('text', ['google.com', 'python.org', 'spacy.io', 'explosion.ai, http://www.google.com'])\ndef test_tokenizer_keep_urls(tokenizer, text):\n    tokens = tokenizer(text)\n    assert len(tokens) == 1", "buggy_source_code": "@pytest.mark.parametrize('text', ['google.com', 'python.org', 'spacy.io', 'explosion.ai', 'http://www.google.com'])\ndef test_tokenizer_keep_urls(tokenizer, text):\n    tokens = tokenizer(text)\n    assert len(tokens) == 1", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def get_url_and_date_by_id(self, a_link_id):\n    with self._connection as connection:\n        return connection.execute('select url, date_saved from links where link_id = ?', (a_link_id,)).fetchone()", "buggy_source_code": "def get_url_and_date_by_id(self, link_id):\n    with self._connection as connection:\n        return connection.execute('select url, date_saved from links where link_id = ?', (link_id,)).fetchone()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_id_by_url(self, an_url):\n    with self._connection as connection:\n        row_of_link_with_given_url = connection.execute('select link_id from links where url = ?', (an_url,)).fetchone()\n        desired_id = row_of_link_with_given_url[0]\n        return desired_id", "buggy_source_code": "def get_id_by_url(self, url):\n    with self._connection as connection:\n        row_of_link_with_given_url = connection.execute('select link_id from links where url = ?', (url,)).fetchone()\n        desired_id = row_of_link_with_given_url[0]\n        return desired_id", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def save(self, an_url, a_date):\n    with self._connection as connection:\n        connection.execute('insert into links(url, date_saved) values(?, ?)', (an_url, a_date))", "buggy_source_code": "def save(self, url, date):\n    with self._connection as connection:\n        connection.execute('insert into links(url, date_saved) values(?, ?)', (url, date))", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def deviceStopComm(self, device):\n    self.logger.debug('Removing Device %s (%d) from MyQ device list' % (device.name, device.id))\n    assert device.id in self.myqDevices\n    del self.myqDevices[device.id]", "buggy_source_code": "def deviceStopComm(self, device):\n    self.logger.debug('deviceStopComm: Removing Device %s (%d) from MyQ device list' % (device.name, device.id))\n    assert device.id in self.myqDevices\n    del self.myqDevices[device.id]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_user as (\\n                 select\\n                     min(f.id) as id,\\n                     f.user_id as user_id,\\n                     u.name as user,\\n                     count(*) as nbr,\\n                     substring(f.create_date for 7)||'-'||'01' as name,\\n                     d.name as directory,\\n                     f.create_date as create_date,\\n                     f.file_size as file_size,\\n                     min(f.title) as file_title,\\n                     min(d.type) as type,\\n                     min(EXTRACT(MONTH FROM f.create_date)||'-'||substring(to_char(f.create_date,'YY-Month-DD') from 4 for 9)) as month,\\n                     f.write_date as change_date\\n                 from ir_attachment f\\n                     left join document_directory d on (f.parent_id=d.id and d.name<>'')\\n                     inner join res_users u on (f.user_id=u.id)\\n                 group by d.name,f.parent_id,d.type,f.create_date,f.user_id,f.file_size,u.name,d.type,f.write_date\\n             )\\n         \")", "buggy_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_document_user as (\\n                 select\\n                     min(f.id) as id,\\n                     f.user_id as user_id,\\n                     u.name as user,\\n                     count(*) as nbr,\\n                     to_char(f.create_date,'YYYY-MM')||'-'||'01' as name,\\n                     d.name as directory,\\n                     f.create_date as create_date,\\n                     f.file_size as file_size,\\n                     min(f.title) as file_title,\\n                     min(d.type) as type,\\n                     min(EXTRACT(MONTH FROM f.create_date)||'-'||substring(to_char(f.create_date,'YY-Month-DD') from 4 for 9)) as month,\\n                     f.write_date as change_date\\n                 from ir_attachment f\\n                     left join document_directory d on (f.parent_id=d.id and d.name<>'')\\n                     inner join res_users u on (f.user_id=u.id)\\n                 group by d.name,f.parent_id,d.type,f.create_date,f.user_id,f.file_size,u.name,d.type,f.write_date\\n             )\\n         \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_files_partenr as (\\n                select min(f.id) as id,count(*) as nbr,min(substring(f.create_date for 7)||'-'||'01') as name,min(f.title) as file_title,p.name as partner from ir_attachment f inner join res_partner p on (f.partner_id=p.id) group by p.name\\n             )\\n         \")", "buggy_source_code": "def init(self, cr):\n    cr.execute(\"\\n            create or replace view report_files_partenr as (\\n                select min(f.id) as id,count(*) as nbr,min(to_char(f.create_date,'YYYY-MM')||'-'||'01') as name,min(f.title) as file_title,p.name as partner from ir_attachment f inner join res_partner p on (f.partner_id=p.id) group by p.name\\n             )\\n         \")", "edit_actions": ["update-node"]}
{"fixed_source_code": "def close(self):\n    GPIO.Cleanup(self.pin)", "buggy_source_code": "def close(self):\n    GPIO.cleanup(self.pin)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_timezone(self):\n    return str(self.settings.value('misc/timezone').toString())", "buggy_source_code": "def get_timezone(self):\n    return str(self.get_with_default('misc/timezone', 'US/Central').toString())", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _find_by_slide(self, slide_id):\n    try:\n        qc = SlideQualityControl.objects.get(slide=slide_id)\n    except SlideQualityControl.DoesNotExist:\n        qc = None\n    return qc", "buggy_source_code": "def _find_by_slide(self, slide_id):\n    try:\n        return SlideQualityControl.objects.get(slide=slide_id)\n    except SlideQualityControl.DoesNotExist:\n        raise NotFound(\"Unable to find quality control data for slide ID '%s'\" % slide_id)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tearDown(self):\n    self.samfile.close()\n    self.fastafile.close()\n    os.unlink('tests/test_count_coverage_read_all.bam')\n    os.unlink('tests/test_count_coverage_read_all.bam.bai')", "buggy_source_code": "def tearDown(self):\n    self.samfile.close()\n    self.fastafile.close()\n    os.unlink('test_count_coverage_read_all.bam')\n    os.unlink('test_count_coverage_read_all.bam.bai')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def enter_sys_disp_notation_move_menu(self):\n    self.state = MenuState.SYS_DISP_NOTATION_MOVE\n    msg = 'short' if self.menu_system_display_notation else 'long'\n    text = self.dgttranslate.text('B00_notation_' + msg)\n    return text", "buggy_source_code": "def enter_sys_disp_notation_move_menu(self):\n    self.state = MenuState.SYS_DISP_NOTATION_MOVE\n    msg = 'long' if self.menu_system_display_notation else 'short'\n    text = self.dgttranslate.text('B00_notation_' + msg)\n    return text", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def set_message(self, *args):\n    if self.obj is None and self.active:\n        self.SessionStart()\n    self.SetMessage()", "buggy_source_code": "def set_message(self, *args):\n    if self.obj is None and self.active:\n        self.SessionStart()\n        self.SetMessage()", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def link_code(self):\n    self._cuisine.core.dir_ensure('$appDir')\n    self._cuisine.core.file_link('$codeDir/github/jumpscale/jscockpit/deploy_bot/', '$appDir/deployer_bot')", "buggy_source_code": "def link_code(self):\n    self._cuisine.core.dir_ensure('$appDir')\n    self._cuisine.core.file_link('$codeDir/github/jumpscale/jscockpit/deployer_bot/', '$appDir/deployer_bot')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, argv):\n    self.version = '0.3.2'\n    self.rev = 377\n    self.argv = argv\n    self.action = None\n    self.createParser()\n    self.createArguments()", "buggy_source_code": "def __init__(self, argv):\n    self.version = '0.3.2'\n    self.rev = 378\n    self.argv = argv\n    self.action = None\n    self.createParser()\n    self.createArguments()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def addOptions(parser):\n    parser.add_argument('component', default=None, nargs='?', help='Link a globally installed (or globally linked) module into' + \"the current module's dependencies. If ommited, globally\" + 'link the current module.')", "buggy_source_code": "def addOptions(parser):\n    parser.add_argument('component', default=None, nargs='?', help='Link a globally installed (or globally linked) module into ' + \"the current module's dependencies. If ommited, globally \" + 'link the current module.')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def disableTimer(self):\n    if self._change_timer is not None:\n        self._change_timer.timeout.disconnect()\n        self._change_timer = None\n    self._use_timer = False", "buggy_source_code": "def disableTimer(self):\n    if self._use_timer:\n        self._use_timer = False\n        self._change_timer.timeout.disconnect(self.slice)", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _disk_image_create(self, args):\n    subprocess.call('disk-image-create {0}'.format(args), shell=True)", "buggy_source_code": "def _disk_image_create(self, args):\n    subprocess.check_call('disk-image-create {0}'.format(args), shell=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _ramdisk_image_create(self, args):\n    subprocess.call('ramdisk-image-create {0}'.format(args), shell=True)", "buggy_source_code": "def _ramdisk_image_create(self, args):\n    subprocess.check_call('ramdisk-image-create {0}'.format(args), shell=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_default_language():\n    return DEFAULT_LANGUAGE", "buggy_source_code": "def get_default_language():\n    return thread_locals.DEFAULT_LANGUAGE", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_SUNW_syminfo_section_sparc64(self):\n    self._test_SUNW_syminfo_section_generic('exe_solaris64_cc.elf.sparc')", "buggy_source_code": "def test_SUNW_syminfo_section_sparc64(self):\n    self._test_SUNW_syminfo_section_generic('exe_solaris64_cc.sparc.elf')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_SUNW_syminfo_section_sparc32(self):\n    self._test_SUNW_syminfo_section_generic('exe_solaris32_cc.elf.sparc')", "buggy_source_code": "def test_SUNW_syminfo_section_sparc32(self):\n    self._test_SUNW_syminfo_section_generic('exe_solaris32_cc.sparc.elf')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _print_installed_pkg(message):\n    cwrite('@*g{[+]} ')\n    print(message)", "buggy_source_code": "def _print_installed_pkg(message):\n    print(colorize('@*g{[+]} ') + message)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def fix_pointer_spaces(self, code):\n    code = re.sub(' \\\\*', '*', code)\n    code = re.sub('\\\\*([^\\\\*])', '* \\\\1', code)\n    return code", "buggy_source_code": "def fix_pointer_spaces(self, code):\n    code = re.sub(' +\\\\*', '*', code)\n    code = re.sub('\\\\*([^\\\\* ])', '* \\\\1', code)\n    return code", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLUniquenessError, line=3, col=23)\ndef test_graphql_syntax_names17(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLUniquenessError, 'argument', line=3, col=23)\ndef test_graphql_syntax_names17(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLUniquenessError, line=3, col=23)\ndef test_graphql_syntax_names18(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLUniquenessError, 'argument', line=3, col=23)\ndef test_graphql_syntax_names18(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=10, col=53)\ndef test_graphql_syntax_scope06(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, \"undefined variable '\\\\$bad'\", line=10, col=53)\ndef test_graphql_syntax_scope06(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@tb.must_fail(GraphQLParserError, line=2, col=25)\ndef test_graphql_syntax_query07(self):\n    pass", "buggy_source_code": "@tb.must_fail(GraphQLParserError, 'Unknown token', line=2, col=25)\ndef test_graphql_syntax_query07(self):\n    pass", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "@blueprint.route('/about', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('About'))\ndef about():\n    return render_template('openaire_about.html')", "buggy_source_code": "@blueprint.route('/about', methods=['GET'])\n@register_breadcrumb(blueprint, '.about', _('About'))\ndef about():\n    return render_template('zenodo/about.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/faq', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('FAQ'))\ndef faq():\n    return render_template('openaire_faq.html')", "buggy_source_code": "@blueprint.route('/faq', methods=['GET'])\n@register_breadcrumb(blueprint, '.faq', _('FAQ'))\ndef faq():\n    return render_template('zenodo/faq.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/support', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Support/Feedback'))\ndef support():\n    return render_template('openaire_support.html')", "buggy_source_code": "@blueprint.route('/support', methods=['GET'])\n@register_breadcrumb(blueprint, '.support', _('Support/Feedback'))\ndef support():\n    return render_template('zenodo/support.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/contact', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Contact'))\ndef contact():\n    return render_template('openaire_contact.html')", "buggy_source_code": "@blueprint.route('/contact', methods=['GET'])\n@register_breadcrumb(blueprint, '.contact', _('Contact'))\ndef contact():\n    return render_template('zenodo/contact.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/policies', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Policies'))\ndef policies():\n    return render_template('openaire_policies.html')", "buggy_source_code": "@blueprint.route('/policies', methods=['GET'])\n@register_breadcrumb(blueprint, '.policies', _('Policies'))\ndef policies():\n    return render_template('zenodo/policies.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/privacy-policy', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Privacy policy'))\ndef privacy_policy():\n    return render_template('openaire_privacy-policy.html')", "buggy_source_code": "@blueprint.route('/privacy-policy', methods=['GET'])\n@register_breadcrumb(blueprint, '.privacy_policy', _('Privacy policy'))\ndef privacy_policy():\n    return render_template('zenodo/privacy-policy.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/use-data', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Use data'))\ndef use_data():\n    return render_template('openaire_use-data.html')", "buggy_source_code": "@blueprint.route('/use-data', methods=['GET'])\n@register_breadcrumb(blueprint, '.use_data', _('Use data'))\ndef use_data():\n    return render_template('zenodo/use-data.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/deposit-data', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Deposit data'))\ndef deposit_data():\n    return render_template('openaire_deposit-data.html')", "buggy_source_code": "@blueprint.route('/deposit-data', methods=['GET'])\n@register_breadcrumb(blueprint, '.deposit_data', _('Deposit data'))\ndef deposit_data():\n    return render_template('zenodo/deposit-data.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/partners', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Partners'))\ndef partners():\n    return render_template('openaire_partners.html')", "buggy_source_code": "@blueprint.route('/partners', methods=['GET'])\n@register_breadcrumb(blueprint, '.partners', _('Partners'))\ndef partners():\n    return render_template('zenodo/partners.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/terms', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('Terms of use'))\ndef terms():\n    return render_template('openaire_terms.html')", "buggy_source_code": "@blueprint.route('/terms', methods=['GET'])\n@register_breadcrumb(blueprint, '.terms', _('Terms of use'))\ndef terms():\n    return render_template('zenodo/terms.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@blueprint.route('/dev', methods=['GET'])\n@blueprint.invenio_set_breadcrumb(_('API'))\ndef api():\n    return render_template('openaire_api.html')", "buggy_source_code": "@blueprint.route('/dev', methods=['GET'])\n@register_breadcrumb(blueprint, '.api', _('API'))\ndef api():\n    return render_template('zenodo/api.html')", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef html_include(self):\n    return '\\n            <script src=\"https://login.persona.org/include.js\"></script>\\n            <script type=\"text/javascript\">\\n                navigator.id.watch({\\n                    loggedInUser: typeof(mozilla_persona) == \"object\" ? mozilla_persona.currentUserEmail : null,\\n                    onlogin: function(assertion) {\\n                        $.ajax({\\n                            type: \\'POST\\',\\n                            url: mozilla_persona.login_url,\\n                            data: {assertion: assertion},\\n                            success: function(res, status, xhr) { window.location.reload(); },\\n                            error: function(xhr, status, err) {\\n                                navigator.id.logout();\\n                                alert(\"Login failure: \" + err);\\n                            }\\n                        });\\n                    },\\n                    onlogout: function() {\\n                        $.ajax({\\n                            type: \\'POST\\',\\n                            url: mozilla_persona.logout_url,\\n                            success: function(res, status, xhr) { window.location.reload(); },\\n                            error: function(xhr, status, err) { alert(\"Logout failure: \" + err); }\\n                        });\\n                    }\\n                });\\n            </script>\\n        '", "buggy_source_code": "@property\ndef html_include(self):\n    return '\\n            <script src=\"https://login.persona.org/include.js\"></script>\\n            <script type=\"text/javascript\">\\n                (function() {\\n                    if (\\n                        typeof(navigator) != \"object\" ||\\n                        typeof(navigator.id) != \"object\"\\n                    ) {console.warn(\"Mozilla Persona not included. Login disabled\"); return;}\\n                    if (\\n                        typeof(mozilla_persona) != \"object\"\\n                    ) {console.warn(\"Mozilla Persona settings not avalable. Login disabled\"); return;}\\n\\n                    navigator.id.watch({\\n                        loggedInUser: typeof(mozilla_persona) == \"object\" ? mozilla_persona.currentUserEmail : null,\\n                        onlogin: function(assertion) {\\n                            $.ajax({\\n                                type: \\'POST\\',\\n                                url: mozilla_persona.login_url,\\n                                data: {assertion: assertion},\\n                                success: function(res, status, xhr) { window.location.reload(); },\\n                                error: function(xhr, status, err) {\\n                                    navigator.id.logout();\\n                                    alert(\"Login failure: \" + err);\\n                                }\\n                            });\\n                        },\\n                        onlogout: function() {\\n                            $.ajax({\\n                                type: \\'POST\\',\\n                                url: mozilla_persona.logout_url,\\n                                success: function(res, status, xhr) { window.location.reload(); },\\n                                error: function(xhr, status, err) { alert(\"Logout failure: \" + err); }\\n                            });\\n                        }\\n                    });\\n                })();\\n            </script>\\n        '", "edit_actions": ["update-node"]}
{"fixed_source_code": "def create(survey_id, question_id, *args, **kwargs):\n    tail = 'survey/%s/surveyquestion%s/surveyoption' % (survey_id, question_id)\n    params = {'_method': 'PUT'}\n    params.update(kwargs)\n    return (tail, params)", "buggy_source_code": "def create(survey_id, question_id, *args, **kwargs):\n    tail = 'survey/%s/surveyquestion/%s/surveyoption' % (survey_id, question_id)\n    params = {'_method': 'PUT'}\n    params.update(kwargs)\n    return (tail, params)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_initial(self):\n    legislatura = Legislatura.objects.order_by('-numero')[0]\n    sessao_legislativa = SessaoLegislativa.objects.order_by('-data_inicio')[0]\n    return {'legislatura': legislatura, 'sessao_legislativa': sessao_legislativa}", "buggy_source_code": "def get_initial(self):\n    legislatura = Legislatura.objects.order_by('-data_inicio')[0]\n    sessao_legislativa = SessaoLegislativa.objects.order_by('-data_inicio')[0]\n    return {'legislatura': legislatura, 'sessao_legislativa': sessao_legislativa}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    self.record_70_xn = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<articles>\\n<article><front><journal-meta><journal-title>J. High Energy Phys.</journal-title><abbrev-journal-title>J. High Energy Phys.</abbrev-journal-title><issn>1126-6708</issn></journal-meta><article-meta><title-group><article-title>AdS/CFT For Non-Boundary Manifolds</article-title></title-group><contrib-group><contrib contrib-type=\"author\"><name><surname>McInnes</surname><given-names>B</given-names></name></contrib></contrib-group><pub-date pub-type=\"pub\"><year>2000</year></pub-date><volume>05</volume><fpage></fpage><lpage></lpage><self-uri xlink:href=\"http://pcdh23.cern.ch/record/70\" xmlns:xlink=\"http://www.w3.org/1999/xlink/\"/><self-uri xlink:href=\"http://documents.cern.ch/cgi-bin/setlink?base=preprint&amp;categ=hep-th&amp;id=0003291\" xmlns:xlink=\"http://www.w3.org/1999/xlink/\" /></article-meta><abstract>In its Euclidean formulation, the AdS/CFT correspondence begins as a study of Yang-Mills conformal field theories on the sphere, S^4. It has been successfully extended, however, to S^1 X S^3 and to the torus T^4. It is natural tohope that it can be made to work for any manifold on which it is possible to define a stable Yang-Mills conformal field theory. We consider a possible classification of such manifolds, and show how to deal with the most obviousobjection : the existence of manifolds which cannot be represented as boundaries. We confirm Witten\\'s suggestion that this can be done with the help of a brane in the bulk.</abstract></front><article-type>research-article</article-type><ref></ref></article>\\n    \\n\\n</articles>'", "buggy_source_code": "def setUp(self):\n    self.record_70_xn = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<articles>\\n<article><front><journal-meta><journal-title>J. High Energy Phys.</journal-title><abbrev-journal-title>J. High Energy Phys.</abbrev-journal-title><issn>1126-6708</issn></journal-meta><article-meta><title-group><article-title>AdS/CFT For Non-Boundary Manifolds</article-title></title-group><contrib-group><contrib contrib-type=\"author\"><name><surname>McInnes</surname><given-names>B</given-names></name></contrib></contrib-group><pub-date pub-type=\"pub\"><year>2000</year></pub-date><volume>05</volume><fpage></fpage><lpage></lpage><self-uri xlink:href=\"%s/record/70\" xmlns:xlink=\"http://www.w3.org/1999/xlink/\"/><self-uri xlink:href=\"http://documents.cern.ch/cgi-bin/setlink?base=preprint&amp;categ=hep-th&amp;id=0003291\" xmlns:xlink=\"http://www.w3.org/1999/xlink/\" /></article-meta><abstract>In its Euclidean formulation, the AdS/CFT correspondence begins as a study of Yang-Mills conformal field theories on the sphere, S^4. It has been successfully extended, however, to S^1 X S^3 and to the torus T^4. It is natural tohope that it can be made to work for any manifold on which it is possible to define a stable Yang-Mills conformal field theory. We consider a possible classification of such manifolds, and show how to deal with the most obviousobjection : the existence of manifolds which cannot be represented as boundaries. We confirm Witten\\'s suggestion that this can be done with the help of a brane in the bulk.</abstract></front><article-type>research-article</article-type><ref></ref></article>\\n    \\n\\n</articles>' % weburl", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.record_76_hb = '<strong>Ιθάκη</strong> \\n / <a href=\"http://pcdh23.cern.ch/search?f=author&amp;p=%CE%9A%CE%B1%CE%B2%CE%AC%CF%86%CE%B7%CF%82%2C%20%CE%9A%20%CE%A0\">Καβάφης, Κ Π</a>\\n\\n\\n\\n\\n\\n<br/><small>\\nΣα βγεις στον πηγαιμό για την Ιθάκη,<br />\\nνα εύχεσαι νάναι μακρύς ο δρόμος,<br />\\nγεμάτος περιπέτειες, γεμάτος γνώσεις. [...] </small>'", "buggy_source_code": "def setUp(self):\n    self.record_76_hb = '<strong>Ιθάκη</strong> \\n / <a href=\"%s/search?f=author&amp;p=%%CE%%9A%%CE%%B1%%CE%%B2%%CE%%AC%%CF%%86%%CE%%B7%%CF%%82%%2C%%20%%CE%%9A%%20%%CE%%A0\">Καβάφης, Κ Π</a>\\n\\n\\n\\n\\n\\n<br/><small>\\nΣα βγεις στον πηγαιμό για την Ιθάκη,<br />\\nνα εύχεσαι νάναι μακρύς ο δρόμος,<br />\\nγεμάτος περιπέτειες, γεμάτος γνώσεις. [...] </small>' % weburl", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def setUp(self):\n    self.record_74_hd = '<table border=\"0\" width=\"100%\"><tr class=\"blocknote\"><td valign=\"left\">\\n    Published Article\\n    <small> / Particle Physics - Theory</small></td><td align=\"right\"><strong>hep-th/0003295</strong></td></tr></table><br> \\n<center><big><big><strong>Quasinormal modes of Reissner-Nordstrom Anti-de Sitter Black Holes</strong></big></big></center> \\n<p><center>\\n<a href=\"http://pcdh23.cern.ch/search?f=author&amp;p=Wang%2C%20B\">Wang, B</a> ; <a href=\"http://pcdh23.cern.ch/search?f=author&amp;p=Lin%2C%20C%20Y\">Lin, C Y</a> ; <a href=\"http://pcdh23.cern.ch/search?f=author&amp;p=Abdalla%2C%20E\">Abdalla, E</a><br/>\\n\\n\\n\\n\\n\\n\\n</center></p>\\n\\n<p style=\"margin-left: 15%; width: 70%\">\\n\\n<small><strong>Abstract: </strong>Complex frequencies associated with quasinormal modes for large Reissner-Nordstr$\\\\ddot{o}$m Anti-de Sitter black holes have been computed. These frequencies have close relation to the black hole charge and do not linearly scale withthe black hole temperature as in Schwarzschild Anti-de Sitter case. In terms of AdS/CFT correspondence, we found that the bigger the black hole charge is, the quicker for the approach to thermal equilibrium in the CFT. The propertiesof quasinormal modes for $l&gt;0$ have also been studied.</small><br/>\\n\\n\\n\\n\\n\\n<br/><br/><strong>Published in: </strong><a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.%20Lett.%2C%20B&amp;volume=481&amp;year=2000&amp;page=79\">Phys. Lett., B :481 2000 79-88</a>\\n<br/>\\n<br/><strong>Fulltext : </strong><small><a  href=\"http://documents.cern.ch/cgi-bin/setlink?base=preprint&amp;categ=hep-th&amp;id=0003295\">http://documents.cern.ch/cgi-bin/setlink?base=preprint&amp;categ=hep-th&amp;id=0003295</a></small>\\n<br/><br/><strong>Cited by:</strong> try citation search for <a href=\"http://pcdh23.cern.ch/search?f=reference&p=hep-th/0003295\">hep-th/0003295</a>\\n</p> \\n<blockquote><strong>References:</strong><ul><li><small>[1]</small> <small>K. D. Kokkotas, B. G. Schmidt</small> <small> [<a href=\"http://pcdh23.cern.ch/search?f=reportnumber&amp;p=gr-qc/9909058\">gr-qc/9909058</a>] </small> <br/><small>and references therein</small> <li><small>[2]</small> <small>W. Krivan</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=60&amp;year=1999&amp;page=101501\">Phys. Rev., D: 60 (1999) 101501</a> </small> <br/><li><small>[3]</small> <small>S. Hod</small> <small> [<a href=\"http://pcdh23.cern.ch/search?f=reportnumber&amp;p=gr-qc/9902072\">gr-qc/9902072</a>] </small> <br/><li><small>[4]</small> <small>P. R. Brady, C. M. Chambers, W. G. Laarakkers and E. Poisson</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=60&amp;year=1999&amp;page=064003\">Phys. Rev., D: 60 (1999) 064003</a> </small> <br/><li><small>[5]</small> <small>P. R. Brady, C. M. Chambers, W. Krivan and P. Laguna</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=55&amp;year=1997&amp;page=7538\">Phys. Rev., D: 55 (1997) 7538</a> </small> <br/><li><small>[6]</small> <small>G. T. Horowitz and V. E. Hubeny</small> <small> [<a href=\"http://pcdh23.cern.ch/search?f=reportnumber&amp;p=hep-th/9909056\">hep-th/9909056</a>] </small> <br/><small>G. T. Horowitz</small> <small> [<a href=\"http://pcdh23.cern.ch/search?f=reportnumber&amp;p=hep-th/9910082\">hep-th/9910082</a>] </small> <br/><li><small>[7]</small> <small>E. S. C. Ching, P. T. Leung, W. M. Suen and K. Young</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=52&amp;year=1995&amp;page=2118\">Phys. Rev., D: 52 (1995) 2118</a> </small> <br/><li><small>[8]</small> <small>J. M. Maldacena</small>  <small> Adv. Theor. Math. Phys.21998231 </small> <br/><li><small>[9]</small> <small>E. Witten</small>  <small> Adv. Theor. Math. Phys.21998253 </small> <br/><li><small>[10]</small> <small>S. S. Gubser, I. R. Klebanov and A. M. Polyakov</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Lett.,+B&amp;volume=428&amp;year=1998&amp;page=105\">Phys. Lett., B: 428 (1998) 105</a> </small> <br/><li><small>[11]</small> <small>A. Chamblin, R. Emparan, C. V. Johnson and R. C. Myers</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=60&amp;year=1999&amp;page=064018\">Phys. Rev., D: 60 (1999) 064018</a> </small> <br/><li><small>[12]</small> <small>E. W. Leaver</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=J.+Math.+Phys.&amp;volume=27&amp;year=1986&amp;page=1238\">J. Math. Phys.: 27 (1986) 1238</a> </small> <br/><li><small>[13]</small> <small>E. W. Leaver</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=41&amp;year=1990&amp;page=2986\">Phys. Rev., D: 41 (1990) 2986</a> </small> <br/><li><small>[14]</small> <small>C. O. Lousto</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=51&amp;year=1995&amp;page=1733\">Phys. Rev., D: 51 (1995) 1733</a> </small> <br/><li><small>[15]</small> <small>O. Kaburaki</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Lett.,+A&amp;volume=217&amp;year=1996&amp;page=316\">Phys. Lett., A: 217 (1996) 316</a> </small> <br/><li><small>[16]</small> <small>R. K. Su, R. G. Cai and P. K. N. Yu</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=50&amp;year=1994&amp;page=2932\">Phys. Rev., D: 50 (1994) 2932</a> </small> <br/> <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=48&amp;year=1993&amp;page=3473\">Phys. Rev., D: 48 (1993) 3473</a> </small> <br/> <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=52&amp;year=1995&amp;page=6186\">Phys. Rev., D: 52 (1995) 6186</a> </small> <br/><small>B. Wang, J. M. Zhu</small>  <small> Mod. Phys. Lett., A1019951269 </small> <br/><li><small>[17]</small> <small>A. Chamblin, R. Emparan, C. V. Johnson and R. C. Myers, Phys. Rev., D60: 104026 (1999) 5070 90 110 130 150 r+ 130 230 330 50 70 90 110 130 150 r+</small> </ul><p><small><i><b>Warning</b>: references are automatically extracted and standardized from the PDF document and may therefore contain errors. If you think they are incorrect or incomplete, look at the fulltext document itself.<br></i></small></blockquote>\\n</p>'\n    self.record_7_hd = '<table border=\"0\" width=\"100%\"><tr class=\"blocknote\"><td valign=\"left\">\\n    Pictures\\n    <small> / Life at CERN</small></td><td align=\"right\"><strong>CERN-GE-9806033</strong></td></tr></table><br>\\n<center><big><big><strong>Tim Berners-Lee</strong></big></big></center> \\n\\n\\n<center>28 Jun 1998</center>\\n\\n<center>\\n\\n\\n\\n</center>\\n<br/>\\n\\n\\n\\n<table> <tr>\\n<td valign=\"top\" align=\"left\"> \\n\\n\\n\\n<p><table><tr><td class=\"blocknote\"> \\n Caption</td></tr></table> <small>Conference \"Internet, Web, What\\'s next?\" on 26 June 1998 at CERN : Tim Berners-Lee, inventor of the World-Wide Web and Director of the W3C, explains how the Web came to be and give his views on the future.</small></p><p><table><tr><td class=\"blocknote\">  \\n Légende</td></tr></table><small>Conference \"Internet, Web, What\\'s next?\" le 26 juin 1998 au CERN: Tim Berners-Lee, inventeur du World-Wide Web et directeur du W3C, explique comment le Web est ne, et donne ses opinions sur l\\'avenir.</small></p>\\n\\n<p><table><tr><td class=\"blocknote\">See also:</td></tr></table><small><a href=\"http://www.cern.ch/CERN/Announcements/1998/WebNext.html\">\"Internet, Web, What\\'s next?\" 26 June 1998</a><br/><a href=\"http://Bulletin.cern.ch/9828/art2/Text_E.html\">CERN Bulletin no 28/98 (6 July 1998) (English)</a><br/><a href=\"http://Bulletin.cern.ch/9828/art2/Text_F.html\">CERN Bulletin no 28/98 (6 juillet 1998) (French)</a><br/><a href=\"http://www.w3.org/People/Berners-Lee/\">Biography</a></small></p>\\n\\n</td>\\n\\n<td valign=\"top\">\\n<table><tr><td class=\"blocknote\">Resources</td></tr></table><br/>High resolution: <a href=\"http://preprints.cern.ch/cgi-bin/setlink?base=PHO&categ=photo-ge&id=9806033\">http://preprints.cern.ch/cgi-bin/setlink?base=PHO&categ=photo-ge&id=9806033</a><br/><br/><img src=\"http://preprints.cern.ch/photo/photo-ge/9806033.gif\" alt=\"\"/><br/><font size=-2><b>© CERN Geneva</b></font><br/> <a href=\"\"></a>\\n</td> \\n\\n</tr>\\n\\n<tr><td colspan=\"2\" class=\"blocknote\">\\n <strong>© CERN Geneva: </strong>\\n<small>The use of photos requires prior authorization (from <a href=\"http://wpedb.cern.ch/databases/Copyright/\">CERN copyright</a>). \\nThe words CERN Photo must be quoted for each use. </small>\\n</td>\\n</tr>\\n\\n</table>'", "buggy_source_code": "def setUp(self):\n    self.record_74_hd = '<table border=\"0\" width=\"100%%\"><tr class=\"blocknote\"><td valign=\"left\">\\n    Published Article\\n    <small> / Particle Physics - Theory</small></td><td align=\"right\"><strong>hep-th/0003295</strong></td></tr></table><br> \\n<center><big><big><strong>Quasinormal modes of Reissner-Nordstrom Anti-de Sitter Black Holes</strong></big></big></center> \\n<p><center>\\n<a href=\"%(weburl)s/search?f=author&amp;p=Wang%%2C%%20B\">Wang, B</a> ; <a href=\"%(weburl)s/search?f=author&amp;p=Lin%%2C%%20C%%20Y\">Lin, C Y</a> ; <a href=\"%(weburl)s/search?f=author&amp;p=Abdalla%%2C%%20E\">Abdalla, E</a><br/>\\n\\n\\n\\n\\n\\n\\n</center></p>\\n\\n<p style=\"margin-left: 15%%; width: 70%%\">\\n\\n<small><strong>Abstract: </strong>Complex frequencies associated with quasinormal modes for large Reissner-Nordstr$\\\\ddot{o}$m Anti-de Sitter black holes have been computed. These frequencies have close relation to the black hole charge and do not linearly scale withthe black hole temperature as in Schwarzschild Anti-de Sitter case. In terms of AdS/CFT correspondence, we found that the bigger the black hole charge is, the quicker for the approach to thermal equilibrium in the CFT. The propertiesof quasinormal modes for $l&gt;0$ have also been studied.</small><br/>\\n\\n\\n\\n\\n\\n<br/><br/><strong>Published in: </strong><a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.%%20Lett.%%2C%%20B&amp;volume=481&amp;year=2000&amp;page=79\">Phys. Lett., B :481 2000 79-88</a>\\n<br/>\\n<br/><strong>Fulltext : </strong><small><a  href=\"http://documents.cern.ch/cgi-bin/setlink?base=preprint&amp;categ=hep-th&amp;id=0003295\">http://documents.cern.ch/cgi-bin/setlink?base=preprint&amp;categ=hep-th&amp;id=0003295</a></small>\\n<br/><br/><strong>Cited by:</strong> try citation search for <a href=\"%(weburl)s/search?f=reference&p=hep-th/0003295\">hep-th/0003295</a>\\n</p> \\n<blockquote><strong>References:</strong><ul><li><small>[1]</small> <small>K. D. Kokkotas, B. G. Schmidt</small> <small> [<a href=\"%(weburl)s/search?f=reportnumber&amp;p=gr-qc/9909058\">gr-qc/9909058</a>] </small> <br/><small>and references therein</small> <li><small>[2]</small> <small>W. Krivan</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=60&amp;year=1999&amp;page=101501\">Phys. Rev., D: 60 (1999) 101501</a> </small> <br/><li><small>[3]</small> <small>S. Hod</small> <small> [<a href=\"%(weburl)s/search?f=reportnumber&amp;p=gr-qc/9902072\">gr-qc/9902072</a>] </small> <br/><li><small>[4]</small> <small>P. R. Brady, C. M. Chambers, W. G. Laarakkers and E. Poisson</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=60&amp;year=1999&amp;page=064003\">Phys. Rev., D: 60 (1999) 064003</a> </small> <br/><li><small>[5]</small> <small>P. R. Brady, C. M. Chambers, W. Krivan and P. Laguna</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=55&amp;year=1997&amp;page=7538\">Phys. Rev., D: 55 (1997) 7538</a> </small> <br/><li><small>[6]</small> <small>G. T. Horowitz and V. E. Hubeny</small> <small> [<a href=\"%(weburl)s/search?f=reportnumber&amp;p=hep-th/9909056\">hep-th/9909056</a>] </small> <br/><small>G. T. Horowitz</small> <small> [<a href=\"%(weburl)s/search?f=reportnumber&amp;p=hep-th/9910082\">hep-th/9910082</a>] </small> <br/><li><small>[7]</small> <small>E. S. C. Ching, P. T. Leung, W. M. Suen and K. Young</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=52&amp;year=1995&amp;page=2118\">Phys. Rev., D: 52 (1995) 2118</a> </small> <br/><li><small>[8]</small> <small>J. M. Maldacena</small>  <small> Adv. Theor. Math. Phys.21998231 </small> <br/><li><small>[9]</small> <small>E. Witten</small>  <small> Adv. Theor. Math. Phys.21998253 </small> <br/><li><small>[10]</small> <small>S. S. Gubser, I. R. Klebanov and A. M. Polyakov</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Lett.,+B&amp;volume=428&amp;year=1998&amp;page=105\">Phys. Lett., B: 428 (1998) 105</a> </small> <br/><li><small>[11]</small> <small>A. Chamblin, R. Emparan, C. V. Johnson and R. C. Myers</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=60&amp;year=1999&amp;page=064018\">Phys. Rev., D: 60 (1999) 064018</a> </small> <br/><li><small>[12]</small> <small>E. W. Leaver</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=J.+Math.+Phys.&amp;volume=27&amp;year=1986&amp;page=1238\">J. Math. Phys.: 27 (1986) 1238</a> </small> <br/><li><small>[13]</small> <small>E. W. Leaver</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=41&amp;year=1990&amp;page=2986\">Phys. Rev., D: 41 (1990) 2986</a> </small> <br/><li><small>[14]</small> <small>C. O. Lousto</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=51&amp;year=1995&amp;page=1733\">Phys. Rev., D: 51 (1995) 1733</a> </small> <br/><li><small>[15]</small> <small>O. Kaburaki</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Lett.,+A&amp;volume=217&amp;year=1996&amp;page=316\">Phys. Lett., A: 217 (1996) 316</a> </small> <br/><li><small>[16]</small> <small>R. K. Su, R. G. Cai and P. K. N. Yu</small>  <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=50&amp;year=1994&amp;page=2932\">Phys. Rev., D: 50 (1994) 2932</a> </small> <br/> <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=48&amp;year=1993&amp;page=3473\">Phys. Rev., D: 48 (1993) 3473</a> </small> <br/> <small> <a href=\"http://weblib.cern.ch/cgi-bin/ejournals?publication=Phys.+Rev.,+D&amp;volume=52&amp;year=1995&amp;page=6186\">Phys. Rev., D: 52 (1995) 6186</a> </small> <br/><small>B. Wang, J. M. Zhu</small>  <small> Mod. Phys. Lett., A1019951269 </small> <br/><li><small>[17]</small> <small>A. Chamblin, R. Emparan, C. V. Johnson and R. C. Myers, Phys. Rev., D60: 104026 (1999) 5070 90 110 130 150 r+ 130 230 330 50 70 90 110 130 150 r+</small> </ul><p><small><i><b>Warning</b>: references are automatically extracted and standardized from the PDF document and may therefore contain errors. If you think they are incorrect or incomplete, look at the fulltext document itself.<br></i></small></blockquote>\\n</p>' % {'weburl': weburl}\n    self.record_7_hd = '<table border=\"0\" width=\"100%\"><tr class=\"blocknote\"><td valign=\"left\">\\n    Pictures\\n    <small> / Life at CERN</small></td><td align=\"right\"><strong>CERN-GE-9806033</strong></td></tr></table><br>\\n<center><big><big><strong>Tim Berners-Lee</strong></big></big></center> \\n\\n\\n<center>28 Jun 1998</center>\\n\\n<center>\\n\\n\\n\\n</center>\\n<br/>\\n\\n\\n\\n<table> <tr>\\n<td valign=\"top\" align=\"left\"> \\n\\n\\n\\n<p><table><tr><td class=\"blocknote\"> \\n Caption</td></tr></table> <small>Conference \"Internet, Web, What\\'s next?\" on 26 June 1998 at CERN : Tim Berners-Lee, inventor of the World-Wide Web and Director of the W3C, explains how the Web came to be and give his views on the future.</small></p><p><table><tr><td class=\"blocknote\">  \\n Légende</td></tr></table><small>Conference \"Internet, Web, What\\'s next?\" le 26 juin 1998 au CERN: Tim Berners-Lee, inventeur du World-Wide Web et directeur du W3C, explique comment le Web est ne, et donne ses opinions sur l\\'avenir.</small></p>\\n\\n<p><table><tr><td class=\"blocknote\">See also:</td></tr></table><small><a href=\"http://www.cern.ch/CERN/Announcements/1998/WebNext.html\">\"Internet, Web, What\\'s next?\" 26 June 1998</a><br/><a href=\"http://Bulletin.cern.ch/9828/art2/Text_E.html\">CERN Bulletin no 28/98 (6 July 1998) (English)</a><br/><a href=\"http://Bulletin.cern.ch/9828/art2/Text_F.html\">CERN Bulletin no 28/98 (6 juillet 1998) (French)</a><br/><a href=\"http://www.w3.org/People/Berners-Lee/\">Biography</a></small></p>\\n\\n</td>\\n\\n<td valign=\"top\">\\n<table><tr><td class=\"blocknote\">Resources</td></tr></table><br/>High resolution: <a href=\"http://preprints.cern.ch/cgi-bin/setlink?base=PHO&categ=photo-ge&id=9806033\">http://preprints.cern.ch/cgi-bin/setlink?base=PHO&categ=photo-ge&id=9806033</a><br/><br/><img src=\"http://preprints.cern.ch/photo/photo-ge/9806033.gif\" alt=\"\"/><br/><font size=-2><b>© CERN Geneva</b></font><br/> <a href=\"\"></a>\\n</td> \\n\\n</tr>\\n\\n<tr><td colspan=\"2\" class=\"blocknote\">\\n <strong>© CERN Geneva: </strong>\\n<small>The use of photos requires prior authorization (from <a href=\"http://wpedb.cern.ch/databases/Copyright/\">CERN copyright</a>). \\nThe words CERN Photo must be quoted for each use. </small>\\n</td>\\n</tr>\\n\\n</table>'", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def sync_state_to_earth(self, state):\n    subprocess.call(['/usr/bin/bash_scripts/toggle_layer.bash', 'on' if state else 'off'])", "buggy_source_code": "def sync_state_to_earth(self, state):\n    subprocess.call(['/home/lg/bash_scripts/toggle_layer.bash', 'on' if state else 'off'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "@unittest.skipUnless(running_extended_tests, 'part of extended tests')\ndef test_quic_internal_transfer(self):\n    self.server()\n    self.client('no-output', 'mbytes', '10')", "buggy_source_code": "@unittest.skipUnless(running_extended_tests, 'part of extended tests')\ndef test_quic_internal_transfer(self):\n    self.server()\n    self.client('no-output', 'mbytes', '2')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test01(self):\n    lasso.Login.new(None).msg_url", "buggy_source_code": "def test01(self):\n    lasso.Login(None).msg_url", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, **kwargs):\n    self._puls_time = 0.0\n    self._colors = None\n    self._pulse_sid = 0\n    self._pos = 0\n    CanvasIcon.__init__(self, **kwargs)", "buggy_source_code": "def __init__(self, **kwargs):\n    self._pulse_time = 0.0\n    self._colors = None\n    self._pulse_sid = 0\n    self._pos = 0\n    CanvasIcon.__init__(self, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def str_decode_utf8(str):\n    return str.decode('utf-8') if PY2 else str", "buggy_source_code": "def str_decode_utf8(chars):\n    return chars.decode('utf-8') if PY2 else chars", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "@register.filter(name='key')\ndef key(d, key_name):\n    if key_name in d:\n        return d[key_name]\n    return ''", "buggy_source_code": "@register.filter(name='key')\ndef key(d, key_name):\n    if d is not None:\n        if key_name in d:\n            return d[key_name]\n    return ''", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_default_config(self):\n    config = super(IPVSCollector, self).get_default_config()\n    config.update({'bin': '/usr/sbin/ipvsadm', 'use_sudo': True, 'sudo_cmd': '/usr/bin/sudo', 'path': 'ipvs'})\n    return config", "buggy_source_code": "def get_default_config(self):\n    config = super(IPVSCollector, self).get_default_config()\n    config.update({'bin': '/sbin/ipvsadm', 'use_sudo': False, 'sudo_cmd': '/usr/bin/sudo', 'path': 'ipvs'})\n    return config", "edit_actions": ["update-node"]}
{"fixed_source_code": "def ssl_error_msg(action):\n    sublime.error_message(\"Your version of Sublime Text can't \" + action + ' because it has a broken SSL module. This is a known issue on Linux builds of Sublime Text. Please comment on http://sublimetext.userecho.com/topic/50801-bundle-python-ssl-module/ or submit an issue: https://github.com/SublimeText/Issues/issues')", "buggy_source_code": "def ssl_error_msg(action):\n    sublime.error_message(\"Your version of Sublime Text can't \" + action + ' because it has a broken SSL module. This is a known issue on Linux builds of Sublime Text. See this issue: https://github.com/SublimeText/Issues/issues/177')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init_node_type(self):\n    if self.m_node & NODE_PIFACECAD:\n        self.init_ir_control()", "buggy_source_code": "def init_node_type(self, p_pyhouses_obj):\n    if self.m_node & NODE_PIFACECAD:\n        self._init_ir_control(p_pyhouses_obj)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _on_error(self, listener, err):\n    self._close()\n    GLib.idle_add(lambda : ErrorDialog().run(err))", "buggy_source_code": "def _on_error(self, listener, err):\n    self._close()\n\n    def _cb():\n        ErrorDialog().run(err)\n        return False\n    GLib.idle_add(_cb)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_selectvec(self, code):\n    bcode = format(code, '011b')\n    return list(map(int, list(bcode)))", "buggy_source_code": "def to_selectvec(self, code):\n    bcode = format(code, '0%db' % self.Xdim)\n    return list(map(int, list(bcode)))", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_rot2_orthogonal(self):\n    mat = attitude.rot2(self.angle)\n    np.testing.assert_allclose(mat.T.dot(mat), np.eye(3, 3))", "buggy_source_code": "def test_rot2_orthogonal(self):\n    mat = attitude.rot2(self.angle)\n    np.testing.assert_array_almost_equal(mat.T.dot(mat), np.eye(3, 3))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_rot1_orthogonal(self):\n    mat = attitude.rot1(self.angle)\n    np.testing.assert_allclose(mat.T.dot(mat), np.eye(3, 3))", "buggy_source_code": "def test_rot1_orthogonal(self):\n    mat = attitude.rot1(self.angle)\n    np.testing.assert_array_almost_equal(mat.T.dot(mat), np.eye(3, 3))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_rot3_orthogonal(self):\n    mat = attitude.rot3(self.angle)\n    np.testing.assert_allclose(mat.T.dot(mat), np.eye(3, 3))", "buggy_source_code": "def test_rot3_orthogonal(self):\n    mat = attitude.rot3(self.angle)\n    np.testing.assert_array_almost_equal(mat.T.dot(mat), np.eye(3, 3))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_representation(self):\n    cfg = config.YAMLConfig(os.path.join(tests_dir, 'configtst/qlivestats.yaml'))\n    self.assertEqual('YAMLConfig (sections: 2)', cfg.__repr__())", "buggy_source_code": "def test_representation(self):\n    cfg = config.YAMLConfig(os.path.join(tests_dir, 'configtst/qlivestats.yaml'))\n    self.assertEqual('YAMLConfig (sections: 1)', cfg.__repr__())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _disconnect_controller(message, cause):\n    global _controller\n    error = Error(message, cause)\n    for connection in _active_connections.viewvalues():\n        connection.answer(error)\n    _controller = None", "buggy_source_code": "def _disconnect_controller(message, cause):\n    global _controller\n    error = Error(message, cause)\n    for connection in _active_connections.viewvalues():\n        connection.answer(error)\n    _controller = None\n    return True", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def zadd(self, timestamp, value):\n    return self._conn.zadd(self.ack_queue, timestamp, value)", "buggy_source_code": "def zadd(self, timestamp, value):\n    return self._conn.zadd(self.ack_queue, value, timestamp)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def base64decode(line):\n    try:\n        decoded = base64.b64decode(line).decode('UTF-8')\n        return decoded\n    except:\n        return '[corrupt]'", "buggy_source_code": "def base64decode(line):\n    decoded = base64.b64decode(line)\n    replace = 'backslashreplace' if sys.version_info[0] >= 3 else 'replace'\n    return decoded.decode('UTF-8', errors=replace)", "edit_actions": ["move-tree", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@register.simple_tag\ndef yamaps_init():\n    lang = 'ru-RU'\n    if settings.LANGUAGE_CODE:\n        lang = settings.LANGUAGE_CODE\n    yamaps_js = '<script type=\"text/javascript\" src=\"https://api-maps.yandex.ru/2.1/?lang={}\"></script>'.format(lang)\n    return mark_safe(yamaps_js + '\\n    <script type=\"text/javascript\">\\n    ymaps.ready(function () {\\n        var maps = document.querySelectorAll(\".django-yamaps\");\\n        [].forEach.call(maps, function (elem) {\\n            var map = new ymaps.Map(elem, {\\n                center: [53.758768, 87.136731],\\n                controls: [\"zoomControl\", \"fullscreenControl\", \"searchControl\"]\\n            });\\n            var addr = elem.getAttribute(\"data-raw-address\");\\n            var searchControl = map.controls.get(\"searchControl\");\\n            searchControl.search(addr);            \\n        });\\n    });\\n    </script>')", "buggy_source_code": "@register.simple_tag\ndef yamaps_init():\n    lang = 'ru-RU'\n    if settings.LANGUAGE_CODE:\n        lang = settings.LANGUAGE_CODE\n    yamaps_js = '<script type=\"text/javascript\" src=\"https://api-maps.yandex.ru/2.1/?lang={}\"></script>'.format(lang)\n    return mark_safe(yamaps_js + '\\n    <script type=\"text/javascript\">\\n    window.onload = function() {\\n        ymaps.ready(function () {\\n            var maps = document.querySelectorAll(\".django-yamaps\");\\n            maps.forEach(function (elem) {\\n                var map = new ymaps.Map(elem, {\\n                    center: [53.758768, 87.136731],\\n                    zoom: 15\\n                });\\n                var addr = elem.getAttribute(\"data-raw-address\");\\n                ymaps.geocode(addr, { results: 1 }).then(function (res) {\\n                    var firstGeoObject = res.geoObjects.get(0),\\n                        coords = firstGeoObject.geometry.getCoordinates();\\n                    map.geoObjects.add(firstGeoObject);\\n                    map.setCenter(coords);\\n                });\\n            });\\n    })};\\n    </script>')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_config():\n    config = None\n    try:\n        config = ConfigParser.ConfigParser()\n        config.read(CONFIG_FILE)\n    except:\n        log.warn('Unable to read configuration file %s. Proceeding with defaults.')\n    return config", "buggy_source_code": "def get_config():\n    config = None\n    try:\n        config = ConfigParser.ConfigParser()\n        config.read(CONFIG_FILE)\n    except:\n        log.warning('Unable to read configuration file %s. Proceeding with defaults.')\n    return config", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testNextYear(self):\n    self.assertEqual(self.chart.nextYear, self.chart.year + 1)", "buggy_source_code": "def testNextYear(self):\n    next_year = str(int(self.chart.year) + 1)\n    self.assertEqual(self.chart.nextYear, next_year)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, context, sock):\n    self._context = context\n    self._sock = sock\n    self._connection = OpenSSL.SSL.Connection(context, sock)\n    self._makefile_refs = 0", "buggy_source_code": "def __init__(self, context, sock):\n    self._context = context\n    self._sock = sock\n    self._connection = __real_connection(context, sock)\n    self._makefile_refs = 0", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef sf(self):\n    raise RuntimeError('Cannot ask for scale factor of non-stationary kernel')", "buggy_source_code": "@property\ndef sf(self):\n    raise RuntimeError('Cannot ask for scale factor of change window kernel')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def nextId(self):\n    return Wizard.PageCoprBuild", "buggy_source_code": "def nextId(self):\n    return Wizard.PageCoprDistro", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_model(self):\n    state = ray.get(self.remote_workers[0].get_state.remote())\n    return self._get_model_from_state(state)", "buggy_source_code": "def get_model(self):\n    state_refs = [w.get_state.remote() for w in self.remote_workers]\n    state = ray.get(state_refs[0])\n    return self._get_model_from_state(state)", "edit_actions": ["insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree"]}
{"fixed_source_code": "def __init__(self, width, heigth, fill=' '):\n    self.content = utils.create_matrix(width, heigth, fill)", "buggy_source_code": "def __init__(self, width, height, fill=' '):\n    self.content = widgets.create_matrix(x=width, y=height, fill=fill)", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def insert_point(self, point, x_coord, y_coord):\n    self.content[y_coord][x_coord] = point", "buggy_source_code": "def insert_point(self, point_character, x_coord, y_coord):\n    self.content[y_coord][x_coord] = point_character", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def querydict_to_kwargs(querydict):\n    return dict(((k.encode('utf-8'), ','.join(v)) for (k, v) in querydict.iteritems()))", "buggy_source_code": "def querydict_to_kwargs(querydict):\n    return dict(((k.encode('utf-8'), ','.join(querydict.getlist(k))) for k in querydict.keys()))", "edit_actions": ["move-tree", "insert-node", "update-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@register.filter()\ndef groups_sort(groups):\n    groups.sort(key=lambda group: len(group['list']))\n    return groups", "buggy_source_code": "@register.filter()\ndef groups_sort(groups):\n    return sorted(groups, key=lambda group: len(group['list']))", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _set_socket_options(sock, options):\n    if options is None:\n        return\n    for opt in options:\n        sock.setsocketopt(*opt)", "buggy_source_code": "def _set_socket_options(sock, options):\n    if options is None:\n        return\n    for opt in options:\n        sock.setsockopt(*opt)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def concepts_string(self, string):\n    concepts = self.string.concept_id(string)\n    if not concepts:\n        return []\n    return list(self.concept.bunch(concepts))", "buggy_source_code": "def concepts_string(self, string):\n    concepts = self.string.cui(string)\n    if not concepts:\n        return []\n    return list(self.concept.bunch(concepts))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def definitions_terms(self, string, relations=()):\n    cids = self.string.concept_id(string)\n    if not cids:\n        return []\n    return self.definitions_terms_cid(cids, relations)", "buggy_source_code": "def definitions_terms(self, string, relations=()):\n    cuis = self.string.cui(string)\n    if not cuis:\n        return []\n    return self.definitions_terms_cui(cuis, relations)", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def split_keep_whitespace(string) -> List[str]:\n    return re.split('(\\u3000|\\n| |\\t)', string)", "buggy_source_code": "def split_keep_whitespace(string) -> List[str]:\n    return re.split('([\\u3000\\n \\t])', string)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def print_atl_rawchild(self, ast):\n    for child in ast.children:\n        self.indent()\n        self.write('contains:')\n        self.print_atl(ast)", "buggy_source_code": "def print_atl_rawchild(self, ast):\n    for child in ast.children:\n        self.indent()\n        self.write('contains:')\n        self.print_atl(child)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def base_key(self):\n    return Source.base_key(self) + (self.volume_change,)", "buggy_source_code": "def base_key(self):\n    return SourceWithDerivedMagnitude.base_key(self) + (self.volume_change,)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _check_options(self, matcher, options, lineno, test_list_path):\n    match_result = self._check_syntax(matcher, options, lineno, test_list_path)\n    self._check_semantics(options, lineno, test_list_path)\n    return match_result.num_matches", "buggy_source_code": "def _check_options(self, matcher, lineno, expectation):\n    match_result = self._check_syntax(matcher, lineno, expectation)\n    self._check_semantics(lineno, expectation)\n    return match_result.num_matches", "edit_actions": ["update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _check_options_against_expectations(self, options, expectations, lineno, test_list_path):\n    if 'slow' in options and TIMEOUT in expectations:\n        self._add_error(lineno, 'A test can not be both SLOW and TIMEOUT. If it times out indefinitely, then it should be just TIMEOUT.', test_list_path)", "buggy_source_code": "def _check_options_against_expectations(self, lineno, expectation):\n    if 'slow' in expectation.modifiers and 'timeout' in expectation.expectations:\n        self._add_error(lineno, 'A test can not be both SLOW and TIMEOUT. If it times out indefinitely, then it should be just TIMEOUT.', expectation.name)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rmse(self):\n    error_v = self.X.dot(self.w) + self.w0_array() - self.y\n    return self.extract_scalar(error_v.T.dot(error_v))", "buggy_source_code": "def rmse(self):\n    mse = self.sse() / self.N\n    return mse ** 0.5", "edit_actions": ["insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def objective(self):\n    return self.rmse() + self.lam * self.l1_norm(self.w)", "buggy_source_code": "def objective(self):\n    return self.sse() + self.lam * self.l1_norm(self.w)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def random_sexual_type(self, key):\n    return utilities.weighted_random(self._get_weights('sexual_type_frequency')[key])", "buggy_source_code": "def random_sexual_type(self, key):\n    return self._weighted_random(self._get_weights('sexual_type_frequency')[key])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def random_sexual_orientation(self, key):\n    return utilities.weighted_random(self._get_weights('sexual_orientation_frequency')[key])", "buggy_source_code": "def random_sexual_orientation(self, key):\n    return self._random_orientation(self._get_weights('sexual_orientation_frequency')[key], key)", "edit_actions": ["update-node", "update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def reset(self):\n    try:\n        self._storage.reset()\n        self.logger.info('Storage has be reset and all limits cleared')\n    except NotImplementedError:\n        self.logger.warning('This storage type does not support being reset')", "buggy_source_code": "def reset(self):\n    try:\n        self._storage.reset()\n        self.logger.info('Storage has been reset and all limits cleared')\n    except NotImplementedError:\n        self.logger.warning('This storage type does not support being reset')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_stress_von_mises(self):\n    expected_mises = 283.2082\n    from feminout.importToolsFem import calculate_von_mises as vm\n    mises = vm(self.get_stress_values())\n    self.assertEqual(round(mises, 4), expected_mises, 'Calculated von Mises stress is not the expected value.')", "buggy_source_code": "def test_stress_von_mises(self):\n    expected_mises = 283.2082\n    from femresult.resulttools import calculate_von_mises as vm\n    mises = vm(self.get_stress_values())\n    self.assertEqual(round(mises, 4), expected_mises, 'Calculated von Mises stress is not the expected value.')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_stress_values(self):\n    stress = (-452.84, -194.075, -194.075, 61.1223, 6.92759e-05, -26.0754)\n    return stress", "buggy_source_code": "def get_stress_values(self):\n    stress = (-452.84, -194.075, -194.075, 61.1223, -26.0754, 6.92759e-05)\n    return stress", "edit_actions": ["insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _inner_content(self, tag):\n    if tag is not None:\n        return u''.join((ET.tostring(e) for e in tag))\n    return None", "buggy_source_code": "def _inner_content(self, tag):\n    if tag is not None:\n        return u''.join((html.tostring(e) for e in tag))\n    return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def handle(self, *args, **options):\n    if getattr(settings, 'BAKERY_GZIP', True):\n        sync_gzipped_files()\n    self.sync_all_files()", "buggy_source_code": "def handle(self, *args, **options):\n    if getattr(settings, 'BAKERY_GZIP', True):\n        self.sync_gzipped_files()\n    self.sync_all_files()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def addReader(self, reader: 'MeshReader') -> None:\n    self._readers[reader.getPluginId()] = reader", "buggy_source_code": "def addReader(self, reader: 'FileReader') -> None:\n    self._readers[reader.getPluginId()] = reader", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getWriter(self, writer_id: str) -> Optional['MeshWriter']:\n    if writer_id not in self._writers:\n        return None\n    return self._writers[writer_id]", "buggy_source_code": "def getWriter(self, writer_id: str) -> Optional['FileWriter']:\n    if writer_id not in self._writers:\n        return None\n    return self._writers[writer_id]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def addWriter(self, writer: 'MeshWriter') -> None:\n    self._writers[writer.getPluginId()] = writer", "buggy_source_code": "def addWriter(self, writer: 'FileWriter') -> None:\n    self._writers[writer.getPluginId()] = writer", "edit_actions": ["update-node"]}
{"fixed_source_code": "def children(self):\n    return _iterator(self.val['elements'], self.val['len'])", "buggy_source_code": "def children(self):\n    return _iterator_except(self.val['elements'], self.val['len'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    self.experiment = Experiment.objects.create(slug='mit-county', name='MIT County Performance experiment')", "buggy_source_code": "def setUp(self):\n    self.experiment = Experiment.objects.create(slug='mit-county-larger', name='MIT County Performance experiment')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef by_id(self, id):\n    order = DBSession.query(Product).filter(Order.id == id)\n    return order.first()", "buggy_source_code": "@classmethod\ndef by_id(self, id):\n    order = DBSession.query(Product).filter(Product.id == id)\n    return order.first()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _build_archives_url(self, filename):\n    directory = self.args['foldername'][0].replace('Archives/', '')\n    return 'http://archives.bassdrivearchive.com/{}/{}'.format(directory, filename)", "buggy_source_code": "def _build_archives_url(self, filename):\n    directory = self.args['foldername'][0].replace('Archives/', '')\n    return 'http://archives.bassdrivearchive.com/%s/%s' % (directory, filename)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setUp(self):\n    self.client = APIClient()", "buggy_source_code": "def setUp(self):\n    self.client = Client()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def make_test(self):\n    self.generator.set_voice('en')\n    self.generator.make('just testing')\n    time.sleep(1)", "buggy_source_code": "def make_test(self):\n    self.generator.set_voice('en')\n    self.generator.make('just testing')\n    self.generator._task_queue.join()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "delete-node"]}
{"fixed_source_code": "def setup(self, app):\n    bottle.SimpleTemplate.defaults['csrf_token'] = None", "buggy_source_code": "def setup(self, app):\n    bottle.SimpleTemplate.defaults['get_csrf_token'] = get_csrf_token", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def getLastNews(self):\n    tmp = self.getArticle(-1)\n    if self._lastNews.equals(tmp):\n        return None\n    self._lastNews = tmp\n    return self._lastNews", "buggy_source_code": "def getLastNews(self):\n    tmp = self.getArticle(0)\n    if self._lastNews.equals(tmp):\n        return None\n    self._lastNews = tmp\n    return self._lastNews", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_json(self):\n    template = Template('\"DBInstance\": {\\n        \"AllocatedStorage\": 10,\\n        \"AutoMinorVersionUpgrade\": \"{{ database.auto_minor_version_upgrade }}\",\\n        \"AvailabilityZone\": \"{{ database.availability_zone }}\",\\n        \"BackupRetentionPeriod\": \"{{ database.backup_retention_period }}\",\\n        \"CharacterSetName\": {%- if database.character_set_name -%}{{ database.character_set_name }}{%- else %} null{%- endif -%},\\n        \"DBInstanceClass\": \"{{ database.db_instance_class }}\",\\n        \"DBInstanceIdentifier\": \"{{ database.db_instance_identifier }}\",\\n        \"DBInstanceStatus\": \"{{ database.status }}\",\\n        \"DBName\": {%- if database.db_name -%}{{ database.db_name }}{%- else %} null{%- endif -%},\\n        {% if database.db_parameter_group_name -%}\"DBParameterGroups\": {\\n            \"DBParameterGroup\": {\\n            \"ParameterApplyStatus\": \"in-sync\",\\n            \"DBParameterGroupName\": \"{{ database.db_parameter_group_name }}\"\\n          }\\n        },{%- endif %}\\n        \"DBSecurityGroups\": [{\\n          {% for security_group in database.db_security_groups -%}{%- if loop.index != 1 -%},{%- endif -%}\\n          \"DBSecurityGroup\": {\\n            \"Status\": \"active\",\\n            \"DBSecurityGroupName\": \"{{ security_group }}\"\\n          }{% endfor %}\\n        }],{%- if database.db_subnet_group -%}\\n        \"DBSubnetGroup\": {\\n            \"DBSubnetGroupDescription\": \"nabil-db-subnet-group\",\\n            \"DBSubnetGroupName\": \"nabil-db-subnet-group\",\\n            \"SubnetGroupStatus\": \"Complete\",\\n            \"Subnets\": [\\n                {\\n                    \"SubnetAvailabilityZone\": {\\n                        \"Name\": \"us-west-2c\",\\n                        \"ProvisionedIopsCapable\": false\\n                    },\\n                    \"SubnetIdentifier\": \"subnet-c0ea0099\",\\n                    \"SubnetStatus\": \"Active\"\\n                },\\n                {\\n                    \"SubnetAvailabilityZone\": {\\n                        \"Name\": \"us-west-2a\",\\n                        \"ProvisionedIopsCapable\": false\\n                    },\\n                    \"SubnetIdentifier\": \"subnet-ff885d88\",\\n                    \"SubnetStatus\": \"Active\"\\n                }\\n            ],\\n            \"VpcId\": \"vpc-8e6ab6eb\"\\n        },{%- endif %}\\n        \"Engine\": \"{{ database.engine }}\",\\n        \"EngineVersion\": \"{{ database.engine_version }}\",\\n        \"LatestRestorableTime\": null,\\n        \"LicenseModel\": \"{{ database.license_model }}\",\\n        \"MasterUsername\": \"{{ database.master_username }}\",\\n        \"MultiAZ\": \"{{ database.multi_az }}\",{% if database.option_group_name %}\\n        \"OptionGroupMemberships\": [{\\n          \"OptionGroupMembership\": {\\n            \"OptionGroupName\": \"{{ database.option_group_name }}\",\\n            \"Status\": \"in-sync\"\\n          }\\n        }],{%- endif %}\\n        \"PendingModifiedValues\": { \"MasterUserPassword\": \"****\" },\\n        \"PreferredBackupWindow\": \"{{ database.preferred_backup_window }}\",\\n        \"PreferredMaintenanceWindow\": \"{{ database.preferred_maintenance_window }}\",\\n        \"PubliclyAccessible\": \"{{ database.publicly_accessible }}\",\\n        \"AllocatedStorage\": \"{{ database.allocated_storage }}\",\\n        \"Endpoint\": null,\\n        \"InstanceCreateTime\": null,\\n        \"Iops\": null,\\n        \"ReadReplicaDBInstanceIdentifiers\": [{%- for replica in database.replicas -%}\\n            {%- if not loop.first -%},{%- endif -%}\\n            \"{{ replica }}\"\\n        {%- endfor -%}\\n        ],\\n        \"ReadReplicaSourceDBInstanceIdentifier\": null,\\n        \"SecondaryAvailabilityZone\": null,\\n        \"StatusInfos\": null,\\n        \"VpcSecurityGroups\": [\\n            {\\n                \"Status\": \"active\",\\n                \"VpcSecurityGroupId\": \"sg-123456\"\\n            }\\n        ]\\n      }')\n    return template.render(database=self)", "buggy_source_code": "def to_json(self):\n    template = Template('{\\n        \"AllocatedStorage\": 10,\\n        \"AutoMinorVersionUpgrade\": \"{{ database.auto_minor_version_upgrade }}\",\\n        \"AvailabilityZone\": \"{{ database.availability_zone }}\",\\n        \"BackupRetentionPeriod\": \"{{ database.backup_retention_period }}\",\\n        \"CharacterSetName\": {%- if database.character_set_name -%}{{ database.character_set_name }}{%- else %} null{%- endif -%},\\n        \"DBInstanceClass\": \"{{ database.db_instance_class }}\",\\n        \"DBInstanceIdentifier\": \"{{ database.db_instance_identifier }}\",\\n        \"DBInstanceStatus\": \"{{ database.status }}\",\\n        \"DBName\": {%- if database.db_name -%}{{ database.db_name }}{%- else %} null{%- endif -%},\\n        {% if database.db_parameter_group_name -%}\"DBParameterGroups\": {\\n            \"DBParameterGroup\": {\\n            \"ParameterApplyStatus\": \"in-sync\",\\n            \"DBParameterGroupName\": \"{{ database.db_parameter_group_name }}\"\\n          }\\n        },{%- endif %}\\n        \"DBSecurityGroups\": [{\\n          {% for security_group in database.db_security_groups -%}{%- if loop.index != 1 -%},{%- endif -%}\\n          \"DBSecurityGroup\": {\\n            \"Status\": \"active\",\\n            \"DBSecurityGroupName\": \"{{ security_group }}\"\\n          }{% endfor %}\\n        }],{%- if database.db_subnet_group -%}\\n        \"DBSubnetGroup\": {\\n            \"DBSubnetGroupDescription\": \"nabil-db-subnet-group\",\\n            \"DBSubnetGroupName\": \"nabil-db-subnet-group\",\\n            \"SubnetGroupStatus\": \"Complete\",\\n            \"Subnets\": [\\n                {\\n                    \"SubnetAvailabilityZone\": {\\n                        \"Name\": \"us-west-2c\",\\n                        \"ProvisionedIopsCapable\": false\\n                    },\\n                    \"SubnetIdentifier\": \"subnet-c0ea0099\",\\n                    \"SubnetStatus\": \"Active\"\\n                },\\n                {\\n                    \"SubnetAvailabilityZone\": {\\n                        \"Name\": \"us-west-2a\",\\n                        \"ProvisionedIopsCapable\": false\\n                    },\\n                    \"SubnetIdentifier\": \"subnet-ff885d88\",\\n                    \"SubnetStatus\": \"Active\"\\n                }\\n            ],\\n            \"VpcId\": \"vpc-8e6ab6eb\"\\n        },{%- endif %}\\n        \"Engine\": \"{{ database.engine }}\",\\n        \"EngineVersion\": \"{{ database.engine_version }}\",\\n        \"LatestRestorableTime\": null,\\n        \"LicenseModel\": \"{{ database.license_model }}\",\\n        \"MasterUsername\": \"{{ database.master_username }}\",\\n        \"MultiAZ\": \"{{ database.multi_az }}\",{% if database.option_group_name %}\\n        \"OptionGroupMemberships\": [{\\n          \"OptionGroupMembership\": {\\n            \"OptionGroupName\": \"{{ database.option_group_name }}\",\\n            \"Status\": \"in-sync\"\\n          }\\n        }],{%- endif %}\\n        \"PendingModifiedValues\": { \"MasterUserPassword\": \"****\" },\\n        \"PreferredBackupWindow\": \"{{ database.preferred_backup_window }}\",\\n        \"PreferredMaintenanceWindow\": \"{{ database.preferred_maintenance_window }}\",\\n        \"PubliclyAccessible\": \"{{ database.publicly_accessible }}\",\\n        \"AllocatedStorage\": \"{{ database.allocated_storage }}\",\\n        \"Endpoint\": {\\n            \"Address\": \"{{ database.address }}\",\\n            \"Port\": \"{{ database.port }}\"\\n        },\\n        \"InstanceCreateTime\": null,\\n        \"Iops\": null,\\n        \"ReadReplicaDBInstanceIdentifiers\": [{%- for replica in database.replicas -%}\\n            {%- if not loop.first -%},{%- endif -%}\\n            \"{{ replica }}\"\\n        {%- endfor -%}\\n        ],\\n        \"ReadReplicaSourceDBInstanceIdentifier\": null,\\n        \"SecondaryAvailabilityZone\": null,\\n        \"StatusInfos\": null,\\n        \"VpcSecurityGroups\": [\\n            {\\n                \"Status\": \"active\",\\n                \"VpcSecurityGroupId\": \"sg-123456\"\\n            }\\n        ]\\n      }')\n    return template.render(database=self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def init(self, cr):\n    cr.execute('\\n\\t\\t\\tcreate or replace view report_task_user_pipeline_open as (\\n\\t\\t\\t\\tselect\\n\\t\\t\\t\\t\\tmin(t.id) as id,\\n\\t\\t\\t\\t\\tu.id as user_id,\\n\\t\\t\\t\\t\\tu.company_id as company_id,\\n\\t\\t\\t\\t\\tcount(*) as task_nbr,\\n\\t\\t\\t\\t\\tsum(planned_hours) as task_hrs,\\n\\t\\t\\t\\t\\tsum(planned_hours*(100-progress)/100) as task_progress,\\n\\t\\t\\t\\t\\tt.state as task_state\\n\\t\\t\\t\\tfrom\\n\\t\\t\\t\\t  res_users u\\n\\t\\t\\t\\tfull outer join project_task t on (u.id=t.user_id)\\n\\t\\t\\t\\tgroup by\\n\\t\\t\\t\\t\\tu.id,u.company_id,t.state\\n\\t\\t\\t)\\n\\t\\t')", "buggy_source_code": "def init(self, cr):\n    cr.execute('\\n\\t\\t\\tcreate or replace view report_task_user_pipeline_open as (\\n\\t\\t\\t\\tselect\\n\\t\\t\\t\\t\\tmin(t.id) as id,\\n\\t\\t\\t\\t\\tu.id as user_id,\\n\\t\\t\\t\\t\\tu.company_id as company_id,\\n\\t\\t\\t\\t\\tcount(t.*) as task_nbr,\\n\\t\\t\\t\\t\\tsum(t.planned_hours) as task_hrs,\\n\\t\\t\\t\\t\\tsum(t.planned_hours * (100 - t.progress) / 100) as task_progress,\\n\\t\\t\\t\\t\\tt.state as task_state\\n\\t\\t\\t\\tfrom\\n\\t\\t\\t\\t\\tproject_task t\\n\\t\\t\\t\\tleft join res_users u on (u.id = t.user_id)\\n\\t\\t\\t\\tgroup by\\n\\t\\t\\t\\t\\tu.id, u.company_id, t.state\\n\\t\\t\\t)\\n\\t\\t')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def parse(self, ctx):\n    with ctx._if():\n        super(LookaheadNotGrammar, self).parse(ctx)", "buggy_source_code": "def parse(self, ctx):\n    with ctx._if():\n        super(LookaheadGrammar, self).parse(ctx)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef pretty_notes(self):\n    return escape.xhtml_escape(self.notes).replace('\\r\\n', '<br />')", "buggy_source_code": "@property\ndef pretty_notes(self):\n    return escape.xhtml_escape(self.notes).replace('\\n', '<br />')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef pretty_notes(self):\n    return escape.xhtml_escape(self.notes).replace('\\r\\n', '<br />')", "buggy_source_code": "@property\ndef pretty_notes(self):\n    return escape.xhtml_escape(self.notes).replace('\\n', '<br />')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    settings.SENDFILE_BACKEND = 'sendfile.backends.nginx'\n    settings.SENDFILE_ROOT = os.path.dirname(os.path.dirname(__file__))\n    settings.SENDFILE_URL = '/private/'\n    _get_sendfile.clear()", "buggy_source_code": "def setUp(self):\n    settings.SENDFILE_BACKEND = 'sendfile.backends.nginx'\n    settings.SENDFILE_ROOT = os.path.dirname(os.path.dirname(__file__))\n    settings.SENDFILE_URL = '/private'\n    _get_sendfile.clear()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@expose('close-input-port', [values.W_InputPort])\ndef close_input_port(port):\n    port.close()\n    return values.w_void", "buggy_source_code": "@expose('close-input-port', [values.W_Object], simple=False)\ndef close_input_port(port, env, cont):\n    cont = close_port_cont(env, cont)\n    return get_input_port(port, env, cont)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self._str = ''\n    self._idx = ''\n    self._json = ''\n    self.cacheable = True\n    Attribute.cache = environment.settings().cache.attributes", "buggy_source_code": "def __init__(self):\n    self._str = ''\n    self._idx = ''\n    self._json = ''\n    self.cacheable = True\n    Attribute.caching = environment.settings().cache.attributes", "edit_actions": ["update-node"]}
{"fixed_source_code": "def json_result(self, search_result):\n    book = search_result.book\n    score = search_result.matches\n    return {'title': book.title, 'author': book.author, 'url': book.chitanka_id, 'score': score}", "buggy_source_code": "def json_result(self, search_result):\n    book = search_result.book\n    score = search_result.num_matches\n    return {'title': book.title, 'author': book.author, 'url': book.chitanka_id, 'score': score}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_body(self, as_dictionary=True):\n    if as_dictionary is True:\n        return self.json\n    else:\n        return self.response.content", "buggy_source_code": "def get_body(self, as_dictionary=True):\n    if as_dictionary:\n        return self.json\n    else:\n        return self.response.content", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def _get_operations(operation_names):\n    operations = names_to_operations(operation_names)\n    if operations is None:\n        raise PulpException(_('invalid operation name or names: %s') % ', '.join(operation_names))\n    return operations", "buggy_source_code": "def _get_operations(operation_names):\n    operations = names_to_operations(operation_names)\n    if operations is None:\n        raise PulpAuthorizationError(_('invalid operation name or names: %s') % ', '.join(operation_names))\n    return operations", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_user(user_name):\n    user = _user_api.user(user_name)\n    if user is None:\n        raise PulpException(_('no such user: %s') % user_name)\n    return user", "buggy_source_code": "def _get_user(user_name):\n    user = _user_api.user(user_name)\n    if user is None:\n        raise PulpAuthorizationError(_('no such user: %s') % user_name)\n    return user", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_role(role_name):\n    role = _role_api.role(role_name)\n    if role is None:\n        raise PulpException(_('no such role: %s') % role_name)\n    return role", "buggy_source_code": "def _get_role(role_name):\n    role = _role_api.role(role_name)\n    if role is None:\n        raise PulpAuthorizationError(_('no such role: %s') % role_name)\n    return role", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_register_decorator(self):\n\n    @registry.register_decorator()\n    class TestNotification(EmailNotification):\n        pass\n    self.assertEqual(len(registry._registry), 4)", "buggy_source_code": "def test_register_decorator(self):\n\n    @registry.register_decorator()\n    class TestNotification(EmailNotification):\n        pass\n    self.assertEqual(len(registry._registry), 5)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def msgpack_ext_hook(code, data):\n    if code == 0:\n        return Reference(unpackb(data, encoding='utf-8'))\n    return ExtType(code, data)", "buggy_source_code": "def msgpack_ext_hook(code, data):\n    if code == 0:\n        return Reference(unpackb(data, raw=False))\n    return ExtType(code, data)", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def msgpack_decode(data):\n    return unpackb(data, encoding='utf-8', ext_hook=msgpack_ext_hook)", "buggy_source_code": "def msgpack_decode(data):\n    return unpackb(data, raw=False, ext_hook=msgpack_ext_hook)", "edit_actions": ["update-node", "delete-node"]}
{"fixed_source_code": "def failed(self, message):\n    msg = 'Failed to access data'\n    if message:\n        msg += ': ' + message\n    RootPanel().add(HTML(msg))", "buggy_source_code": "def failed(self, message):\n    msg = 'Failed to access data'\n    if message:\n        msg = '%s: %s' % (msg, message)\n    RootPanel().add(HTML(msg))", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def num_tuples(self):\n    return input.num_tuples()", "buggy_source_code": "def num_tuples(self):\n    return self.input.num_tuples()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def num_tuples(self):\n    return self.input.num_tuples()", "buggy_source_code": "def num_tuples(self):\n    raise NotImplementedError('{op}.num_tuples'.format(op=type(self)))", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_list_with_instance_from_env(mocker):\n    result = run(['list'], {'INSTANCE_FOR_DYNACONF': 'tests.test_cli.settings'})\n    assert 'OPTION_FOR_TESTS: True' in result", "buggy_source_code": "def test_list_with_instance_from_env():\n    result = run(['list'], {'INSTANCE_FOR_DYNACONF': 'tests.test_cli.settings'})\n    assert 'OPTION_FOR_TESTS: True' in result", "edit_actions": ["delete-node", "delete-node"]}
{"fixed_source_code": "def get_processes(id):\n    return x + 1", "buggy_source_code": "def get_processes(id):\n    return [1]", "edit_actions": ["insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@hook.regex(wiki_re)\ndef wiki_re(match):\n    return wiki(match.group(1), show_url=False)", "buggy_source_code": "@hook.regex(wiki_re)\ndef wiki_re(match):\n    return wiki_search(match.group(1), show_url=False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def a2p(self, atom):\n    orbs = self.geom.a2o(atom - 1, True)\n    return self.o2p(orbs)", "buggy_source_code": "def a2p(self, atom):\n    orbs = self.geom.a2o(atom, True)\n    return self.o2p(orbs)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def createActions(self, wiki, pages, actionQueue):\n    actionQueue.put(self.Action(self, wiki, pages))", "buggy_source_code": "def createActions(self, language, pages, actionQueue):\n    actionQueue.put(self.Action(self, language, pages))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@cached_property\ndef wspd(self):\n    res = 0\n    for cmpnt in self.wind_cmpnt:\n        res += cmpnt ** 2\n        res = res ** 0.5\n        res.rename('wind_speed')\n    return res", "buggy_source_code": "@cached_property\ndef wspd(self):\n    res = 0\n    for cmpnt in self.wind_cmpnt:\n        res += cmpnt ** 2\n    res = res ** 0.5\n    res.rename('wind_speed')\n    return res", "edit_actions": ["move-tree", "move-tree", "move-tree", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def test_fit_dki_inputs():\n    data_files = ['String in a list']\n    bval_files = 'just a string'\n    bvec_files = 'just another string'\n    npt.assert_raises(ValueError, dki.fit_dki, data_files, bval_files, bvec_files)", "buggy_source_code": "def test_fit_dki_inputs():\n    data_files = ['String in a list']\n    bval_files = 'just a string'\n    bvec_files = 'just another string'\n    pytest.raises(ValueError, dki.fit_dki, data_files, bval_files, bvec_files)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@app.after_request\ndef add_crossdomain_header(resp):\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    resp.headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS, PUT, DELETE'\n    resp.headers['Access-Control-Allow-Headers'] = 'Content-Type'\n    return resp", "buggy_source_code": "@app.after_request\ndef add_crossdomain_header(resp):\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    resp.headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS, PUT, DELETE'\n    resp.headers['Access-Control-Allow-Headers'] = 'origin, content-type, accept, x-requested-with'\n    return resp", "edit_actions": ["update-node"]}
{"fixed_source_code": "def do_process(self):\n    if self.app.sensor_manager.items['TouchLogic'].value:\n        self.app.logic_manager.items['BuzzerAlertLogic'].active = False", "buggy_source_code": "def do_process(self):\n    if self.app.sensor_manager.items['TouchSensor'].value:\n        self.app.logic_manager.items['BuzzerAlertLogic'].active = False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_done(self, text):\n    if text:\n        Tools.sendSerialMessage(text)\n        self.window.run_command('send_serial_message')", "buggy_source_code": "def on_done(self, text):\n    if text:\n        Tools.sendSerialMessage(text)\n        self.window.run_command('send_message_serial')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def list_email_domains(self):\n    return self.query('\\n        SELECT domain_id, domain\\n        FROM [:table schema=cerebrum name=email_domain]')", "buggy_source_code": "def list_email_domains(self):\n    return self.query('\\n              SELECT domain_id, domain\\n              FROM [:table schema=cerebrum name=email_domain]\\n            ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def list_local_delivery(self):\n    return self.query('SELECT * FROM\\n        [:table schema=cerebrum name=email_local_delivery]')", "buggy_source_code": "def list_local_delivery(self):\n    return self.query('\\n              SELECT *\\n              FROM [:table schema=cerebrum name=email_local_delivery]\\n            ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def list_email_addresses(self):\n    return self.query('\\n        SELECT address_id\\n        FROM [:table schema=cerebrum name=email_address]', fetchall=False)", "buggy_source_code": "def list_email_addresses(self):\n    return self.query('\\n              SELECT address_id\\n              FROM [:table schema=cerebrum name=email_address]\\n            ', fetchall=False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def list_email_primary_address_targets(self):\n    return self.query('\\n        SELECT target_id, address_id\\n        FROM [:table schema=cerebrum name=email_primary_address]', fetchall=False)", "buggy_source_code": "def list_email_primary_address_targets(self):\n    return self.query('\\n              SELECT target_id, address_id\\n              FROM [:table schema=cerebrum name=email_primary_address]\\n            ', fetchall=False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def list_email_targets(self):\n    return self.query('\\n        SELECT target_id\\n        FROM [:table schema=cerebrum name=email_target]', fetchall=False)", "buggy_source_code": "def list_email_targets(self):\n    return self.query('\\n              SELECT target_id\\n              FROM [:table schema=cerebrum name=email_target]\\n            ', fetchall=False)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def implicitly_wait(self, time_to_wait):\n    self.execute(Command.IMPLICIT_WAIT, {'ms': time_to_wait * 1000})", "buggy_source_code": "def implicitly_wait(self, time_to_wait):\n    self.execute(Command.IMPLICIT_WAIT, {'ms': int(time_to_wait) * 1000})", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def find_elements_by_link_text(self, link_text):\n    return self.find_elements(by=By.LINK_TEXT, value=link_text)", "buggy_source_code": "def find_elements_by_link_text(self, text):\n    return self.find_elements(by=By.LINK_TEXT, value=text)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def _authenticate(self, data, signature):\n    return HMAC.new(key=self.hmac_key, msg=data, digestmod=SHA512).digest() == signature", "buggy_source_code": "def _authenticate(self, data, signature):\n    new_mac = hmac.new(key=self.hmac_key, msg=data, digestmod=SHA512).digest()\n    return hmac.compare_digest(new_mac, signature)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def main():\n    arg = sys.argv[1]\n    get_past_results(arg)", "buggy_source_code": "def main():\n    arg = sys.argv[1]\n    get_fixtures(arg)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fromiter(iterable, dtype, count=-1, device=None):\n    return xchainer.array(numpy.fromiter(iterable, dtype=as_numpy_dtype(dtype), count=count), device=device)", "buggy_source_code": "def fromiter(iterable, dtype, count=-1, device=None):\n    return xchainer.array(numpy.fromiter(iterable, dtype=_as_numpy_dtype(dtype), count=count), device=device)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_mnemonic(self, mnemonic):\n    self.mnemonic = normalize_nfc(passphrase)", "buggy_source_code": "def set_mnemonic(self, mnemonic):\n    self.mnemonic = normalize_nfc(mnemonic)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def start(self, name):\n    if self.cuisine.file_exists('/etc/service/vice/%s/run' % name):\n        self.cuisine.run('sv -w 15 start /etc/service/%s/' % name, profile=True)", "buggy_source_code": "def start(self, name):\n    if self.cuisine.file_exists('/etc/service/%s/run' % name):\n        self.cuisine.run('sv -w 15 start /etc/service/%s/' % name, profile=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def autobad(self, rev=None):\n    self.badrev = self.repo.lookup(rev or '.')\n    if self.goodrevs:\n        self.autonext()", "buggy_source_code": "def autobad(self, rev=None):\n    self.badnode = self.repo.lookup(rev or '.')\n    if self.goodnodes:\n        self.autonext()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def autogood(self, rev=None):\n    self.goodrevs.append(self.repo.lookup(rev or '.'))\n    if self.badrev:\n        return self.autonext()", "buggy_source_code": "def autogood(self, rev=None):\n    self.goodnodes.append(self.repo.lookup(rev or '.'))\n    if self.badnode:\n        return self.autonext()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def autonext(self):\n    rev = self.next()\n    if rev is not None:\n        cmdutil.bail_if_changed(self.repo)\n        return hg.clean(self.repo, rev)", "buggy_source_code": "def autonext(self):\n    node = self.next()\n    if node is not None:\n        cmdutil.bail_if_changed(self.repo)\n        return hg.clean(self.repo, node)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def drop_mongo(app):\n    with app.app_context():\n        drop_mongo_db(app, 'MONGO', 'MONGO_DBNAME')\n        drop_mongo_db(app, 'LEGAL_ARCHIVE', 'LEGAL_ARCHIVE_DBNAME')\n        drop_mongo_db(app, 'MONGO', 'ARCHIVED_DBNAME')", "buggy_source_code": "def drop_mongo(app):\n    with app.app_context():\n        drop_mongo_db(app, 'MONGO', 'MONGO_DBNAME')\n        drop_mongo_db(app, 'LEGAL_ARCHIVE', 'LEGAL_ARCHIVE_DBNAME')\n        drop_mongo_db(app, 'ARCHIVED', 'ARCHIVED_DBNAME')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_add_decision_has_feedback_form(self):\n    response = self.client.get(reverse('add_decision'))\n    self.assertTrue('feedback_form' in response.context, '\"feedback_form\" not in this context')", "buggy_source_code": "def test_add_decision_has_feedback_form(self):\n    response = self.client.get(reverse('add_decision'))\n    self.assertTrue('feedback_formset' in response.context, '\"feedback_formset\" not in this context')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@pytest.mark.django_db\ndef test_55_add_comment_without_authentication(api_client, default_hearing):\n    response = api_client.post(get_hearing_detail_url(default_hearing.id, 'comments'), data=comment_data)\n    assert response.status_code == 201", "buggy_source_code": "@pytest.mark.django_db\ndef test_55_add_comment_without_authentication(api_client, default_hearing):\n    response = api_client.post(get_hearing_detail_url(default_hearing.id, 'comments'), data=get_comment_data())\n    assert response.status_code == 201", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@property\ndef user(self):\n    user_id = self.user_id\n    user_model = get_user_model()\n    if user_id:\n        return user_model.object.get(pk=user_id)\n    return None", "buggy_source_code": "@property\ndef user(self):\n    user_id = self.user_id\n    user_model = get_user_model()\n    if user_id:\n        return user_model.objects.get(pk=user_id)\n    return None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_magenta(self):\n    self.assertEqual(hsv_to_rgb(300, 1, 1), (1, 0, 1))", "buggy_source_code": "def test_magenta(self):\n    self.assertEqual(hsv_to_rgb(300.0, 1.0, 1.0), (1, 0, 1))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_yellow(self):\n    self.assertEqual(hsv_to_rgb(60, 1, 1), (1, 1, 0))", "buggy_source_code": "def test_yellow(self):\n    self.assertEqual(hsv_to_rgb(60.0, 1.0, 1.0), (1, 1, 0))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_red(self):\n    self.assertEqual(hsv_to_rgb(0, 1, 1), (1, 0, 0))", "buggy_source_code": "def test_red(self):\n    self.assertEqual(hsv_to_rgb(0.0, 1.0, 1.0), (1, 0, 0))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_blue(self):\n    self.assertEqual(hsv_to_rgb(240, 1, 1), (0, 0, 1))", "buggy_source_code": "def test_blue(self):\n    self.assertEqual(hsv_to_rgb(240.0, 1.0, 1.0), (0, 0, 1))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_cyan(self):\n    self.assertEqual(hsv_to_rgb(180, 1, 1), (0, 1, 1))", "buggy_source_code": "def test_cyan(self):\n    self.assertEqual(hsv_to_rgb(180.0, 1.0, 1.0), (0, 1, 1))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_green(self):\n    self.assertEqual(hsv_to_rgb(120, 1, 1), (0, 1, 0))", "buggy_source_code": "def test_green(self):\n    self.assertEqual(hsv_to_rgb(120.0, 1.0, 1.0), (0, 1, 0))", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def is_url(location):\n    return '://' in location", "buggy_source_code": "def is_url(location):\n    return location and '://' in location", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def setupExperiment(self):\n    self.Name = 'GCC Calibration'\n    self.comments = 'Calibrating the satisfaction threshold to achieve ~5% pass rate of proposals'\n    self.setupParameters()\n    self.job_repetitions = 3", "buggy_source_code": "def setupExperiment(self):\n    self.Name = 'GCC Post-Calibration'\n    self.comments = 'Histories and networks runs for post-calibration'\n    self.setupParameters()\n    self.job_repetitions = 3", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_group(self, assignment):\n    query = Group.query(Group.member == self.key)\n    group = query.filter(Group.assignment == assignment)\n    return group.get()", "buggy_source_code": "def get_group(self, assignment):\n    query = Group.query(Group.members == self.key)\n    group = query.filter(Group.assignment == assignment)\n    return group.get()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_implicit_multi(self):\n    self.assertHttp(self.session.get('entity/%(T1)s/%(T2b)s' % {'T1': _T1, 'T2b': _T2b}), 200)", "buggy_source_code": "def test_implicit_multi(self):\n    self.assertHttp(self.session.get('entity/%(S)s:%(T1)s/%(S)s:%(T2b)s' % {'T1': _T1, 'T2b': _T2b, 'S': _S}), 200)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def help(self):\n    text = '<qt>Programmable optic sensor GUI, is part of a thesis with a title:</qt><qt>Koncept programabilnega optičnega senzorja (The concept of </qt><qt> programmable optical sensor), from Andrej Zadnik of University of Ljubljana Faculty of Electrical Engineering.</qt><qt>Source code is located in github repository:</qt> <qt><a href = https://github.com/andrejzadnik/programmable-optic-sensor>\\n https://github.com/andrejzadnik/programmable-optic-sensor-gui</a></qt>'\n    help_message = QMessageBox.information(self, 'About', text, QMessageBox.Ok)", "buggy_source_code": "def help(self):\n    text = '<qt>Programmable optic sensor GUI, is part of a thesis with a title:</qt><qt>Zasnova programabilnega optičnega senzorja (design of the </qt><qt> programmable optical sensor), from Andrej Zadnik of University of Ljubljana Faculty of Electrical Engineering.</qt><qt>Source code is located in github repository:</qt> <qt><a href = https://github.com/andrejzadnik/programmable-optic-sensor>\\n https://github.com/andrejzadnik/programmable-optic-sensor-gui</a></qt>'\n    help_message = QMessageBox.information(self, 'About', text, QMessageBox.Ok)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def load_config(self, config_object):\n    self.flip_turning = config_object.getbool('atba', 'flip_turning')", "buggy_source_code": "def load_config(self, config_object):\n    self.flip_turning = config_object.getboolean('atba', 'flip_turning')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_batches(item_code, warehouse, qty=1, throw=False):\n    return frappe.db.sql(\"\\n\\t\\tselect batch_id, sum(`tabStock Ledger Entry`.actual_qty) as qty\\n\\t\\tfrom `tabBatch`\\n\\t\\t\\tjoin `tabStock Ledger Entry` ignore index (item_code, warehouse)\\n\\t\\t\\t\\ton (`tabBatch`.batch_id = `tabStock Ledger Entry`.batch_no )\\n\\t\\twhere `tabStock Ledger Entry`.item_code = %s and `tabStock Ledger Entry`.warehouse = %s\\n\\t\\t\\tand (`tabBatch`.expiry_date >= CURDATE() or `tabBatch`.expiry_date IS NULL)\\n\\t\\tgroup by batch_id\\n\\t\\torder by `tabBatch`.expiry_date ASC, `tabBatch`.creation ASC'\\n\\t\", (item_code, warehouse), as_dict=True)", "buggy_source_code": "def get_batches(item_code, warehouse, qty=1, throw=False):\n    return frappe.db.sql('\\n\\t\\tselect batch_id, sum(`tabStock Ledger Entry`.actual_qty) as qty\\n\\t\\tfrom `tabBatch`\\n\\t\\t\\tjoin `tabStock Ledger Entry` ignore index (item_code, warehouse)\\n\\t\\t\\t\\ton (`tabBatch`.batch_id = `tabStock Ledger Entry`.batch_no )\\n\\t\\twhere `tabStock Ledger Entry`.item_code = %s and `tabStock Ledger Entry`.warehouse = %s\\n\\t\\t\\tand (`tabBatch`.expiry_date >= CURDATE() or `tabBatch`.expiry_date IS NULL)\\n\\t\\tgroup by batch_id\\n\\t\\torder by `tabBatch`.expiry_date ASC, `tabBatch`.creation ASC\\n\\t', (item_code, warehouse), as_dict=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def run_and_print(self, args, **kwargs):\n    try:\n        self.run(args, **kwargs)\n    except ResourceNotFoundError:\n        self.print_not_found(args.name)", "buggy_source_code": "def run_and_print(self, args, **kwargs):\n    try:\n        self.run(args, **kwargs)\n    except ResourceNotFoundError:\n        self.print_not_found(args.name_or_id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mousePressEvent(self, event):\n    self.__port.mousePressEvent(event)", "buggy_source_code": "def mousePressEvent(self, event):\n    self.unhighlight()\n    self.__port.mousePressEventHandler(event)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def mousePressEvent(self, event):\n    self.unhighlight()\n    self.__port.mousePressEvent(event)", "buggy_source_code": "def mousePressEvent(self, event):\n    self.unhighlight()\n    self.__port.mousePressEventHandler(event)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _add_items(self, items, func):\n    if self.merge_arrays:\n        self._add_items_merge(items, func)\n    else:\n        self._add_items_sep(items, func)", "buggy_source_code": "def _add_items(self, items, func):\n    if self._c['merge_arrays']:\n        self._add_items_merge(items, func)\n    else:\n        self._add_items_sep(items, func)", "edit_actions": ["insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def teardown(self):\n    if self.matching_source(self._SOURCES['hwrng']):\n        supervdsm.getProxy().rmAppropriateHwrngDevice(self.conf['vmId'])", "buggy_source_code": "def teardown(self):\n    if self.uses_source('/dev/hwrng'):\n        supervdsm.getProxy().rmAppropriateHwrngDevice(self.conf['vmId'])", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def addTXPendingAddressCount(self, address, count):\n    self._pendingAddrCnts[str(address)] = count + self._pendingAddrCnts.get(address, 0)", "buggy_source_code": "def addTXPendingAddressCount(self, address, count):\n    self._pendingAddrCnts[str(address)] = count + self._pendingAddrCnts.get(str(address), 0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def links_density(self):\n    text_lenght = len(self.text)\n    if text_lenght == 0:\n        return 0\n    return self.chars_count_in_links / text_lenght", "buggy_source_code": "def links_density(self):\n    text_length = len(self.text)\n    if text_length == 0:\n        return 0\n    return self.chars_count_in_links / text_length", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def value(self):\n    return tuple([float(i.value()) for i in self._widgets.text()])", "buggy_source_code": "def value(self):\n    valueList = list()\n    for axis in self._widgets:\n        valueList.append(self._widgets[axis].text())\n    return tuple(valueList)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, *classes, **kwds):\n    super(OfType, self).__init__(**kwds)\n    self.classes = classes", "buggy_source_code": "def __init__(self, *classes, **kwds):\n    super(OfType, self).__init__(**kwds)\n    self.allowed = classes", "edit_actions": ["update-node"]}
{"fixed_source_code": "def makesig(opt):\n    toFile(opt.dumpfile, opt.sigfile)\n    pass", "buggy_source_code": "def makesig(opt):\n    toFile(opt.dumpname, opt.sigfile)\n    pass", "edit_actions": ["update-node"]}
{"fixed_source_code": "def link_colab(self):\n    return '/recipe/colab/%d/' % self.pk if self.pk else ''", "buggy_source_code": "def link_colab(self):\n    return '/recipe/colabs/%d/' % self.pk if self.pk else ''", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _check_file_version(self):\n    return self.bytes_read[4:8] == 3", "buggy_source_code": "def _check_file_version(self):\n    return self._unpack_int(4) == FILE_VERSION", "edit_actions": ["insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_session():\n    requester = Requester('example.com', True)\n    session = requester.session\n    assert isinstance(session, requests.Session)\n    session2 = requester.session\n    assert session == session2", "buggy_source_code": "def test_session():\n    requester = Requester('example.com', True)\n    session = requester.session\n    assert isinstance(session, requests.Session)\n    session2 = requester.session\n    assert session is session2", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def main(args=None):\n    if args is None:\n        args = parse_arguments()\n    evaluate_arguments(args)", "buggy_source_code": "def main(args=None):\n    if args is None:\n        args = parse_arguments()\n    print(args)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def post_render(self):\n    return self.cycles.caustics_reflective", "buggy_source_code": "def post_render(self):\n    return self.scene.cycles.caustics_reflective", "edit_actions": ["insert-node", "insert-node"]}
{"fixed_source_code": "def linecount():\n    with hide('running'):\n        local('cloc --exclude-ext=json --exclude-dir=intranet/static/lib,intranet/static/{css,js}/lib,docs,intranet/apps/{eighth,schedule,announcements,users}/migrations .')", "buggy_source_code": "def linecount():\n    with hide('running'):\n        local('cloc --exclude-ext=json --exclude-dir=intranet/static/vendor,intranet/static/{css,js}/vendor,docs,intranet/apps/{eighth,schedule,announcements,users}/migrations .')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getMeasurement(self):\n    if ADConverter.useRealAD:\n        return self.adcdac.read_adc_voltage(1)\n    else:\n        return __readMeasurementFromFile()", "buggy_source_code": "def getMeasurement(self):\n    if ADConverter.useRealAD:\n        return self.adcdac.read_adc_voltage(1)\n    else:\n        return self.__readMeasurementFromFile()", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def apply(self):\n    self.add_variable(goes_to_school)", "buggy_source_code": "def apply(self):\n    self.add_variable(test_dynamic_variable())", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def velocity_initial_condition(self):\n    return (0, 0)", "buggy_source_code": "def velocity_initial_condition(self):\n    u = Expression(self.u_anal)\n    u.t = 0.0\n    return u", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def velocity_dirichlet_boundaries(self):\n    return ['x[1] < DOLFIN_EPS || x[1] > 1.0 - DOLFIN_EPS']", "buggy_source_code": "def velocity_dirichlet_boundaries(self):\n    return ['on_bondary']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def pressure_dirichlet_boundaries(self):\n    return ['x[0] < DOLFIN_EPS', 'x[0] > 1 - DOLFIN_EPS']", "buggy_source_code": "def pressure_dirichlet_boundaries(self):\n    return ['on_boundary']", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@when(u'I call get_url(\"{url_path}\") with an absolute path')\ndef path_arg(context, url_path):\n    context.__result = context.get_url(url_path)", "buggy_source_code": "@when(u'I call get_url(\"{url_path}\") with an absolute path')\ndef path_arg(context, url_path):\n    context.result = context.get_url(url_path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@when(u'I call get_url(\"{view_name}\") with a view name')\ndef view_arg(context, view_name):\n    context.__result = context.get_url(view_name)", "buggy_source_code": "@when(u'I call get_url(\"{view_name}\") with a view name')\ndef view_arg(context, view_name):\n    context.result = context.get_url(view_name)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@then(u'this returns the same result as get_url(model.get_absolute_url())')\ndef get_model_url(context):\n    path = context.__model.get_absolute_url()\n    context.test.assertEquals(context.__result, context.get_url(path))", "buggy_source_code": "@then(u'this returns the same result as get_url(model.get_absolute_url())')\ndef get_model_url(context):\n    path = context.model.get_absolute_url()\n    context.test.assertEquals(context.result, context.get_url(path))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@then(u'it returns the value of base_url')\ndef is_baseurl_value(context):\n    context.test.assertEquals(context.__result, context.base_url)", "buggy_source_code": "@then(u'it returns the value of base_url')\ndef is_baseurl_value(context):\n    context.test.assertEquals(context.result, context.base_url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@then(u'this returns the same result as get_url(reverse(\"{view_name}\"))')\ndef explicit_reverse(context, view_name):\n    path = reverse(view_name)\n    context.test.assertEquals(context.__result, context.get_url(path))", "buggy_source_code": "@then(u'this returns the same result as get_url(reverse(\"{view_name}\"))')\ndef explicit_reverse(context, view_name):\n    path = reverse(view_name)\n    context.test.assertEquals(context.result, context.get_url(path))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@then(u'the result is the base_url with \"{url_path}\" appended')\ndef baseurl_plus_path(context, url_path):\n    context.test.assertEquals(context.__result, context.base_url + url_path)", "buggy_source_code": "@then(u'the result is the base_url with \"{url_path}\" appended')\ndef baseurl_plus_path(context, url_path):\n    context.test.assertEquals(context.result, context.base_url + url_path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@when(u'I call get_url() without arguments')\ndef without_args(context):\n    context.__result = context.get_url()", "buggy_source_code": "@when(u'I call get_url() without arguments')\ndef without_args(context):\n    context.result = context.get_url()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@when(u'I call get_url(model) with a model instance')\ndef model_arg(context):\n    context.__model = BehaveTestModel(name='Foo', number=3)\n    context.__result = context.get_url(context.__model)", "buggy_source_code": "@when(u'I call get_url(model) with a model instance')\ndef model_arg(context):\n    context.model = BehaveTestModel(name='Foo', number=3)\n    context.result = context.get_url(context.model)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _ask_config_path(self) -> str:\n    name = questionary.select('Please choose a supported config file: (default: pyproject.tml)', choices=long_term_support_config_files, default='pyproject.toml', style=self.cz.style).ask()\n    return name", "buggy_source_code": "def _ask_config_path(self) -> str:\n    name = questionary.select('Please choose a supported config file: (default: pyproject.toml)', choices=long_term_support_config_files, default='pyproject.toml', style=self.cz.style).ask()\n    return name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def create_fields(Model, *fields):\n    return 'migrator.add_fields(%s\"%s\", %s)' % (NEWLINE, Model._meta.name, NEWLINE + (',' + NEWLINE).join([field_to_code(field, False) for field in fields]))", "buggy_source_code": "def create_fields(Model, *fields):\n    return 'migrator.add_fields(%s\"%s\", %s)' % (NEWLINE, Model._meta.db_table, NEWLINE + (',' + NEWLINE).join([field_to_code(field, False) for field in fields]))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def remove_model(Model):\n    return 'migrator.remove_model(\"%s\")' % Model._meta.name", "buggy_source_code": "def remove_model(Model):\n    return 'migrator.remove_model(\"%s\")' % Model._meta.db_table", "edit_actions": ["update-node"]}
{"fixed_source_code": "def drop_fields(Model, *fields):\n    return 'migrator.remove_fields(\"%s\", %s)' % (Model._meta.name, ', '.join(map(repr, fields)))", "buggy_source_code": "def drop_fields(Model, *fields):\n    return 'migrator.remove_fields(\"%s\", %s)' % (Model._meta.db_table, ', '.join(map(repr, fields)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def full_ui_content(checks):\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<ui version=\"4.0\">\\n <class>ClangFormat::ClangFormatChecksWidget</class>\\n <widget class=\"QWidget\" name=\"ClangFormat::ClangFormatChecksWidget\">\\n  <property name=\"maximumSize\">\\n   <size>\\n    <width>450</width>\\n    <height>16777215</height>\\n   </size>\\n  </property>\\n  <layout class=\"QGridLayout\" name=\"checksLayout\">\\n' + checks + '  </layout>\\n </widget>\\n <resources/>\\n <connections/>\\n</ui>\\n'", "buggy_source_code": "def full_ui_content(checks):\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<ui version=\"4.0\">\\n <class>ClangFormat::ClangFormatChecksWidget</class>\\n <widget class=\"QWidget\" name=\"ClangFormat::ClangFormatChecksWidget\">\\n  <property name=\"maximumSize\">\\n   <size>\\n    <width>480</width>\\n    <height>16777215</height>\\n   </size>\\n  </property>\\n  <layout class=\"QGridLayout\" name=\"checksLayout\">\\n' + checks + '  </layout>\\n </widget>\\n <resources/>\\n <connections/>\\n</ui>\\n'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_item_with_id(self, id):\n    instance = self.model_class()\n    instance.id = str(id)\n    return instance", "buggy_source_code": "def _get_item_with_id(self, id):\n    instance = self.model_class()\n    instance._id = str(id)\n    return instance", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mark_exiting(self, *args):\n    log.info(_('Exiting, waiting for current task to finish'))\n    self.is_exiting = True", "buggy_source_code": "def mark_exiting(self, *args):\n    log.info(_('Shutting down, waiting for current task to finish'))\n    self.is_exiting = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_requests_session(self):\n    return gitlab.gitlab.requests", "buggy_source_code": "def get_requests_session(self):\n    return self.service.gl.session", "edit_actions": ["update-node", "insert-node", "insert-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_answer():\n    assert plusone.inc(3) == 5", "buggy_source_code": "def test_answer():\n    assert plusone.inc(3) == 4", "edit_actions": ["update-node"]}
{"fixed_source_code": "def acquire(self):\n    if not self._waitLock():\n        raise TimeoutExceededSerialLockError('Timeout exceeded whilst waiting for serial lock')", "buggy_source_code": "def acquire(self):\n    if not self._waitLock():\n        raise TimeoutExceededSerialLockError('Timeout exceeded whilst waiting for agent communications')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@needs_read_lock\ndef _eliminate_revisions_not_present(self, revision_ids):\n    result = []\n    for id in revision_ids:\n        if self.has_revision(id):\n            result.append(id)\n    return result", "buggy_source_code": "@needs_read_lock\ndef _eliminate_revisions_not_present(self, revision_ids):\n    result = []\n    graph = self.get_graph()\n    parent_map = graph.get_parent_map(revision_ids)\n    return parent_map.keys()", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@models.permalink\ndef get_absolute_url(self):\n    return ('tribe_detail', [self.slug])", "buggy_source_code": "@models.permalink\ndef get_absolute_url(self):\n    return ('project_detail', [self.slug])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_account_limits(self) -> dict:\n    return self._do_request(GET, BASE_URL + '/api/settings/account/limits')", "buggy_source_code": "def get_account_limits(self) -> list:\n    return self._do_request(GET, BASE_URL + '/api/settings/account/limits')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def action(self):\n    _lg.info('Action! Stitching your plots together with ffmpeg...')\n    scf.call_ffmpeg(self.workingfolder, outputdir=self.arguments['-o'])", "buggy_source_code": "def action(self):\n    _lg.info('Action! Stitching your plots together with ffmpeg...')\n    call_ffmpeg(self.workingfolder, outputdir=self.arguments['-o'])", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def addTask(self, task):\n    logging.info('Registering task: %s' % task.name)\n    self.tasks[task.name] = task", "buggy_source_code": "def addTask(self, task):\n    logging.debug('Registering task: %s' % task.name)\n    self.tasks[task.name] = task", "edit_actions": ["update-node"]}
{"fixed_source_code": "def CheckAdjustTime(self):\n    dial = wx.MessageDialog(None, 'System and telescope times do not match.', 'Adjust system time to telescope time?\\n', wx.OK | wx.CANCEL | wx.ICON_QUESTION)\n    response = dial.ShowModal()\n    return response == wx.ID_OK", "buggy_source_code": "def CheckAdjustTime(self):\n    dial = wx.MessageDialog(None, 'Adjust system time to telescope time?\\n', 'System and telescope times do not match.', wx.OK | wx.CANCEL | wx.ICON_QUESTION)\n    response = dial.ShowModal()\n    return response == wx.ID_OK", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef construct_from_string(cls, string):\n    if string == cls.name:\n        return cls()\n    else:\n        raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls, string))", "buggy_source_code": "@classmethod\ndef construct_from_string(cls, string):\n    if string == cls.name:\n        return cls()\n    else:\n        raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls.__name__, string))", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def _get_item_with_id(self, id):\n    instance = self.model_class()\n    instance.id = str(id)\n    return instance", "buggy_source_code": "def _get_item_with_id(self, id):\n    instance = self.model_class()\n    instance._id = str(id)\n    return instance", "edit_actions": ["update-node"]}
{"fixed_source_code": "def bounds(self):\n    return (self.minTime, self.maxTime or interval[-1].maxTime)", "buggy_source_code": "def bounds(self):\n    return (self.minTime, self.maxTime or self.intervals[-1].maxTime)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def collect_attr_kwargs(self):\n    attrs = set(self.default_attributes.keys()) - set(self.__class__.default_attributes.keys())\n    return attrs", "buggy_source_code": "def collect_attr_kwargs(self):\n    attrs = set(self.default_attributes.keys()) - set(super(self.__class__, self).default_attributes)\n    return attrs", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def tag_length(self):\n    return self._length or 2 + self.binary_length()", "buggy_source_code": "def tag_length(self):\n    if self._length is None:\n        return 2 + self.binary_length()\n    return self._length", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def tag_length(self):\n    return self._length or 2 + self.string_length()", "buggy_source_code": "def tag_length(self):\n    if self._length is None:\n        return 2 + self.string_length()\n    return self._length", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def update_4(doc):\n    x = doc.find('/global/conc_persistence_time')\n    if x is not None:\n        x.tag = 'conc_summary_session_ttl'", "buggy_source_code": "def update_4(doc):\n    x = doc.find('/global/conc_persistence_time')\n    if x is not None:\n        remove_element(x)", "edit_actions": ["move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def parse_xml(self, el):\n    _Renderable.parse_xml(self, el)\n    self.color = el.get('color', '#fff')\n    self.alpha = float(el.get('alpha', 1.0))", "buggy_source_code": "def parse_xml(self, el):\n    _Renderable.parse_xml(self, el)\n    self.color = el.get('color', '#fff')\n    self.alpha = float(el.get('opacity', 1.0))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_groupby_sum(self):\n    query = '\\n    TotalSalary(emp_id, sum(salary)) :- Employee(emp_id, dept_id,salary)\\n    '\n    desiredresult = \"[('TotalSalary', GroupBy($0)(SUM(salary))[Scan(Employee)])]\"\n    testresult = RATest(query)\n    self.assertEqual(testresult, desiredresult)", "buggy_source_code": "def test_groupby_sum(self):\n    query = '\\n    TotalSalary(emp_id, sum(salary)) :- Employee(emp_id, dept_id,salary)\\n    '\n    desiredresult = \"[('TotalSalary', GroupBy($0; SUM($2))[Scan(Employee)])]\"\n    testresult = RATest(query)\n    self.assertEqual(testresult, desiredresult)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_groupby_count(self):\n    query = '\\n    InDegree(dst, count(src)) :- Edge(src,dst)\\n    '\n    desiredresult = \"[('InDegree', GroupBy($1)(COUNT(src))[Scan(Edge)])]\"\n    testresult = RATest(query)\n    self.assertEqual(testresult, desiredresult)", "buggy_source_code": "def test_groupby_count(self):\n    query = '\\n    InDegree(dst, count(src)) :- Edge(src,dst)\\n    '\n    desiredresult = \"[('InDegree', GroupBy($1; COUNT($0))[Scan(Edge)])]\"\n    testresult = RATest(query)\n    self.assertEqual(testresult, desiredresult)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_sum(self):\n    query = '\\n    TotalSalary(sum(salary)) :- Employee(emp_id, dept_id,salary)\\n    '\n    desiredresult = \"[('TotalSalary', GroupBy()(SUM(salary))[Scan(Employee)])]\"\n    testresult = RATest(query)\n    self.assertEqual(testresult, desiredresult)", "buggy_source_code": "def test_sum(self):\n    query = '\\n    TotalSalary(sum(salary)) :- Employee(emp_id, dept_id,salary)\\n    '\n    desiredresult = \"[('TotalSalary', GroupBy(; SUM($2))[Scan(Employee)])]\"\n    testresult = RATest(query)\n    self.assertEqual(testresult, desiredresult)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_station(self, name, artist_id=None, genre_id=None):\n    return self._api.create_station(name, genre_id)", "buggy_source_code": "def get_station(self, title, artist_id=None):\n    if artist_id is not None:\n        return self._api.create_station(title, artist_id=artist_id)", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_default_session():\n    if CONF['SESSION'] is None:\n        CONF['SESSION'] = session.Session()\n    return CONF['SESSION']", "buggy_source_code": "def get_default_session():\n    if androconf.CONF['SESSION'] is None:\n        androconf.CONF['SESSION'] = session.Session()\n    return androconf.CONF['SESSION']", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@classmethod\ndef new_create_action(cls, date=None):\n    if not date:\n        date = datetime.utcnow()\n    return CommCareCaseAction(action_type=const.CASE_ACTION_CLOSE, date=date, opened_on=date)", "buggy_source_code": "@classmethod\ndef new_create_action(cls, date=None):\n    if not date:\n        date = datetime.utcnow()\n    return CommCareCaseAction(action_type=const.CASE_ACTION_CREATE, date=date, opened_on=date)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_initial_function_name(js):\n    pattern = '\\\\bc\\\\s*&&\\\\s*d\\\\.set\\\\([^,]+\\\\s*,\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\('\n    logger.debug('finding initial function name')\n    return regex_search(pattern, js, group=1)", "buggy_source_code": "def get_initial_function_name(js):\n    pattern = ['yt\\\\.akamaized\\\\.net/\\\\)\\\\s*\\\\|\\\\|\\\\s*.*?\\\\s*c\\\\s*&&\\\\s*d\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\.sig\\\\|\\\\|(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\bc\\\\s*&&\\\\s*d\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(']\n    logger.debug('finding initial function name')\n    return regex_search(pattern, js, group=1)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "@pytest.fixture(scope='function', autouse=True)\ndef theano_config():\n    config = theano.configparser.change_flags(compute_test_value='raise')\n    with config:\n        yield", "buggy_source_code": "@pytest.yield_fixture(scope='function', autouse=True)\ndef theano_config():\n    config = theano.configparser.change_flags(compute_test_value='raise')\n    with config:\n        yield", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='function', autouse=False)\ndef strict_float32():\n    config = theano.configparser.change_flags(warn_float64='raise', floatX='float32')\n    with config:\n        yield", "buggy_source_code": "@pytest.yield_fixture(scope='function', autouse=False)\ndef strict_float32():\n    config = theano.configparser.change_flags(warn_float64='raise', floatX='float32')\n    with config:\n        yield", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(scope='function', autouse=True)\ndef exception_verbosity():\n    config = theano.configparser.change_flags(exception_verbosity='high')\n    with config:\n        yield", "buggy_source_code": "@pytest.yield_fixture(scope='function', autouse=True)\ndef exception_verbosity():\n    config = theano.configparser.change_flags(exception_verbosity='high')\n    with config:\n        yield", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, surfSet, matSect, elemSize, elemType='shell_mitc4'):\n    self.surfSet = surfSet\n    self.matSect = matSect\n    self.elemSize = elemSize\n    self.elemType = elemType", "buggy_source_code": "def __init__(self, surfSet, matSect, elemSize, elemType='shell_mitc4'):\n    super(SurfSetToMesh, self).__init__(surfSet, elemSize, elemType)\n    self.matSect = matSect", "edit_actions": ["insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def dependencies_for(*args, **kwargs):\n    return []", "buggy_source_code": "def dependencies_for(self, args, **kwargs):\n    return []", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def APMATPlasmicRisk_inputs():\n    return ['APMATPlateletCountLessThan30', 'APMATHaemolysisVariable', 'APMATActiveCancer', 'APMATTransplant', 'APMATMCVLessThan90', 'APMATINRLessThan1Dot5', 'APMATCreatinineLessThan2']", "buggy_source_code": "def APMATPlasmicRisk_inputs():\n    return ['APMATPlateletCountLessThan30', 'APMATHaemolysisVariable', 'APMATNoActiveCancer', 'APMATNoTransplant', 'APMATMCVLessThan90', 'APMATINRLessThan1Dot5', 'APMATCreatinineLessThan2']", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def on_device_removed(monitor, device):\n    monitor = audio_monitors_map.get(device.internal_name, None)\n    if monitor:\n        del audio_monitors_map[device.internal_name]\n        monitor.stop()", "buggy_source_code": "def on_device_removed(monitor, device):\n    audio_monitor = audio_monitors_map.get(device.internal_name, None)\n    if audio_monitor:\n        del audio_monitors_map[device.internal_name]\n        audio_monitor.stop()", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def on_device_added(monitor, device):\n    monitor = AudioLevelMonitor(device=device, socket=socketio)\n    audio_monitors.append(monitor)\n    audio_monitors_map[device.internal_name] = monitor", "buggy_source_code": "def on_device_added(monitor, device):\n    audio_monitor = AudioLevelMonitor(device=device)\n    audio_monitors.append(audio_monitor)\n    audio_monitors_map[device.internal_name] = audio_monitor", "edit_actions": ["update-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def search(self, start, end, value=None, max_distance=0):\n    return self.segmenttree.search(start, end, max_distance=max_distance, value=value)", "buggy_source_code": "def search(self, start, end, value=None, max_distance=0):\n    return self.segmenttree.search(start - 1, end, max_distance=max_distance, value=value)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def __handle_set_persona(self):\n    self.set_persona(persona_state=self.persona_state)", "buggy_source_code": "def __handle_set_persona(self):\n    self.change_status(persona_state=self.persona_state)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def html(text):\n    return re.sub('<', '&lt;', re.sub('>', '&gt;', re.sub('&', '&amp;', text)))", "buggy_source_code": "def html(text):\n    return cgi.escape(text, quote='\"')", "edit_actions": ["update-node", "update-node", "update-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def unalias(self, module_alias):\n    return [i.module for i in self.imports.items() if i.qualified == module_alias]", "buggy_source_code": "def unalias(self, module_alias):\n    return [i.module for i in self.imports.items() if i.import_as == module_alias]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _generateSqlGroup(self, report_process):\n    sqlGroup = ['GROUP BY r.signature']\n    if report_process == 'plugin':\n        sqlGroup.append(', pluginName, pluginVersion, pluginFilename ')\n    return ' AND '.join(sqlGroup)", "buggy_source_code": "def _generateSqlGroup(self, report_process):\n    sqlGroup = ['GROUP BY r.signature']\n    if report_process == 'plugin':\n        sqlGroup.append('pluginName, pluginVersion, pluginFilename ')\n    return ', '.join(sqlGroup)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def job4():\n    bot.follow_followers(random_list)", "buggy_source_code": "def job4():\n    bot.follow_followers(random_user)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def encodeURI(uri):\n    s = u\"!#$%&'()*+,-./:;<=>?@[\\\\]^_{|}~ \"\n    return urllib.quote(unicode(uri).encode('utf8'), safe=s.encode('ascii'))", "buggy_source_code": "def encodeURI(uri):\n    s = u\"!#$&'()*+,-./:;<=>?@[\\\\]^_{|}~ \"\n    return urllib.quote(unicode(uri).encode('utf8'), safe=s.encode('ascii'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def send_help(user):\n    teli.send_sms(int(user.user_phone), '@help - Displays this menu\\n@<nick> <message> - Private message user\\n@unsub - Unsubs from chat\\n@resub - Resubscribes to chat\\n@about - Displays info about the software')\n    return json.dumps({'status': 'Call received'})", "buggy_source_code": "def send_help(user):\n    teli.send_sms(int(user.user_phone), '/help - Displays this menu\\n@<nick> <message> - Private message user\\n/quit OR /away - Unsubs from chat\\n/resub - Resubscribes to chat\\n/about - Displays info about the software')\n    return json.dumps({'status': 'Call received'})", "edit_actions": ["update-node"]}
{"fixed_source_code": "def genTransferStart(self, event):\n    self.genDebugCode(event)", "buggy_source_code": "def genTransferStart(self, event):\n    self.genHeader(event)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def genInterchunkStart(self, event):\n    self.genDebugCode(event)", "buggy_source_code": "def genInterchunkStart(self, event):\n    self.genHeader(event)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def genPostchunkStart(self, event):\n    self.genDebugCode(event)", "buggy_source_code": "def genPostchunkStart(self, event):\n    self.genHeader(event)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, username=None):\n    twitchTV = TwitchTV(self.__logger)\n    self.username = username\n    self.dirlist = {0: '/'}\n    self.setWorkingDir(0)", "buggy_source_code": "def __init__(self, username=None):\n    self.twitchTV = TwitchTV(self.__logger)\n    self.username = username\n    self.dirlist = {0: '/'}\n    self.setWorkingDir(0)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def scale(self, xs, ys):\n    raise NYI", "buggy_source_code": "def scale(self, xs, ys):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def rotate(self, theta):\n    raise NYI", "buggy_source_code": "def rotate(self, theta):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def aarect(self):\n    raise NYI", "buggy_source_code": "def aarect(self):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def contains(self, x, y):\n    raise NYI", "buggy_source_code": "def contains(self, x, y):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def select_items(self):\n    self.list_widget_1.selectAll()\n    qDebug('\\n' + str(data_of_list))\n    self.return_files()", "buggy_source_code": "def select_items(self):\n    self.list_widget_1.selectAll()\n    print('\\n' + str(data_of_list))\n    self.return_files()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def print_ok(self):\n    qDebug(str('O.K'))", "buggy_source_code": "def print_ok(self):\n    print(str('O.K'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testcurrentuser(self):\n    assert isinstance(git.currentuser(), dict)\n    self.assertIsNot(git.currentuser(), False)", "buggy_source_code": "def testcurrentuser(self):\n    assert isinstance(git.currentuser(), dict)\n    self.assertTrue(git.currentuser())", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_filter_replace_uid_with_file_name(self):\n    test_string = 'abcdefghijk>deadbeef00000000000000000000000000000000000000000000000000000000_123<abcdefghijk'\n    result = self.filter._filter_replace_uid_with_file_name(test_string)\n    assert '>test_name<' in result\n    result = self._get_template_filter_output(test_string, 'replace_uid_with_file_name')\n    assert '>test_name<' in result", "buggy_source_code": "def test_filter_replace_uid_with_file_name(self):\n    test_string = '\"abcdefghijk>deadbeef00000000000000000000000000000000000000000000000000000000_123<abcdefghijk\"'\n    result = self.filter._filter_replace_uid_with_file_name(test_string)\n    assert '>test_name<' in result\n    result = self._get_template_filter_output(test_string, 'replace_uid_with_file_name')\n    assert '>test_name<' in result", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_template_filter_output(self, data, filter_name):\n    with self.frontend.app.test_request_context():\n        return render_template_string('<html><body><div>{{{{ \"{data}\" | {filter_name} | safe }}}}</div></body></html>'.format(data=data, filter_name=filter_name))", "buggy_source_code": "def _get_template_filter_output(self, data, filter_name):\n    with self.frontend.app.test_request_context():\n        return render_template_string('<html><body><div>{{{{ {data} | {filter_name} | safe }}}}</div></body></html>'.format(data=data, filter_name=filter_name))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_basic():\n    b = pyvex.block.IRSB('Eá', 1, archinfo.ArchARMEL())\n    nose.tools.assert_equal(str(b).strip(), basic_goal.strip())", "buggy_source_code": "def test_basic():\n    b = pyvex.block.IRSB('\\x0f\\x0b', 1, archinfo.ArchX86())\n    nose.tools.assert_equal(str(b).strip(), basic_goal.strip())", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def rx_sum():\n    traffic_json = traffic()\n    sum = 0\n    for i in traffic_json['days']:\n        sum = sum + i['rx']\n    return sum", "buggy_source_code": "def rx_sum(data):\n    rx_traffic = 0\n    for i in data['interfaces'][0]['traffic']['days']:\n        rx_traffic = rx_traffic + i['rx']\n    return rx_traffic", "edit_actions": ["insert-node", "insert-node", "update-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, exc={'message': None, 'code': None}):\n    self.msg = exc['message']\n    self.code = exc['code']", "buggy_source_code": "def __init__(self, exc={'message': None, 'code': None}):\n    self.message = exc['message']\n    self.code = exc['code']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Marketo API Error Code {}: {}'.format(self.code, self.msg)", "buggy_source_code": "def __str__(self):\n    return 'Marketo API Error Code {}: {}'.format(self.code, self.message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def hypothesize(self, elements):\n    return hy_st.lists(elements=elements, min_size=self.min_items, max_size=self.max_items, unique=self.unique_items)", "buggy_source_code": "def hypothesize(self, elements):\n    return hy_st.lists(elements=elements, min_size=self._min_items, max_size=self._max_items, unique=self._unique_items)", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def finalize_options(self):\n    TestCommand.finalize_options(self)\n    self.test_args = ['-v', '-epy']\n    self.test_suite = True", "buggy_source_code": "def finalize_options(self):\n    test.finalize_options(self)\n    self.test_args = ['-v', '-epy']\n    self.test_suite = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def Start(self, p_pyhouses_obj):\n    _x = LircConnection(p_pyhouses_obj)\n    self.start_AMP(p_pyhouses_obj)", "buggy_source_code": "def Start(self, p_pyhouses_obj):\n    self.start_lirc_connect(p_pyhouses_obj)\n    self.start_AMP(p_pyhouses_obj)", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef full_id(self):\n    return '[' + self.suite_name + '][' + self.id + '][np=' + str(self.nprocs) + ']'", "buggy_source_code": "@property\ndef full_id(self):\n    return '[%s][%s][np=%s]' % (self.suite_name, self.id, self.nprocs)", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef is_dev(self):\n    return not re.search('[a-zA-Z]', self.required_version) is None", "buggy_source_code": "@property\ndef is_dev(self):\n    return not re.search('a|b|rc|dev', self.required_version) is None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def has_prefix(self, prefix):\n    assert (prefix, 'cannot call with empty prefix')\n    return is_prefix(prefix, self.view.file_name())", "buggy_source_code": "def has_prefix(self, prefix):\n    assert prefix, 'cannot call with empty prefix'\n    return is_prefix(prefix, self.view.file_name())", "edit_actions": ["move-tree", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def started(self, settings):\n    logging.info('Feedretriever.started %s', settings)\n    self.saver.read(lambda server, channel, message: self.privmsg(server, channel, message))", "buggy_source_code": "def started(self, settings):\n    logging.info('Feedretriever.started %s', settings)\n    self.saver.read(lambda server, channel, message: self.on_pubmsg(server, None, channel, message))", "edit_actions": ["update-node", "insert-node"]}
{"fixed_source_code": "def to_algebraic(numeric_index):\n    try:\n        return NUMERICAL_TO_ALGEBRAIC[numeric_index]\n    except IndexError:\n        return index", "buggy_source_code": "def to_algebraic(numeric_index):\n    try:\n        return NUMERICAL_TO_ALGEBRAIC[numeric_index]\n    except IndexError:\n        return numeric_index", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_search_text(self):\n    text = 'Vienna is the capital of Austria, Berlin is the capital of Germany. Linz also is in Austria'\n    result = self.client.search_text(self.PROFILE_NAME, lang='en', text=text)\n    assert len(result) == 5", "buggy_source_code": "def test_search_text(self):\n    text = 'Vienna is the capital of Austria, Berlin is the capital of Germany. Linz also is in Austria'\n    result = self.client.search_text(self.PROFILE_NAME, lang='en', text=text)\n    assert len(result) == 6", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, checker=isdir, **kwargs):\n    super(ConfigFile, self).__init__(checker=checker, **kwargs)", "buggy_source_code": "def __init__(self, checker=isdir, **kwargs):\n    super(ConfigDir, self).__init__(checker=checker, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@unittest.skipUnless(haveResource(), 'resource not available')\ndef testClassLeak(self):\n\n    def classFunc():\n        cls = jpype.JClass('java.lang.String')\n    runLeakChecker(classFunc, 5000)", "buggy_source_code": "@unittest.skipUnless(haveResource(), 'resource not available')\ndef testClassLeak(self):\n\n    def classFunc():\n        cls = jpype.JClass('java.lang.String')\n    self.assertNotLeaky(classFunc)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def make_transit_time_callback(self, speed_kmph=10):\n\n    def tranit_time_return(a, b):\n        return self.distmat[a][b] / (speed_kmph * 1.0 / 60 ** 2)\n    return tranit_time_return", "buggy_source_code": "def make_transit_time_callback(self, speed_kmph=10):\n\n    def transit_time_return(a, b):\n        return self.distmat[a][b] / (speed_kmph * 1.0 / 60 ** 2)\n    return transit_time_return", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@raises(RequestError)\ndef test_request_error():\n    try:\n        raise RequestError('Your request is wrong fool!')\n    except RequestError as error:\n        assert_equals(\"'Your request is wrong fool!'\", str(error))\n    raise GatewayError('Your request is wrong fool!')", "buggy_source_code": "@raises(RequestError)\ndef test_request_error():\n    try:\n        raise RequestError('Your request is wrong fool!')\n    except RequestError as error:\n        assert_equals(\"'Your request is wrong fool!'\", str(error))\n    raise RequestError('Your request is wrong fool!')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def deleteMedium(self, medium):\n    return self._media(medium).delete()", "buggy_source_code": "def deleteMedium(self, medium):\n    return self._medium(medium).delete()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getMedium(self, medium, history=False):\n    params = {'history': 'on' if history else 'off'}\n    return self._media(medium).get(params=params)", "buggy_source_code": "def getMedium(self, medium, history=False):\n    params = {'history': 'on' if history else 'off'}\n    return self._medium(medium).get(params=params)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def streamMedium(self, medium, format=None):\n    if format is None:\n        format = 'video'\n    return self._media(medium).get(format)", "buggy_source_code": "def streamMedium(self, medium, format=None):\n    if format is None:\n        format = 'video'\n    return self._medium(medium).get(format)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def createMedia(self, corpus, media, returns_id=False):\n    result = self._corpus(corpus).media.post(data=media)\n    return self._id(result) if returns_id else result", "buggy_source_code": "def createMedia(self, corpus, media, returns_id=False):\n    result = self._corpus(corpus).medium.post(data=media)\n    return self._id(result) if returns_id else result", "edit_actions": ["update-node"]}
{"fixed_source_code": "def new_array_with_strings(self, strings):\n    values = [self.new_string(s) for s in strings]\n    return Array.from_objects(values)", "buggy_source_code": "@staticmethod\ndef new_array_with_strings(strings):\n    values = [Universe.new_string(s) for s in strings]\n    return Array.from_objects(values)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def new_array_with_length(self, length):\n    return Array.from_size(length)", "buggy_source_code": "@staticmethod\ndef new_array_with_length(length):\n    return Array.from_size(length)", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def move(self, toFolder):\n    return self.chomik.move_file(self, toFolder)", "buggy_source_code": "def move(self, to_folder):\n    return self.chomik.move_file(self, to_folder)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def iterator(self):\n    return iter(self._get_data_query())", "buggy_source_code": "def iterator(self):\n    return iter(self._get_ordered_query(None))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def new_loop_main(factory=None, _compat=None, **kwargs):\n    factory = factory or Base\n    instance = factory(**kwargs)\n    return compat_loop(compat) if _compat else instance", "buggy_source_code": "def new_loop_main(factory=None, _compat=None, **kwargs):\n    factory = factory or Base\n    instance = factory(**kwargs)\n    return compat_loop(instance) if _compat else instance", "edit_actions": ["update-node"]}
{"fixed_source_code": "def addDomain(self, domain):\n    self.cursor.execute('CREATE TABLE IF NOT EXISTS %s(key TEXT, value TEXT);' % domain)", "buggy_source_code": "def addDomain(self, domain):\n    self._execute('CREATE TABLE IF NOT EXISTS %s(key TEXT, value TEXT);' % domain)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def getValue(self, domain, key):\n    data = self.cursor.execute('SELECT * from %s where key=?;' % domain, [key])\n    for row in data:\n        return row[1]", "buggy_source_code": "def getValue(self, domain, key):\n    data = self._execute('SELECT * from %s where key=?;' % domain, [key])\n    for row in data:\n        return row[1]", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delDomain(self, domain):\n    self.cursor.execute('DROP TABLE IF EXISTS %s;' % domain)", "buggy_source_code": "def delDomain(self, domain):\n    self._execute('DROP TABLE IF EXISTS %s;' % domain)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_tag_name(payload):\n    return payload['ref'].lstrip('refs/tags/')", "buggy_source_code": "def get_tag_name(payload):\n    return payload['ref'].replace('refs/tags/', '')", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def get_branch_name(payload):\n    return payload['ref'].lstrip('refs/heads/')", "buggy_source_code": "def get_branch_name(payload):\n    return payload['ref'].replace('refs/heads/', '')", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def test_guestrecipe(self):\n    self.assert_valid('\\n            <job>\\n                <recipeSet retention_tag=\"scratch\">\\n                    <recipe>\\n                        <autopick random=\"True\"/>\\n                        <guestrecipe guestname=\"asdf\" guestargs=\"--lol\">\\n                            <distroRequires>\\n                                <distro_name op=\"=\" value=\"BlueShoeLinux5-5\"/>\\n                            </distroRequires>\\n                            <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                        </guestrecipe>\\n                        <distroRequires>\\n                            <distro_name op=\"=\" value=\"BlueShoeLinux5-5\"/>\\n                        </distroRequires>\\n                        <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                    </recipe>\\n                </recipeSet>\\n            </job>\\n            ')", "buggy_source_code": "def test_guestrecipe(self):\n    self.assert_valid('\\n            <job>\\n                <recipeSet retention_tag=\"scratch\">\\n                    <recipe>\\n                        <guestrecipe guestname=\"asdf\" guestargs=\"--lol\">\\n                            <distroRequires>\\n                                <distro_name op=\"=\" value=\"BlueShoeLinux5-5\"/>\\n                            </distroRequires>\\n                            <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                        </guestrecipe>\\n                        <distroRequires>\\n                            <distro_name op=\"=\" value=\"BlueShoeLinux5-5\"/>\\n                        </distroRequires>\\n                        <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                    </recipe>\\n                </recipeSet>\\n            </job>\\n            ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_duplicate_elements(self):\n    self.assert_not_valid('\\n            <job>\\n                <recipeSet retention_tag=\"scratch\">\\n                    <recipe kernel_options=\"\" kernel_options_post=\"\" ks_meta=\"\" role=\"None\" whiteboard=\"\">\\n                        <autopick random=\"True\"/>\\n                        <autopick random=\"False\"/>\\n                        <watchdog panic=\"None\"/>\\n                        <watchdog panic=\"always\"/>\\n                        <packages/>\\n                        <packages/>\\n                        <ks_appends/>\\n                        <ks_appends/>\\n                        <repos/>\\n                        <repos/>\\n                        <distroRequires/>\\n                        <hostRequires/>\\n                        <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                    </recipe>\\n                </recipeSet>\\n            </job>\\n            ', ['Extra element watchdog in interleave', 'Invalid sequence in interleave', 'Element recipe failed to validate content', 'Element recipeSet failed to validate content'])", "buggy_source_code": "def test_duplicate_elements(self):\n    self.assert_not_valid('\\n            <job>\\n                <recipeSet retention_tag=\"scratch\">\\n                    <recipe kernel_options=\"\" kernel_options_post=\"\" ks_meta=\"\" role=\"None\" whiteboard=\"\">\\n                        <autopick random=\"true\"/>\\n                        <autopick random=\"false\"/>\\n                        <watchdog panic=\"None\"/>\\n                        <watchdog panic=\"always\"/>\\n                        <packages/>\\n                        <packages/>\\n                        <ks_appends/>\\n                        <ks_appends/>\\n                        <repos/>\\n                        <repos/>\\n                        <distroRequires/>\\n                        <hostRequires/>\\n                        <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                    </recipe>\\n                </recipeSet>\\n            </job>\\n            ', ['Extra element autopick in interleave', 'Invalid sequence in interleave', 'Element recipe failed to validate content', 'Element recipeSet failed to validate content'])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_recipe_elements_in_different_order(self):\n    self.assert_valid('\\n            <job>\\n                <recipeSet retention_tag=\"scratch\">\\n                    <recipe kernel_options=\"\" kernel_options_post=\"\" ks_meta=\"\" role=\"None\" whiteboard=\"\">\\n                        <partitions/>\\n                        <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                        <repos/>\\n                        <ks_appends/>\\n                        <hostRequires>\\n                            <system_type value=\"Machine\"/>\\n                        </hostRequires>\\n                        <task name=\"/distribution/reservesys\" role=\"STANDALONE\"/>\\n                        <packages/>\\n                        <autopick random=\"False\"/>\\n                        <distroRequires>\\n                            <distro_name op=\"=\" value=\"BlueShoeLinux5-5\"/>\\n                        </distroRequires>\\n                        <watchdog panic=\"None\"/>\\n                    </recipe>\\n                </recipeSet>\\n            </job>\\n            ')", "buggy_source_code": "def test_recipe_elements_in_different_order(self):\n    self.assert_valid('\\n            <job>\\n                <recipeSet retention_tag=\"scratch\">\\n                    <recipe kernel_options=\"\" kernel_options_post=\"\" ks_meta=\"\" role=\"None\" whiteboard=\"\">\\n                        <partitions/>\\n                        <task name=\"/distribution/install\" role=\"STANDALONE\"/>\\n                        <repos/>\\n                        <ks_appends/>\\n                        <hostRequires>\\n                            <system_type value=\"Machine\"/>\\n                        </hostRequires>\\n                        <task name=\"/distribution/reservesys\" role=\"STANDALONE\"/>\\n                        <packages/>\\n                        <autopick random=\"false\"/>\\n                        <distroRequires>\\n                            <distro_name op=\"=\" value=\"BlueShoeLinux5-5\"/>\\n                        </distroRequires>\\n                        <watchdog panic=\"None\"/>\\n                    </recipe>\\n                </recipeSet>\\n            </job>\\n            ')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_variables_by_table(self):\n    query = \"SELECT table_catalog, table_schema, table_name, column_name, data_type, is_generated, is_updatable FROM information_schema.columns where table_schema = 'public';\"\n    return self.get_regular_cursor_query(query)", "buggy_source_code": "def get_variables_by_table(self):\n    query = \"SELECT table_catalog, table_schema, table_name, column_name, data_type, is_generated, is_updatable FROM information_schema.columns where table_schema = 'public';\"\n    return pd.read_sql_query(sa.text(query), self.conn)", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def opt(self, subparsers):\n    return subparsers.add_parser('list', help='Lists commands')", "buggy_source_code": "def opt(self, subparsers):\n    return subparsers.add_parser(self.ORATOR_CMD, help='Lists commands')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def test_add_library(self):\n    assert_equals(self.cache._keys, [('lib', ['a1', 'a2']), 'res'])\n    assert_equals(self.cache._libs, ['Library', 'Resource'])", "buggy_source_code": "def test_add_library(self):\n    assert_equals(self.cache._keys, [['lib', ['a1', 'a2']], 'res'])\n    assert_equals(self.cache._items, ['Library', 'Resource'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setUp(self):\n    self.cache = _LibraryCache()\n    self.cache['lib', ['a1', 'a2']] = 'Library'\n    self.cache['res'] = 'Resource'", "buggy_source_code": "def setUp(self):\n    self.cache = ImportCache()\n    self.cache['lib', ['a1', 'a2']] = 'Library'\n    self.cache['res'] = 'Resource'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _serialize_ev_common_ctx_func_params_str(self, stream_type):\n    return self._proto_params_str(stream_type.event_common_context_field_type, _RootFtPrefixes.SEC)", "buggy_source_code": "def _serialize_ev_common_ctx_func_params_str(self, stream_type):\n    return self._proto_params_str(stream_type.event_common_context_field_type, _RootFtPrefixes.ECC)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_sniff_output_type(self, outputstitcherdata):\n    logger.info('test `_sniff_output_type()`')\n    (outputstitcher, expected_output) = outputstitcherdata\n    output_type = outputstitcher._sniff_output_type()\n    assert output_type == expected_output['type']", "buggy_source_code": "def test_sniff_output_type(self, outputstitcherdata):\n    (outputstitcher, _, out_type) = outputstitcherdata\n    logger.info('test `_sniff_output_type()`')\n    output_type = outputstitcher._sniff_output_type()\n    assert output_type == out_type", "edit_actions": ["move-tree", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def handle(self, message):\n    message = self.parse(message)\n    _LOGGER.warning('Incoming Telegram: %s', message)\n    self._hass.bus.fire(EVENT_INCOMING_BOT_MESSAGE, message)", "buggy_source_code": "def handle(self, message):\n    message = self.parse(message)\n    _LOGGER.debug('Incoming Telegram: %s', message)\n    self._hass.bus.fire(EVENT_INCOMING_BOT_MESSAGE, message)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Invalid {0} hash for {1}:\\nAccording to the control file the {0} hash should be {2},\\nbut {1} has {3}.\\n\\nIf you did not include {1} in you upload, a different version\\nmight already be known to the archive software.'.format(self.hash_name, self.filename, self.expected, self.actual)", "buggy_source_code": "def __str__(self):\n    return 'Invalid {0} hash for {1}:\\nAccording to the control file the {0} hash should be {2},\\nbut {1} has {3}.\\n\\nIf you did not include {1} in your upload, a different version\\nmight already be known to the archive software.'.format(self.hash_name, self.filename, self.expected, self.actual)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def output(self):\n    return luigi.LocalTarget(path=self.path(ext='ldj'), format=Gzip)", "buggy_source_code": "def output(self):\n    return luigi.LocalTarget(path=self.path(ext='ldj.gz'), format=Gzip)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def randomize_time():\n    return random.randint(1, 7)", "buggy_source_code": "def randomize_time():\n    return random.randint(1, 2)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, module='ucg', server=None, port=None):\n    super().__init__(module, server, port)", "buggy_source_code": "def __init__(self, module='network', server=None, port=None):\n    super().__init__(module, server, port)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def initialize_options(self):\n    TestCommand.initialize_options(self)\n    self.pytest_args = ['-rx', 'tests', '--cov={{cookiecutter.app_name}}/', '--cov-report=term-missing']", "buggy_source_code": "def initialize_options(self):\n    TestCommand.initialize_options(self)\n    self.pytest_args = ['-rx', '-vv', 'tests/', '--cov={{cookiecutter.app_name}}/', '--cov-report=term-missing']", "edit_actions": ["insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __init__(self, table, row):\n    for i in row:\n        self._validate(i)\n    super().__init__(table, row)", "buggy_source_code": "def __init__(self, table, row):\n    for i in row:\n        self.validate(i)\n    super().__init__(table, row)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _test_shelve_adapter(self):\n    assert os.path.exists(self.sheet.db)", "buggy_source_code": "def _test_shelve_adapter(self):\n    assert os.path.exists(self.book.db)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture\ndef neigh():\n    return Neighbors(AnnData(np.array(X)))", "buggy_source_code": "@pytest.fixture\ndef neigh() -> Neighbors:\n    return get_neighbors()", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def gen_variable_less(org):\n    if org.selected_theme == 'default':\n        return ''\n    else:\n        return static('css/{}/variable.less'.format(org.selected_theme))", "buggy_source_code": "def gen_variable_less(org):\n    if org.selected_theme == 'default':\n        return ''\n    else:\n        return static('css/{}/variables.less'.format(org.selected_theme))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _convert_timestamp(in_date):\n    in_date = int(in_date.replace('/Date(', '').replace(')/', '')) / 1000\n    return _format_date(datetime.utcfromtimestamp(in_date))", "buggy_source_code": "def _convert_timestamp(in_date):\n    in_date = int(in_date.replace('/Date(', '').replace(')/', '')) / 1000.0\n    return _format_date(datetime.utcfromtimestamp(in_date))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef _frozen_cash_of_order(order):\n    if order.position_effect == POSITION_EFFECT.OPEN:\n        return margin_of(order.order_book_id, order.quantity, order.frozen_price)\n    else:\n        return 0", "buggy_source_code": "@staticmethod\ndef _frozen_cash_of_order(order):\n    if order.position_effect == POSITION_EFFECT.OPEN:\n        return margin_of(order.order_book_id, order.unfilled_quantity, order.frozen_price)\n    else:\n        return 0", "edit_actions": ["update-node"]}
{"fixed_source_code": "def version(self):\n    cmd = '{} --version'.format(self.__executable)\n    return subprocess.check_output(cmd, shell=True).decode('UTF-8')", "buggy_source_code": "@property\ndef version(self):\n    cmd = '{} -version'.format(self.__executable)\n    output = subprocess.check_output(cmd, shell=True)\n    return output.decode('UTF-8').strip()", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def items(self):\n    return self.comments_class.objects.filter(**self._get_lookup_kwargs())", "buggy_source_code": "def items(self):\n    return self.comments_class.objects.filter(site__pk=settings.SITE_ID, is_public=True)[:40]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def test_empty_id(self):\n    assert_report_item_list_equal(validate.ValueId('id').validate({'id': ''}), [fixture.error(report_codes.INVALID_ID_IS_EMPTY, id_description=None)])", "buggy_source_code": "def test_empty_id(self):\n    assert_report_item_list_equal(validate.ValueId('id').validate({'id': ''}), [fixture.error(reports.codes.INVALID_ID_IS_EMPTY, id_description=None)])", "edit_actions": ["update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def migrate70(self):\n    cu = self.db.cursor()\n    cu.execute('\\n            UPDATE TABLE \"inventory_system\" \\n                 ADD COLUMN \"source_image_id\" INTEGER \\n                     REFERENCES \"builds\" (\"buildid\")\\n                     ON DELETE CASCADE\\n        ')\n    return True", "buggy_source_code": "def migrate70(self):\n    cu = self.db.cursor()\n    cu.execute('\\n            ALTER TABLE \"inventory_system\" \\n                 ADD COLUMN \"source_image_id\" INTEGER \\n                     REFERENCES \"builds\" (\"buildid\")\\n                     ON DELETE CASCADE\\n        ')\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def remove_container(self):\n    os.system('docker rm -f vault_for_buildbot')", "buggy_source_code": "def remove_container(self):\n    subprocess.call(['docker', 'rm', '-f', 'vault_for_buildbot'])", "edit_actions": ["update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "def test_Struct250(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct250(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum or Bignum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct400(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of uchar')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uchar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -1\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct400(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum or Bignum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct460(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'schar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -128\\nprint(foo.bar)\\n', '-128')", "buggy_source_code": "def test_Struct460(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'float, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 3.14\\nprint(foo.bar)\\n', '3.14')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct230(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 2147483647\\nprint(foo.bar)\\n', '2147483647')", "buggy_source_code": "def test_Struct230(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 4294967295\\nprint(foo.bar)\\n', '4294967295')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct220(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -2147483648\\nprint(foo.bar)\\n', '-2147483648')", "buggy_source_code": "def test_Struct220(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 0\\nprint(foo.bar)\\n', '0')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct420(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uchar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 255\\nprint(foo.bar)\\n', '255')", "buggy_source_code": "def test_Struct420(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -9223372036854775808\\nprint(foo.bar)\\n', '-9223372036854775808')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct240(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of int32')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 2147483648\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct240(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be less or equal 4294967295, not 4294967296')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 4294967296\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct270(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 0\\nprint(foo.bar)\\n', '0')", "buggy_source_code": "def test_Struct270(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -2147483648\\nprint(foo.bar)\\n', '-2147483648')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct320(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -9223372036854775808\\nprint(foo.bar)\\n', '-9223372036854775808')", "buggy_source_code": "def test_Struct320(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -2147483648\\nprint(foo.bar)\\n', '-2147483648')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct440(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uchar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct440(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be less or equal 9223372036854775807, not 9223372036854775808')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 9223372036854775808\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct290(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of uint64')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 18446744073709551616\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct290(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be less or equal 2147483647, not 2147483648')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 2147483648\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct310(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of int64')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -9223372036854775809\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct310(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be greater or equal -2147483648, not -2147483649')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -2147483649\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct330(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 9223372036854775807\\nprint(foo.bar)\\n', '9223372036854775807')", "buggy_source_code": "def test_Struct330(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 2147483647\\nprint(foo.bar)\\n', '2147483647')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct390(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Float, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'double, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct390(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be less or equal 18446744073709551615, not 18446744073709551616')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 18446744073709551616\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct300(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct300(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum or Bignum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct280(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 18446744073709551615\\nprint(foo.bar)\\n', '18446744073709551615')", "buggy_source_code": "def test_Struct280(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 2147483647\\nprint(foo.bar)\\n', '2147483647')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct490(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'schar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct490(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Float, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'double, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct340(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of int64')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 9223372036854775808\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct340(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be less or equal 2147483647, not 2147483648')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 2147483648\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct450(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of schar')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'schar, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -129\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct450(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum or Bignum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct10(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of uint8')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint8, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -1\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct10(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be greater or equal zero, not -1')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint8, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -1\\n', stderr=test_stderr)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_Struct210(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of int32')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -2147483649\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct210(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be greater or equal zero, not -1')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -1\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct380(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'double, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 3.14\\nprint(foo.bar)\\n', '3.14')", "buggy_source_code": "def test_Struct380(self):\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = 18446744073709551615\\nprint(foo.bar)\\n', '18446744073709551615')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct260(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value exceeds range of uint64')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'uint64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -1\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct260(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('ValueError: Value must be greater or equal -2147483648, not -2147483649')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = -2147483649\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_Struct350(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int64, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "buggy_source_code": "def test_Struct350(self):\n\n    def test_stderr(stderr):\n        assert 0 < stderr.find('TypeError: Value must be Fixnum or Bignum, not String')\n    self._test('\\nFoo = StructClass.new(\"Foo\", [[\\'int32, \\'bar]])\\nfoo = Foo.new()\\nfoo.bar = \"baz\"\\n', stderr=test_stderr)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def main(event, context):\n    for url in r.smembers(redis_set):\n        print('processing' + url)\n        processRace(getPage(url), url)", "buggy_source_code": "def main(event, context):\n    for url in r.smembers(redis_set):\n        print('processing ' + url)\n        processRace(getPage(url), url)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@method(name='Delete File')\ndef _delete_file(meth, afile):\n    meth.stages = 1\n    if not afile:\n        raise Exception('File is empty.')\n    _rm_file(afile)\n    return", "buggy_source_code": "@method(name='Delete File')\ndef _delete_file(meth, afile):\n    meth.stages = 1\n    if not afile:\n        raise Exception('Missing filename.')\n    _rm_file(afile)\n    return", "edit_actions": ["update-node"]}
{"fixed_source_code": "def update_vm_domain_in_db(self, uuid, new_domain):\n    self.cursor.execute('update parking set domain=? where uuid=?', (str(new_domain).replace('xmlns=\"archipel:hypervisor:vmparking\"', ''), uuid))\n    self.database.commit()", "buggy_source_code": "def update_vm_domain_in_db(self, uuid, new_domain):\n    self.database.execute('update parking set domain=? where uuid=?', (str(new_domain).replace('xmlns=\"archipel:hypervisor:vmparking\"', ''), uuid))\n    self.database.commit()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_vms_status(self, vm_informations):\n    self.cursor.executemany('update parking set status=:status, parker=:parker where uuid=:uuid', vm_informations)\n    self.database.commit()", "buggy_source_code": "def set_vms_status(self, vm_informations):\n    self.database.executemany('update parking set status=:status, parker=:parker where uuid=:uuid', vm_informations)\n    self.database.commit()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unregister_vms_from_db(self, vms_uuid):\n    self.cursor.executemany('delete from parking where uuid=:uuid', vms_uuid)\n    self.database.commit()", "buggy_source_code": "def unregister_vms_from_db(self, vms_uuid):\n    self.database.executemany('delete from parking where uuid=:uuid', vms_uuid)\n    self.database.commit()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def register_vms_into_db(self, vm_informations):\n    self.cursor.executemany('insert into parking values(:uuid, :parker, :creation_date, :domain, :status)', vm_informations)\n    self.database.commit()", "buggy_source_code": "def register_vms_into_db(self, vm_informations):\n    self.database.executemany('insert into parking values(:uuid, :parker, :creation_date, :domain, :status)', vm_informations)\n    self.database.commit()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def disable_device(self, id):\n    if not self._api_get('turnon', id):\n        logging.warning('Could not turnoff device %s' % id)\n        return False\n    return True", "buggy_source_code": "def disable_device(self, id):\n    if not self._api_get('turnoff', id):\n        logging.warning('Could not turnoff device %s' % id)\n        return False\n    return True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_bind():\n    fakemodel = object()\n    f = dibble.fields.Field()\n    bound = f.bind(name='foo', model=fakemodel)\n    assert bound.model is fakemodel", "buggy_source_code": "def test_bind():\n    fakemodel = FakeModel()\n    f = dibble.fields.Field()\n    bound = f.bind(name='foo', model=fakemodel)\n    assert bound.model is fakemodel", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_algorithm(self):\n    hashed_password = self.pw.hash_password('password', self.pw.salt())\n    self.assertEqual(SHA1PasswordHasher.algorithm, PasswordHasher.get_algorithm(hashed_password))", "buggy_source_code": "def test_algorithm(self):\n    hashed_password = self.pw.hash_password('password', self.pw.salt())\n    self.assertEqual(MD5PasswordHasher.algorithm, PasswordHasher.get_algorithm(hashed_password))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setup(self):\n    self.add_cmd_output('monit status')\n    self.add_copy_spec([self.monit_log, self.monit_conf])", "buggy_source_code": "def setup(self):\n    self.add_cmd_output('monit status')\n    self.add_copy_spec(self.monit_log + self.monit_conf)", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def getCurrentEvent(self):\n    return self.event", "buggy_source_code": "def getCurrentEvent(self):\n    return self.evt", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, timer=None):\n    Source.__init__(self)\n    GUIComponent.__init__(self)\n    VariableText.__init__(self)\n    self.event = None", "buggy_source_code": "def __init__(self):\n    Source.__init__(self)\n    GUIComponent.__init__(self)\n    VariableText.__init__(self)\n    self.evt = None", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_raises_ADSBibtexConfigError_if_yaml_missing(self):\n    document_list = ['cache_length: 24', '2006AGUSM.A21A..06T # no name\\n']\n    with self.assertRaises(adsbibtex.ADSBibtexConfigError):\n        adsbibtex.parse_config_file(document_list)", "buggy_source_code": "def test_raises_ADSBibtexConfigError_if_yaml_missing(self):\n    document_list = ['cache_length: 24', '2006AGUSM.A21A..06T # no name\\n']\n    with self.assertRaises(adsbibtex_exceptions.ADSBibtexConfigError):\n        adsbibtex.parse_config_file(document_list)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_raises_ADSBibtexConfigError_if_empty(self):\n    document_list = []\n    with self.assertRaises(adsbibtex.ADSBibtexConfigError):\n        adsbibtex.parse_config_file(document_list)", "buggy_source_code": "def test_raises_ADSBibtexConfigError_if_empty(self):\n    document_list = []\n    with self.assertRaises(adsbibtex_exceptions.ADSBibtexConfigError):\n        adsbibtex.parse_config_file(document_list)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main():\n    syscall_names_list = parse_syscall_names_list()\n    syscall_definitions_list = get_syscall_definitions_list(syscall_names_list)\n    pickle_syscall_definitions(syscall_definitions_list)", "buggy_source_code": "def main():\n    syscall_names_list = parse_syscall_names_list()\n    syscall_definitions_list = get_syscall_definitions_list(syscall_names_list)\n    print_definitions1(syscall_definitions_list)\n    print_definitions2(syscall_definitions_list)\n    print_definitions3(syscall_definitions_list)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "@staticmethod\ndef remove_empty_wavs(self, dataset_to_fix):\n    empty_files = validation.Validator.get_files_empty(dataset_to_fix)\n    dataset_to_fix.remove_wavs(empty_files, remove_files=True)\n    dataset_to_fix.save()", "buggy_source_code": "@staticmethod\ndef remove_empty_wavs(dataset_to_fix):\n    empty_files = validation.Validator.get_files_empty(dataset_to_fix)\n    dataset_to_fix.remove_files(empty_files, delete_files=True)\n    dataset_to_fix.save()", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef remove_files_missing(self, dataset_to_fix):\n    files_missing = validation.Validator.get_files_missing(dataset_to_fix)\n    dataset_to_fix.remove_wavs(files_missing, remove_files=False)\n    dataset_to_fix.save()", "buggy_source_code": "@staticmethod\ndef remove_files_missing(dataset_to_fix):\n    files_missing = validation.Validator.get_files_missing(dataset_to_fix)\n    dataset_to_fix.remove_files(files_missing, delete_files=False)\n    dataset_to_fix.save()", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_generates_uebercert_in_cp(self):\n    self.action.run()\n    self.action.api.generate_uebercert.assert_called_once_with(self.NAME)", "buggy_source_code": "def test_generates_uebercert_in_cp(self):\n    self.action.run()\n    self.action.api.uebercert.assert_called_once_with(self.NAME)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_global_register_value(self, name):\n    self.global_registers[name]['value']", "buggy_source_code": "def get_global_register_value(self, name):\n    return self.global_registers[name]['value']", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def test_selection_widget_1(self):\n    html = normalize(SelectionWidget(self.plot1, display_options={'figure_format': 'png'})())\n    self.assertEqual(digest_data(html), '6667a7894be9a17b7f6dfb1623d106fc284f0ca4dcfe6150efa0440dce30e2e5')", "buggy_source_code": "def test_selection_widget_1(self):\n    html = normalize(SelectionWidget(self.plot1, display_options={'figure_format': 'png'})())\n    self.assertEqual(digest_data(html), '4411add0519115714bf45f3dfcd033a8cd81ed77aca42e627275a34e9206b65e')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_selection_widget_2(self):\n    html = normalize(SelectionWidget(self.plot2, display_options={'figure_format': 'png'})())\n    self.assertEqual(digest_data(html), '11868367e0d46a2508f3c98ce623da60e210e723afea5155255880d0c85ddd7b')", "buggy_source_code": "def test_selection_widget_2(self):\n    html = normalize(SelectionWidget(self.plot2, display_options={'figure_format': 'png'})())\n    self.assertEqual(digest_data(html), 'ecee5f1a12d42242290c40c44a405a3a25e43449dd2e4a43c9f63195a637ca60')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def interrupt_cb(self, msg):\n    rospy.loginfo('Dock behaviour got interrupt from button')\n    self.interrupted = True\n    self.docking_client.cancel_goal()\n    self.moving_client.cancel_goal()", "buggy_source_code": "def interrupt_cb(self, msg):\n    rospy.logdebug('Dock behaviour got interrupt from button')\n    self.interrupted = True\n    self.docking_client.cancel_goal()\n    self.moving_client.cancel_goal()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_connection_close(self):\n    if hasattr(self.__method, 'on_connection_close'):\n        self.__method.on_connection_close(self)\n    self.on_finish()", "buggy_source_code": "def on_connection_close(self):\n    for method in self.__active_methods:\n        if hasattr(method, 'on_connection_close'):\n            method.on_connection_close(self)\n    self.on_finish()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, time):\n    self.seconds = self._convert_to_seconds(time)", "buggy_source_code": "def __init__(self, time):\n    self.seconds = self._convert_time_to_seconds(time)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, date, input_format=None):\n    self.seconds = self._convert_to_seconds(date, input_format)", "buggy_source_code": "def __init__(self, date, input_format=None):\n    self.seconds = self._convert_date_to_seconds(date, input_format)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@permission.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('post.post_page'))", "buggy_source_code": "@permission.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('post.post_paginate'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get(key):\n    return nbd.Key(urlsafe=key).get()", "buggy_source_code": "def get(key):\n    return ndb.Key(urlsafe=key).get()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __unicode__(self):\n    return self.fullname", "buggy_source_code": "def __unicode__(self):\n    return self.localname()", "edit_actions": ["insert-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    return self.cmd + ' ' + ' '.join(self.args)", "buggy_source_code": "def __str__(self):\n    return ' '.join([self.cmd] + self.args)", "edit_actions": ["move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def hash_get(self, key, field):\n    self.redis.hget(key, field)", "buggy_source_code": "def hash_get(self, key, field):\n    return self.redis.hget(key, field)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def plot_optimized(self):\n    raise NotImplementedError('plot_optimized(self)')", "buggy_source_code": "def plot_optimized(self):\n    self._subplot(self.opt_params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def plot_estimated(self):\n    raise NotImplementedError('plot_estimated(self)')", "buggy_source_code": "def plot_estimated(self):\n    self._subplot(self.guess_params)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _wrap_dict(d):\n    from textwrap import wrap\n    return ('\\n' + ' ' * 8).join(wrap(d, width=120))", "buggy_source_code": "def _wrap_dict(d):\n    from pprint import pformat\n    return ('\\n' + ' ' * 8).join(pformat(d, width=80).split('\\n'))", "edit_actions": ["update-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def __init__(self):\n    PyArena.__init__(self)\n    self.playing = False\n    self.bot_keys = {}\n    self.waiting_on = None\n    self.action_callback = None\n    self.started_waiting = None", "buggy_source_code": "def __init__(self):\n    PyArena.__init__(self)\n    self.playing = False\n    self.bot_keys = {}\n    self.waiting_on = None\n    self.action_deferred = None\n    self.started_waiting = None", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_action(self, bot_name, callback):\n    self.notify_bots_turn(bot_name)\n    self.waiting_on = bot_name\n    self.action_callback = callback\n    self.started_waiting = time.clock()\n    twisted_log.msg('RUNNING ASYNC GET_ACTION')", "buggy_source_code": "def get_action(self, bot_name, deferred):\n    self.notify_bots_turn(bot_name)\n    self.waiting_on = bot_name\n    self.action_deferred = deferred\n    self.started_waiting = time.clock()", "edit_actions": ["move-tree", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_writer(prefix, config, db):\n    writer = get_metadata_formats(prefix)\n    return writer(prefix, config, db)", "buggy_source_code": "def get_writer(prefix, config, db):\n    writer = get_metadata_format(prefix)\n    return writer(prefix, config, db)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def check(self, result, expect):\n    self.assertEquals(result, expect, 'Expected:\\n%s\\nbut got:\\n%s' % (self.show(result), self.show(expect)))", "buggy_source_code": "def check(self, result, expect):\n    self.assertEquals(result, expect, 'expected:\\n%s\\nbut got:\\n%s' % (self.show(expect), self.show(result)))", "edit_actions": ["update-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def parse_wps_description(wps):\n    description = '{0}: {1}'.format(wps.identification.title, wps.identification.abstract)\n    return description", "buggy_source_code": "def parse_wps_description(wps):\n    description = '%s: %s' % (wps.identification.title, wps.identification.abstract)\n    return description", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def setTransient(self, state):\n    if type(state) != bool:\n        raise Exception('(Key) setTransient, expected a bool type as state, got <' + str(type(state)) + '>')\n    self.transient = state", "buggy_source_code": "def setTransient(self, state):\n    if type(state) != bool:\n        raise Exception(\"(Key) setTransient, expected a bool type as state, got '\" + str(type(state)) + \"'\")\n    self.transient = state", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def getNextOutputChainId(self):\n    self.max_input_chainid += 1\n    return self.max_input_chainid", "buggy_source_code": "def getNextOutputChainId(self):\n    self.max_output_chainid += 1\n    return self.max_output_chainid", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef height(self):\n    return self.original_image.height", "buggy_source_code": "@cached_property\ndef height(self):\n    return Image.open(self.original_path).height", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node"]}
{"fixed_source_code": "@property\ndef width(self):\n    return self.original_image.width", "buggy_source_code": "@cached_property\ndef width(self):\n    return Image.open(self.original_path).width", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "update-node"]}
{"fixed_source_code": "@classmethod\ndef validate_interval(cls, interval, valid_options):\n    for option in valid_options:\n        if option in interval:\n            return option\n    return 'error'", "buggy_source_code": "@classmethod\ndef validate_interval(cls, interval, valid_options):\n    if interval is not None:\n        for option in valid_options:\n            if option in interval:\n                return option\n    return 'error'", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def parse_exclude_pattern(pattern_str, fallback=FnmatchPattern):\n    epattern_obj = parse_pattern(pattern_str, fallback)\n    return CmdTuple(epattern_obj, IECommand.Exclude)", "buggy_source_code": "def parse_exclude_pattern(pattern_str, fallback=FnmatchPattern):\n    epattern_obj = parse_pattern(pattern_str, fallback, recurse_dir=False)\n    return CmdTuple(epattern_obj, IECommand.ExcludeNoRecurse)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node"]}
{"fixed_source_code": "def common_error_template_args(app_config):\n    return {'activities_path': u'/', 'support_email': app_config.get('SUPPORT_EMAIL_ADDRESS', u'support@chimecms.org'), 'support_phone_number': app_config.get('SUPPORT_PHONE_NUMBER', u'(415) 794-8729')}", "buggy_source_code": "def common_error_template_args(app_config):\n    return {'activities_path': u'/', 'support_email': app_config.get('SUPPORT_EMAIL_ADDRESS', u'support@chimecms.org'), 'support_phone_number': app_config.get('SUPPORT_PHONE_NUMBER', u'(415) 555-1212')}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_author_on_replace(resource, items, original):\n    set_author_on_insert(resource, items)", "buggy_source_code": "def set_author_on_replace(resource, item, original):\n    set_author_on_insert(resource, [item])", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree"]}
{"fixed_source_code": "@extendable\ndef smsg_storage_equip(data):\n    netlog.info('SMSG_STORAGE_EQUIP {}'.format(data))\n    for item in data.items:\n        player_storage[item.index] = (item.id, 1)", "buggy_source_code": "@extendable\ndef smsg_storage_equip(data):\n    netlog.info('SMSG_STORAGE_EQUIP {}'.format(data))\n    for item in data.equipment:\n        player_storage[item.index] = (item.id, 1)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def close(self):\n    self.client.close()", "buggy_source_code": "def close(self):\n    self.socket.close()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def send_file_message(self, filename, printMessage=False):\n    data = self._readFile(filename)\n    if printMessage:\n        print(data)\n    self.socket.send(data)", "buggy_source_code": "def send_file_message(self, filename):\n    data = self._readFile(filename)\n    if self.debug:\n        print(data)\n    self.socket.send(data)", "edit_actions": ["insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def usage():\n    return '\\nturnitin runtests\\n   - runs tests\\n   \\nturnitin runtest testname\\n   - run a single named test\\n\\nturnitin showtests\\n   - show all available tests\\n\\nturnitin viewasnn siteid taskid\\n   - view the information for an assignment with taskid in the site\\n   \\n'", "buggy_source_code": "def usage():\n    return '\\nturnitin runtests\\n   - runs tests\\n   \\nturnitin runtest testname\\n   - run a single named test\\n\\nturnitin showtests\\n   - show all available tests\\n\\nturnitin viewasnn siteid taskid\\n   - view the information for an assignment with taskid in the site\\n   \\nturnitin processqueue\\nturnitin checkforreports\\n'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def check_state(self, joint):\n    return self.locking_state[joint]", "buggy_source_code": "def check_state(self, joint_idx):\n    return self.world.joints[joint_idx].is_locked()", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def curator(self):\n    return self.nsa.identity", "buggy_source_code": "def curator(self):\n    return self.provider_nsa.identity", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop(self):\n    if self.handle:\n        self.handle.cancel()\n    self.handle = self.future = self.croniter = None", "buggy_source_code": "def stop(self):\n    if self.handle is not None:\n        self.handle.cancel()\n    self.handle = self.future = self.croniter = None", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def reset_parameters(self):\n    self.a.weight[:] = 1.0\n    self.b.weight[:] = 0.0", "buggy_source_code": "def reset_parameters(self):\n    self.a.data[:] = 1.0\n    self.b.data[:] = 0.0", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def revoke(self, reason=None):\n    self.revoked = True\n    self.revoked_date = timezone.ow()\n    self.revoked_reason = reason\n    self.save()", "buggy_source_code": "def revoke(self, reason=None):\n    self.revoked = True\n    self.revoked_date = timezone.now()\n    self.revoked_reason = reason\n    self.save()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def retile_raster(self, cell_size, target_tile_size, buffer=0):\n    retiler = Retiler(self)\n    self.tiles = retiler.retile_raster(cell_size, original_tile_size, buffer)", "buggy_source_code": "def retile_raster(self, cell_size, target_tile_size, buffer=0):\n    retiler = Retiler(self)\n    self.tiles = retiler.retile_raster(cell_size, target_tile_size, buffer)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def install(**kwargs):\n    if 'notest' not in kvargs:\n        test()\n    local('python setup.py build')\n    local('sudo python setup.py install')", "buggy_source_code": "def install(**kwargs):\n    if 'notest' not in kwargs:\n        test()\n    local('python setup.py build')\n    local('sudo python setup.py install')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def layout(**kvwrgs):\n    options = ' '.join(['='.join(filter(None, i)) for i in kvargs.items()])\n    local('grep %s \\\\\\\\\\\\(^#\\\\ .*:$\\\\\\\\\\\\)\\\\\\\\\\\\|.*def\\\\ .* fabric.py|' % options + 'perl -p -e \"s/def /   def /\"')", "buggy_source_code": "def layout(**kvwrgs):\n    options = ' '.join(['='.join(filter(None, i)) for i in kwargs.items()])\n    local('grep %s \\\\\\\\\\\\(^#\\\\ .*:$\\\\\\\\\\\\)\\\\\\\\\\\\|.*def\\\\ .* fabric.py|' % options + 'perl -p -e \"s/def /   def /\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_activate(self):\n    self._active = True\n    self.visible = self.visible\n    return event.EVENT_HANDLED", "buggy_source_code": "def on_activate(self):\n    self._active = True\n    self.visible = self._active\n    return event.EVENT_HANDLED", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_deactivate(self):\n    self._active = False\n    self.visible = self.visible\n    return event.EVENT_HANDLED", "buggy_source_code": "def on_deactivate(self):\n    self._active = False\n    self.visible = self._active\n    return event.EVENT_HANDLED", "edit_actions": ["update-node"]}
{"fixed_source_code": "def slave_to_master(self, x):\n    x = x.replace(b'\\r', b'\\r\\n')\n    self._send_to_slave(x)\n    return x", "buggy_source_code": "def slave_to_master(self, data):\n    data = data.replace(b'\\r', b'\\r\\n')\n    self._send_to_slave(data)\n    return data", "edit_actions": ["update-node", "update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, queryset, empty_label, cache_choices):\n    (self.queryset, self.empty_label, self.cache_choices) = (queryset, empty_label, cache_choices)", "buggy_source_code": "def __init__(self, queryset, empty_label, cache_choices):\n    self.queryset = queryset\n    self.empty_label = empty_label\n    self.cache_choices = cache_choices", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_MLogRMin_predict_proba(self):\n    self.assertAlmostEqual(self.classifier.predict_proba(self.X_test)[0][0], 0.047083994898380166, delta=0.001)", "buggy_source_code": "def test_MLogRMin_predict_proba(self):\n    self.assertAlmostEqual(self.classifier.predict_proba(self.X_test)[0][0], 0.017049079187284634, delta=0.001)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unflag_field(self, move_x, move_y):\n    field_status = self.info_map[move_x, move_y]\n    if field_status == 9 or field_status == 10:\n        self.info_map[move_y, move_x] = 11", "buggy_source_code": "def unflag_field(self, move_x, move_y):\n    field_status = self.info_map[move_y, move_x]\n    if field_status == 9 or field_status == 10:\n        self.info_map[move_y, move_x] = 11", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def hash_object_id(object_id, factor):\n    num_id = string.split(object_id, '-')[-1]\n    num_id = num_id[-factor:]\n    return num_id.rjust(factor, '0')", "buggy_source_code": "def hash_object_id(object_id, factor):\n    num_id = object_id.split('-')[-1]\n    num_id = num_id[-factor:]\n    return num_id.rjust(factor, '0')", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def SetRange(self, range):\n    if range <= 0:\n        raise Exception('ERROR:\\n Gauge range must be greater than 0.')\n    self._range = range", "buggy_source_code": "def SetRange(self, range):\n    if range < 0:\n        raise Exception('ERROR:\\n Gauge range must be greater than 0. It was %.1f' % range)\n    self._range = range", "edit_actions": ["update-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def start(self):\n    self._request(self.address + '/api/latest/proxy/recording/start', method='POST')", "buggy_source_code": "def start(self):\n    self._request(self._get_url('/recording/start'), method='POST')", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def stop(self):\n    self._request(self.address + '/api/latest/proxy/recording/stop', method='POST')", "buggy_source_code": "def stop(self):\n    self._request(self._get_url('/recording/stop'), method='POST')", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_json(self):\n    response = self._request(self.address + '/api/latest/proxy/download?format=json', raw_result=True)\n    return response", "buggy_source_code": "def get_json(self):\n    response = self._request(self._get_url('/download?format=json'), raw_result=True)\n    return response", "edit_actions": ["insert-node", "move-tree", "move-tree", "insert-node", "update-node", "update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def to_slack_markdown(line):\n    if line.startswith('Versão'):\n        return '*%s*\\n' % line.replace('\\n', '')\n    return line.replace('-', '•').replace('\\n', '')", "buggy_source_code": "def to_slack_markdown(line):\n    if line.startswith('Version'):\n        return '*%s*\\n' % line.replace('\\n', '')\n    return line.replace('-', '•').replace('\\n', '')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def hasRemoteBranch(rep, remote, branch):\n    result = gitExec(rep, \"git branch -r | grep 'remotes/%(remote)s/%(branch)s'\" % locals())\n    return result != ''", "buggy_source_code": "def hasRemoteBranch(rep, remote, branch):\n    result = gitExec(rep, \"git branch -r | grep '%(remote)s/%(branch)s'\" % locals())\n    return result != ''", "edit_actions": ["update-node"]}
{"fixed_source_code": "def testThatParseReturnsAResultWithABankAccount(self):\n    ofx = OfxParser.parse(file('fixtures/bank_medium.ofx'))\n    self.assertTrue(ofx.bank_account != None)", "buggy_source_code": "def testThatParseReturnsAResultWithABankAccount(self):\n    ofx = OfxParser.parse(open_file('bank_medium.ofx'))\n    self.assertTrue(ofx.bank_account != None)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@asyncio.coroutine\ndef i2c_read8(self, address, register):\n    return self.smbus.read_byte_data(address, register)", "buggy_source_code": "@asyncio.coroutine\ndef i2c_read8(self, address, register):\n    return self.smbus.read_byte_data(int(address), int(register))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree"]}
{"fixed_source_code": "def setUp(self):\n    self.A = ahocorasick.Automaton()\n    self.words = 'word python aho corasick \\x00\\x00\\x00'.split()\n    self.inexisting = 'test foo bar dword'.split()", "buggy_source_code": "def setUp(self):\n    self.A = ahocorasick.Automaton()\n    self.words = b'word python aho corasick \\x00\\x00\\x00'.split()\n    self.inexisting = b'test foo bar dword'.split()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, engine, session_manager):\n    super(ProjectManager, self).__init__(engine, session_manager)\n    self.log_manager = None", "buggy_source_code": "def __init__(self, engine, session_manager):\n    super(ProjectManager, self).__init__(engine, session_manager)\n    self._log_manager_backup = self.session_manager.log_manager", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def newRow(self):\n    row = Sheet.newRow(self)\n    self.addedRows[s.rowid(row)] = row\n    return row", "buggy_source_code": "def newRow(self):\n    row = Sheet.newRow(self)\n    self.addedRows[self.rowid(row)] = row\n    return row", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_filepath_type(self):\n    self.assertEqual(get_count('qiita.filepath_type'), 23)", "buggy_source_code": "def test_filepath_type(self):\n    self.assertEqual(get_count('qiita.filepath_type'), 24)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def mission_is_over(self):\n    is_over = self.currentTimeNorm >= self.missionFinishNorm or self.exoplanetObsTime >= self.missionLife * self.missionPortion.to('day')\n    return is_over", "buggy_source_code": "def mission_is_over(self):\n    is_over = self.currentTimeNorm >= self.missionFinishNorm or self.exoplanetObsTime.to('day') >= self.missionLife.to('day') * self.missionPortion\n    return is_over", "edit_actions": ["move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def _insert_text_into_text(orig_text, index, _insert_text_into_text):\n    return '%s%s%s' % (orig_text[:index], _insert_text_into_text, orig_text[index:])", "buggy_source_code": "def _insert_text_into_text(orig_text, index, insert_text):\n    return '%s%s%s' % (orig_text[:index], insert_text, orig_text[index:])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def dV_dq_i(k_L, x_i, q_n, k, z_n, F_q_i):\n    return -k_L * (x_i - q_n) + k * (q_n - z_n)", "buggy_source_code": "def dV_dq_i(q_n, k_L, x_i, k, z_n, F_q_i):\n    return -k_L * (x_i - q_n) + k * (q_n - z_n)", "edit_actions": ["move-tree"]}
{"fixed_source_code": "@staticmethod\ndef _num_toks(y):\n    return np.prod(y.shape)", "buggy_source_code": "@staticmethod\ndef _num_toks(y):\n    return np.prod(get_shape_as_list(y))", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "async def length(self):\n    async with self.acquire() as conn:\n        return await conn.execute('llen', self._key)", "buggy_source_code": "async def length(self):\n    async with self.acquire() as conn:\n        return await conn.execute('llen', self.key)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def delete(self):\n    id = gl.GLuint(self.id)\n    glDeleteBuffers(1, id)", "buggy_source_code": "def delete(self):\n    id = GLuint(self.id)\n    glDeleteBuffers(1, id)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_dict(self):\n    dict_list = {}\n    for (key, val) in self.base_list.items():\n        dict_list[key] = val.get_dict()\n    return dict_list", "buggy_source_code": "def get_dict(self):\n    return {k: v.get_dict() for (k, v) in self.base_list.items()}", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_not_json(self):\n    with self.assertRaises(EventError) as context:\n        response = '0123456789'\n        self.ev_handler.process_json_response(response)\n    self.assertTrue('JSON response malformed.' in str(context.exception))", "buggy_source_code": "def test_not_json(self):\n    with self.assertRaises(EventError) as context:\n        response = '0123456789'\n        self.ev_handler.process_json_response(response)\n    self.assertTrue('Response malformed.' in str(context.exception))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef format_notification(body):\n    NOTIFICATION_TEMPLATE = Template('Build #{{build.number}} {{build.status}} for Job {{name}} ({{build.full_url}})\\nBased on {{build.scm.url}}/commit/{{build.scm.commit}} ({{build.scm.branch}})\\n')\n    return NOTIFICATION_TEMPLATE.render(body)", "buggy_source_code": "@staticmethod\ndef format_notification(body):\n    NOTIFICATION_TEMPLATE = Template('Build #{{build.number}} {{build.status}} for Job {{name}} ({{build.full_url}})\\n{% if build.scm %}Based on {{build.scm.url}}/commit/{{build.scm.commit}} ({{build.scm.branch}}){% endif %}')\n    return NOTIFICATION_TEMPLATE.render(body)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef _tail(self) -> int:\n    return self.payload[-1]", "buggy_source_code": "@property\ndef _tail(self) -> int:\n    return self.data[-1]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def needs_tone(freq, lnb_type):\n    if lnb_type in (KU_BAND, C_BAND):\n        return True\n    return freq > UN_HI_SW", "buggy_source_code": "def needs_tone(freq, lnb_type):\n    if lnb_type in (KU_BAND, C_BAND):\n        return False\n    return freq > UN_HI_SW", "edit_actions": []}
{"fixed_source_code": "def create_acl_list(cloud_driver, name, vpc_id):\n    acllist = cloud_driver.ex_create_network_acllist(name=vpc_name, vpc_id=vpc_id, description=name)\n    return acllist", "buggy_source_code": "def create_acl_list(cloud_driver, name, vpc_id):\n    acllist = cloud_driver.ex_create_network_acllist(name=name, vpc_id=vpc_id, description=name)\n    return acllist", "edit_actions": ["update-node"]}
{"fixed_source_code": "def as_csv(rows):\n    import csv\n    import sys\n    writer = csv.writer(sys.stdout)\n    writer.writerows([headers])\n    writer.writerows(rows)\n    sys.exit(0)", "buggy_source_code": "def as_csv(rows):\n    import csv\n    import sys\n    writer = csv.writer(sys.stdout)\n    writer.writerows([header])\n    writer.writerows(rows)\n    sys.exit(0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_compiled_function(self, name):\n    try:\n        func = getattr(self.compiled_module, name)\n    except:\n        raise Error('Function %s not found in compiled module.' % (name,))\n    return func", "buggy_source_code": "def get_compiled_function(self, name):\n    try:\n        func = getattr(self.compiled_module, name)\n    except:\n        raise AttributeError('Function %s not found in compiled module.' % (name,))\n    return func", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'file %r: %s' % (self.get_filepath(), self.message)", "buggy_source_code": "def __str__(self):\n    return 'basepath %r, filename %r: %s' % (self.basepath, self.filename, self.message)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'file %r line %r: %s' % (self.get_filepath(), self.lineno, self.message)", "buggy_source_code": "def __str__(self):\n    return 'basepath %r, filename %r, line %r: %s' % (self.basepath, self.filename, self.lineno, self.message)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __init__(self, filePath):\n    logger.info('Opening input binary file %s...' % filePath)\n    file.__init__(self, filePath, 'rb')", "buggy_source_code": "def __init__(self, filePath):\n    logger.info('Opening input binary file %s...' % filePath)\n    self.__file = open(filePath, 'rb')", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get(self, request):\n    return fmk_rest_success({'plugins': plugins_available()})", "buggy_source_code": "def get(self, request):\n    return fmk_rest_success({'plugins': [i for i in fmk_plugins_available()]})", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node"]}
{"fixed_source_code": "def test_maximum_journeys_with_min_nb_journeys_options(self):\n    query = 'journeys?from=2.39592;48.84838&to=2.36381;48.86750&datetime=20180309T080000&min_nb_journeys=7'\n    response = self.query_region(query)\n    self.is_valid_journey_response(response, query)\n    assert len(response['journeys']) == 6", "buggy_source_code": "def test_maximum_journeys_with_min_nb_journeys_options(self):\n    query = 'journeys?from=2.39592;48.84838&to=2.36381;48.86750&datetime=20180309T080000&min_nb_journeys=7'\n    response = self.query_region(query)\n    self.is_valid_journey_response(response, query)\n    assert len(response['journeys']) <= 6", "edit_actions": ["update-node"]}
{"fixed_source_code": "def score_function(ground_truths, predictions, valid_indexes=None):\n    return error.score_function(ground_truths.multiclass, predictions.multiclass, valid_indexes)", "buggy_source_code": "def score_function(ground_truths, predictions, valid_indexes=None):\n    return classification_error.score_function(ground_truths.multiclass, predictions.multiclass, valid_indexes)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_default_node_label(additional_label=None):\n    label = 'buildslave'\n    if additional_label:\n        label += ' ' + additional_label\n    return label", "buggy_source_code": "def get_default_node_label(additional_label=None):\n    label = 'buildslave'\n    if additional_label:\n        label += ' || ' + additional_label\n    return label", "edit_actions": ["update-node"]}
{"fixed_source_code": "@route('/')\ndef show_index(request):\n    return config['dashboards'].values()[0]", "buggy_source_code": "@route('/')\ndef show_index(request):\n    return config['index']", "edit_actions": ["update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def configitems(orig, self, section, untrusted=False):\n    r = orig(self, section, untrusted)\n    if section == 'paths':\n        r += getzcpaths()\n    return r", "buggy_source_code": "def configitems(orig, self, section, untrusted=False):\n    repos = orig(self, section, untrusted)\n    if section == 'paths':\n        repos += getzcpaths()\n    return repos", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def test_nonexistent_directory(self):\n    result = self.invoke('deduplicate', './dummy_maildir/')\n    self.assertEqual(result.exit_code, 2)\n    self.assertIn('Path \"./dummy_maildir/\" does not exist', result.output)", "buggy_source_code": "def test_nonexistent_directory(self):\n    result = self.invoke('deduplicate', './dummy_maildir/')\n    self.assertEqual(result.exit_code, 2)\n    self.assertIn(\"Path './dummy_maildir/' does not exist\", result.output)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_invalid_maildir_as_file(self):\n    result = self.invoke('deduplicate', './__init__.py')\n    self.assertEqual(result.exit_code, 2)\n    self.assertIn('Path \"./__init__.py\" does not exist', result.output)", "buggy_source_code": "def test_invalid_maildir_as_file(self):\n    result = self.invoke('deduplicate', './__init__.py')\n    self.assertEqual(result.exit_code, 2)\n    self.assertIn(\"Path './__init__.py' does not exist\", result.output)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@mapping\ndef attribute(self, record):\n    magento_attribute = record.openerp_id.attribute_id.magento_bind_ids[0]\n    return {'attribute': magento_attribute.magento_id}", "buggy_source_code": "@mapping\ndef attribute(self, record):\n    binder = self.get_binder_for_model('magento.product.attribute')\n    magento_attribute_id = binder.to_backend(record.openerp_id.attribute_id.id, wrap=True)\n    return {'attribute': magento_attribute_id}", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def rand_str(n=8):\n    return ''.join((random.SystemRandom().choice(string.letters) for _ in range(n)))", "buggy_source_code": "def rand_str(n=8):\n    return ''.join((random.SystemRandom().choice(string.ascii_lowercase) for _ in range(n)))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clear_user_log(user):\n    step_activities = get_logged_activities(user)\n    old_steps = 0\n    for activity in step_activities:\n        old_steps += activity['steps']\n        delete_activity(user, activity['logId'])\n    return old_steps", "buggy_source_code": "def clear_user_log(user):\n    old_steps = 0\n    step_activities = get_logged_activities(user)\n    for activity in step_activities:\n        old_steps += activity['steps']\n        delete_activity(user, activity['logId'])\n    return old_steps", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def teardown_module(module):\n    module.p.kill(15)\n    module.p.wait()", "buggy_source_code": "def teardown_module(module):\n    os.system('killall pserve')", "edit_actions": ["move-tree", "update-node", "update-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def selected(self, option, value, schema_type):\n    if option[0] == self.convert(schema_type, [value]):\n        return ' checked=\"checked\"'\n    else:\n        return ''", "buggy_source_code": "def selected(self, option, value, schema_type):\n    if value and option[0] == self.convert(schema_type, [value]):\n        return ' checked=\"checked\"'\n    else:\n        return ''", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "@property\ndef name(self):\n    return idaapi.get_segm_name(self.segment_t)", "buggy_source_code": "@property\ndef name(self):\n    return idaapi.get_true_segm_name(self.segment_t)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef clean(cls):\n    cls._has_mesh = False\n    cls._mesh = None\n    cls._context = None\n    cls._observer = set()", "buggy_source_code": "@classmethod\ndef clean(cls):\n    cls._has_mesh = False\n    cls._mesh = None\n    cls._context = None\n    cls._observer = list()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def to_excel(self, value):\n    return self.formula", "buggy_source_code": "def to_excel(self, value):\n    return value", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delete(self, value):\n    node = self.search(value)\n    return self.__delete(node)", "buggy_source_code": "def delete(self, value):\n    node = self.search(value)\n    if node:\n        self.__delete(node)", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def push_minicaptouch(self):\n    U.Logging.info('pushtouch_minitouch:' + self.minitouch_path)\n    self.adb.shell('chmod 777 /data/local/tmp/minitouch')", "buggy_source_code": "def push_minicaptouch(self):\n    U.Logging.info('push_touch_minitouch:' + self.minitouch_path)\n    self.adb.shell('chmod 777 /data/local/tmp/minitouch')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def push_minicap(self):\n    U.Logging.info('pushCpu_minicap:' + self.minicap_path)\n    self.adb.adb('push %s /data/local/tmp' % self.minicap_path)", "buggy_source_code": "def push_minicap(self):\n    U.Logging.info('push_Cpu_minicap:' + self.minicap_path)\n    self.adb.adb('push %s /data/local/tmp' % self.minicap_path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def push_minicapSO(self):\n    U.Logging.info('pushsdk_minicap.so:' + self.minicapSO_path)\n    self.adb.adb('push %s /data/local/tmp' % self.minicapSO_path)\n    self.adb.shell('chmod 777 /data/local/tmp/minicap')", "buggy_source_code": "def push_minicapSO(self):\n    U.Logging.info('push_sdk_minicap.so:' + self.minicapSO_path)\n    self.adb.adb('push %s /data/local/tmp' % self.minicapSO_path)\n    self.adb.shell('chmod 777 /data/local/tmp/minicap')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def unmount(self):\n    self.device.FilesystemUnmount([], dbus_interface=UDISKS_DEVICE_INTERFACE)", "buggy_source_code": "def unmount(self):\n    self.method.FilesystemUnmount([])", "edit_actions": ["update-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def on_text(self, text):\n    if text == '\\r':\n        return EVENT_UNHANDLED\n    self.buffer += text", "buggy_source_code": "def on_text(self, text):\n    if ' ' <= text <= '~':\n        self.buffer += text\n    if 174 <= ord(text) <= 255:\n        self.buffer += text", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def _save_feature(self, feature):\n    self.storage.save_text(self._name_to_path(feature.name), _format_status(feature.priority, feature.status))", "buggy_source_code": "def _save_feature(self, feature):\n    self.storage.save_text(self._name_to_path(feature.name), _format_status(feature.status, feature.priority))", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "@property\ndef serial_number(self):\n    return self._dev.serial_number", "buggy_source_code": "@property\ndef serial_number(self):\n    return self._serial_number", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef product_name(self):\n    return self._dev.product", "buggy_source_code": "@property\ndef product_name(self):\n    return self._product_name", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def list_to_list(self, list_html):\n    data = []\n    for li in pq(list_html).find('li'):\n        data.append(pq(li).text())\n    return data", "buggy_source_code": "def list_to_list(self, list_html):\n    list_items = []\n    for li in pq(list_html).find('li'):\n        list_items.append(pq(li).text())\n    return list_items", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def dict_to_list(self, data):\n    ls = []\n    for (k, v) in data.iteritems():\n        ls.append(v)\n    return ls", "buggy_source_code": "def dict_to_list(self, data):\n    ls = []\n    for (_, v) in data.iteritems():\n        ls.append(v)\n    return ls", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_count(self):\n    return sum(self.array)", "buggy_source_code": "def _get_count(self):\n    return sum(self.counts)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_sum(self):\n    sum_ = 0\n    for (index, value) in enumerate(self.array):\n        sum_ += index * value\n    return int(sum_)", "buggy_source_code": "def _get_sum(self):\n    sum_ = 0\n    for (index, value) in enumerate(self.counts):\n        sum_ += index * value\n    return int(sum_)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_min(self):\n    for (index, value) in enumerate(self.array):\n        if value != 0:\n            return index", "buggy_source_code": "def _get_min(self):\n    for (index, value) in enumerate(self.counts):\n        if value != 0:\n            return index", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _get_flat(self):\n    for (val, count) in enumerate(self.array):\n        for i in range(count):\n            yield val", "buggy_source_code": "def _get_flat(self):\n    for (val, count) in enumerate(self.counts):\n        for i in range(count):\n            yield val", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_literal_provn_with_triple_quotes(self):\n    l = Literal('\"\"\"foo\\\\nbar\"\"\"')\n    string_rep = l.provn_representation()\n    self.assertTrue('{\\\\\"f' in string_rep)", "buggy_source_code": "def test_literal_provn_with_triple_quotes(self):\n    l = Literal('\"\"\"foo\\\\nbar\"\"\"')\n    string_rep = l.provn_representation()\n    self.assertTrue('{\\\\\"\\\\\"\\\\\"f' in string_rep)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getPendingBuildTimes(self):\n    return self.getUpstreamScheduler().getPendingBuildTimes()", "buggy_source_code": "def getPendingBuildTimes(self):\n    return self.findUpstreamScheduler().getPendingBuildTimes()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_getSpaxel_remote_x_y_success(self):\n    expect = -0.10531016\n    self._test_getSpaxel_remote(10, expect, x=10, y=5)", "buggy_source_code": "def test_getSpaxel_remote_x_y_success(self):\n    expect = -0.10531\n    self._test_getSpaxel_remote(10, expect, x=10, y=5)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def file_is_allowed(file):\n    return file.endswith('.py') and '__init__' not in file.title() and ('Sample_City' not in file.title())", "buggy_source_code": "def file_is_allowed(file):\n    return file.endswith('.py') and '__Init__' not in file.title() and ('Sample_City' not in file.title())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def migrate(self, migrations=None):\n    from .migration import Migration\n    Migration.migrate(self, migrations=migrations or self.migrations)", "buggy_source_code": "def migrate(self, migrations=None):\n    importlib.import_module('bsql.migration').Migration.migrate(self, migrations=migrations or self.migrations)", "edit_actions": ["update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef y(self):\n    return self[0]", "buggy_source_code": "@property\ndef y(self):\n    return self[1]", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef z(self):\n    return self[0]", "buggy_source_code": "@property\ndef z(self):\n    return self[2]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_FIELD_revisions(self, instance, field):\n    return backend.get_revisions(self.rcskey_format % (instance._meta.app_label, instance.__class__.__name__, field.attname, instance.id))", "buggy_source_code": "def get_FIELD_revisions(self, instance, field):\n    return backend.get_revisions(self.rcskey_format % (instance._meta.app_label, instance.__class__.__name__, field.attname, instance.pk))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_changed_revisions(self, instance, field):\n    return backend.get_revisions(self.rcskey_format % (instance._meta.app_label, instance.__class__.__name__, field.attname, instance.id))", "buggy_source_code": "def get_changed_revisions(self, instance, field):\n    return backend.get_revisions(self.rcskey_format % (instance._meta.app_label, instance.__class__.__name__, field.attname, instance.pk))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def wiki_page_deleted(self, page):\n    if self.has_page(page.name):\n        self.log.debug('Removing page %s from index' % page.name)\n        del self._pages[page.name]", "buggy_source_code": "def wiki_page_deleted(self, page):\n    if self.has_page(page.name):\n        self.log.debug('Removing page %s from index' % page.name)\n        del self._index[page.name]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def wiki_page_added(self, page):\n    if not self.has_page(page.name):\n        self.log.debug('Adding page %s to index' % page.name)\n        self._pages[page.name] = True", "buggy_source_code": "def wiki_page_added(self, page):\n    if not self.has_page(page.name):\n        self.log.debug('Adding page %s to index' % page.name)\n        self._index[page.name] = True", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _setSelectorList(self, selectorList):\n    self._checkReadonly()\n    self._selectorList = selectorList\n    self._selectorList.parentRule = self", "buggy_source_code": "def _setSelectorList(self, selectorList):\n    self._checkReadonly()\n    self.selectorText = selectorList.selectorText", "edit_actions": ["insert-node", "move-tree", "move-tree", "move-tree", "update-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def prepare_table_for_workload(parsed_opts, http, **kwargs):\n    db = http.add_database(name='test_database')\n    return http.add_namespace(protocol=parsed_opts['protocol'], database=db, **kwargs)", "buggy_source_code": "def prepare_table_for_workload(parsed_opts, http, **kwargs):\n    db = http.add_database(name='test')\n    return http.add_namespace(protocol=parsed_opts['protocol'], database=db, **kwargs)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_answer_links(self):\n    for query in self.queries:\n        self.assertTrue('http://' in self.call_howdoi(query + ' -l'))", "buggy_source_code": "def test_answer_links(self):\n    for query in self.queries:\n        self.assertIsNotNone(re.match('http.?://.*', self.call_howdoi(query + ' -l'), re.DOTALL))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def render_GET(self, txrequest):\n    vars = {'projects': ', '.join(self.root.scheduler.list_projects())}\n    return '\\n<html>\\n<head><title>Scrapyd</title></head>\\n<body>\\n<h1>Scrapyd</h1>\\n<p>Available projects: <b>%(projects)s</b></p>\\n<ul>\\n<li><a href=\"/jobs\">Jobs</a></li>\\n<li><a href=\"/logs/\">Logs</li>\\n<li><a href=\"http://doc.scrapy.org/topics/scrapyd.html\">Documentation</a></li>\\n</ul>\\n\\n<h2>How to schedule a spider?</h2>\\n\\n<p>To schedule a spider you need to use the API (this web UI is only for\\nmonitoring)</p>\\n\\n<p>Example using <a href=\"http://curl.haxx.se/\">curl</a>:</p>\\n<p><code>curl http://localhost:6800/schedule.json -d project=default -d spider=somespider</code></p>\\n\\n<p>For more information about the API, see the <a href=\"http://doc.scrapy.org/topics/scrapyd.html\">Scrapyd documentation</a></p>\\n</body>\\n</html>\\n' % vars", "buggy_source_code": "def render_GET(self, txrequest):\n    vars = {'projects': ', '.join(self.root.scheduler.list_projects())}\n    return '\\n<html>\\n<head><title>Scrapyd</title></head>\\n<body>\\n<h1>Scrapyd</h1>\\n<p>Available projects: <b>%(projects)s</b></p>\\n<ul>\\n<li><a href=\"/jobs\">Jobs</a></li>\\n<li><a href=\"/logs/\">Logs</li>\\n<li><a href=\"http://doc.scrapy.org/en/latest/topics/scrapyd.html\">Documentation</a></li>\\n</ul>\\n\\n<h2>How to schedule a spider?</h2>\\n\\n<p>To schedule a spider you need to use the API (this web UI is only for\\nmonitoring)</p>\\n\\n<p>Example using <a href=\"http://curl.haxx.se/\">curl</a>:</p>\\n<p><code>curl http://localhost:6800/schedule.json -d project=default -d spider=somespider</code></p>\\n\\n<p>For more information about the API, see the <a href=\"http://doc.scrapy.org/topics/scrapyd.html\">Scrapyd documentation</a></p>\\n</body>\\n</html>\\n' % vars", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _is_on_tab_promise(self, tab_name):\n    return EmptyPromise(lambda : self.is_on_tab(tab_name), '{0} is the current tab'.format(tab_name))", "buggy_source_code": "def _is_on_tab_promise(self, tab_name):\n    return EmptyPromise(lambda : self._is_on_tab(tab_name), '{0} is the current tab'.format(tab_name))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_headers(self):\n    with open(self.tsv_path, 'rb') as tsv_file:\n        tsv_reader = csvkit.reader(tsv_file, delimiter='t')\n        yield next(tsv_reader)", "buggy_source_code": "def get_headers(self):\n    with open(self.tsv_path, 'rb') as tsv_file:\n        tsv_reader = csvkit.reader(tsv_file, delimiter=str('\\t'))\n        return next(tsv_reader)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def activate(self):\n    view = self.window.current_view\n    if view is None:\n        ak.NSBeep()\n        return\n    view.command_view.activate(self)", "buggy_source_code": "def activate(self):\n    editor = self.window.current_editor\n    if editor is None:\n        ak.NSBeep()\n        return\n    editor.command_view.activate(self)", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "def exhausted(self):\n    return self.__resourceLimits.reached(self.__usage)", "buggy_source_code": "def exhausted(self):\n    return self.__resourceLimits.reached(self.__resourceUsage)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def import_checkin_data(request):\n    results = import_data()\n    response = TemplateResponse(request, 'import.html', {'list': results})\n    return response", "buggy_source_code": "def import_checkin_data(request):\n    results = import_data()\n    response = render_to_response('import.html', {'list': results})\n    return response", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@cached_property\ndef fqdn(self):\n    return self.hostname", "buggy_source_code": "@cached_property\ndef fqdn(self):\n    import socket\n    return socket.getfqdn()", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "insert-node", "update-node"]}
{"fixed_source_code": "@abc.abstractclassmethod\ndef indicators_upsert(self, token, data):\n    raise NotImplementedError", "buggy_source_code": "@abc.abstractmethod\ndef indicators_upsert(self, token, data):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def fix_math_style2_fontsize(text):\n    r = re.compile('(frac{)')\n    return r.sub('dfrac{', text)", "buggy_source_code": "def fix_math_style2_fontsize(text):\n    r = re.compile('(\\\\\\\\frac{)')\n    return r.sub('\\\\\\\\dfrac{', text)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __init__(self, dimension_definition, pattern, *patterns):\n    definition = self._apply(dimension_definition, [pattern, *patterns])\n    super(PatternFilter, self).__init__(definition)", "buggy_source_code": "def __init__(self, dimension_definition, pattern, *patterns):\n    definition = self._apply(dimension_definition, (pattern,) + patterns)\n    super(PatternFilter, self).__init__(definition)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test(self):\n    self.assertTrue(os.path.isfile('../profile.yaml'))", "buggy_source_code": "def test(self):\n    self.assertTrue(os.path.isfile('profile.yaml'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setInitialBalance(self, initial_balance):\n    self.balance = balance", "buggy_source_code": "def setInitialBalance(self, initial_balance):\n    self.balance = initial_balance", "edit_actions": ["update-node"]}
{"fixed_source_code": "def setup_scheduler(self):\n    self.scheduler = BackgroundScheduler()\n    self.scheduler.start()\n    comment_processor = self.scheduler.add_job(self.process_comments, 'interval', seconds=30)\n    print('Scheduler configured!')", "buggy_source_code": "def setup_scheduler(self):\n    self.scheduler = BackgroundScheduler()\n    self.scheduler.start()\n    comment_processor = self.scheduler.add_job(self.process_comments, 'interval', minutes=5)\n    print('Scheduler configured!')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def testCommentQuoting4(self):\n    self.filt('<script>\\n<!-- hui\\na = \"-->\";\\n// bui -->\\n</script>', '<script>\\n<!--\\na = \"--&#62;\";\\n//-->\\n</script>')", "buggy_source_code": "def testCommentQuoting4(self):\n    self.filt('<script>\\n<!-- hui\\na = \"-->\";\\n// bui -->\\n</script>', '<script>\\n<!--\\na = \"-->\";\\n//-->\\n</script>')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getWindDir(wdir, wspeed):\n    if wspeed is None or wspeed == 0:\n        return None\n    if wdir < 0 or wdir >= 16:\n        return None\n    return wdir * 360 / 16", "buggy_source_code": "def getWindDir(wdir, wspeed):\n    if wspeed is None or wspeed == 0:\n        return None\n    if wdir < 0 or wdir >= 16:\n        return None\n    return wdir * 360.0 / 16", "edit_actions": ["update-node"]}
{"fixed_source_code": "def addr_to_index(addr):\n    return (addr - 416) / 18", "buggy_source_code": "def addr_to_index(addr):\n    return (addr - 416) // 18", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, boundary='----------ThIs_Is_tHe_bouNdaRY_$', output_str='javascript'):\n    self.boundary = boundary\n    self.output_str = output_str", "buggy_source_code": "def __init__(self, boundary='----------ThIs_Is_tHe_bouNdaRY', output_str='javascript'):\n    self.boundary = boundary\n    self.output_str = output_str", "edit_actions": ["update-node"]}
{"fixed_source_code": "@pytest.fixture(params=['ala__L_c', 'ser__L_c', 'trp__L_c', 'glu__L_c'], scope='global')\ndef amino_acid(request):\n    return request.param", "buggy_source_code": "@pytest.fixture(params=['ala__L_c', 'ser__L_c', 'trp__L_c', 'glu__L_c'], scope='session')\ndef amino_acid(request):\n    return request.param", "edit_actions": ["update-node"]}
{"fixed_source_code": "@skipUnlessDarwin\n@skipIfDarwinEmbedded\n@apple_simulator_test('iphone')\ndef test_ios(self):\n    self.run_with(arch=self.getArchitecture(), os='ios', env='simulator', platform='iphonesimulator')", "buggy_source_code": "@skipUnlessDarwin\n@skipIfDarwinEmbedded\n@apple_simulator_test('iphone')\ndef test_ios(self):\n    self.run_with(arch=self.getArchitecture(), os='ios', env='simulator', expected_load_command='LC_BUILD_VERSION')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@skipUnlessDarwin\n@skipIfDarwinEmbedded\n@apple_simulator_test('appletv')\ndef test_tvos(self):\n    self.run_with(arch=self.getArchitecture(), os='tvos', env='simulator', platform='appletvsimulator')", "buggy_source_code": "@skipUnlessDarwin\n@skipIfDarwinEmbedded\n@apple_simulator_test('appletv')\ndef test_tvos(self):\n    self.run_with(arch=self.getArchitecture(), os='tvos', env='simulator', expected_load_command='LC_BUILD_VERSION')", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def format(self, entity):\n    return ','.join(('%s%s%s' % (entity.pos, entity.ref, alt) for alt in entity.alt))", "buggy_source_code": "def format(self, entity):\n    return ','.join(('c.%s%s>%s' % (entity.pos, entity.ref, alt) for alt in entity.alt))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def templatePath(self):\n    return 'v2/modules/gci/timeline/base.html'", "buggy_source_code": "def templatePath(self):\n    return 'v2/modules/gsoc/timeline/base.html'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def templatePath(self):\n    return 'v2/modules/gci/program/base.html'", "buggy_source_code": "def templatePath(self):\n    return 'v2/modules/gsoc/program/base.html'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def djangoURLPatterns(self):\n    return [url('timeline/%s$' % url_patterns.PROGRAM, self, name='edit_gci_timeline'), url('timeline/edit/%s$' % url_patterns.PROGRAM, self)]", "buggy_source_code": "def djangoURLPatterns(self):\n    return [url('timeline/%s$' % url_patterns.PROGRAM, self, name='edit_gsoc_timeline'), url('timeline/edit/%s$' % url_patterns.PROGRAM, self)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def djangoURLPatterns(self):\n    return [url('program/%s$' % url_patterns.PROGRAM, self, name='edit_gci_program'), url('program/edit/%s$' % url_patterns.PROGRAM, self)]", "buggy_source_code": "def djangoURLPatterns(self):\n    return [url('program/%s$' % url_patterns.PROGRAM, self, name='edit_gsoc_program'), url('program/edit/%s$' % url_patterns.PROGRAM, self)]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, memory_type, address_spec):\n    super(MemoryAddressField, self).__init__(memory_type, address_spec, 3)", "buggy_source_code": "def __init__(self, memory_type, address_spec):\n    super(MemoryVersionField, self).__init__(memory_type, address_spec, length=3)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def console_log_setup():\n    handler = logging.FileHandler('/var/log/chroma-agent-console.log')\n    handler.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s %(message)s', '%d/%b/%Y:%H:%M:%S'))\n    console_log.addHandler(handler)", "buggy_source_code": "def console_log_setup():\n    handler = logging.FileHandler('/var/log/chroma-agent-console.log')\n    handler.setFormatter(logging.Formatter('[%(asctime)s] console %(levelname)s %(message)s', '%d/%b/%Y:%H:%M:%S'))\n    console_log.addHandler(handler)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def daemon_log_setup():\n    handler = logging.FileHandler('/var/log/chroma-agent.log')\n    handler.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s %(message)s', '%d/%b/%Y:%H:%M:%S'))\n    daemon_log.addHandler(handler)", "buggy_source_code": "def daemon_log_setup():\n    handler = logging.FileHandler('/var/log/chroma-agent.log')\n    handler.setFormatter(logging.Formatter('[%(asctime)s] daemon %(levelname)s %(message)s', '%d/%b/%Y:%H:%M:%S'))\n    daemon_log.addHandler(handler)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_children_sublists(self, comment_sublist):\n    return comment_sublist.css('.ecm_commentSublist>.ecm_commentSublist')", "buggy_source_code": "def get_children_sublists(self, comment_sublist):\n    return comment_sublist.xpath(\"div[@class='ecm_commentSublist']\")", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_children_comments(self, comment_sublist):\n    return comment_sublist.css('.ecm_commentSublist>.ecm_comment')", "buggy_source_code": "def get_children_comments(self, comment_sublist):\n    return comment_sublist.xpath(\"div[@class='row ecm_comment' or @class='row ecm_comment ecm_comment_children']\")", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@app.route('/iss-now.json')\n@json\n@jsonp\ndef iss_now():\n    loc = iss.get_location()\n    return {'message': 'success', 'data': loc}", "buggy_source_code": "@app.route('/iss-now.json')\n@jsonp\n@json\ndef iss_now():\n    loc = iss.get_location()\n    return {'message': 'success', 'data': loc}", "edit_actions": ["move-tree"]}
{"fixed_source_code": "def test_execute(self):\n    res = self.query.execute(0)\n    self.assertIsNone(res)", "buggy_source_code": "def test_execute(self):\n    res = self.query.execute(0)\n    self.assertIsInstance(res, SPARQLResult)", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def deploy_packages_gz(self, deployment_path):\n    patterns = ['*/*/packages', '*/*/updates-devices/*']\n    for dirname in glob.iglob(patterns):\n        raise NotImplementedError('generate Packages.gz')", "buggy_source_code": "def deploy_packages_gz(self, deployment_path):\n    patterns = ['*/*/packages', '*/*/updates-device/*']\n    for dirname in glob.iglob(patterns):\n        raise NotImplementedError('generate Packages.gz')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_name(self, name=None):\n    if not name:\n        name = 'myvm-' + self.get_random()\n    self.name = name", "buggy_source_code": "def set_name(self, name=None):\n    if not name:\n        name = 'sazvm-' + self.get_random()\n    self.name = name", "edit_actions": ["update-node"]}
{"fixed_source_code": "def deploy():\n    with cd(env.server_path):\n        run('git pull --rebase origin master')\n        run('workon eeg-spectrogram; make install')\n        run('workon eeg-spectrogram; make prod-run')", "buggy_source_code": "def deploy():\n    with cd(env.server_path):\n        run('git pull --rebase origin master')\n        run('workon %s; make install' % PROJ_NAME)\n        run('workon %s; make prod-run' % PROJ_NAME)", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def prod():\n    env.user = 'ubuntu'\n    env.hosts = ['128.52.175.133', '128.52.178.57']\n    env.key_filename = '~/.ssh/id_rsa.pub'\n    env.server_path = '~/eeg-spectrogram'\n    env.python_path = '~/.virtualenvs/eeg-spectrogram'\n    return", "buggy_source_code": "def prod():\n    env.user = 'ubuntu'\n    env.hosts = ['128.52.175.133', '128.52.178.57']\n    env.key_filename = '~/.ssh/id_rsa.pub'\n    env.server_path = '~/%s' % PROJ_NAME\n    env.python_path = '~/.virtualenvs/%s' % PROJ_NAME\n    return", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def getDefaultBotConfigFile(self):\n    return os.path.join(ddapp.getDRCBaseDir(), 'software/config/drc_robot.cfg')", "buggy_source_code": "def getDefaultBotConfigFile(self):\n    return os.path.join(ddapp.getDRCBaseDir(), 'software/config/atlas/robot.cfg')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def values(self, prefix=None):\n    root = self._root if prefix is None else self._get_subtrie(prefix)\n    return self._iterate_values(root)", "buggy_source_code": "def values(self, prefix=None):\n    root = self._root if prefix is None else self._get_subtrie(prefix)\n    if root:\n        yield from self._iterate_values(root)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "delete-node"]}
{"fixed_source_code": "def get_strategy_scope(strategy):\n    if strategy:\n        strategy_scope = strategy.scope()\n    else:\n        strategy_scope = keras_common.DummyContextManager()\n    return strategy_scope", "buggy_source_code": "def get_strategy_scope(strategy):\n    if strategy:\n        strategy_scope = strategy.scope()\n    else:\n        strategy_scope = DummyContextManager()\n    return strategy_scope", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def updateLayers(self):\n    layers = self.getActiveLayers()\n    self.dlg.popActiveLayers(layers)", "buggy_source_code": "def updateLayers(self):\n    layers = lfh.getLineLayers()\n    if self.dlg:\n        self.dlg.popActiveLayers(layers)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "update-node", "insert-node", "update-node"]}
{"fixed_source_code": "def workerError(self, e, exception_string):\n    QgsMessageLog.logMessage('Cleaning thread raised an exception: %s' % exception_string, level=Qgis.Critical)\n    self.dlg.close()", "buggy_source_code": "def workerError(self, exception, exception_string):\n    self.thread_error = exception_string", "edit_actions": ["insert-node", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def error403(request):\n    return render_to_response('error.html', {'id': 'unauthorized_access', 'description': 'no permission for \"%s\"' % request.path, 'code': 403}, context_instance=RequestContext(request))", "buggy_source_code": "def error403(request):\n    return render_to_response('error.html', {'id': 'unauthorized_access', 'description': 'no permission for %s' % request.path, 'code': 403}, context_instance=RequestContext(request))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error500(request):\n    return render_to_response('error.html', {'id': 'invalid_state', 'description': 'corrupt page \"%s\"' % request.path, 'code': 500}, context_instance=RequestContext(request))", "buggy_source_code": "def error500(request):\n    return render_to_response('error.html', {'id': 'invalid_state', 'description': 'corrupt page %s' % request.path, 'code': 500}, context_instance=RequestContext(request))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def error404(request):\n    return render_to_response('error.html', {'id': 'page_out_of_bounds', 'description': 'bad page \"%s\"' % request.path, 'code': 404}, context_instance=RequestContext(request))", "buggy_source_code": "def error404(request):\n    return render_to_response('error.html', {'id': 'page_out_of_bounds', 'description': 'bad page %s' % request.path, 'code': 404}, context_instance=RequestContext(request))", "edit_actions": ["update-node"]}
{"fixed_source_code": "@classmethod\ndef teardown_class(cls):\n    cancer_api.connection.close()", "buggy_source_code": "@classmethod\ndef teardown_class(cls):\n    cnx = cancer_api.get_connection()\n    cnx.close()", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "delete-node"]}
{"fixed_source_code": "def add_file(self, filename):\n    self.files.append(Gio.file_new_for_path(filename))", "buggy_source_code": "def add_file(self, filename):\n    self.files.append(Gio.file_new_for_uri(filename))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validate_email(value):\n    if not email_re.match(value):\n        raise ValidationError(_('Enter a valid address.'))\n    return value", "buggy_source_code": "def validate_email(value):\n    if not email_re.match(value):\n        raise ValidationError(_('Enter a valid email address.'))\n    return value", "edit_actions": ["update-node"]}
{"fixed_source_code": "def has_credentials(self, obj):\n    return obj.hasCredentials()", "buggy_source_code": "def has_credentials(self, obj):\n    return obj.has_credentials()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_classify_false():\n    assert IsStudentClassifier().classify('I have graduated')['is_student'] == 'false'", "buggy_source_code": "def test_classify_false():\n    assert IsStudentClassifier().classify('I have graduated')['is_student'] == 'true'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def inverse(self, z):\n    return N.power(x, 1.0 / self.power)", "buggy_source_code": "def inverse(self, x):\n    return N.power(x, 1.0 / self.power)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def qtVersion(self):\n    self.extraceqtVersionAndNamespace()\n    return self.cachedQtVersion", "buggy_source_code": "def qtVersion(self):\n    self.qtVersionAndNamespace()\n    return self.cachedQtVersion", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_device_ids(self):\n    return ['localhost']", "buggy_source_code": "def get_device_ids(self):\n    return []", "edit_actions": ["delete-node"]}
{"fixed_source_code": "def __init__(self):\n    self.deviceid = 'localhost'\n    self.support_remote = False", "buggy_source_code": "def __init__(self):\n    self.deviceid = ''\n    self.support_remote = False", "edit_actions": ["update-node"]}
{"fixed_source_code": "def camelCase(variable):\n    return variable[0].lower() + parameter[1:]", "buggy_source_code": "def camelCase(variable):\n    return variable[0].lower() + variable[1:]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return self.text", "buggy_source_code": "def __str__(self):\n    return repr(self)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def __str__(self):\n    raise ValueError()", "buggy_source_code": "def __str__(self):\n    return repr(self)", "edit_actions": ["insert-node", "move-tree", "update-node", "insert-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return self.ToString()", "buggy_source_code": "def __str__(self):\n    return repr(self)", "edit_actions": ["update-node", "update-node", "delete-node"]}
{"fixed_source_code": "@register.inclusion_tag('lib/tags/sponsor_homepage.html', takes_context=True)\ndef sponsor_homepage(context):\n    return {'sponsor': Sponsor.objects.filter(primary_sponsor=True).first(), 'request': context['request']}", "buggy_source_code": "@register.inclusion_tag('lib/tags/sponsor_homepage.html', takbes_context=True)\ndef sponsor_homepage(context):\n    return {'sponsor': Sponsor.objects.filter(primary_sponsor=True).first(), 'request': context['request']}", "edit_actions": ["update-node"]}
{"fixed_source_code": "def register_blueprints(app):\n    from app.views.home import home\n    app.register_blueprint(home)\n    from app.views.account import account\n    app.register_blueprint(account)", "buggy_source_code": "def register_blueprints(app):\n    from app.responders.home import home\n    app.register_blueprint(home)\n    from app.responders.account import account\n    app.register_blueprint(account)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def init_template():\n    return \"#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\nimport pycrfsuite\\nimport os\\nimport warnings\\nfrom collections import OrderedDict\\n\\n\\n#  _____________________\\n# |1. CONFIGURE LABELS! |\\n# |_____________________| \\n#     (\\\\__/) || \\n#     (•ㅅ•) || \\n#     / \\u3000 づ\\nLABELS = [] # The labels should be a list of strings\\n\\n#***************** OPTIONAL CONFIG ***************************************************\\nPARENT_LABEL  = 'TokenSequence'               # the XML tag for each labeled string\\nGROUP_LABEL   = 'Collection'                  # the XML tag for a group of strings\\nNULL_LABEL    = 'Null'                        # the null XML tag\\nMODEL_FILE    = 'learned_settings.crfsuite'   # filename for the crfsuite settings file\\n#************************************************************************************\\n\\n\\ntry :\\n    TAGGER = pycrfsuite.Tagger()\\n    TAGGER.open(os.path.split(os.path.abspath(__file__))[0]+'/'+MODEL_FILE)\\nexcept IOError :\\n    TAGGER = None\\n    warnings.warn('You must train the model (parserator train [traindata] [modulename]) to create the %s file before you can use the parse and tag methods' %MODEL_FILE)\\n\\ndef parse(raw_string):\\n    if not TAGGER:\\n        raise IOError('\\\\nMISSING MODEL FILE: %s\\\\nYou must train the model before you can use the parse and tag methods\\\\nTo train the model annd create the model file, run:\\\\nparserator train [traindata] [modulename]' %MODEL_FILE)\\n\\n    tokens = tokenize(raw_string)\\n    if not tokens :\\n        return []\\n\\n    features = tokens2features(tokens)\\n\\n    tags = TAGGER.tag(features)\\n    return zip(tokens, tags)\\n\\ndef tag(raw_string) :\\n    tagged = OrderedDict()\\n    for token, label in parse(raw_string) :\\n        tagged.setdefault(label, []).append(token)\\n\\n    for token in tagged :\\n        component = ' '.join(tagged[token])\\n        component = component.strip(' ,;')\\n        tagged[token] = component\\n\\n    return tagged\\n\\n\\n#  _____________________\\n# |2. CONFIGURE TOKENS! |\\n# |_____________________| \\n#     (\\\\__/) || \\n#     (•ㅅ•) || \\n#     / \\u3000 づ\\ndef tokenize(raw_string):\\n    # this determines how any given string is split into its tokens\\n    # handle any punctuation you want to split on, as well as any punctuation to capture\\n    \\n    re_tokens = # re.compile( [REGEX HERE], re.VERBOSE | re.UNICODE)\\n    tokens = re_tokens.findall(raw_string)\\n\\n    if not tokens :\\n        return []\\n    return tokens\\n\\n\\n#  _______________________\\n# |3. CONFIGURE FEATURES! |\\n# |_______________________| \\n#     (\\\\__/) || \\n#     (•ㅅ•) || \\n#     / \\u3000 づ\\ndef tokens2features(tokens):\\n    # this should call tokenFeatures to get features for individual tokens,\\n    # as well as define any features that are dependent upon tokens before/after\\n    \\n    feature_sequence = [tokenFeatures(tokens[0])]\\n    previous_features = feature_sequence[-1].copy()\\n\\n    for token in tokens[1:] :\\n        # set features for individual tokens (calling tokenFeatures)\\n        token_features = tokenFeatures(token)\\n        current_features = token_features.copy()\\n\\n        # features for the features of adjacent tokens\\n        feature_sequence[-1]['next'] = current_features\\n        token_features['previous'] = previous_features        \\n        \\n        # DEFINE ANY OTHER FEATURES THAT ARE DEPENDENT UPON TOKENS BEFORE/AFTER\\n        # for example, a feature for whether a certain character has appeared previously in the token sequence\\n        \\n        feature_sequence.append(token_features)\\n        previous_features = current_features\\n\\n    if len(feature_sequence) > 1 :\\n        # these are features for the tokens at the beginning and end of a string\\n        feature_sequence[0]['rawstring.start'] = True\\n        feature_sequence[-1]['rawstring.end'] = True\\n        feature_sequence[1]['previous']['rawstring.start'] = True\\n        feature_sequence[-2]['next']['rawstring.end'] = True\\n\\n    else : \\n        # a singleton feature, for if there is only one token in a string\\n        feature_sequence[0]['singleton'] = True\\n\\n    return feature_sequence\\n\\ndef tokenFeatures(token) :\\n    # this defines a dict of features for an individual token\\n\\n    features = {   # DEFINE FEATURES HERE. some examples:\\n                    'length': len(token),\\n                    'case'  : casing(token),\\n                }\\n\\n    return features\\n\\n# define any other methods for features. this is an example to get the casing of a token\\ndef casing(token) :\\n    if token.isupper() :\\n        return 'upper'\\n    elif token.islower() :\\n        return 'lower' \\n    elif token.istitle() :\\n        return 'title'\\n    elif token.isalpha() :\\n        return 'mixed'\\n    else :\\n        return False\\n\"", "buggy_source_code": "def init_template():\n    return \"#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\nimport pycrfsuite\\nimport os\\nimport re\\nimport warnings\\nfrom collections import OrderedDict\\n\\n\\n#  _____________________\\n# |1. CONFIGURE LABELS! |\\n# |_____________________| \\n#     (\\\\__/) || \\n#     (•ㅅ•) || \\n#     / \\u3000 づ\\nLABELS = [] # The labels should be a list of strings\\n\\n#***************** OPTIONAL CONFIG ***************************************************\\nPARENT_LABEL  = 'TokenSequence'               # the XML tag for each labeled string\\nGROUP_LABEL   = 'Collection'                  # the XML tag for a group of strings\\nNULL_LABEL    = 'Null'                        # the null XML tag\\nMODEL_FILE    = 'learned_settings.crfsuite'   # filename for the crfsuite settings file\\n#************************************************************************************\\n\\n\\ntry :\\n    TAGGER = pycrfsuite.Tagger()\\n    TAGGER.open(os.path.split(os.path.abspath(__file__))[0]+'/'+MODEL_FILE)\\nexcept IOError :\\n    TAGGER = None\\n    warnings.warn('You must train the model (parserator train [traindata] [modulename]) to create the %s file before you can use the parse and tag methods' %MODEL_FILE)\\n\\ndef parse(raw_string):\\n    if not TAGGER:\\n        raise IOError('\\\\nMISSING MODEL FILE: %s\\\\nYou must train the model before you can use the parse and tag methods\\\\nTo train the model annd create the model file, run:\\\\nparserator train [traindata] [modulename]' %MODEL_FILE)\\n\\n    tokens = tokenize(raw_string)\\n    if not tokens :\\n        return []\\n\\n    features = tokens2features(tokens)\\n\\n    tags = TAGGER.tag(features)\\n    return zip(tokens, tags)\\n\\ndef tag(raw_string) :\\n    tagged = OrderedDict()\\n    for token, label in parse(raw_string) :\\n        tagged.setdefault(label, []).append(token)\\n\\n    for token in tagged :\\n        component = ' '.join(tagged[token])\\n        component = component.strip(' ,;')\\n        tagged[token] = component\\n\\n    return tagged\\n\\n\\n#  _____________________\\n# |2. CONFIGURE TOKENS! |\\n# |_____________________| \\n#     (\\\\__/) || \\n#     (•ㅅ•) || \\n#     / \\u3000 づ\\ndef tokenize(raw_string):\\n    # this determines how any given string is split into its tokens\\n    # handle any punctuation you want to split on, as well as any punctuation to capture\\n\\n    if isinstance(raw_string, bytes):\\n        try:\\n            raw_string = str(raw_string, encoding='utf-8')\\n        except:\\n            raw_string = str(raw_string)\\n    \\n    re_tokens = # re.compile( [REGEX HERE], re.VERBOSE | re.UNICODE)\\n    tokens = re_tokens.findall(raw_string)\\n\\n    if not tokens :\\n        return []\\n    return tokens\\n\\n\\n#  _______________________\\n# |3. CONFIGURE FEATURES! |\\n# |_______________________| \\n#     (\\\\__/) || \\n#     (•ㅅ•) || \\n#     / \\u3000 づ\\ndef tokens2features(tokens):\\n    # this should call tokenFeatures to get features for individual tokens,\\n    # as well as define any features that are dependent upon tokens before/after\\n    \\n    feature_sequence = [tokenFeatures(tokens[0])]\\n    previous_features = feature_sequence[-1].copy()\\n\\n    for token in tokens[1:] :\\n        # set features for individual tokens (calling tokenFeatures)\\n        token_features = tokenFeatures(token)\\n        current_features = token_features.copy()\\n\\n        # features for the features of adjacent tokens\\n        feature_sequence[-1]['next'] = current_features\\n        token_features['previous'] = previous_features        \\n        \\n        # DEFINE ANY OTHER FEATURES THAT ARE DEPENDENT UPON TOKENS BEFORE/AFTER\\n        # for example, a feature for whether a certain character has appeared previously in the token sequence\\n        \\n        feature_sequence.append(token_features)\\n        previous_features = current_features\\n\\n    if len(feature_sequence) > 1 :\\n        # these are features for the tokens at the beginning and end of a string\\n        feature_sequence[0]['rawstring.start'] = True\\n        feature_sequence[-1]['rawstring.end'] = True\\n        feature_sequence[1]['previous']['rawstring.start'] = True\\n        feature_sequence[-2]['next']['rawstring.end'] = True\\n\\n    else : \\n        # a singleton feature, for if there is only one token in a string\\n        feature_sequence[0]['singleton'] = True\\n\\n    return feature_sequence\\n\\ndef tokenFeatures(token) :\\n    # this defines a dict of features for an individual token\\n\\n    features = {   # DEFINE FEATURES HERE. some examples:\\n                    'length': len(token),\\n                    'case'  : casing(token),\\n                }\\n\\n    return features\\n\\n# define any other methods for features. this is an example to get the casing of a token\\ndef casing(token) :\\n    if token.isupper() :\\n        return 'upper'\\n    elif token.islower() :\\n        return 'lower' \\n    elif token.istitle() :\\n        return 'title'\\n    elif token.isalpha() :\\n        return 'mixed'\\n    else :\\n        return False\\n\"", "edit_actions": ["update-node"]}
{"fixed_source_code": "def test_candidate_recall(self):\n    recall = api.calculate_recall_for_kw_candidates(verbose=False)\n    self.assertGreater(recall, 0)", "buggy_source_code": "def test_candidate_recall(self):\n    recall = calculate_recall_for_kw_candidates(verbose=False)\n    self.assertGreater(recall, 0)", "edit_actions": ["move-tree", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_anonymous_gets_404(self):\n    response = self.change_username('bob', auth_as=None, expecting_error=True)\n    assert response.code == 404", "buggy_source_code": "def test_anonymous_gets_404(self):\n    (code, body) = self.change_username('bob', auth_as=None, as_json=False)\n    assert code == 404", "edit_actions": ["insert-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_empty(self):\n    response = self.change_username('      ', expecting_error=True)\n    assert response.code == 400\n    assert response.body == 'You need to provide a username!'", "buggy_source_code": "def test_empty(self):\n    (code, body) = self.change_username('      ')\n    assert code == 400\n    assert body['error_message_long'] == 'You need to provide a username!'", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_participant_can_change_their_username(self):\n    response = self.change_username('bob')\n    actual = json.loads(response.body)['username']\n    assert actual == 'bob'", "buggy_source_code": "def test_participant_can_change_their_username(self):\n    (code, body) = self.change_username('bob')\n    assert code == 200\n    assert body['username'] == 'bob'", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef description(self):\n    return 'A handle of this window which can be closed and opened.'", "buggy_source_code": "@property\ndef description(self):\n    return 'A window handle which can be closed and opened.'", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef description(self):\n    return 'A lock of this window which can be locked and unlocked.'", "buggy_source_code": "@property\ndef description(self):\n    return 'A window lock which can be locked and unlocked.'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def run(self, edit):\n    self.edit = edit\n    Msgs.operation = 'PhpunitRunAllTestsCommand.run'\n    cmd = PhpunitCommand(self.view.window())\n    cmd.run(self.path_to_config)", "buggy_source_code": "def run(self, edit):\n    self.edit = edit\n    Msgs.operation = 'PhpunitRunAllTestsCommand.run'\n    cmd = PhpunitCommand(self.view.window(), edit)\n    cmd.run(self.path_to_config)", "edit_actions": ["insert-node", "move-tree", "insert-node", "insert-node"]}
{"fixed_source_code": "def onRemoteError(self, code, message, request_info):\n    RootPanel().add(HTML('Server Error or Invalid Response: ERROR ' + code + ' - ' + message))", "buggy_source_code": "def onRemoteError(self, code, message, request_info):\n    RootPanel().add(HTML('Server Error or Invalid Response: ERROR %s - %s' % (code, message)))", "edit_actions": ["insert-node", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def delete_s(self, dn):\n    datastore.Redis.instance().delete(self._redis_prefix + dn)", "buggy_source_code": "def delete_s(self, dn):\n    datastore.Redis.instance().delete('%s%s' % (self.__redis_prefix, dn))", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "update-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_no_match(self):\n    my_config = self.get_location_config('/')\n    self.assertEqual(None, my_config._get_section())", "buggy_source_code": "def test__get_section_no_match(self):\n    self.get_location_config('/')\n    self.assertEqual(None, self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_subdir_child_child(self):\n    my_config = self.get_location_config('/a/foo/bar')\n    self.assertEqual('/a/', my_config._get_section())", "buggy_source_code": "def test__get_section_subdir_child_child(self):\n    self.get_location_config('/a/foo/bar')\n    self.assertEqual('/a/', self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test__get_section_subdir_trailing_slash(self):\n    my_config = self.get_location_config('/b')\n    self.assertEqual('/b/', my_config._get_section())", "buggy_source_code": "def test__get_section_subdir_trailing_slash(self):\n    self.get_location_config('/b')\n    self.assertEqual('/b/', self.my_config._get_section())", "edit_actions": ["move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_award_fin_mixed(self):\n    jobId = self.jobIdDict['awardFinMixed']\n    self.passed = self.run_test(jobId, 200, 'finished', 17580, 5, 'complete', 88, True)", "buggy_source_code": "def test_award_fin_mixed(self):\n    jobId = self.jobIdDict['awardFinMixed']\n    self.passed = self.run_test(jobId, 200, 'finished', 17268, 5, 'complete', 87, True)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def test_program_mixed(self):\n    jobId = self.jobIdDict['programMixed']\n    self.passed = self.run_test(jobId, 200, 'finished', 21372, 4, 'complete', 119, True)", "buggy_source_code": "def test_program_mixed(self):\n    jobId = self.jobIdDict['programMixed']\n    self.passed = self.run_test(jobId, 200, 'finished', 21060, 4, 'complete', 118, True)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def a_change(self, changes, ip, full_domain, change_action):\n    change = changes.add_change(change_action, full_domain, 'A')\n    change.add_value(ip)", "buggy_source_code": "def a_change(self, changes, ip, full_domain, action):\n    change = changes.add_change(action, full_domain, 'A')\n    change.add_value(ip)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def mx_change(self, changes, full_domain, change_action):\n    change = changes.add_change(change_action, full_domain, 'MX')\n    change.add_value('1 {0}'.format(full_domain))", "buggy_source_code": "def mx_change(self, changes, full_domain, mx, action):\n    change = changes.add_change(action, full_domain, 'MX')\n    change.add_value(mx)", "edit_actions": ["insert-node", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def aaaa_change(self, changes, ip, full_domain, change_action):\n    change = changes.add_change(change_action, full_domain, 'AAAA')\n    change.add_value(ip)", "buggy_source_code": "def aaaa_change(self, changes, ip, full_domain, action):\n    change = changes.add_change(action, full_domain, 'AAAA')\n    change.add_value(ip)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@property\ndef anaphase(self):\n    try:\n        return self.analysis['anaphase_start']\n    except:\n        return None", "buggy_source_code": "@property\ndef anaphase(self):\n    try:\n        return self.annotations['anaphase']\n    except:\n        return None", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def member_count(self):\n    return len(self.members.all())", "buggy_source_code": "def member_count(self):\n    return self.members.count()", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __repr__(self):\n    return '\\n'.join([self.creates_message()] + [self.command_message(command=command) for command in self.command])", "buggy_source_code": "def __repr__(self):\n    return '\\n'.join([self.creates_message()] + [self.command_message(command=command) for command in self.command_list])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_api_path(end):\n    return 'http://localhost:3000/api/v1/' + end", "buggy_source_code": "def get_api_path(end):\n    return 'https://hyperchamber.255bits.com/api/v1/' + end", "edit_actions": ["update-node"]}
{"fixed_source_code": "def stop(self):\n    WThreadTask.stop(self)", "buggy_source_code": "def stop(self):\n    WThreadedApp.stop(self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def start(self):\n    WThreadTask.start(self)", "buggy_source_code": "def start(self):\n    WThreadedApp.start(self)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_team_submissions(tid):\n    db = api.common.get_conn()\n    return db.submissions.find({'tid': tid})", "buggy_source_code": "def get_team_submissions(tid):\n    db = api.common.get_conn()\n    return list(db.submissions.find({'tid': tid}))", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def test_invalid_load_from(self):\n    self.test_data['jobtype']['load_from'] = ''\n    with self.assertRaises(Invalid):\n        Assign.SCHEMA(self.test_data, {})", "buggy_source_code": "def test_invalid_load_from(self):\n    self.test_data['jobtype']['load_from'] = ''\n    self.assertRaises(Invalid, lambda : Assign.SCHEMA(self.test_data, {}))", "edit_actions": ["move-tree", "move-tree", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def onTempoChange(self, beatsPerMinute):\n    self._log.debug('onTempoChange({})'.format(beatsPerMinute))\n    self.beatsPerMin = beatsPerMinute", "buggy_source_code": "def onTempoChange(self, beatsPerMinute):\n    self._log.debug('onTempoChange({})'.format(beatsPerMinute))\n    self._beatsPerMin = beatsPerMinute", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return '%s %s %s %s %s' % (self.datetime, self.fqdn, self.priority, self.source, self.message)", "buggy_source_code": "def __str__(self):\n    return '%s %s %s %s %s %s' % (self.datetime, self.fqdn, self.severity, self.facility, self.tag, self.message)", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "insert-node"]}
{"fixed_source_code": "def _pick_connection(devicefile):\n    if isinstance(devicefile, unicode):\n        devicefile = devicefile.encode('ascii')\n    if isinstance(devicefile, str):\n        return lpprinter\n    return netprinter", "buggy_source_code": "def _pick_connection(devicefile):\n    if isinstance(devicefile, unicode):\n        devicefile = devicefile.encode('ascii')\n    if isinstance(devicefile, str):\n        return linux_lpprinter\n    return netprinter", "edit_actions": ["update-node"]}
{"fixed_source_code": "def comments(self, embedUrl=None):\n    if not embedUrl:\n        embedUrl = request.base_url\n    return self._comment_feed_markup(embed_url)", "buggy_source_code": "def comments(self, embedUrl=None):\n    if not embedUrl:\n        embedUrl = request.base_url\n    return self._comment_feed_markup(embedUrl)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def add_bundled_packages_to_path() -> None:\n    if settings.pcs_bundled_pacakges_dir not in sys.path:\n        sys.path.insert(0, settings.pcs_bundled_pacakges_dir)", "buggy_source_code": "def add_bundled_packages_to_path() -> None:\n    if settings.pcs_bundled_packages_dir not in sys.path:\n        sys.path.insert(0, settings.pcs_bundled_packages_dir)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_default_callbacks(writer: crt.Writer):\n    return ComposeCallback([WriteDataCallback(writer), WriteFilesCallback(writer), WriteNamesCallback(writer), WriteImageInformationCallback(writer), WriteSubjectCallback(writer)])", "buggy_source_code": "def get_default_callbacks(writer: wr.Writer):\n    return ComposeCallback([WriteDataCallback(writer), WriteFilesCallback(writer), WriteNamesCallback(writer), WriteImageInformationCallback(writer), WriteSubjectCallback(writer)])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def vals_to_string(dictionary, sep=' '):\n    return sep.join([str(val) for val in dictionary.vals()])", "buggy_source_code": "def vals_to_string(dictionary, sep=' '):\n    return sep.join([str(val) for val in dictionary.values()])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def skipUnlessReturnsTrue(predicate):\n    if not predicate():\n        desc = getattr(predicate, '__doc__', None) or repr(predicate)\n        return skip('predicate evaluated to false: %s', desc)\n    return identity()", "buggy_source_code": "def skipUnlessReturnsTrue(predicate):\n    if not predicate():\n        desc = getattr(predicate, '__doc__', None) or repr(predicate)\n        return skip('predicate evaluated to false: %s' % desc)\n    return identity()", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def skipIfReturnsTrue(predicate):\n    if predicate():\n        desc = getattr(predicate, '__doc__', None) or repr(predicate)\n        return skip('predicate evaluated to true: %s', desc)\n    return identity()", "buggy_source_code": "def skipIfReturnsTrue(predicate):\n    if predicate():\n        desc = getattr(predicate, '__doc__', None) or repr(predicate)\n        return skip('predicate evaluated to true: %s' % desc)\n    return identity()", "edit_actions": ["insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def verify_direct_dimensions(node):\n    for (access, packing) in node.type.axes:\n        if access != 'direct':\n            error(self.pos, 'All dimensions must be direct')", "buggy_source_code": "def verify_direct_dimensions(node):\n    for (access, packing) in node.type.axes:\n        if access != 'direct':\n            error(node.pos, 'All dimensions must be direct')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def forwards(self, orm):\n    db.start_transaction()\n    orm.CustomUser.objects.raw('UPDATE auth_customuser SET show_tutorial=0')\n    db.commit_transaction()", "buggy_source_code": "def forwards(self, orm):\n    cursor = connection.cursor()\n    cursor.execute('UPDATE auth_customuser SET show_tutorial=0')\n    transaction.commit_unless_managed()", "edit_actions": ["insert-node", "update-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "update-node", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def applyTransform(self, mat):\n    self.contextStack[-1].transform = np.dot(self.contextStack[-1].transform, mat)", "buggy_source_code": "def applyTransform(self, mat):\n    self.contextStack[-1].transform = np.matmul(self.contextStack[-1].transform, mat)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def op_WorldBegin(self, op):\n    self.op_Identity(op)\n    self.coords['world'] = self.contextStack[-1].transform", "buggy_source_code": "def op_WorldBegin(self, op):\n    self.op_Identity(op)\n    self.coords['world'] = np.copy(self.contextStack[-1].transform)", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def get_version():\n    return '%s.%s.%s' % VERSION", "buggy_source_code": "def get_version():\n    return '%s.%s.%s-rc1' % VERSION", "edit_actions": ["update-node"]}
{"fixed_source_code": "def getFullFlavor(self):\n    return deps.overrideFlavor(self.flavor, self.cfg.buildFlavor)", "buggy_source_code": "def getFullFlavor(self):\n    return deps.overrideFlavor(self.cfg.buildFlavor, self.flavor)", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def _keysHandler(settings, logger, client, socket, list_manager):\n    _send(socket, client, str(list_manager.node_list.print_elements()) + '\\r\\n')", "buggy_source_code": "def _keysHandler(settings, logger, client, socket, list_manager):\n    _send(socket, client, str(list_manager.node_list.print_list()) + '\\r\\n')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_flow_mod(self, config):\n    (flow_mod, _) = get_flow_and_group_mods(self, config)\n    return flow_mod", "buggy_source_code": "def get_flow_mod(self, config):\n    (flow_mod, _) = self.get_flow_and_group_mods(config)\n    return flow_mod", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef nP(self):\n    return self.mesh.vnC[self.mesh.dim - 1]", "buggy_source_code": "@property\ndef nP(self):\n    return int(self.mesh.vnC[self.mesh.dim - 1])", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def changeTime(self, newTime):\n    for i in range(3):\n        for src in self._sliceSources[i]:\n            src.setThrough(0, newTime)", "buggy_source_code": "def changeTime(self, newTime):\n    for i in range(3):\n        self._sliceSources[i].setThrough(0, newTime)", "edit_actions": ["move-tree", "update-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_bootstrap_theme(request):\n    theme = request.cookies.get('theme_cookie')\n    return theme or 'slate'", "buggy_source_code": "def get_bootstrap_theme(request):\n    theme = request.cookies.get('theme_cookie')\n    return theme or 'cyborg'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self, file_bag):\n    QObject.__init__(self)\n    self.file_bag = file_bag\n    self.is_running = False", "buggy_source_code": "def __init__(self, file_bag):\n    QThread.__init__(self)\n    self.file_bag = file_bag\n    self.is_running = False", "edit_actions": ["update-node"]}
{"fixed_source_code": "@route(PREFIX, '/days')\ndef DaysMenu():\n    oc = ObjectContainer()\n    oc.add(DirectoryObject(key=Callback(SarpMenu), title='Í dag'))", "buggy_source_code": "@route(PREFIX, '/daysmenu')\ndef DaysMenu():\n    oc = ObjectContainer()\n    oc.add(DirectoryObject(key=Callback(SarpMenu), title='Í dag'))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def extract(self, rev_id, features, context=None, cache=None):\n    raise NotImplementedError()", "buggy_source_code": "def extract(self, rev_ids, dependents, context=None, caches=None):\n    raise NotImplementedError()", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def _vocab_text_gen(self, filepath):\n    for ex in self._generate_examples(filepath):\n        yield b' '.join([ex['question'], ex['context']])", "buggy_source_code": "def _vocab_text_gen(self, filepath):\n    for ex in self._generate_examples_internal(filepath):\n        yield ' '.join([ex['question'], ex['context']])", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def run(self, edit):\n    self.doCommand(edit, '#', '^[a-zA-Z_]+[a-zA-Z0-9_]+$')", "buggy_source_code": "def run(self, edit):\n    self.doCommand(edit, '#', '^[a-zA-Z_]+[a-zA-Z0-9_]*$')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def run(self, edit):\n    self.doCommand(edit, '@', '^[a-zA-Z_]+[a-zA-Z0-9_]+$')", "buggy_source_code": "def run(self, edit):\n    self.doCommand(edit, '@', '^[a-zA-Z_]+[a-zA-Z0-9_]*$')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def closeDownComponent(self):\n    while 1:\n        outmes = self.filt.filter('')\n        if outmes is None:\n            break\n        self.send(outmes)", "buggy_source_code": "def closeDownComponent(self):\n    while 1:\n        outmes = self.filter.filter('')\n        if outmes is None:\n            break\n        self.send(outmes)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def regional_condition(self):\n    if self.country:\n        return \"\\n    AND deal_country.value = '%s'\\n            \" % self.country\n    elif self.region:\n        return '\\n    AND deal_country.fk_region_id = %s\\n            ' % self.region\n    return ''", "buggy_source_code": "def regional_condition(self):\n    if self.country:\n        return \"deal_country.value = '%s'\" % self.country\n    elif self.region:\n        return 'deal_country.fk_region_id = %s' % self.region\n    return ''", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def scenario_co2_limit(data):\n    glob = data['global']\n    glob.loc['CO2 limit', 'value'] *= 0.05\n    return data", "buggy_source_code": "def scenario_co2_limit(data):\n    global_prop = data['global_prop']\n    global_prop.loc['CO2 limit', 'value'] *= 0.05\n    return data", "edit_actions": ["update-node", "update-node", "update-node"]}
{"fixed_source_code": "def run(self, edit):\n    pkgDir = sublime.packagesPath()\n    target = 'sublimeibusplugin.py'\n    cmd = 'touch'\n    os.system(cmd + ' ' + pkgDir + '/' + target)", "buggy_source_code": "def run(self, edit):\n    pkgDir = sublime.packages_path()\n    target = 'sublimeibusplugin.py'\n    cmd = 'touch'\n    os.system(cmd + ' ' + pkgDir + '/' + target)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@ship.command(pass_context=True)\nasync def jump_snub(self):\n    await self.boy.say('Here ya go: http://imgur.com/a/cOzff')", "buggy_source_code": "@ship.command(name='85x', pass_context=True)\nasync def jump_snub(self):\n    await self.boy.say('Here ya go: http://imgur.com/a/cOzff')", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def clientConnectionFailed(self, connector, reason):\n    ReconnectingClientFactory.clientConnectionFailed(self, connector, reason)\n    log.relay('connection attempt to %s:%d failed: %s' % (self.remoteAddr, reason.value))", "buggy_source_code": "def clientConnectionFailed(self, connector, reason):\n    ReconnectingClientFactory.clientConnectionFailed(self, connector, reason)\n    log.relay('connection attempt to %s failed: %s' % (self.remoteAddr, reason.value))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clientConnectionLost(self, connector, reason):\n    ReconnectingClientFactory.clientConnectionLost(self, connector, reason)\n    self.connectedProtocol = None\n    log.relay('connection to %s lost: %s:%d' % (self.remoteAddr, reason.value))", "buggy_source_code": "def clientConnectionLost(self, connector, reason):\n    ReconnectingClientFactory.clientConnectionLost(self, connector, reason)\n    self.connectedProtocol = None\n    log.relay('connection to %s lost: %s' % (self.remoteAddr, reason.value))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def report(self, showOK=False, warnings=False):\n    raise NotImplementedError", "buggy_source_code": "def report(self, showOK=False, showWarnings=False):\n    raise NotImplementedError", "edit_actions": ["update-node"]}
{"fixed_source_code": "def git_commit(new_version):\n    git('rm NEWS.d/*')\n    git('add CHANGELOG.rst')\n    git('add mock/mock.py')\n    git(f'commit -m \"Preparing for {new_version} release.\"')", "buggy_source_code": "def git_commit(new_version):\n    git('rm NEWS.d/*')\n    git('add CHANGELOG.rst')\n    git('add mock/__init__.py')\n    git(f'commit -m \"Preparing for {new_version} release.\"')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main():\n    if os.path.exists('public'):\n        shutil.rmtree('public')\n    os.system('hugo server -w -v')", "buggy_source_code": "def main():\n    if os.path.exists('public'):\n        shutil.rmtree('public')\n    os.system('hugo server -w')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def validation_simple(value, obj=None):\n    if len(value) > 1:\n        return (True, value)\n    else:\n        return (False, value)", "buggy_source_code": "def validation_simple(value, obj=None):\n    if len(value) >= 1:\n        return (True, value)\n    else:\n        return (False, value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def np_validate(self, batch):\n    raise NotImplementedError(str(type(self)) + ' does not implement np_validate.')", "buggy_source_code": "def np_validate(self, batch):\n    self._meta_validate(batch, 'np_validate_callbacks', self._np_validate)", "edit_actions": ["move-tree", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def validate(self, batch):\n    raise NotImplementedError(str(type(self)) + ' does not implement validate.')", "buggy_source_code": "def validate(self, batch):\n    self._meta_validate(batch, 'validate_callbacks', self._validate)", "edit_actions": ["move-tree", "update-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _failure(self, state_data, retcode=1, result_str='failure', result_data={}):\n    return self._result(state_data, result_code, result_str, result_data)", "buggy_source_code": "def _failure(self, state_data, result_code=1, result_str='failure', result_data={}):\n    return self._result(state_data, result_code, result_str, result_data)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __cmp__(self, other):\n    if not isinstance(other, Rule):\n        return NotImplemented\n    return cmp(len(self._trace), len(other._trace))", "buggy_source_code": "def __cmp__(self, other):\n    if not isinstance(other, Rule):\n        return NotImplemented\n    return cmp(other.compecity, self.complexity)", "edit_actions": ["move-tree", "move-tree", "update-node", "update-node", "update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('Related articles')", "buggy_source_code": "def __str__(self):\n    return ugettext('Related articles')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('%s tags') % (self.app_config.get_app_title(),)", "buggy_source_code": "def __str__(self):\n    return ugettext('%s tags') % (self.app_config.get_app_title(),)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('%s latest articles: %s') % (self.app_config.get_app_title(), self.latest_articles)", "buggy_source_code": "def __str__(self):\n    return ugettext('%s latest articles: %s') % (self.app_config.get_app_title(), self.latest_articles)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('%s authors') % (self.app_config.get_app_title(),)", "buggy_source_code": "def __str__(self):\n    return ugettext('%s authors') % (self.app_config.get_app_title(),)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('%s archive') % (self.app_config.get_app_title(),)", "buggy_source_code": "def __str__(self):\n    return ugettext('%s archive') % (self.app_config.get_app_title(),)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('%s categories') % (self.app_config.get_app_title(),)", "buggy_source_code": "def __str__(self):\n    return ugettext('%s categories') % (self.app_config.get_app_title(),)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return _('%s archive') % (self.app_config.get_app_title(),)", "buggy_source_code": "def __str__(self):\n    return ugettext('%s archive') % (self.app_config.get_app_title(),)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def pr(self):\n    self.q.put(self.Gen(self.dsl, self.batchsize))", "buggy_source_code": "def pr(self):\n    while True:\n        self.q.put(self.Gen(self.dsl, self.batchsize))", "edit_actions": ["insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def tearDown(self):\n    with MongoClient('mongodb://localhost/testdb') as client:\n        client.drop_database('testdb')", "buggy_source_code": "def tearDown(self):\n    with MongoClient('mongodb://travis:test@localhost/testdb') as client:\n        client.drop_database('testdb')", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _prepare_communication(self, invoices):\n    ' '.join((i.invoice_payment_ref or i.ref or i.name for i in invoices))", "buggy_source_code": "def _prepare_communication(self, invoices):\n    return ' '.join((i.invoice_payment_ref or i.ref or i.name for i in invoices))", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def tearDown(self):\n    db_init()", "buggy_source_code": "def tearDown(self):\n    for kl in KL:\n        self.csp_db.delete(kl['_id'])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_eol_1.yml')\ndef test_ids_eol_single_name(self):\n    self.individual_id_retrieval('eol', 'Panthera tigris')", "buggy_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_eol_single_name.yml')\ndef test_ids_eol_single_name(self):\n    self.individual_id_retrieval('eol', 'Panthera tigris')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_itis_1.yml')\ndef test_ids_itis_single_name(self):\n    self.individual_id_retrieval('itis', 'Panthera tigris')", "buggy_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_itis_single_name.yml')\ndef test_ids_itis_single_name(self):\n    self.individual_id_retrieval('itis', 'Panthera tigris')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_gbif_1.yml')\ndef test_ids_gbif_single_name(self):\n    self.individual_id_retrieval('gbif', 'Panthera tigris')", "buggy_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_gbif_single_name.yml')\ndef test_ids_gbif_single_name(self):\n    self.individual_id_retrieval('gbif', 'Panthera tigris')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_itis_2.yml')\ndef test_ids_itis_list_of_names(self):\n    self.individual_id_retrieval('itis', ['Panthera tigris', 'Panthera leo'])", "buggy_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_itis_list_of_names.yml')\ndef test_ids_itis_list_of_names(self):\n    self.individual_id_retrieval('itis', ['Panthera tigris', 'Panthera leo'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_gbif_2.yml')\ndef test_ids_gbif_list_of_names(self):\n    self.individual_id_retrieval('gbif', ['Panthera tigris', 'Panthera leo'])", "buggy_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_gbif_list_of_names.yml')\ndef test_ids_gbif_list_of_names(self):\n    self.individual_id_retrieval('gbif', ['Panthera tigris', 'Panthera leo'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_eol_2.yml')\ndef test_ids_eol_list_of_names(self):\n    self.individual_id_retrieval('eol', ['Panthera tigris', 'Panthera leo'])", "buggy_source_code": "@vcr.use_cassette('test/vcr_cassettes/ids_eol_list_of_names.yml')\ndef test_ids_eol_list_of_names(self):\n    self.individual_id_retrieval('eol', ['Panthera tigris', 'Panthera leo'])", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Connection error: ' + str(self.reason)", "buggy_source_code": "def __str__(self):\n    return str(self.reason)", "edit_actions": ["move-tree", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef target_type(self):\n    return ContentType.objects.get_for_model(self.content_type).app_name", "buggy_source_code": "@property\ndef target_type(self):\n    return ContentType.objects.get_for_object(self.content_type)", "edit_actions": ["update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef rank_by_median_and_average_rank(self):\n    return data_utils.experiment_level_ranking(self._experiment_snapshots_df, data_utils.benchmark_rank_by_median, data_utils.experiment_rank_by_average_rank)", "buggy_source_code": "@property\ndef rank_by_median_and_average_rank(self):\n    return self._ranking(data_utils.benchmark_rank_by_median, data_utils.experiment_rank_by_average_rank)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef rank_by_average_rank_and_average_rank(self):\n    return data_utils.experiment_level_ranking(self._experiment_snapshots_df, data_utils.benchmark_rank_by_average_rank, data_utils.experiment_rank_by_average_rank)", "buggy_source_code": "@property\ndef rank_by_average_rank_and_average_rank(self):\n    return self._ranking(data_utils.benchmark_rank_by_average_rank, data_utils.experiment_rank_by_average_rank)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef rank_by_median_and_average_normalized_score(self):\n    return data_utils.experiment_level_ranking(self._experiment_snapshots_df, data_utils.benchmark_rank_by_median, data_utils.experiment_rank_by_average_normalized_score)", "buggy_source_code": "@property\ndef rank_by_median_and_average_normalized_score(self):\n    return self._ranking(data_utils.benchmark_rank_by_median, data_utils.experiment_rank_by_average_normalized_score)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef rank_by_median_and_number_of_firsts(self):\n    return data_utils.experiment_level_ranking(self._experiment_snapshots_df, data_utils.benchmark_rank_by_median, data_utils.experiment_rank_by_num_firsts)", "buggy_source_code": "@property\ndef rank_by_median_and_number_of_firsts(self):\n    return self._ranking(data_utils.benchmark_rank_by_median, data_utils.experiment_rank_by_num_firsts)", "edit_actions": ["update-node", "update-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_decorators(self):\n    dispatcher = d.Dispatcher()\n\n    @d.expose(dispatcher, 'foo')\n    def foo(env, req):\n        pass", "buggy_source_code": "def test_decorators(self):\n    dispatcher = verktyg.Dispatcher()\n\n    @vtv.expose(dispatcher, 'foo')\n    def foo(env, req):\n        pass", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def get_canned_report_names(self):\n    return self._canned_reports.keys()", "buggy_source_code": "def get_canned_report_names(self):\n    return list(self._canned_reports.keys())", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def sector(angle, radius, rad=False):\n    if not rad:\n        angle = math.degrees(angle)\n    return angle / 360 * (math.pi * radius ** 2)", "buggy_source_code": "def sector(angle, radius, rad=False):\n    if rad:\n        angle = math.degrees(angle)\n    return angle / 360 * (math.pi * radius ** 2)", "edit_actions": ["move-tree", "delete-node"]}
{"fixed_source_code": "def p_increment_delay_list(p):\n    for d in p[3]:\n        d['is_increment'] = True\n    delays_list.extend(list(p[3]))\n    tmp_delay_list[:] = []", "buggy_source_code": "def p_increment_delay_list(p):\n    for d in p[3]:\n        d['is_incremental'] = True\n    delays_list.extend(list(p[3]))\n    tmp_delay_list[:] = []", "edit_actions": ["update-node"]}
{"fixed_source_code": "def start(self):\n    self.proc = subprocess.Popen('ache', 'startCrawl', self.crawl_dir, self.seeds_file, self.model_dir, self.lang_detect_profile)\n    return self.proc.pid", "buggy_source_code": "def start(self):\n    self.proc = subprocess.Popen(['ache', 'startCrawl', self.crawl_dir, self.seeds_file, self.model_dir, self.lang_detect_profile])\n    return self.proc.pid", "edit_actions": ["insert-node", "insert-node", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def __str__(self):\n    return repr('{} ({}) in {} near #{}'.format(self.local_var, self.local_var.__class__, self.filename, self.line))", "buggy_source_code": "def __str__(self):\n    return repr('{} ({}) in {} near #{}'.format(self.local_var.__class__, self.local_var, self.filename, self.line))", "edit_actions": ["move-tree", "move-tree"]}
{"fixed_source_code": "def add_name_test(self):\n    if self.element == '*':\n        return\n    self.add_condition('name() = %s' % xpath_repr(self.element))\n    self.element = '*'", "buggy_source_code": "def add_name_test(self):\n    if self.element == '*':\n        return\n    self.add_condition('name() = %s' % xpath_literal(self.element))\n    self.element = '*'", "edit_actions": ["update-node"]}
{"fixed_source_code": "def xpath(self):\n    path = self.selector.xpath()\n    path.add_condition('@id = %s' % xpath_repr(self.id))\n    return path", "buggy_source_code": "def xpath(self):\n    path = self.selector.xpath()\n    path.add_condition('@id = %s' % xpath_literal(self.id))\n    return path", "edit_actions": ["update-node"]}
{"fixed_source_code": "def xpath(self):\n    sel_xpath = self.selector.xpath()\n    sel_xpath.add_condition(\"contains(concat(' ', normalize-space(@class), ' '), %s)\" % xpath_repr(' ' + self.class_name + ' '))\n    return sel_xpath", "buggy_source_code": "def xpath(self):\n    sel_xpath = self.selector.xpath()\n    sel_xpath.add_condition(\"contains(concat(' ', normalize-space(@class), ' '), %s)\" % xpath_literal(' ' + self.class_name + ' '))\n    return sel_xpath", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    prefix = self.prefix or ''\n    return ' | '.join([prefix + str(i) for i in self.items])", "buggy_source_code": "def __str__(self):\n    prefix = self.prefix or ''\n    return ' | '.join(['%s%s' % (prefix, i) for i in self.items])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "move-tree", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def embed_cbi_metadata(self):\n    self.overlay_metadata(self.cbi_metadata)\n    cbi_string = ComicBookInfo().stringFromMetadata(self.cbi_metadata)\n    self.make_temp_cbz_file()\n    writeZipComment(self.file, cbi_string)", "buggy_source_code": "def embed_cbi_metadata(self):\n    self.overlay_metadata()\n    cbi_string = ComicBookInfo().stringFromMetadata(self.comic_metadata)\n    self.make_temp_cbz_file()\n    writeZipComment(self.file, cbi_string)", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def _disk_image_create(self, args):\n    subprocess.call('disk-image-create {0}'.format(args), shell=True)", "buggy_source_code": "def _disk_image_create(self, args):\n    subprocess.check_call('disk-image-create {0}'.format(args), shell=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def _ramdisk_image_create(self, args):\n    subprocess.call('ramdisk-image-create {0}'.format(args), shell=True)", "buggy_source_code": "def _ramdisk_image_create(self, args):\n    subprocess.check_call('ramdisk-image-create {0}'.format(args), shell=True)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def refresh_assets_nodes(self):\n    self.get_user_assets_async()\n    self.get_user_nodes_async()", "buggy_source_code": "def refresh_assets_nodes(self):\n    self.get_user_assets_and_update_async()\n    self.get_user_nodes_async()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Region(RID: %s. %s neighborhood(s), %s household(s), %s person(s))' % (self.get_ID(), len(self._members), self.get_num_households(), self.num_persons())", "buggy_source_code": "def __str__(self):\n    return 'Region(RID: %s. %s neighborhood(s), %s household(s), %s person(s))' % (self.get_ID(), len(self._members), self.num_households(), self.num_persons())", "edit_actions": ["update-node"]}
{"fixed_source_code": "def items(self):\n    return self.comments_class.objects.filter(**self._get_lookup_kwargs())", "buggy_source_code": "def items(self):\n    return self.comments_class.objects.filter(site__pk=settings.SITE_ID, is_public=True)[:40]", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "update-node", "update-node", "delete-node"]}
{"fixed_source_code": "def save_game(self):\n    messagebox.showinfo('Save', 'Game Saved!')\n    self.game_data.save_data(self.character, self.boss)\n    self.game_data.save_to_file()", "buggy_source_code": "def save_game(self):\n    GUI.notify('', 'Game data saved!')\n    self.game_data.save_data(self.character, self.boss)\n    self.game_data.save_to_file()", "edit_actions": ["update-node", "update-node", "update-node", "update-node"]}
{"fixed_source_code": "@classmethod\ndef get_display_priority(cls, main_data):\n    if main_data.role in 'cryo-secom':\n        return 2\n    else:\n        return None", "buggy_source_code": "@classmethod\ndef get_display_priority(cls, main_data):\n    if main_data.role in ('cryo-secom',):\n        return 2\n    else:\n        return None", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def __init__(self, player_key, position):\n    super(Base, self).__init__()\n    self.player_key = player_key\n    self.position = position\n    self.__xml_builder()\n    self.__json_builder()", "buggy_source_code": "def __init__(self, player_key, position):\n    super(Base, self).__init__()\n    self.player_key = player_key\n    self.position = position\n    self.xml_builder()\n    self.json_builder()", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "@mock.patch('pyzabbix.ZabbixAPI')\ndef test_get_manager_that_does_not_exist(self, zabbix_mock):\n    os.environ['API_MANAGER'] = 'doesnotexist'\n    with self.assertRaises(ValueError):\n        api.get_manager()", "buggy_source_code": "@mock.patch('healthcheck.backends.Zabbix')\ndef test_get_manager_that_does_not_exist(self, zabbix_mock):\n    os.environ['API_MANAGER'] = 'doesnotexist'\n    with self.assertRaises(ValueError):\n        api.get_manager()", "edit_actions": ["update-node"]}
{"fixed_source_code": "@staticmethod\ndef _create_entity_component_years(learning_components, requirement_entity_container):\n    for component_year in learning_components:\n        EntityComponentYear.objects.update_or_create(entity_container_year=requirement_entity_container, learning_component_year=component_year, repartition_volume=component_year.hourly_volume_total_annual)", "buggy_source_code": "@staticmethod\ndef _create_entity_component_years(learning_components, requirement_entity_container):\n    for component_year in learning_components:\n        EntityComponentYear.objects.update_or_create(entity_container_year=requirement_entity_container, learning_component_year=component_year, defaults={'repartition_volume': component_year.hourly_volume_total_annual})", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def process_request(self, request):\n    self.headers = self.debug_headers.available_headers(request)", "buggy_source_code": "def process_request(self, request):\n    self.headers = dict([(k, request.META[k]) for k in self.header_filter if k in request.META])", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def initialize(self):\n    return False", "buggy_source_code": "def initialize(self):\n    return True", "edit_actions": []}
{"fixed_source_code": "def read(self, num_bytes=None):\n    self._storage._read(self.name, num_bytes=num_bytes)", "buggy_source_code": "def read(self, num_bytes=None):\n    return self._storage._read(self.name, num_bytes=num_bytes)", "edit_actions": ["insert-node", "move-tree"]}
{"fixed_source_code": "def check_if_child_exists(self):\n    return sql('select name from `tabCost Center` where parent_cost_center = %s and docstatus != 2', self.doc.name, debug=1)", "buggy_source_code": "def check_if_child_exists(self):\n    return sql('select name from `tabCost Center` where parent_cost_center = %s and docstatus != 2', self.doc.name, debug=0)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def purchase_reserved_instance_offering(self, reserved_instance_offering_id, instance_count=1):\n    params = {'ReservedInstanceOfferingId': reserved_instance_offering_id, 'InstanceCount': instance_count}\n    return self.get_object('PurchaseReservedInstancesOffering', params, ReservedInstance)", "buggy_source_code": "def purchase_reserved_instance_offering(self, reserved_instances_offering_id, instance_count=1):\n    params = {'ReservedInstancesOfferingId': reserved_instance_offering_id, 'InstanceCount': instance_count}\n    return self.get_object('PurchaseReservedInstancesOffering', params, ReservedInstance)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def dictionary(value):\n    if not value:\n        return {}\n    try:\n        return ast.commonlibral_eval(value)\n    except:\n        raise ValueError('%r is not a valid Python dictionary' % value)", "buggy_source_code": "def dictionary(value):\n    if not value:\n        return {}\n    try:\n        return ast.literal_eval(value)\n    except:\n        raise ValueError('%r is not a valid Python dictionary' % value)", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef connected(self):\n    return self._cookies is not None", "buggy_source_code": "@property\ndef connected(self):\n    return self.have_credentials", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@property\ndef logged_in(self):\n    return self._cookies is not None", "buggy_source_code": "@property\ndef logged_in(self):\n    return self.have_credentials", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def test_get_incar(self):\n    incar = self.vis.get_incar(self.struct)\n    self.assertNotIn('LDAUU', incar)\n    self.assertAlmostEqual(incar['EDIFF'], 0.0012)", "buggy_source_code": "def test_get_incar(self):\n    incar = self.vis.get_incar(self.struct)\n    self.assertNotIn('LDAUU', incar)\n    self.assertAlmostEqual(incar['EDIFF'], 5e-05)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def start_one(self, motion):\n    self.axis_proxy.position = float(motion.target_pos / self._spu)", "buggy_source_code": "def start_one(self, motion):\n    self.axis_proxy.position = float(motion.target_pos / motion.axis.steps_per_unit)", "edit_actions": ["update-node", "insert-node", "update-node", "insert-node"]}
{"fixed_source_code": "def check_cert(self, certr):\n    return requests.get(certr.uri)", "buggy_source_code": "def check_cert(self, certr):\n    return self._get(certr.uri)", "edit_actions": ["update-node", "update-node"]}
{"fixed_source_code": "def execute():\n    frappe.reload_doctype('Web Form Field')\n    erpnext.setup.install.add_web_forms()", "buggy_source_code": "def execute():\n    frappe.reload_doc('website', 'doctype', 'web_form_field', force=True)\n    erpnext.setup.install.add_web_forms()", "edit_actions": ["update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node"]}
{"fixed_source_code": "def restore_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        write_string(u'\\x1b[23t', self._screen_file)", "buggy_source_code": "def restore_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        write_string(u'\\x1b[23;0t', self._screen_file)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def save_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        write_string(u'\\x1b[22t', self._screen_file)", "buggy_source_code": "def save_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if 'TERM' in os.environ:\n        write_string(u'\\x1b[22;0t', self._screen_file)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def get_customer(self, account):\n    return self.get_account_map().get(account).get('customer_name') or ''", "buggy_source_code": "def get_customer(self, account):\n    return self.get_account_map().get(account).get('customer') or ''", "edit_actions": ["update-node"]}
{"fixed_source_code": "def main():\n    logging.basicConfig(stream=sys.stderr, level=logging.INFO)\n    return command(**vars(get_parser().parse_args()))", "buggy_source_code": "def main():\n    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n    return command(**vars(get_parser().parse_args()))", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __str__(self):\n    return 'Player %s - %s (%s)' % (self.pid, self.name, self.actual_race)", "buggy_source_code": "def __str__(self):\n    return 'Player %s - %s (%s)' % (self.pid, self.name, self.play_race)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def execute():\n    from webnotes.modules import reload_doc\n    reload_doc('buying', 'Report', 'Supplier Quotations')", "buggy_source_code": "def execute():\n    from webnotes.modules import reload_doc\n    reload_doc('Buying', 'Report', 'Supplier Quotations')", "edit_actions": ["update-node"]}
{"fixed_source_code": "@property\ndef org_names(self):\n    return [t['org_name'] for t in self.orgs]", "buggy_source_code": "@property\ndef org_names(self):\n    return [t['tenant_name'] for t in self.orgs]", "edit_actions": ["update-node"]}
{"fixed_source_code": "def cython_preamble():\n    return ['# This file is generated automatically by QuTiP. (C) 2011-2013 Paul D. Nation & J. R. Johansson\\nimport numpy as np\\nfrom numpy import *\\ncimport numpy as np\\ncimport cython\\nfrom qutip.cy.spmatfuncs import spmv_csr, spmvpy\\n\\nctypedef np.complex128_t CTYPE_t\\nctypedef np.float64_t DTYPE_t\\n']", "buggy_source_code": "def cython_preamble():\n    return ['# This file is generated automatically by QuTiP.\\n# (C) 2011-2013 Paul D. Nation & J. R. Johansson\\nimport numpy as np\\nfrom math import *\\ncimport numpy as np\\ncimport cython\\nfrom qutip.cy.spmatfuncs import spmv_csr, spmvpy\\n\\nctypedef np.complex128_t CTYPE_t\\nctypedef np.float64_t DTYPE_t\\n']", "edit_actions": ["update-node"]}
{"fixed_source_code": "def decode_value(self, value):\n    if self.encoding == 'base64':\n        self.encoding = None\n        return base64.decode(value)\n    else:\n        return value", "buggy_source_code": "def decode_value(self, value):\n    if self.encoding == 'base64':\n        self.encoding = None\n        return base64.decodestring(value)\n    else:\n        return value", "edit_actions": ["update-node"]}
{"fixed_source_code": "@step('I get the links, breadcrumbs, and titles from the url')\ndef browse_content(step):\n    httpretty.disable()\n    httpretty.reset()\n    world.output = str(getbrowsecontent(world.url, 'browse'))", "buggy_source_code": "@step('I get the links, breadcrumbs, and titles from the url')\ndef browse_content(step):\n    world.output = str(getbrowsecontent(world.url, 'browse'))\n    httpretty.disable()\n    httpretty.reset()", "edit_actions": ["insert-node", "move-tree", "move-tree", "delete-node"]}
{"fixed_source_code": "def on_browse_rooms_button_clicked(self, widget):\n    server = self.server_comboboxentry.get_child().get_text()\n    self.requested_jid = server\n    gajim.connections[self.account].discoverInfo(server)", "buggy_source_code": "def on_browse_rooms_button_clicked(self, widget):\n    server = self.server_comboboxtext.get_child().get_text()\n    self.requested_jid = server\n    gajim.connections[self.account].discoverInfo(server)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def set_vsync(self, vsync=True):\n    from objc import __version__ as pyobjc_version\n    if float(pyobjc_version[:3]) >= 2.3:\n        self._nscontext.setValues_forParameter_(vsync, NSOpenGLCPSwapInterval)", "buggy_source_code": "def set_vsync(self, vsync=True):\n    vals = c_long(vsync)\n    send_message(self._nscontext, 'setValues:forParameter:', byref(vals), NSOpenGLCPSwapInterval, argtypes=[POINTER(c_long), c_int])", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "update-node", "move-tree", "update-node", "move-tree", "update-node", "move-tree", "insert-node", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "update-node", "move-tree", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "def get_vsync(self):\n    value = self._nscontext.getValues_forParameter_(None, NSOpenGLCPSwapInterval)\n    return value", "buggy_source_code": "def get_vsync(self):\n    vals = c_long()\n    send_message(self._nscontext, 'getValues:forParameter:', byref(vals), NSOpenGLCPSwapInterval, argtypes=[POINTER(c_long), c_int])\n    return vals.value", "edit_actions": ["insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "update-node", "move-tree", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "insert-node", "move-tree", "move-tree", "insert-node", "move-tree", "insert-node", "insert-node", "insert-node", "update-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "delete-node", "delete-node", "delete-node", "delete-node"]}
{"fixed_source_code": "@staticmethod\ndef is_valid_title(title):\n    return len(title) <= 128", "buggy_source_code": "@staticmethod\ndef is_valid_title(list_title):\n    return len(list_title) <= 128 and list_title", "edit_actions": ["update-node", "insert-node", "move-tree", "insert-node", "update-node"]}
{"fixed_source_code": "def get_absolute_url(self):\n    return '%s#post%s' % (self.thread.get_absolute_url(), self.id)", "buggy_source_code": "def get_absolute_url(self):\n    return '%s?page=last#post%s' % (self.thread.get_absolute_url(), self.id)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def forwards(self, orm):\n    db.add_column(u'auth_user', 'has_valid_gravatar', self.gf('django.db.models.fields.BooleanField')(default=False))", "buggy_source_code": "def forwards(self, orm):\n    try:\n        db.add_column(u'auth_user', 'has_valid_gravatar', self.gf('django.db.models.fields.BooleanField')(default=False))\n    except:\n        pass", "edit_actions": ["insert-node", "insert-node", "move-tree", "insert-node", "insert-node", "move-tree"]}
{"fixed_source_code": "def load_character(self):\n    form = self.form\n    path = self.select_load_path()\n    form.load_character_from(path)", "buggy_source_code": "def load_character(self):\n    form = self.form\n    path = form.select_load_path()\n    form.load_character_from(path)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    self.data = WeakKeyDictionary()", "buggy_source_code": "def __init__(self):\n    self._data = WeakKeyDictionary()", "edit_actions": ["update-node"]}
{"fixed_source_code": "def clear_schema(self, schema):\n    self.data.pop(schema)", "buggy_source_code": "def clear_schema(self, schema):\n    self.data.pop(schema, None)", "edit_actions": ["insert-node", "move-tree", "insert-node"]}
{"fixed_source_code": "def get_absolute_url(self):\n    return '/yenifikir/ayrinti/%s' % self.id", "buggy_source_code": "def get_absolute_url(self):\n    return '/yenifikir/ayrinti/%s/' % self.id", "edit_actions": ["update-node"]}
{"fixed_source_code": "@curry\ndef tag_parent(tag, docker_content):\n    v = re.sub('^(\\\\s*from\\\\s+)(([\\\\w.]+(\\\\:\\\\d+)?\\\\/)?\\\\w+/\\\\w+)(\\\\s*)$', '\\\\1\\\\2:' + tag + '\\\\5', docker_content, flags=re.MULTILINE + re.I)\n    return v", "buggy_source_code": "@curry\ndef tag_parent(tag, docker_content):\n    v = re.sub('^(\\\\s*from\\\\s+)(([\\\\w.-]+(\\\\:\\\\d+)?\\\\/)?[\\\\w.-]+/[\\\\w.-]+)(\\\\s*)$', '\\\\1\\\\2:' + tag + '\\\\5', docker_content, flags=re.MULTILINE + re.I)\n    return v", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_observer(self):\n    is_observer = False\n    if is_hidden_in_roster() and contact.sub == 'from':\n        is_observer = True\n    return is_observer", "buggy_source_code": "def is_observer(self):\n    is_observer = False\n    if self.is_hidden_from_roster() and self.sub == 'from':\n        is_observer = True\n    return is_observer", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree", "update-node"]}
{"fixed_source_code": "def session_list():\n    from billy.scrape.utils import url_xpath\n    sessions = url_xpath('http://legis.wisconsin.gov/', \"//select[@name='ctl00$PlaceHolderLeftNavBar$ctl01$ctl00$ddlPropSess']/option/text()\")\n    return [session.strip() for session in sessions]", "buggy_source_code": "def session_list():\n    from billy.scrape.utils import url_xpath\n    sessions = url_xpath('http://docs.legis.wisconsin.gov/search', \"//select[id='sessionNumber']/option/text()\")\n    return [session.strip(' -') for session in sessions]", "edit_actions": ["update-node", "update-node", "insert-node"]}
{"fixed_source_code": "def download(url):\n    print('Starting download of ' + url)\n    command = 'youtube-dl -o /youtube-dl/%(title)s.%(ext)s --restrict-filenames -f bestvideo+bestaudio --merge-output-format mp4 ' + url\n    print('Finished downloading ' + url)\n    subprocess.call(command)", "buggy_source_code": "def download(url):\n    print('Starting download of ' + url)\n    command = 'youtube-dl -o \"/youtube-dl/%(title)s.%(ext)s\" --restrict-filenames -f bestvideo+bestaudio --merge-output-format mp4 ' + url\n    print('Finished downloading ' + url)\n    subprocess.call(command)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def is_polar(self, tol_dipole_per_unit_area=0.001):\n    dip_per_unit_area = self.dipole / self.surface_area\n    return np.linalg.norm(dip_per_unit_area) < tol_dipole_per_unit_area", "buggy_source_code": "def is_polar(self, tol_dipole_per_unit_area=0.001):\n    dip_per_unit_area = self.dipole / self.surface_area\n    return np.linalg.norm(dip_per_unit_area) > tol_dipole_per_unit_area", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __rmul__(self, other):\n    return self.__mult__(other)", "buggy_source_code": "def __rmul__(self, other):\n    return self.__mul__(other)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def __init__(self):\n    super(SmartPointerTransformation, self).__init__()\n    self.rx = re.compile('(ns3::|::ns3::|)Ptr<([^>]+)>\\\\s*$')\n    print('{!r}'.format(self), file=sys.stderr)", "buggy_source_code": "def __init__(self):\n    super(SmartPointerTransformation, self).__init__()\n    self.rx = re.compile('(ns3::|::ns3::|)Ptr<([^>]+)>\\\\s*$')\n    print('{0!r}'.format(self), file=sys.stderr)", "edit_actions": ["update-node"]}
{"fixed_source_code": "def on_submit(self):\n    if self.voucher_type in ['Bank Voucher', 'Contra Voucher', 'Journal Entry']:\n        self.check_credit_days()\n    self.make_gl_entries()\n    self.check_credit_limit()\n    self.update_advance_paid()", "buggy_source_code": "def on_submit(self):\n    if self.voucher_type in ['Bank Voucher', 'Contra Voucher', 'Journal Entry']:\n        self.check_reference_date()\n    self.make_gl_entries()\n    self.check_credit_limit()\n    self.update_advance_paid()", "edit_actions": ["update-node"]}
