{"name": "JuliaLang/JuliaBox:21f33a57d08f66155e2d5ce1101ef02b4502f456:scripts/install/create_tables_cloudsql.py:index_exists", "before_code": "def IDENTIFIER_0 ( IDENTIFIER_1 , IDENTIFIER_2 ) : $NEWLINE $INDENT f = c . IDENTIFIER_3 ( STR_0 % ( IDENTIFIER_1 , IDENTIFIER_2 ) ) $NEWLINE return f is not 0 $NEWLINE $DEDENT ", "after_code": "def IDENTIFIER_0 ( IDENTIFIER_1 , IDENTIFIER_2 ) : $NEWLINE $INDENT f = c . IDENTIFIER_3 ( STR_0 % ( IDENTIFIER_1 , IDENTIFIER_2 ) ) $NEWLINE return f != 0 $NEWLINE $DEDENT ", "edit_actions": ["insert-node", "delete-node"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "index_exists", "IDENTIFIER_1": "tname", "IDENTIFIER_2": "iname", "IDENTIFIER_3": "execute"}, "floats": {}, "ints": {}, "strings": {"STR_0": "show index from `%s` where Key_name=\"%s\""}, "f_strings": {}}}
{"name": "uherting/RasPi:18a6d07cc2dc48e7551746f1e6ad11dd429a6fda:PIR plus camera/test.py:capture", "before_code": "def IDENTIFIER_0 ( ) : $NEWLINE $INDENT IDENTIFIER_1 = datetime . IDENTIFIER_3 ( ) . IDENTIFIER_2 ( ) $NEWLINE IDENTIFIER_4 . IDENTIFIER_0 ( STR_0 % IDENTIFIER_1 ) $NEWLINE $DEDENT ", "after_code": "def IDENTIFIER_0 ( ) : $NEWLINE $INDENT IDENTIFIER_1 = datetime . datetime . IDENTIFIER_3 ( ) . IDENTIFIER_2 ( ) $NEWLINE IDENTIFIER_4 . IDENTIFIER_0 ( STR_0 % IDENTIFIER_1 ) $NEWLINE $DEDENT ", "edit_actions": ["insert-node", "insert-node"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "capture", "IDENTIFIER_1": "time_stamp", "IDENTIFIER_2": "isoformat", "IDENTIFIER_3": "now", "IDENTIFIER_4": "camera"}, "floats": {}, "ints": {}, "strings": {"STR_0": "/home/pi/%s.jpg"}, "f_strings": {}}}
{"name": "clobrano/raffaello:b892fa01566fc127cb00ab5da69d747a64c95b37:raffaello.py:Script.help", "before_code": "def IDENTIFIER_0 ( self ) : $NEWLINE $INDENT self . IDENTIFIER_1 ( ) $NEWLINE IDENTIFIER_3 . IDENTIFIER_2 ( STR_0 ) $NEWLINE print ( IDENTIFIER_4 ( IDENTIFIER_6 . IDENTIFIER_5 ( ) ) ) $NEWLINE $DEDENT ", "after_code": "def IDENTIFIER_0 ( self ) : $NEWLINE $INDENT self . IDENTIFIER_7 ( ) $NEWLINE IDENTIFIER_3 . IDENTIFIER_2 ( STR_0 ) $NEWLINE print ( IDENTIFIER_4 ( IDENTIFIER_6 . IDENTIFIER_5 ( ) ) ) $NEWLINE $DEDENT ", "edit_actions": ["update-node"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "help", "IDENTIFIER_1": "__usage", "IDENTIFIER_2": "info", "IDENTIFIER_3": "log", "IDENTIFIER_4": "sorted", "IDENTIFIER_5": "keys", "IDENTIFIER_6": "color_filters", "IDENTIFIER_7": "usage"}, "floats": {}, "ints": {}, "strings": {"STR_0": "Available color list. NOTE that some colors could be unsupported on your terminal.\n"}, "f_strings": {}}}
{"name": "giampaolo/psutil:0e14bcbb90200c3336e4a52c496a56cd4cf45323:psutil/tests/test_linux.py:TestUtils.test_open_text", "before_code": "def IDENTIFIER_0 ( self ) : $NEWLINE $INDENT with IDENTIFIER_2 . IDENTIFIER_1 ( IDENTIFIER_3 ) as f : $NEWLINE $INDENT self . assertEqual ( f . IDENTIFIER_4 , STR_0 ) $NEWLINE $DEDENT $DEDENT ", "after_code": "def IDENTIFIER_0 ( self ) : $NEWLINE $INDENT with IDENTIFIER_6 . IDENTIFIER_5 . IDENTIFIER_1 ( IDENTIFIER_3 ) as f : $NEWLINE $INDENT self . assertEqual ( f . IDENTIFIER_4 , STR_0 ) $NEWLINE $DEDENT $DEDENT ", "edit_actions": ["insert-node", "insert-node", "update-node", "move-tree"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "test_open_text", "IDENTIFIER_1": "open_text", "IDENTIFIER_2": "_pslinux", "IDENTIFIER_3": "__file__", "IDENTIFIER_4": "mode", "IDENTIFIER_5": "_psplatform", "IDENTIFIER_6": "psutil"}, "floats": {}, "ints": {}, "strings": {"STR_0": "rt"}, "f_strings": {}}}
{"name": "Kattis/kattis-cli:25979f1d272a821f7263a5edc35008096cab4910:submit.py:MultiPartForm.add_field", "before_code": "def IDENTIFIER_0 ( self , name , value ) : $NEWLINE $INDENT if value == None : $NEWLINE $INDENT value = '' $NEWLINE $DEDENT value = str ( value ) $NEWLINE self . IDENTIFIER_1 . append ( ( name , value ) ) $NEWLINE return $NEWLINE $DEDENT ", "after_code": "def IDENTIFIER_0 ( self , name , value ) : $NEWLINE $INDENT if value is None : $NEWLINE $INDENT value = '' $NEWLINE $DEDENT value = str ( value ) $NEWLINE self . IDENTIFIER_1 . append ( ( name , value ) ) $NEWLINE return $NEWLINE $DEDENT ", "edit_actions": ["delete-node"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "add_field", "IDENTIFIER_1": "form_fields"}, "floats": {}, "ints": {}, "strings": {}, "f_strings": {}}}
{"name": "boarpig/kyny:1f989e56a7be6172e331834f6f49978bd740b905:kyny.py:serve_static", "before_code": "@ app . IDENTIFIER_2 ( STR_2 ) $NEWLINE def IDENTIFIER_0 ( name ) : $NEWLINE $INDENT return IDENTIFIER_1 ( STR_0 + name , root = STR_1 ) $NEWLINE $DEDENT ", "after_code": "@ app . IDENTIFIER_2 ( STR_2 ) $NEWLINE def IDENTIFIER_0 ( name ) : $NEWLINE $INDENT return IDENTIFIER_1 ( name , root = STR_0 ) $NEWLINE $DEDENT ", "edit_actions": ["move-tree", "update-node", "delete-node", "delete-node", "delete-node"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "serve_static", "IDENTIFIER_1": "static_file", "IDENTIFIER_2": "route"}, "floats": {}, "ints": {}, "strings": {"STR_0": "static/", "STR_1": "./", "STR_2": "/static/<name>"}, "f_strings": {}}}
{"name": "rmmbear/Android-QA-Helper:afef8fb4a1ac308666d6cd7f1422cd1b35e5a9de:helper/extract_data.py:extract_available_commands", "before_code": "def IDENTIFIER_0 ( IDENTIFIER_1 ) : $NEWLINE $INDENT IDENTIFIER_1 . IDENTIFIER_2 [ STR_0 ] = [ ] $NEWLINE IDENTIFIER_3 = IDENTIFIER_5 ( IDENTIFIER_1 , STR_1 ) . IDENTIFIER_4 ( ) $NEWLINE IDENTIFIER_1 . IDENTIFIER_2 [ STR_0 ] = IDENTIFIER_3 $NEWLINE $DEDENT ", "after_code": "def IDENTIFIER_0 ( IDENTIFIER_1 ) : $NEWLINE $INDENT IDENTIFIER_1 . IDENTIFIER_2 [ STR_0 ] = [ ] $NEWLINE IDENTIFIER_3 = IDENTIFIER_5 ( IDENTIFIER_1 , STR_1 ) . IDENTIFIER_4 ( ) $NEWLINE IDENTIFIER_1 . IDENTIFIER_2 [ STR_0 ] = [ x for x in IDENTIFIER_3 if x ] $NEWLINE $DEDENT ", "edit_actions": ["insert-node", "insert-node", "insert-node", "insert-node", "insert-node", "move-tree", "insert-node", "insert-node"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "extract_available_commands", "IDENTIFIER_1": "device", "IDENTIFIER_2": "info_dict", "IDENTIFIER_3": "commands", "IDENTIFIER_4": "splitlines", "IDENTIFIER_5": "run_extraction_command"}, "floats": {}, "ints": {}, "strings": {"STR_0": "shell_commands", "STR_1": "available_commands"}, "f_strings": {}}}
{"name": "revarbat/mufsim:072ca7c550f3e18c13d8041f09530d49329dd48e:mufsim.py:InstClearError.execute", "before_code": "def IDENTIFIER_0 ( self , IDENTIFIER_1 ) : $NEWLINE $INDENT x = IDENTIFIER_1 . IDENTIFIER_2 ( int , str ) $NEWLINE if IDENTIFIER_3 ( x ) is int : $NEWLINE $INDENT x = IDENTIFIER_4 [ x ] $NEWLINE $DEDENT IDENTIFIER_1 . IDENTIFIER_5 ( x ) $NEWLINE $DEDENT ", "after_code": "def IDENTIFIER_0 ( self , IDENTIFIER_1 ) : $NEWLINE $INDENT x = IDENTIFIER_1 . IDENTIFIER_2 ( int , str ) $NEWLINE if IDENTIFIER_3 ( x ) is int : $NEWLINE $INDENT x = IDENTIFIER_1 . IDENTIFIER_4 [ x ] $NEWLINE $DEDENT IDENTIFIER_1 . IDENTIFIER_5 ( x ) $NEWLINE $DEDENT ", "edit_actions": ["insert-node", "insert-node", "move-tree"], "replacement_map": {"identifiers": {"IDENTIFIER_0": "execute", "IDENTIFIER_1": "fr", "IDENTIFIER_2": "data_pop", "IDENTIFIER_3": "type", "IDENTIFIER_4": "fp_error_names", "IDENTIFIER_5": "clear_error"}, "floats": {}, "ints": {}, "strings": {}, "f_strings": {}}}
